!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=117)}([function(e,t,n){"use strict";e.exports=n(250)},function(e,t,n){e.exports=n(243)()},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t,n){"use strict";t.__esModule=!0;var o,r=n(102),i=(o=r)&&o.__esModule?o:{default:o};t.default=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),(0,i.default)(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}()},function(e,t,n){"use strict";t.__esModule=!0;var o=a(n(213)),r=a(n(209)),i=a(n(58));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,i.default)(t)));e.prototype=(0,r.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(o.default?(0,o.default)(e,t):e.__proto__=t)}},function(e,t,n){"use strict";t.__esModule=!0;var o,r=n(58),i=(o=r)&&o.__esModule?o:{default:o};t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,i.default)(t))&&"function"!=typeof t?e:t}},function(e,t,n){e.exports={default:n(240),__esModule:!0}},function(e,t){e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}},function(e,t,n){"use strict";e.exports=function(e,t,n,o,r,i,a,l){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,o,r,i,a,l],c=0;(u=new Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}},function(e,t,n){"use strict";t.__esModule=!0;var o,r=n(84),i=(o=r)&&o.__esModule?o:{default:o};t.default=i.default||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(249)},function(e,t){var n=e.exports={version:"2.5.5"};"number"==typeof __e&&(__e=n)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={easeOutFunction:"cubic-bezier(0.23, 1, 0.32, 1)",easeInOutFunction:"cubic-bezier(0.445, 0.05, 0.55, 0.95)",easeOut:function(e,t,n,o){if(o=o||this.easeOutFunction,t&&"[object Array]"===Object.prototype.toString.call(t)){for(var r="",i=0;i<t.length;i++)r&&(r+=","),r+=this.create(e,t[i],n,o);return r}return this.create(e,t,n,o)},create:function(e,t,n,o){return e=e||"450ms",t=t||"all",n=n||"0ms",t+" "+e+" "+(o=o||"linear")+" "+n}}},function(e,t,n){var o=n(61)("wks"),r=n(40),i=n(19).Symbol,a="function"==typeof i;(e.exports=function(e){return o[e]||(o[e]=a&&i[e]||(a?i:r)("Symbol."+e))}).store=o},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var o=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return o(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",o="",r=t.indexOf("#");-1!==r&&(o=t.substr(r),t=t.substr(0,r));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===o?"":o}},t.createPath=function(e){var t=e.pathname,n=e.search,o=e.hash,r=t||"/";return n&&"?"!==n&&(r+="?"===n.charAt(0)?n:"?"+n),o&&"#"!==o&&(r+="#"===o.charAt(0)?o:"#"+o),r}},function(e,t,n){var o=n(28),r=n(104),i=n(59),a=Object.defineProperty;t.f=n(21)?Object.defineProperty:function(e,t,n){if(o(e),t=i(t,!0),o(n),r)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var o=n(19),r=n(13),i=n(60),a=n(29),l=n(22),u=function(e,t,n){var s,c,f,d=e&u.F,p=e&u.G,h=e&u.S,m=e&u.P,y=e&u.B,v=e&u.W,b=p?r:r[t]||(r[t]={}),g=b.prototype,x=p?o:h?o[t]:(o[t]||{}).prototype;for(s in p&&(n=t),n)(c=!d&&x&&void 0!==x[s])&&l(b,s)||(f=c?x[s]:n[s],b[s]=p&&"function"!=typeof x[s]?n[s]:y&&c?i(f,o):v&&x[s]==f?function(e){var t=function(t,n,o){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,o)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):m&&"function"==typeof f?i(Function.call,f):f,m&&((b.virtual||(b.virtual={}))[s]=f,e&u.R&&g&&!g[s]&&a(g,s,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(1),i=(o=r)&&o.__esModule?o:{default:o};var a=i.default.oneOf(["left","middle","right"]),l=i.default.oneOf(["top","center","bottom"]);t.default={corners:i.default.oneOf(["bottom-left","bottom-right","top-left","top-right"]),horizontal:a,vertical:l,origin:i.default.shape({horizontal:a,vertical:l}),cornersAndCenter:i.default.oneOf(["bottom-center","bottom-left","bottom-right","top-center","top-left","top-right"]),stringOrNumber:i.default.oneOfType([i.default.string,i.default.number]),zDepth:i.default.oneOf([0,1,2,3,4,5])}},function(e,t,n){e.exports=!n(26)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";t.__esModule=!0;var o,r=n(66),i=(o=r)&&o.__esModule?o:{default:o};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(n)return[e,t];return e},e.exports=t.default},function(e,t,n){var o=n(97),r=n(63);e.exports=function(e){return o(r(e))}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var o=n(27);e.exports=function(e){if(!o(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){var o=n(17),r=n(32);e.exports=n(21)?function(e,t,n){return o.f(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var o=n(98),r=n(53);e.exports=Object.keys||function(e){return o(e,r)}},function(e,t){e.exports={}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var o=n(63);e.exports=function(e){return Object(o(e))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=n(141),i=(o=r)&&o.__esModule?o:{default:o};t.default=i.default},function(e,t,n){"use strict";t.__esModule=!0;var o=i(n(144)),r=i(n(23));i(n(76)),i(n(75));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return(0,o.default)(function(e,t){return!(0,r.default)(e,t)})(e)}},function(e,t,n){var o,r,i={},a=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),u=null,s=0,c=[],f=n(160);function d(e,t){for(var n=0;n<e.length;n++){var o=e[n],r=i[o.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](o.parts[a]);for(;a<o.parts.length;a++)r.parts.push(b(o.parts[a],t))}else{var l=[];for(a=0;a<o.parts.length;a++)l.push(b(o.parts[a],t));i[o.id]={id:o.id,refs:1,parts:l}}}}function p(e,t){for(var n=[],o={},r=0;r<e.length;r++){var i=e[r],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(l):n.push(o[a]={id:a,parts:[l]})}return n}function h(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=c[c.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,r)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function y(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),v(t,e.attrs),h(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,o,r,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=s++;n=u||(u=y(t)),o=k.bind(null,n,a,!1),r=k.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),h(e,t),t}(t),o=function(e,t,n){var o=n.css,r=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=f(o));r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,n,t),r=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),o=function(e,t){var n=t.css,o=t.media;o&&e.setAttribute("media",o);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){m(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var o=[],r=0;r<n.length;r++){var a=n[r];(l=i[a.id]).refs--,o.push(l)}e&&d(p(e,t),t);for(r=0;r<o.length;r++){var l;if(0===(l=o[r]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete i[l.id]}}}};var g,x=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function k(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=x(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(a=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"});return[n].concat(i).concat([r]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertColorToString=a,t.convertHexToRGB=l,t.decomposeColor=u,t.getContrastRatio=function(e,t){var n=s(e),o=s(t),r=(Math.max(n,o)+.05)/(Math.min(n,o)+.05);return Number(r.toFixed(2))},t.getLuminance=s,t.emphasize=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.15;return s(e)>.5?c(e,t):f(e,t)},t.fade=function(e,t){e=u(e),t=i(t,0,1),("rgb"===e.type||"hsl"===e.type)&&(e.type+="a");return e.values[3]=t,a(e)},t.darken=c,t.lighten=f;var o,r=n(2);(o=r)&&o.__esModule;function i(e,t,n){return e<t?t:e>n?n:e}function a(e){var t=e.type,n=e.values;if(t.indexOf("rgb")>-1)for(var o=0;o<3;o++)n[o]=parseInt(n[o]);var r=void 0;return r=t.indexOf("hsl")>-1?e.type+"("+n[0]+", "+n[1]+"%, "+n[2]+"%":e.type+"("+n[0]+", "+n[1]+", "+n[2],4===n.length?r+=", "+e.values[3]+")":r+=")",r}function l(e){if(4===e.length){for(var t="#",n=1;n<e.length;n++)t+=e.charAt(n)+e.charAt(n);e=t}return"rgb("+parseInt(e.substr(1,2),16)+", "+parseInt(e.substr(3,2),16)+", "+parseInt(e.substr(5,2),16)+")"}function u(e){if("#"===e.charAt(0))return u(l(e));var t=e.indexOf("("),n=e.substring(0,t),o=e.substring(t+1,e.length-1).split(",");return{type:n,values:o=o.map(function(e){return parseFloat(e)})}}function s(e){if((e=u(e)).type.indexOf("rgb")>-1){var t=e.values.map(function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)});return Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}if(e.type.indexOf("hsl")>-1)return e.values[2]/100}function c(e,t){if(e=u(e),t=i(t,0,1),e.type.indexOf("hsl")>-1)e.values[2]*=1-t;else if(e.type.indexOf("rgb")>-1)for(var n=0;n<3;n++)e.values[n]*=1-t;return a(e)}function f(e,t){if(e=u(e),t=i(t,0,1),e.type.indexOf("hsl")>-1)e.values[2]+=(100-e.values[2])*t;else if(e.type.indexOf("rgb")>-1)for(var n=0;n<3;n++)e.values[n]+=(255-e.values[n])*t;return a(e)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t){var n=0,o=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=n(132),i=(o=r)&&o.__esModule?o:{default:o};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={set:function(e,t,n){e[t]=n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=b(n(11)),r=b(n(10)),i=b(n(7)),a=b(n(3)),l=b(n(4)),u=b(n(6)),s=b(n(5)),c=b(n(8)),f=n(0),d=b(f),p=b(n(1)),h=b(n(45)),m=b(n(81)),y=b(n(139)),v=b(n(134));function b(e){return e&&e.__esModule?e:{default:e}}var g=!1,x=!1,k=!1;var C=function(e){function t(){var e,n,o,r;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=o=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),o.state={isKeyboardFocused:!1},o.handleKeyDown=function(e){o.props.disabled||o.props.disableKeyboardFocus||("enter"===(0,m.default)(e)&&o.state.isKeyboardFocused&&o.handleClick(e),"esc"===(0,m.default)(e)&&o.state.isKeyboardFocused&&o.removeKeyboardFocus(e)),o.props.onKeyDown(e)},o.handleKeyUp=function(e){o.props.disabled||o.props.disableKeyboardFocus||"space"===(0,m.default)(e)&&o.state.isKeyboardFocused&&o.handleClick(e),o.props.onKeyUp(e)},o.handleBlur=function(e){o.cancelFocusTimeout(),o.removeKeyboardFocus(e),o.props.onBlur(e)},o.handleFocus=function(e){e&&e.persist(),o.props.disabled||o.props.disableKeyboardFocus||(o.focusTimeout=setTimeout(function(){k&&(o.setKeyboardFocus(e),k=!1)},150),o.props.onFocus(e))},o.handleClick=function(e){o.cancelFocusTimeout(),o.props.disabled||(k=!1,o.removeKeyboardFocus(e),o.props.onClick(e))},r=n,(0,u.default)(o,r)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentWillMount",value:function(){var e=this.props,t=e.disabled,n=e.disableKeyboardFocus,o=e.keyboardFocused;t||!o||n||this.setState({isKeyboardFocused:!0})}},{key:"componentDidMount",value:function(){!function(){if(!g){var e=document.createElement("style");e.innerHTML="\n      button::-moz-focus-inner,\n      input::-moz-focus-inner {\n        border: 0;\n        padding: 0;\n      }\n    ",document.body.appendChild(e),g=!0}}(),x||(h.default.on(window,"keydown",function(e){k="tab"===(0,m.default)(e)}),x=!0),this.state.isKeyboardFocused&&(this.button.focus(),this.props.onKeyboardFocus(null,!0))}},{key:"componentWillReceiveProps",value:function(e){(e.disabled||e.disableKeyboardFocus)&&this.state.isKeyboardFocused&&(this.setState({isKeyboardFocused:!1}),e.onKeyboardFocus&&e.onKeyboardFocus(null,!1))}},{key:"componentWillUnmount",value:function(){this.focusTimeout&&clearTimeout(this.focusTimeout)}},{key:"isKeyboardFocused",value:function(){return this.state.isKeyboardFocused}},{key:"removeKeyboardFocus",value:function(e){this.state.isKeyboardFocused&&(this.setState({isKeyboardFocused:!1}),this.props.onKeyboardFocus(e,!1))}},{key:"setKeyboardFocus",value:function(e){this.state.isKeyboardFocused||(this.setState({isKeyboardFocused:!0}),this.props.onKeyboardFocus(e,!0))}},{key:"cancelFocusTimeout",value:function(){this.focusTimeout&&(clearTimeout(this.focusTimeout),this.focusTimeout=null)}},{key:"createButtonChildren",value:function(){var e=this.props,t=e.centerRipple,n=e.children,o=e.disabled,r=e.disableFocusRipple,i=e.disableKeyboardFocus,a=e.disableTouchRipple,l=e.focusRippleColor,u=e.focusRippleOpacity,s=e.touchRippleColor,c=e.touchRippleOpacity,f=this.state.isKeyboardFocused,p=!f||o||r||i?void 0:d.default.createElement(y.default,{color:l,opacity:u,show:f,style:{overflow:"hidden"},key:"focusRipple"}),h=o||a?void 0:d.default.createElement(v.default,{centerRipple:t,color:s,opacity:c,key:"touchRipple"},n);return[p,h,h?void 0:n]}},{key:"render",value:function(){var e=this,t=this.props,n=(t.centerRipple,t.children),i=t.containerElement,a=t.disabled,l=(t.disableFocusRipple,t.disableKeyboardFocus),u=(t.disableTouchRipple,t.focusRippleColor,t.focusRippleOpacity,t.href),s=(t.keyboardFocused,t.touchRippleColor,t.touchRippleOpacity,t.onBlur,t.onClick,t.onFocus,t.onKeyUp,t.onKeyDown,t.onKeyboardFocus,t.style),f=t.tabIndex,p=t.type,h=(0,r.default)(t,["centerRipple","children","containerElement","disabled","disableFocusRipple","disableKeyboardFocus","disableTouchRipple","focusRippleColor","focusRippleOpacity","href","keyboardFocused","touchRippleColor","touchRippleOpacity","onBlur","onClick","onFocus","onKeyUp","onKeyDown","onKeyboardFocus","style","tabIndex","type"]),m=this.context.muiTheme,y=m.prepareStyles,v=m.enhancedButton,b=(0,c.default)({border:10,boxSizing:"border-box",display:"inline-block",fontFamily:this.context.muiTheme.baseTheme.fontFamily,WebkitTapHighlightColor:v.tapHighlightColor,cursor:a?"default":"pointer",textDecoration:"none",margin:0,padding:0,outline:"none",fontSize:"inherit",fontWeight:"inherit",position:"relative",verticalAlign:u?"middle":null},s);if(b.backgroundColor||b.background||(b.background="none"),a&&u)return d.default.createElement("span",(0,o.default)({},h,{style:b}),n);var g=(0,o.default)({},h,{style:y(b),ref:function(t){return e.button=t},disabled:a,onBlur:this.handleBlur,onFocus:this.handleFocus,onKeyUp:this.handleKeyUp,onKeyDown:this.handleKeyDown,onClick:this.handleClick,tabIndex:a||l?-1:f});u&&(g.href=u);var x=this.createButtonChildren();return d.default.isValidElement(i)?d.default.cloneElement(i,g,x):(u||"button"!==i||(g.type=p),d.default.createElement(u?"a":i,g,x))}}]),t}(f.Component);C.defaultProps={containerElement:"button",onBlur:function(){},onClick:function(){},onFocus:function(){},onKeyDown:function(){},onKeyUp:function(){},onKeyboardFocus:function(){},tabIndex:0,type:"button"},C.contextTypes={muiTheme:p.default.object.isRequired},C.propTypes={},t.default=C},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=n(148),i=(o=r)&&o.__esModule?o:{default:o};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={once:function(e,t,n){for(var o=t?t.split(" "):[],r=function e(t){return t.target.removeEventListener(t.type,e),n(t)},i=o.length-1;i>=0;i--)this.on(e,o[i],r)},on:function(e,t,n){e.addEventListener?e.addEventListener(t,n):e.attachEvent("on"+t,function(){n.call(e)})},off:function(e,t,n){e.removeEventListener?e.removeEventListener(t,n):e.detachEvent("on"+t,n)},isKeyboard:function(e){return-1!==["keydown","keypress","keyup"].indexOf(e.type)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"string"==typeof e&&o.test(e)};var o=/-webkit-|-moz-|-ms-/;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.red50="#ffebee",t.red100="#ffcdd2",t.red200="#ef9a9a",t.red300="#e57373",t.red400="#ef5350",t.red500="#f44336",t.red600="#e53935",t.red700="#d32f2f",t.red800="#c62828",t.red900="#b71c1c",t.redA100="#ff8a80",t.redA200="#ff5252",t.redA400="#ff1744",t.redA700="#d50000",t.pink50="#fce4ec",t.pink100="#f8bbd0",t.pink200="#f48fb1",t.pink300="#f06292",t.pink400="#ec407a",t.pink500="#e91e63",t.pink600="#d81b60",t.pink700="#c2185b",t.pink800="#ad1457",t.pink900="#880e4f",t.pinkA100="#ff80ab",t.pinkA200="#ff4081",t.pinkA400="#f50057",t.pinkA700="#c51162",t.purple50="#f3e5f5",t.purple100="#e1bee7",t.purple200="#ce93d8",t.purple300="#ba68c8",t.purple400="#ab47bc",t.purple500="#9c27b0",t.purple600="#8e24aa",t.purple700="#7b1fa2",t.purple800="#6a1b9a",t.purple900="#4a148c",t.purpleA100="#ea80fc",t.purpleA200="#e040fb",t.purpleA400="#d500f9",t.purpleA700="#aa00ff",t.deepPurple50="#ede7f6",t.deepPurple100="#d1c4e9",t.deepPurple200="#b39ddb",t.deepPurple300="#9575cd",t.deepPurple400="#7e57c2",t.deepPurple500="#673ab7",t.deepPurple600="#5e35b1",t.deepPurple700="#512da8",t.deepPurple800="#4527a0",t.deepPurple900="#311b92",t.deepPurpleA100="#b388ff",t.deepPurpleA200="#7c4dff",t.deepPurpleA400="#651fff",t.deepPurpleA700="#6200ea",t.indigo50="#e8eaf6",t.indigo100="#c5cae9",t.indigo200="#9fa8da",t.indigo300="#7986cb",t.indigo400="#5c6bc0",t.indigo500="#3f51b5",t.indigo600="#3949ab",t.indigo700="#303f9f",t.indigo800="#283593",t.indigo900="#1a237e",t.indigoA100="#8c9eff",t.indigoA200="#536dfe",t.indigoA400="#3d5afe",t.indigoA700="#304ffe",t.blue50="#e3f2fd",t.blue100="#bbdefb",t.blue200="#90caf9",t.blue300="#64b5f6",t.blue400="#42a5f5",t.blue500="#2196f3",t.blue600="#1e88e5",t.blue700="#1976d2",t.blue800="#1565c0",t.blue900="#0d47a1",t.blueA100="#82b1ff",t.blueA200="#448aff",t.blueA400="#2979ff",t.blueA700="#2962ff",t.lightBlue50="#e1f5fe",t.lightBlue100="#b3e5fc",t.lightBlue200="#81d4fa",t.lightBlue300="#4fc3f7",t.lightBlue400="#29b6f6",t.lightBlue500="#03a9f4",t.lightBlue600="#039be5",t.lightBlue700="#0288d1",t.lightBlue800="#0277bd",t.lightBlue900="#01579b",t.lightBlueA100="#80d8ff",t.lightBlueA200="#40c4ff",t.lightBlueA400="#00b0ff",t.lightBlueA700="#0091ea",t.cyan50="#e0f7fa",t.cyan100="#b2ebf2",t.cyan200="#80deea",t.cyan300="#4dd0e1",t.cyan400="#26c6da",t.cyan500="#00bcd4",t.cyan600="#00acc1",t.cyan700="#0097a7",t.cyan800="#00838f",t.cyan900="#006064",t.cyanA100="#84ffff",t.cyanA200="#18ffff",t.cyanA400="#00e5ff",t.cyanA700="#00b8d4",t.teal50="#e0f2f1",t.teal100="#b2dfdb",t.teal200="#80cbc4",t.teal300="#4db6ac",t.teal400="#26a69a",t.teal500="#009688",t.teal600="#00897b",t.teal700="#00796b",t.teal800="#00695c",t.teal900="#004d40",t.tealA100="#a7ffeb",t.tealA200="#64ffda",t.tealA400="#1de9b6",t.tealA700="#00bfa5",t.green50="#e8f5e9",t.green100="#c8e6c9",t.green200="#a5d6a7",t.green300="#81c784",t.green400="#66bb6a",t.green500="#4caf50",t.green600="#43a047",t.green700="#388e3c",t.green800="#2e7d32",t.green900="#1b5e20",t.greenA100="#b9f6ca",t.greenA200="#69f0ae",t.greenA400="#00e676",t.greenA700="#00c853",t.lightGreen50="#f1f8e9",t.lightGreen100="#dcedc8",t.lightGreen200="#c5e1a5",t.lightGreen300="#aed581",t.lightGreen400="#9ccc65",t.lightGreen500="#8bc34a",t.lightGreen600="#7cb342",t.lightGreen700="#689f38",t.lightGreen800="#558b2f",t.lightGreen900="#33691e",t.lightGreenA100="#ccff90",t.lightGreenA200="#b2ff59",t.lightGreenA400="#76ff03",t.lightGreenA700="#64dd17",t.lime50="#f9fbe7",t.lime100="#f0f4c3",t.lime200="#e6ee9c",t.lime300="#dce775",t.lime400="#d4e157",t.lime500="#cddc39",t.lime600="#c0ca33",t.lime700="#afb42b",t.lime800="#9e9d24",t.lime900="#827717",t.limeA100="#f4ff81",t.limeA200="#eeff41",t.limeA400="#c6ff00",t.limeA700="#aeea00",t.yellow50="#fffde7",t.yellow100="#fff9c4",t.yellow200="#fff59d",t.yellow300="#fff176",t.yellow400="#ffee58",t.yellow500="#ffeb3b",t.yellow600="#fdd835",t.yellow700="#fbc02d",t.yellow800="#f9a825",t.yellow900="#f57f17",t.yellowA100="#ffff8d",t.yellowA200="#ffff00",t.yellowA400="#ffea00",t.yellowA700="#ffd600",t.amber50="#fff8e1",t.amber100="#ffecb3",t.amber200="#ffe082",t.amber300="#ffd54f",t.amber400="#ffca28",t.amber500="#ffc107",t.amber600="#ffb300",t.amber700="#ffa000",t.amber800="#ff8f00",t.amber900="#ff6f00",t.amberA100="#ffe57f",t.amberA200="#ffd740",t.amberA400="#ffc400",t.amberA700="#ffab00",t.orange50="#fff3e0",t.orange100="#ffe0b2",t.orange200="#ffcc80",t.orange300="#ffb74d",t.orange400="#ffa726",t.orange500="#ff9800",t.orange600="#fb8c00",t.orange700="#f57c00",t.orange800="#ef6c00",t.orange900="#e65100",t.orangeA100="#ffd180",t.orangeA200="#ffab40",t.orangeA400="#ff9100",t.orangeA700="#ff6d00",t.deepOrange50="#fbe9e7",t.deepOrange100="#ffccbc",t.deepOrange200="#ffab91",t.deepOrange300="#ff8a65",t.deepOrange400="#ff7043",t.deepOrange500="#ff5722",t.deepOrange600="#f4511e",t.deepOrange700="#e64a19",t.deepOrange800="#d84315",t.deepOrange900="#bf360c",t.deepOrangeA100="#ff9e80",t.deepOrangeA200="#ff6e40",t.deepOrangeA400="#ff3d00",t.deepOrangeA700="#dd2c00",t.brown50="#efebe9",t.brown100="#d7ccc8",t.brown200="#bcaaa4",t.brown300="#a1887f",t.brown400="#8d6e63",t.brown500="#795548",t.brown600="#6d4c41",t.brown700="#5d4037",t.brown800="#4e342e",t.brown900="#3e2723",t.blueGrey50="#eceff1",t.blueGrey100="#cfd8dc",t.blueGrey200="#b0bec5",t.blueGrey300="#90a4ae",t.blueGrey400="#78909c",t.blueGrey500="#607d8b",t.blueGrey600="#546e7a",t.blueGrey700="#455a64",t.blueGrey800="#37474f",t.blueGrey900="#263238",t.grey50="#fafafa",t.grey100="#f5f5f5",t.grey200="#eeeeee",t.grey300="#e0e0e0",t.grey400="#bdbdbd",t.grey500="#9e9e9e",t.grey600="#757575",t.grey700="#616161",t.grey800="#424242",t.grey900="#212121",t.black="#000000",t.white="#ffffff",t.transparent="rgba(0, 0, 0, 0)",t.fullBlack="rgba(0, 0, 0, 1)",t.darkBlack="rgba(0, 0, 0, 0.87)",t.lightBlack="rgba(0, 0, 0, 0.54)",t.minBlack="rgba(0, 0, 0, 0.26)",t.faintBlack="rgba(0, 0, 0, 0.12)",t.fullWhite="rgba(255, 255, 255, 1)",t.darkWhite="rgba(255, 255, 255, 0.87)",t.lightWhite="rgba(255, 255, 255, 0.54)"},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var o=n(19),r=n(13),i=n(56),a=n(51),l=n(17).f;e.exports=function(e){var t=r.Symbol||(r.Symbol=i?{}:o.Symbol||{});"_"==e.charAt(0)||e in t||l(t,e,{value:a.f(e)})}},function(e,t,n){t.f=n(15)},function(e,t,n){var o=n(17).f,r=n(22),i=n(15)("toStringTag");e.exports=function(e,t,n){e&&!r(e=n?e:e.prototype,i)&&o(e,i,{configurable:!0,value:t})}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var o=n(28),r=n(231),i=n(53),a=n(62)("IE_PROTO"),l=function(){},u=function(){var e,t=n(103)("iframe"),o=i.length;for(t.style.display="none",n(228).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;o--;)delete u.prototype[i[o]];return u()};e.exports=Object.create||function(e,t){var n;return null!==e?(l.prototype=o(e),n=new l,l.prototype=null,n[a]=e):n=u(),void 0===t?n:r(n,t)}},function(e,t){e.exports=!0},function(e,t){var n=Math.ceil,o=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},function(e,t,n){"use strict";t.__esModule=!0;var o=a(n(235)),r=a(n(223)),i="function"==typeof r.default&&"symbol"==typeof o.default?function(e){return typeof e}:function(e){return e&&"function"==typeof r.default&&e.constructor===r.default&&e!==r.default.prototype?"symbol":typeof e};function a(e){return e&&e.__esModule?e:{default:e}}t.default="function"==typeof r.default&&"symbol"===i(o.default)?function(e){return void 0===e?"undefined":i(e)}:function(e){return e&&"function"==typeof r.default&&e.constructor===r.default&&e!==r.default.prototype?"symbol":void 0===e?"undefined":i(e)}},function(e,t,n){var o=n(27);e.exports=function(e,t){if(!o(e))return e;var n,r;if(t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;if("function"==typeof(n=e.valueOf)&&!o(r=n.call(e)))return r;if(!t&&"function"==typeof(n=e.toString)&&!o(r=n.call(e)))return r;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var o=n(238);e.exports=function(e,t,n){if(o(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,o){return e.call(t,n,o)};case 3:return function(n,o,r){return e.call(t,n,o,r)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var o=n(19),r=o["__core-js_shared__"]||(o["__core-js_shared__"]={});e.exports=function(e){return r[e]||(r[e]={})}},function(e,t,n){var o=n(61)("keys"),r=n(40);e.exports=function(e){return o[e]||(o[e]=r(e))}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){"use strict";t.__esModule=!0;var o,r=n(2),i=(o=r)&&o.__esModule?o:{default:o};t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,i.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,o,r){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof o?o(a,r):((0,i.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),r(!0)):r(!1!==a)}else r(!0)},appendListener:function(e){var n=!0,o=function(){n&&e.apply(void 0,arguments)};return t.push(o),function(){n=!1,t=t.filter(function(e){return e!==o})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),o=0;o<e;o++)n[o]=arguments[o];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=l(n(72)),i=l(n(71)),a=n(16);function l(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,i){var l=void 0;"string"==typeof e?(l=(0,a.parsePath)(e)).state=t:(void 0===(l=o({},e)).pathname&&(l.pathname=""),l.search?"?"!==l.search.charAt(0)&&(l.search="?"+l.search):l.search="",l.hash?"#"!==l.hash.charAt(0)&&(l.hash="#"+l.hash):l.hash="",void 0!==t&&void 0===l.state&&(l.state=t));try{l.pathname=decodeURI(l.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+l.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(l.key=n),i?l.pathname?"/"!==l.pathname.charAt(0)&&(l.pathname=(0,r.default)(l.pathname,i.pathname)):l.pathname=i.pathname:l.pathname||(l.pathname="/"),l},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,i.default)(e.state,t.state)}},function(e,t,n){"use strict";var o=Object.prototype.hasOwnProperty;function r(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(r(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!o.call(t,n[a])||!r(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";function o(e){return function(){return e}}var r=function(){};r.thatReturns=o,r.thatReturnsFalse=o(!1),r.thatReturnsTrue=o(!0),r.thatReturnsNull=o(null),r.thatReturnsThis=function(){return this},r.thatReturnsArgument=function(e){return e},e.exports=r},function(e,t,n){"use strict";var o=function(e){};e.exports=function(e,t,n,r,i,a,l,u){if(o(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,i,a,l,u],f=0;(s=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=a(n(0)),r=a(n(35)),i=a(n(34));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){return o.default.createElement(i.default,e,o.default.createElement("path",{d:"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}))};(l=(0,r.default)(l)).displayName="NavigationMoreVert",l.muiName="SvgIcon",t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.MenuItem=t.IconMenu=void 0;var o=i(n(159)),r=i(n(77));function i(e){return e&&e.__esModule?e:{default:e}}t.IconMenu=o.default,t.MenuItem=r.default,t.default=o.default},function(e,t,n){"use strict";n.r(t);var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,o){return e(t,n[o])});var r=void 0===t?"undefined":o(t);if(r!==(void 0===n?"undefined":o(n)))return!1;if("object"===r){var i=t.valueOf(),a=n.valueOf();if(i!==t||a!==n)return e(i,a);var l=Object.keys(t),u=Object.keys(n);return l.length===u.length&&l.every(function(o){return e(t[o],n[o])})}return!1}},function(e,t,n){"use strict";function o(e){return"/"===e.charAt(0)}function r(e,t){for(var n=t,o=n+1,r=e.length;o<r;n+=1,o+=1)e[n]=e[o];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],i=t&&t.split("/")||[],a=e&&o(e),l=t&&o(t),u=a||l;if(e&&o(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var s=void 0;if(i.length){var c=i[i.length-1];s="."===c||".."===c||""===c}else s=!1;for(var f=0,d=i.length;d>=0;d--){var p=i[d];"."===p?r(i,d):".."===p?(r(i,d),f++):f&&(r(i,d),f--)}if(!u)for(;f--;f)i.unshift("..");!u||""===i[0]||i[0]&&o(i[0])||i.unshift("");var h=i.join("/");return s&&"/"!==h.substr(-1)&&(h+="/"),h}},function(e,t,n){var o=n(124);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(36)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){"use strict";t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=u(n(137)),i=u(n(0)),a=u(n(1)),l=(u(n(2)),n(136));function u(e){return e&&e.__esModule?e:{default:e}}a.default.any,a.default.func,a.default.node;var s=function(e){function t(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return i.performAppear=function(e,t){i.currentlyTransitioningKeys[e]=!0,t.componentWillAppear?t.componentWillAppear(i._handleDoneAppearing.bind(i,e,t)):i._handleDoneAppearing(e,t)},i._handleDoneAppearing=function(e,t){t.componentDidAppear&&t.componentDidAppear(),delete i.currentlyTransitioningKeys[e];var n=(0,l.getChildMapping)(i.props.children);n&&n.hasOwnProperty(e)||i.performLeave(e,t)},i.performEnter=function(e,t){i.currentlyTransitioningKeys[e]=!0,t.componentWillEnter?t.componentWillEnter(i._handleDoneEntering.bind(i,e,t)):i._handleDoneEntering(e,t)},i._handleDoneEntering=function(e,t){t.componentDidEnter&&t.componentDidEnter(),delete i.currentlyTransitioningKeys[e];var n=(0,l.getChildMapping)(i.props.children);n&&n.hasOwnProperty(e)||i.performLeave(e,t)},i.performLeave=function(e,t){i.currentlyTransitioningKeys[e]=!0,t.componentWillLeave?t.componentWillLeave(i._handleDoneLeaving.bind(i,e,t)):i._handleDoneLeaving(e,t)},i._handleDoneLeaving=function(e,t){t.componentDidLeave&&t.componentDidLeave(),delete i.currentlyTransitioningKeys[e];var n=(0,l.getChildMapping)(i.props.children);n&&n.hasOwnProperty(e)?i.keysToEnter.push(e):i.setState(function(t){var n=o({},t.children);return delete n[e],{children:n}})},i.childRefs=Object.create(null),i.state={children:(0,l.getChildMapping)(n.children)},i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){this.currentlyTransitioningKeys={},this.keysToEnter=[],this.keysToLeave=[]},t.prototype.componentDidMount=function(){var e=this.state.children;for(var t in e)e[t]&&this.performAppear(t,this.childRefs[t])},t.prototype.componentWillReceiveProps=function(e){var t=(0,l.getChildMapping)(e.children),n=this.state.children;for(var o in this.setState({children:(0,l.mergeChildMappings)(n,t)}),t){var r=n&&n.hasOwnProperty(o);!t[o]||r||this.currentlyTransitioningKeys[o]||this.keysToEnter.push(o)}for(var i in n){var a=t&&t.hasOwnProperty(i);!n[i]||a||this.currentlyTransitioningKeys[i]||this.keysToLeave.push(i)}},t.prototype.componentDidUpdate=function(){var e=this,t=this.keysToEnter;this.keysToEnter=[],t.forEach(function(t){return e.performEnter(t,e.childRefs[t])});var n=this.keysToLeave;this.keysToLeave=[],n.forEach(function(t){return e.performLeave(t,e.childRefs[t])})},t.prototype.render=function(){var e=this,t=[],n=function(n){var o=e.state.children[n];if(o){var a="string"!=typeof o.ref,l=e.props.childFactory(o),u=function(t){e.childRefs[n]=t};l===o&&a&&(u=(0,r.default)(o.ref,u)),t.push(i.default.cloneElement(l,{key:n,ref:u}))}};for(var a in this.state.children)n(a);var l=o({},this.props);return delete l.transitionLeave,delete l.transitionName,delete l.transitionAppear,delete l.transitionEnter,delete l.childFactory,delete l.transitionLeaveTimeout,delete l.transitionEnterTimeout,delete l.transitionAppearTimeout,delete l.component,i.default.createElement(this.props.component,l,t)},t}(i.default.Component);s.displayName="TransitionGroup",s.propTypes={},s.defaultProps={component:"span",childFactory:function(e){return e}},t.default=s,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var o,r=n(142),i=(o=r)&&o.__esModule?o:{default:o};t.default=function(e,t){return t+"("+(0,i.default)(e)+")"}},function(e,t,n){"use strict";t.__esModule=!0;var o,r=n(143),i=(o=r)&&o.__esModule?o:{default:o};t.default=function(e){return(0,i.default)("displayName",e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=x(n(11)),r=x(n(10)),i=x(n(7)),a=x(n(3)),l=x(n(4)),u=x(n(6)),s=x(n(5)),c=x(n(8)),f=n(0),d=x(f),p=x(n(1)),h=x(n(12)),m=x(n(23)),y=x(n(79)),v=x(n(145)),b=x(n(140)),g=x(n(83));x(n(20));function x(e){return e&&e.__esModule?e:{default:e}}var k={position:"relative"};var C=function(e){function t(){var e,n,o,r;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=o=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),o.state={open:!1},o.cloneMenuItem=function(e){return d.default.cloneElement(e,{onClick:function(t){e.props.menuItems||o.handleRequestClose(),e.props.onClick&&e.props.onClick(t)}})},o.handleClick=function(e){e.preventDefault(),o.setState({open:!0,anchorEl:h.default.findDOMNode(o)}),o.props.onClick&&o.props.onClick(e)},o.handleRequestClose=function(){o.setState({open:!1,anchorEl:null})},r=n,(0,u.default)(o,r)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.applyFocusState()}},{key:"componentWillReceiveProps",value:function(e){this.state.open&&"none"===e.focusState&&this.handleRequestClose()}},{key:"shouldComponentUpdate",value:function(e,t,n){return!(0,m.default)(this.props,e)||!(0,m.default)(this.state,t)||!(0,m.default)(this.context,n)}},{key:"componentDidUpdate",value:function(){this.applyFocusState()}},{key:"componentWillUnmount",value:function(){this.state.open&&this.setState({open:!1})}},{key:"applyFocusState",value:function(){this.refs.listItem.applyFocusState(this.props.focusState)}},{key:"render",value:function(){var e,t,n,i,a,l,u=this.props,s=u.checked,f=u.children,p=u.desktop,h=u.disabled,m=(u.focusState,u.innerDivStyle),x=u.insetChildren,C=u.leftIcon,w=u.menuItems,_=u.rightIcon,S=u.secondaryText,T=u.style,E=u.animation,O=u.anchorOrigin,M=u.targetOrigin,P=(u.value,(0,r.default)(u,["checked","children","desktop","disabled","focusState","innerDivStyle","insetChildren","leftIcon","menuItems","rightIcon","secondaryText","style","animation","anchorOrigin","targetOrigin","value"])),I=this.context.muiTheme.prepareStyles,R=(e=this.props,t=this.context,n=t.muiTheme.baseTheme.palette.disabledColor,i=t.muiTheme.baseTheme.palette.textColor,a=e.desktop?64:72,l=e.desktop?24:16,{root:{color:e.disabled?n:i,cursor:e.disabled?"default":"pointer",minHeight:e.desktop?"32px":"48px",lineHeight:e.desktop?"32px":"48px",fontSize:e.desktop?15:16,whiteSpace:"nowrap"},innerDivStyle:{paddingLeft:e.leftIcon||e.insetChildren||e.checked?a:l,paddingRight:e.rightIcon?a:l,paddingBottom:0,paddingTop:0},secondaryText:{float:"right"},leftIconDesktop:{margin:0,left:24,top:4},rightIconDesktop:{margin:0,right:24,top:4,fill:t.muiTheme.menuItem.rightIconDesktopFill}}),F=(0,c.default)(R.root,T),j=(0,c.default)(R.innerDivStyle,m),A=C||(s?d.default.createElement(v.default,null):null);if(A){var D=p?(0,c.default)(R.leftIconDesktop,A.props.style):A.props.style;A=d.default.cloneElement(A,{style:D})}var L=void 0;if(_){var N=p?(0,c.default)(R.rightIconDesktop,_.props.style):_.props.style;L=d.default.cloneElement(_,{style:N})}var W=void 0;if(S){var z=d.default.isValidElement(S),B=z?(0,c.default)(R.secondaryText,S.props.style):null;W=z?d.default.cloneElement(S,{style:B}):d.default.createElement("div",{style:I(R.secondaryText)},S)}var U=void 0;return w&&(U=d.default.createElement(y.default,{animation:E,anchorOrigin:O,anchorEl:this.state.anchorEl,open:this.state.open,targetOrigin:M,useLayerForClickAway:!1,onRequestClose:this.handleRequestClose},d.default.createElement(g.default,{desktop:p,disabled:h,style:k},d.default.Children.map(w,this.cloneMenuItem))),P.onClick=this.handleClick),d.default.createElement(b.default,(0,o.default)({},P,{disabled:h,hoverColor:this.context.muiTheme.menuItem.hoverColor,innerDivStyle:j,insetChildren:x,leftIcon:A,ref:"listItem",rightIcon:L,role:"menuitem",style:F}),f,W,U)}}]),t}(f.Component);C.muiName="MenuItem",C.defaultProps={anchorOrigin:{horizontal:"right",vertical:"top"},checked:!1,desktop:!1,disabled:!1,focusState:"none",insetChildren:!1,targetOrigin:{horizontal:"left",vertical:"top"}},C.contextTypes={muiTheme:p.default.object.isRequired},C.propTypes={},t.default=C},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={isDescendant:function(e,t){for(var n=t.parentNode;null!==n;){if(n===e)return!0;n=n.parentNode}return!1},offset:function(e){var t=e.getBoundingClientRect();return{top:t.top+document.body.scrollTop,left:t.left+document.body.scrollLeft}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=x(n(11)),r=x(n(10)),i=x(n(7)),a=x(n(3)),l=x(n(4)),u=x(n(6)),s=x(n(5)),c=x(n(8)),f=n(0),d=x(f),p=x(n(1)),h=x(n(12)),m=x(n(151)),y=x(n(149)),v=(x(n(20)),x(n(44))),b=x(n(147)),g=x(n(146));function x(e){return e&&e.__esModule?e:{default:e}}var k={root:{display:"none"}},C=function(e){function t(e,n){(0,a.default)(this,t);var l=(0,u.default)(this,(t.__proto__||(0,i.default)(t)).call(this,e,n));return l.timeout=null,l.renderLayer=function(){var e=l.props,t=e.animated,n=e.animation,i=(e.anchorEl,e.anchorOrigin,e.autoCloseWhenOffScreen,e.canAutoPosition,e.children),a=(e.onRequestClose,e.style),u=e.targetOrigin,s=(e.useLayerForClickAway,e.scrollableContainer,(0,r.default)(e,["animated","animation","anchorEl","anchorOrigin","autoCloseWhenOffScreen","canAutoPosition","children","onRequestClose","style","targetOrigin","useLayerForClickAway","scrollableContainer"])),f=a;if(!t)return f={position:"fixed",zIndex:l.context.muiTheme.zIndex.popover},l.state.open?d.default.createElement(v.default,(0,o.default)({style:(0,c.default)(f,a)},s),i):null;var p=n||g.default;return d.default.createElement(p,(0,o.default)({targetOrigin:u,style:f},s,{open:l.state.open&&!l.state.closing}),i)},l.componentClickAway=function(){l.requestClose("clickAway")},l.setPlacement=function(e){if(l.state.open&&l.popoverRefs.layer.getLayer()){var t=l.popoverRefs.layer.getLayer().children[0];if(t){var n=l.props,o=n.targetOrigin,r=n.anchorOrigin,i=l.props.anchorEl||l.anchorEl,a=l.getAnchorPosition(i),u=l.getTargetPosition(t),s={top:a[r.vertical]-u[o.vertical],left:a[r.horizontal]-u[o.horizontal]};e&&l.props.autoCloseWhenOffScreen&&l.autoCloseWhenOffScreen(a),l.props.canAutoPosition&&(u=l.getTargetPosition(t),s=l.applyAutoPositionIfNeeded(a,u,o,r,s)),t.style.top=s.top+"px",t.style.left=s.left+"px",t.style.maxHeight=window.innerHeight+"px"}}},l.handleResize=(0,b.default)(l.setPlacement,100),l.handleScroll=(0,b.default)(l.setPlacement.bind(l,!0),50),l.popoverRefs={},l.state={open:e.open,closing:!1},l}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.placementTimeout=setTimeout(this.setPlacement)}},{key:"componentWillReceiveProps",value:function(e){var t=this;if(e.open!==this.props.open)if(e.open)clearTimeout(this.timeout),this.timeout=null,this.anchorEl=e.anchorEl||this.props.anchorEl,this.setState({open:!0,closing:!1});else if(e.animated){if(null!==this.timeout)return;this.setState({closing:!0}),this.timeout=setTimeout(function(){t.setState({open:!1},function(){t.timeout=null})},500)}else this.setState({open:!1})}},{key:"componentDidUpdate",value:function(){clearTimeout(this.placementTimeout),this.placementTimeout=setTimeout(this.setPlacement)}},{key:"componentWillUnmount",value:function(){this.handleResize.cancel(),this.handleScroll.cancel(),this.placementTimeout&&(clearTimeout(this.placementTimeout),this.placementTimeout=null),this.timeout&&(clearTimeout(this.timeout),this.timeout=null)}},{key:"requestClose",value:function(e){this.props.onRequestClose&&this.props.onRequestClose(e)}},{key:"getAnchorPosition",value:function(e){e||(e=h.default.findDOMNode(this));var t=e.getBoundingClientRect(),n={top:t.top,left:t.left,width:e.offsetWidth,height:e.offsetHeight};return n.right=t.right||n.left+n.width,n.bottom=t.bottom||n.top+n.height,n.middle=n.left+(n.right-n.left)/2,n.center=n.top+(n.bottom-n.top)/2,n}},{key:"getTargetPosition",value:function(e){return{top:0,center:e.offsetHeight/2,bottom:e.offsetHeight,left:0,middle:e.offsetWidth/2,right:e.offsetWidth}}},{key:"autoCloseWhenOffScreen",value:function(e){(e.top<0||e.top>window.innerHeight||e.left<0||e.left>window.innerWidth)&&this.requestClose("offScreen")}},{key:"getOverlapMode",value:function(e,t,n){return[e,t].indexOf(n)>=0?"auto":e===t?"inclusive":"exclusive"}},{key:"getPositions",value:function(e,t){var n=(0,o.default)({},e),r=(0,o.default)({},t),i={x:["left","right"].filter(function(e){return e!==r.horizontal}),y:["top","bottom"].filter(function(e){return e!==r.vertical})},a=this.getOverlapMode(n.horizontal,r.horizontal,"middle"),l=this.getOverlapMode(n.vertical,r.vertical,"center");return i.x.splice("auto"===a?0:1,0,"middle"),i.y.splice("auto"===l?0:1,0,"center"),"auto"!==l&&(n.vertical="top"===n.vertical?"bottom":"top","inclusive"===l&&(r.vertical=r.vertical)),"auto"!==a&&(n.horizontal="left"===n.horizontal?"right":"left","inclusive"===l&&(r.horizontal=r.horizontal)),{positions:i,anchorPos:n}}},{key:"applyAutoPositionIfNeeded",value:function(e,t,n,o,r){var i=this.getPositions(o,n),a=i.positions,l=i.anchorPos;if(r.top<0||r.top+t.bottom>window.innerHeight){var u=e[l.vertical]-t[a.y[0]];u+t.bottom<=window.innerHeight?r.top=Math.max(0,u):(u=e[l.vertical]-t[a.y[1]])+t.bottom<=window.innerHeight&&(r.top=Math.max(0,u))}if(r.left<0||r.left+t.right>window.innerWidth){var s=e[l.horizontal]-t[a.x[0]];s+t.right<=window.innerWidth?r.left=Math.max(0,s):(s=e[l.horizontal]-t[a.x[1]])+t.right<=window.innerWidth&&(r.left=Math.max(0,s))}return r}},{key:"render",value:function(){var e=this;return d.default.createElement("div",{style:k.root},d.default.createElement(m.default,{target:this.props.scrollableContainer,onScroll:this.handleScroll,onResize:this.handleResize}),d.default.createElement(y.default,{ref:function(t){return e.popoverRefs.layer=t},open:this.state.open,componentClickAway:this.componentClickAway,useLayerForClickAway:this.props.useLayerForClickAway,render:this.renderLayer}))}}]),t}(f.Component);C.defaultProps={anchorOrigin:{vertical:"bottom",horizontal:"left"},animated:!0,autoCloseWhenOffScreen:!0,canAutoPosition:!0,onRequestClose:function(){},open:!1,scrollableContainer:"window",style:{overflowY:"auto"},targetOrigin:{vertical:"top",horizontal:"left"},useLayerForClickAway:!0,zDepth:1},C.contextTypes={muiTheme:p.default.object.isRequired},C.propTypes={},t.default=C},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=m(n(11)),r=m(n(10)),i=m(n(7)),a=m(n(3)),l=m(n(4)),u=m(n(6)),s=m(n(5)),c=m(n(8)),f=n(0),d=m(f),p=m(n(1)),h=m(n(154));function m(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){return(0,a.default)(this,t),(0,u.default)(this,(t.__proto__||(0,i.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.style,i=(0,r.default)(e,["children","style"]),a=this.context.muiTheme.prepareStyles,l=!1,u=f.Children.toArray(t)[0];(0,f.isValidElement)(u)&&u.type===h.default&&(l=!0);var s={root:{padding:(l?0:8)+"px 0px 8px 0px"}};return d.default.createElement("div",(0,o.default)({},i,{style:a((0,c.default)(s.root,n))}),t)}}]),t}(f.Component);y.contextTypes={muiTheme:p.default.object.isRequired},y.propTypes={},t.default=y},function(e,t){function n(e){if(e&&"object"==typeof e){var t=e.which||e.keyCode||e.charCode;t&&(e=t)}if("number"==typeof e)return a[e];var n,i=String(e);return(n=o[i.toLowerCase()])?n:(n=r[i.toLowerCase()])||(1===i.length?i.charCodeAt(0):void 0)}n.isEventKey=function(e,t){if(e&&"object"==typeof e){var n=e.which||e.keyCode||e.charCode;if(null===n||void 0===n)return!1;if("string"==typeof t){var i;if(i=o[t.toLowerCase()])return i===n;if(i=r[t.toLowerCase()])return i===n}else if("number"==typeof t)return t===n;return!1}};var o=(t=e.exports=n).code=t.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},r=t.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};
/*!
 * Programatically add the following
 */
for(i=97;i<123;i++)o[String.fromCharCode(i)]=i-32;for(var i=48;i<58;i++)o[i-48]=i;for(i=1;i<13;i++)o["f"+i]=i+111;for(i=0;i<10;i++)o["numpad "+i]=i+96;var a=t.names=t.title={};for(i in o)a[o[i]]=i;for(var l in r)o[l]=r[l]},function(e,t,n){"use strict";t.__esModule=!0;var o,r=n(92),i=(o=r)&&o.__esModule?o:{default:o};t.default=function(e){return Array.isArray(e)?e:(0,i.default)(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=k(n(11)),r=k(n(10)),i=k(n(82)),a=k(n(7)),l=k(n(3)),u=k(n(4)),s=k(n(6)),c=k(n(5)),f=k(n(8)),d=n(0),p=k(d),h=k(n(1)),m=k(n(12)),y=k(n(23)),v=k(n(155)),b=k(n(81)),g=(k(n(20)),k(n(80))),x=n(152);function k(e){return e&&e.__esModule?e:{default:e}}var C=function(e){function t(e,n){(0,l.default)(this,t);var o=(0,s.default)(this,(t.__proto__||(0,a.default)(t)).call(this,e,n));w.call(o);var r=o.getFilteredChildren(e.children),i=o.getLastSelectedIndex(e,r),u=e.disableAutoFocus?-1:i>=0?i:0;return-1!==u&&e.onMenuItemFocusChange&&e.onMenuItemFocusChange(null,u),o.state={focusIndex:u,isKeyboardFocused:e.initiallyKeyboardFocused,keyWidth:e.desktop?64:56},o.hotKeyHolder=new x.HotKeyHolder,o}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.props.autoWidth&&this.setWidth(),this.setScollPosition()}},{key:"componentWillReceiveProps",value:function(e){var t=void 0,n=this.getFilteredChildren(e.children);t=!0!==this.props.multiple?this.getLastSelectedIndex(e,n):this.state.focusIndex;var o=e.disableAutoFocus?-1:t>=0?t:0;o!==this.state.focusIndex&&this.props.onMenuItemFocusChange&&this.props.onMenuItemFocusChange(null,o),this.setState({focusIndex:o,keyWidth:e.desktop?64:56})}},{key:"shouldComponentUpdate",value:function(e,t,n){return!(0,y.default)(this.props,e)||!(0,y.default)(this.state,t)||!(0,y.default)(this.context,n)}},{key:"componentDidUpdate",value:function(){this.props.autoWidth&&this.setWidth()}},{key:"getValueLink",value:function(e){return e.valueLink||{value:e.value,requestChange:e.onChange}}},{key:"setKeyboardFocused",value:function(e){this.setState({isKeyboardFocused:e})}},{key:"getFilteredChildren",value:function(e){var t=[];return p.default.Children.forEach(e,function(e){e&&t.push(e)}),t}},{key:"cloneMenuItem",value:function(e,t,n,o){var r=this,i=e.props.disabled,a={};i||this.isChildSelected(e,this.props)&&(0,f.default)(a,n.selectedMenuItem,this.props.selectedMenuItemStyle);var l=(0,f.default)({},e.props.style,this.props.menuItemStyle,a),u={desktop:this.props.desktop,style:l};if(!i){var s=t===this.state.focusIndex,c="none";s&&(c=this.state.isKeyboardFocused?"keyboard-focused":"focused"),(0,f.default)(u,{focusState:c,onClick:function(t){r.handleMenuItemClick(t,e,o),e.props.onClick&&e.props.onClick(t)},ref:s?"focusedMenuItem":null})}return p.default.cloneElement(e,u)}},{key:"decrementKeyboardFocusIndex",value:function(e){var t=this.state.focusIndex;--t<0&&(t=0),this.setFocusIndex(e,t,!0)}},{key:"getMenuItemCount",value:function(e){var t=0;return e.forEach(function(e){var n=e.type&&"Divider"===e.type.muiName,o=e.props.disabled;n||o||t++}),t}},{key:"getLastSelectedIndex",value:function(e,t){var n=this,o=-1,r=0;return t.forEach(function(t){var i=t.type&&"Divider"===t.type.muiName;n.isChildSelected(t,e)&&(o=r),i||r++}),o}},{key:"setFocusIndexStartsWith",value:function(e,t,n){var o=-1;return p.default.Children.forEach(n,function(e,n){if(!(o>=0)){var r=e.props.primaryText;"string"==typeof r&&r.substr(0,t.length).toLowerCase()===t.toLowerCase()&&(o=n)}}),o>=0&&(this.setFocusIndex(e,o,!0),!0)}},{key:"handleMenuItemClick",value:function(e,t,n){var o=this.props.children,r=this.props.multiple,a=this.getValueLink(this.props),l=a.value,u=t.props.value,s=p.default.isValidElement(o)?0:o.indexOf(t);if(this.setFocusIndex(e,s,!1),r){var c=(l=l||[]).indexOf(u),f=l,d=(0,i.default)(f).slice(0);-1===c?d.push(u):d.splice(c,1),a.requestChange(e,d)}else r||u===l||a.requestChange(e,u);this.props.onItemClick(e,t,n)}},{key:"incrementKeyboardFocusIndex",value:function(e,t){var n=this.state.focusIndex,o=this.getMenuItemCount(t)-1;++n>o&&(n=o),this.setFocusIndex(e,n,!0)}},{key:"isChildSelected",value:function(e,t){var n=this.getValueLink(t).value,o=e.props.value;return t.multiple?n&&n.length&&-1!==n.indexOf(o):e.props.hasOwnProperty("value")&&n===o}},{key:"setFocusIndex",value:function(e,t,n){this.props.onMenuItemFocusChange&&this.props.onMenuItemFocusChange(e,t),this.setState({focusIndex:t,isKeyboardFocused:n})}},{key:"setScollPosition",value:function(){var e=this.props.desktop,t=this.refs.focusedMenuItem,n=e?32:48;if(t){var o=m.default.findDOMNode(t).offsetTop-n;o<n&&(o=0),m.default.findDOMNode(this.refs.scrollContainer).scrollTop=o}}},{key:"cancelScrollEvent",value:function(e){return e.stopPropagation(),e.preventDefault(),!1}},{key:"setWidth",value:function(){var e=m.default.findDOMNode(this),t=m.default.findDOMNode(this.refs.list),n=e.offsetWidth,o=this.state.keyWidth,r=1.5*o,i=n/o,a=void 0;(a=(i=i<=1.5?1.5:Math.ceil(i))*o)<r&&(a=r),e.style.width=a+"px",t.style.width=a+"px"}},{key:"render",value:function(){var e=this,t=this.props,n=(t.autoWidth,t.children),i=(t.desktop,t.disableAutoFocus,t.initiallyKeyboardFocused,t.listStyle),a=(t.maxHeight,t.multiple,t.onItemClick,t.onEscKeyDown,t.onMenuItemFocusChange,t.selectedMenuItemStyle,t.menuItemStyle,t.style),l=(t.value,t.valueLink,t.width,(0,r.default)(t,["autoWidth","children","desktop","disableAutoFocus","initiallyKeyboardFocused","listStyle","maxHeight","multiple","onItemClick","onEscKeyDown","onMenuItemFocusChange","selectedMenuItemStyle","menuItemStyle","style","value","valueLink","width"])),u=this.context.muiTheme.prepareStyles,s=function(e,t){var n=e.desktop,o=e.maxHeight,r=e.width,i=t.muiTheme;return{root:{zIndex:i.zIndex.menu,maxHeight:o,overflowY:o?"auto":null},divider:{marginTop:7,marginBottom:8},list:{display:"table-cell",paddingBottom:n?16:8,paddingTop:n?16:8,userSelect:"none",width:r},selectedMenuItem:{color:i.menuItem.selectedTextColor}}}(this.props,this.context),c=(0,f.default)(s.root,a),d=(0,f.default)(s.list,i),h=this.getFilteredChildren(n),m=0,y=p.default.Children.map(h,function(t,n){var o=t.props.disabled,r=t.type?t.type.muiName:"",i=t;switch(r){case"MenuItem":i=e.cloneMenuItem(t,m,s,n);break;case"Divider":i=p.default.cloneElement(t,{style:(0,f.default)({},s.divider,t.props.style)})}return"MenuItem"!==r||o||m++,i});return p.default.createElement(v.default,{onClickAway:this.handleClickAway},p.default.createElement("div",{onKeyDown:this.handleKeyDown,onWheel:this.handleOnWheel,style:u(c),ref:"scrollContainer",role:"presentation"},p.default.createElement(g.default,(0,o.default)({},l,{ref:"list",style:d,role:"menu"}),y)))}}]),t}(d.Component);C.defaultProps={autoWidth:!0,desktop:!1,disableAutoFocus:!1,initiallyKeyboardFocused:!1,maxHeight:null,multiple:!1,onChange:function(){},onEscKeyDown:function(){},onItemClick:function(){},onKeyDown:function(){}},C.contextTypes={muiTheme:h.default.object.isRequired};var w=function(){var e=this;this.handleClickAway=function(t){if(!t.defaultPrevented){var n=e.state.focusIndex;if(!(n<0)){var o=e.getFilteredChildren(e.props.children)[n];o&&o.props.menuItems&&o.props.menuItems.length>0||e.setFocusIndex(t,-1,!1)}}},this.handleKeyDown=function(t){var n=e.getFilteredChildren(e.props.children),o=(0,b.default)(t);switch(o){case"down":t.preventDefault(),e.incrementKeyboardFocusIndex(t,n);break;case"esc":e.props.onEscKeyDown(t);break;case"tab":t.preventDefault(),t.shiftKey?e.decrementKeyboardFocusIndex(t):e.incrementKeyboardFocusIndex(t,n);break;case"up":t.preventDefault(),e.decrementKeyboardFocusIndex(t);break;default:if(o&&1===o.length){var r=e.hotKeyHolder.append(o);e.setFocusIndexStartsWith(t,r,n)&&t.preventDefault()}}e.props.onKeyDown(t)},this.handleOnWheel=function(t){var n=e.refs.scrollContainer;if(!(n.scrollHeight<=n.clientHeight)){var o=n.scrollTop,r=n.scrollHeight,i=n.clientHeight,a=t.deltaY,l=a>0;return l&&a>r-i-o?(n.scrollTop=r,e.cancelScrollEvent(t)):!l&&-a>o?(n.scrollTop=0,e.cancelScrollEvent(t)):void 0}}};C.propTypes={},t.default=C},function(e,t,n){e.exports={default:n(158),__esModule:!0}},function(e,t,n){var o=n(161);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(36)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){e.exports={default:n(165),__esModule:!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,i.default)(e)};var o,r=n(176),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e instanceof Object&&!Array.isArray(e)},e.exports=t.default},function(e,t,n){"use strict";function o(e,t){-1===e.indexOf(t)&&e.push(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(Array.isArray(t))for(var n=0,r=t.length;n<r;++n)o(e,t[n]);else o(e,t)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,o,r){for(var i=0,a=e.length;i<a;++i){var l=e[i](t,n,o,r);if(l)return l}},e.exports=t.default},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){e.exports={default:n(205),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0;var o,r=n(92),i=(o=r)&&o.__esModule?o:{default:o};t.default=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return(0,i.default)(e)}},function(e,t,n){var o=n(39),r=n(32),i=n(25),a=n(59),l=n(22),u=n(104),s=Object.getOwnPropertyDescriptor;t.f=n(21)?s:function(e,t){if(e=i(e),t=a(t,!0),u)try{return s(e,t)}catch(e){}if(l(e,t))return r(!o.f.call(e,t),e[t])}},function(e,t,n){var o=n(98),r=n(53).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return o(e,r)}},function(e,t,n){var o=n(57),r=Math.min;e.exports=function(e){return e>0?r(o(e),9007199254740991):0}},function(e,t,n){var o=n(54);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==o(e)?e.split(""):Object(e)}},function(e,t,n){var o=n(22),r=n(25),i=n(230)(!1),a=n(62)("IE_PROTO");e.exports=function(e,t){var n,l=r(e),u=0,s=[];for(n in l)n!=a&&o(l,n)&&s.push(n);for(;t.length>u;)o(l,n=t[u++])&&(~i(s,n)||s.push(n));return s}},function(e,t,n){e.exports=n(29)},function(e,t,n){"use strict";var o=n(56),r=n(18),i=n(99),a=n(29),l=n(31),u=n(232),s=n(52),c=n(106),f=n(15)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,m,y,v){u(n,t,h);var b,g,x,k=function(e){if(!d&&e in S)return S[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},C=t+" Iterator",w="values"==m,_=!1,S=e.prototype,T=S[f]||S["@@iterator"]||m&&S[m],E=T||k(m),O=m?w?k("entries"):E:void 0,M="Array"==t&&S.entries||T;if(M&&(x=c(M.call(new e)))!==Object.prototype&&x.next&&(s(x,C,!0),o||"function"==typeof x[f]||a(x,f,p)),w&&T&&"values"!==T.name&&(_=!0,E=function(){return T.call(this)}),o&&!v||!d&&!_&&S[f]||a(S,f,E),l[t]=E,l[C]=p,m)if(b={values:w?E:k("values"),keys:y?E:k("keys"),entries:O},v)for(g in b)g in S||i(S,g,b[g]);else r(r.P+r.F*(d||_),t,b);return b}},function(e,t,n){"use strict";var o=n(233)(!0);n(100)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=o(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){e.exports={default:n(237),__esModule:!0}},function(e,t,n){var o=n(27),r=n(19).document,i=o(r)&&o(r.createElement);e.exports=function(e){return i?r.createElement(e):{}}},function(e,t,n){e.exports=!n(21)&&!n(26)(function(){return 7!=Object.defineProperty(n(103)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var o=n(18),r=n(13),i=n(26);e.exports=function(e,t){var n=(r.Object||{})[e]||Object[e],a={};a[e]=t(n),o(o.S+o.F*i(function(){n(1)}),"Object",a)}},function(e,t,n){var o=n(22),r=n(33),i=n(62)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=r(e),o(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var o=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach(function(e){o[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,l=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))r.call(n,s)&&(l[s]=n[s]);if(o){a=o(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(l[a[c]]=n[a[c]])}}return l}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=n(77),i=(o=r)&&o.__esModule?o:{default:o};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=f(n(7)),r=f(n(3)),i=f(n(4)),a=f(n(6)),l=f(n(5)),u=n(0),s=f(n(1)),c=f(n(206));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(){return(0,r.default)(this,t),(0,a.default)(this,(t.__proto__||(0,o.default)(t)).apply(this,arguments))}return(0,l.default)(t,e),(0,i.default)(t,[{key:"getChildContext",value:function(){return{muiTheme:this.props.muiTheme||(0,c.default)()}}},{key:"render",value:function(){return this.props.children}}]),t}(u.Component);d.childContextTypes={muiTheme:s.default.object.isRequired},d.propTypes={},t.default=d},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,o=Object.getOwnPropertyNames,r=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,l=a&&a(Object);return function u(s,c,f){if("string"!=typeof c){if(l){var d=a(c);d&&d!==l&&u(s,d,f)}var p=o(c);r&&(p=p.concat(r(c)));for(var h=0;h<p.length;++h){var m=p[h];if(!(e[m]||t[m]||f&&f[m])){var y=i(c,m);try{n(s,m,y)}catch(e){}}}return s}return s}}()},function(e,t,n){var o=n(241);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t))},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var r=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,o=[],i=0,a=0,l="",c=t&&t.delimiter||"/";null!=(n=r.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(a,p),a=p+f.length,d)l+=d[1];else{var h=e[a],m=n[2],y=n[3],v=n[4],b=n[5],g=n[6],x=n[7];l&&(o.push(l),l="");var k=null!=m&&null!=h&&h!==m,C="+"===g||"*"===g,w="?"===g||"*"===g,_=n[2]||c,S=v||b;o.push({name:y||i++,prefix:m||"",delimiter:_,optional:w,repeat:C,partial:k,asterisk:!!x,pattern:S?s(S):x?".*":"[^"+u(_)+"]+?"})}}return a<e.length&&(l+=e.substr(a)),l&&o.push(l),o}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,r){for(var i="",l=n||{},u=(r||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=l[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(o(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!t[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):u(d),!t[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function d(e,t,n){o(t)||(n=t||n,t=[]);for(var r=(n=n||{}).strict,i=!1!==n.end,a="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)a+=u(s);else{var d=u(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+d+p+")*"),a+=p=s.optional?s.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(n.delimiter||"/"),m=a.slice(-h.length)===h;return r||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":r&&m?"":"(?="+h+"|$)",c(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return o(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var o=0;o<n.length;o++)t.push({name:o,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):o(e)?function(e,t,n){for(var o=[],r=0;r<e.length;r++)o.push(p(e[r],t,n).source);return c(new RegExp("(?:"+o.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";t.__esModule=!0;var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=s(n(2)),a=n(16),l=n(65),u=s(n(64));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,s=void 0===n?["/"]:n,f=e.initialIndex,d=void 0===f?0:f,p=e.keyLength,h=void 0===p?6:p,m=(0,u.default)(),y=function(e){r(C,e),C.length=C.entries.length,m.notifyListeners(C.location,C.action)},v=function(){return Math.random().toString(36).substr(2,h)},b=c(d,0,s.length-1),g=s.map(function(e){return"string"==typeof e?(0,l.createLocation)(e,void 0,v()):(0,l.createLocation)(e,void 0,e.key||v())}),x=a.createPath,k=function(e){var n=c(C.index+e,0,C.entries.length-1),o=C.entries[n];m.confirmTransitionTo(o,"POP",t,function(e){e?y({action:"POP",location:o,index:n}):y()})},C={length:g.length,action:"POP",location:g[b],index:b,entries:g,createHref:x,push:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":o(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=(0,l.createLocation)(e,n,v(),C.location);m.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=C.index+1,n=C.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),y({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":o(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=(0,l.createLocation)(e,n,v(),C.location);m.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(C.entries[C.index]=r,y({action:"REPLACE",location:r}))})},go:k,goBack:function(){return k(-1)},goForward:function(){return k(1)},canGo:function(e){var t=C.index+e;return t>=0&&t<C.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return m.setPrompt(e)},listen:function(e){return m.appendListener(e)}};return C}},function(e,t,n){"use strict";t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=c(n(2)),i=c(n(9)),a=n(65),l=n(16),u=c(n(64)),s=n(107);function c(e){return e&&e.__esModule?e:{default:e}}var f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,l.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:l.stripLeadingSlash,decodePath:l.addLeadingSlash},slash:{encodePath:l.addLeadingSlash,decodePath:l.addLeadingSlash}},d=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},p=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(s.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,s.supportsGoWithoutReloadUsingHash)(),c=e.getUserConfirmation,h=void 0===c?s.getConfirmation:c,m=e.hashType,y=void 0===m?"slash":m,v=e.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(e.basename)):"",b=f[y],g=b.encodePath,x=b.decodePath,k=function(){var e=x(d());return(0,r.default)(!v||(0,l.hasBasename)(e,v),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+v+'".'),v&&(e=(0,l.stripBasename)(e,v)),(0,a.createLocation)(e)},C=(0,u.default)(),w=function(e){o(L,e),L.length=t.length,C.notifyListeners(L.location,L.action)},_=!1,S=null,T=function(){var e=d(),t=g(e);if(e!==t)p(t);else{var n=k(),o=L.location;if(!_&&(0,a.locationsAreEqual)(o,n))return;if(S===(0,l.createPath)(n))return;S=null,E(n)}},E=function(e){_?(_=!1,w()):C.confirmTransitionTo(e,"POP",h,function(t){t?w({action:"POP",location:e}):O(e)})},O=function(e){var t=L.location,n=R.lastIndexOf((0,l.createPath)(t));-1===n&&(n=0);var o=R.lastIndexOf((0,l.createPath)(e));-1===o&&(o=0);var r=n-o;r&&(_=!0,F(r))},M=d(),P=g(M);M!==P&&p(P);var I=k(),R=[(0,l.createPath)(I)],F=function(e){(0,r.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},j=0,A=function(e){1===(j+=e)?(0,s.addEventListener)(window,"hashchange",T):0===j&&(0,s.removeEventListener)(window,"hashchange",T)},D=!1,L={length:t.length,action:"POP",location:I,createHref:function(e){return"#"+g(v+(0,l.createPath)(e))},push:function(e,t){(0,r.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,L.location);C.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,l.createPath)(n),o=g(v+t);if(d()!==o){S=t,function(e){window.location.hash=e}(o);var i=R.lastIndexOf((0,l.createPath)(L.location)),a=R.slice(0,-1===i?0:i+1);a.push(t),R=a,w({action:"PUSH",location:n})}else(0,r.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),w()}})},replace:function(e,t){(0,r.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,L.location);C.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,l.createPath)(n),o=g(v+t);d()!==o&&(S=t,p(o));var r=R.indexOf((0,l.createPath)(L.location));-1!==r&&(R[r]=t),w({action:"REPLACE",location:n})}})},go:F,goBack:function(){return F(-1)},goForward:function(){return F(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=C.setPrompt(e);return D||(A(1),D=!0),function(){return D&&(D=!1,A(-1)),t()}},listen:function(e){var t=C.appendListener(e);return A(1),function(){A(-1),t()}}};return L}},function(e,t,n){"use strict";t.__esModule=!0;var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=f(n(2)),a=f(n(9)),l=n(65),u=n(16),s=f(n(64)),c=n(107);function f(e){return e&&e.__esModule?e:{default:e}}var d=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(c.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,c.supportsHistory)(),f=!(0,c.supportsPopStateOnHashChange)(),p=e.forceRefresh,h=void 0!==p&&p,m=e.getUserConfirmation,y=void 0===m?c.getConfirmation:m,v=e.keyLength,b=void 0===v?6:v,g=e.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(e.basename)):"",x=function(e){var t=e||{},n=t.key,o=t.state,r=window.location,a=r.pathname+r.search+r.hash;return(0,i.default)(!g||(0,u.hasBasename)(a,g),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+g+'".'),g&&(a=(0,u.stripBasename)(a,g)),(0,l.createLocation)(a,o,n)},k=function(){return Math.random().toString(36).substr(2,b)},C=(0,s.default)(),w=function(e){r(D,e),D.length=t.length,C.notifyListeners(D.location,D.action)},_=function(e){(0,c.isExtraneousPopstateEvent)(e)||E(x(e.state))},S=function(){E(x(d()))},T=!1,E=function(e){T?(T=!1,w()):C.confirmTransitionTo(e,"POP",y,function(t){t?w({action:"POP",location:e}):O(e)})},O=function(e){var t=D.location,n=P.indexOf(t.key);-1===n&&(n=0);var o=P.indexOf(e.key);-1===o&&(o=0);var r=n-o;r&&(T=!0,R(r))},M=x(d()),P=[M.key],I=function(e){return g+(0,u.createPath)(e)},R=function(e){t.go(e)},F=0,j=function(e){1===(F+=e)?((0,c.addEventListener)(window,"popstate",_),f&&(0,c.addEventListener)(window,"hashchange",S)):0===F&&((0,c.removeEventListener)(window,"popstate",_),f&&(0,c.removeEventListener)(window,"hashchange",S))},A=!1,D={length:t.length,action:"POP",location:M,createHref:I,push:function(e,r){(0,i.default)(!("object"===(void 0===e?"undefined":o(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,l.createLocation)(e,r,k(),D.location);C.confirmTransitionTo(a,"PUSH",y,function(e){if(e){var o=I(a),r=a.key,l=a.state;if(n)if(t.pushState({key:r,state:l},null,o),h)window.location.href=o;else{var u=P.indexOf(D.location.key),s=P.slice(0,-1===u?0:u+1);s.push(a.key),P=s,w({action:"PUSH",location:a})}else(0,i.default)(void 0===l,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=o}})},replace:function(e,r){(0,i.default)(!("object"===(void 0===e?"undefined":o(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,l.createLocation)(e,r,k(),D.location);C.confirmTransitionTo(a,"REPLACE",y,function(e){if(e){var o=I(a),r=a.key,l=a.state;if(n)if(t.replaceState({key:r,state:l},null,o),h)window.location.replace(o);else{var u=P.indexOf(D.location.key);-1!==u&&(P[u]=a.key),w({action:"REPLACE",location:a})}else(0,i.default)(void 0===l,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(o)}})},go:R,goBack:function(){return R(-1)},goForward:function(){return R(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=C.setPrompt(e);return A||(j(1),A=!0),function(){return A&&(A=!1,j(-1)),t()}},listen:function(e){var t=C.appendListener(e);return j(1),function(){j(-1),t()}}};return D}},function(e,t,n){"use strict";n.r(t);var o=n(0),r=n.n(o),i=n(12),a=n.n(i),l=n(2),u=n.n(l),s=n(1),c=n.n(s),f=n(116),d=n.n(f),p=n(9),h=n.n(p),m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};function y(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=function(e){function t(){var n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];return n=o=y(this,e.call.apply(e,[this].concat(i))),o.state={match:o.computeMatch(o.props.history.location.pathname)},y(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:m({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,o=t.history;h()(null==n||1===r.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=o.listen(function(){e.setState({match:e.computeMatch(o.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){u()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?r.a.Children.only(e):null},t}(r.a.Component);v.propTypes={history:c.a.object.isRequired,children:c.a.node},v.contextTypes={router:c.a.object},v.childContextTypes={router:c.a.object.isRequired};var b=v,g=b;function x(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var k=function(e){function t(){var n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];return n=o=x(this,e.call.apply(e,[this].concat(i))),o.history=d()(o.props),x(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){u()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return r.a.createElement(g,{history:this.history,children:this.props.children})},t}(r.a.Component);k.propTypes={basename:c.a.string,forceRefresh:c.a.bool,getUserConfirmation:c.a.func,keyLength:c.a.number,children:c.a.node};var C=k,w=n(115),_=n.n(w);function S(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var T=function(e){function t(){var n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];return n=o=S(this,e.call.apply(e,[this].concat(i))),o.history=_()(o.props),S(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){u()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return r.a.createElement(g,{history:this.history,children:this.props.children})},t}(r.a.Component);T.propTypes={basename:c.a.string,getUserConfirmation:c.a.func,hashType:c.a.oneOf(["hashbang","noslash","slash"]),children:c.a.node};var E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};function O(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var M=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},P=function(e){function t(){var n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];return n=o=O(this,e.call.apply(e,[this].concat(i))),o.handleClick=function(e){if(o.props.onClick&&o.props.onClick(e),!e.defaultPrevented&&0===e.button&&!o.props.target&&!M(e)){e.preventDefault();var t=o.context.router.history,n=o.props,r=n.replace,i=n.to;r?t.replace(i):t.push(i)}},O(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,o=function(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}(e,["replace","to","innerRef"]);h()(this.context.router,"You should not use <Link> outside a <Router>");var i=this.context.router.history.createHref("string"==typeof t?{pathname:t}:t);return r.a.createElement("a",E({},o,{onClick:this.handleClick,href:i,ref:n}))},t}(r.a.Component);P.propTypes={onClick:c.a.func,target:c.a.string,replace:c.a.bool,to:c.a.oneOfType([c.a.string,c.a.object]).isRequired,innerRef:c.a.oneOfType([c.a.string,c.a.func])},P.defaultProps={replace:!1},P.contextTypes={router:c.a.shape({history:c.a.shape({push:c.a.func.isRequired,replace:c.a.func.isRequired,createHref:c.a.func.isRequired}).isRequired}).isRequired};var I=P,R=n(114),F=n.n(R);function j(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var A=function(e){function t(){var n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];return n=o=j(this,e.call.apply(e,[this].concat(i))),o.history=F()(o.props),j(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){u()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return r.a.createElement(b,{history:this.history,children:this.props.children})},t}(r.a.Component);A.propTypes={initialEntries:c.a.array,initialIndex:c.a.number,getUserConfirmation:c.a.func,keyLength:c.a.number,children:c.a.node};var D=n(113),L=n.n(D),N={},W=0,z=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof t&&(t={path:t});var n=t,o=n.path,r=void 0===o?"/":o,i=n.exact,a=void 0!==i&&i,l=n.strict,u=void 0!==l&&l,s=n.sensitive,c=function(e,t){var n=""+t.end+t.strict+t.sensitive,o=N[n]||(N[n]={});if(o[e])return o[e];var r=[],i={re:L()(e,r,t),keys:r};return W<1e4&&(o[e]=i,W++),i}(r,{end:a,strict:u,sensitive:void 0!==s&&s}),f=c.re,d=c.keys,p=f.exec(e);if(!p)return null;var h=p[0],m=p.slice(1),y=e===h;return a&&!y?null:{path:r,url:"/"===r&&""===h?"/":h,isExact:y,params:d.reduce(function(e,t,n){return e[t.name]=m[n],e},{})}},B=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};function U(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var H=function(e){return 0===r.a.Children.count(e)},K=function(e){function t(){var n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];return n=o=U(this,e.call.apply(e,[this].concat(i))),o.state={match:o.computeMatch(o.props,o.context.router)},U(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:B({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,o=e.location,r=e.path,i=e.strict,a=e.exact,l=e.sensitive;if(n)return n;h()(t,"You should not use <Route> or withRouter() outside a <Router>");var u=t.route,s=(o||u.location).pathname;return r?z(s,{path:r,strict:i,exact:a,sensitive:l}):u.match},t.prototype.componentWillMount=function(){u()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),u()(!(this.props.component&&this.props.children&&!H(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),u()(!(this.props.render&&this.props.children&&!H(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){u()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),u()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,o=t.component,i=t.render,a=this.context.router,l=a.history,u=a.route,s=a.staticContext,c={match:e,location:this.props.location||u.location,history:l,staticContext:s};return o?e?r.a.createElement(o,c):null:i?e?i(c):null:n?"function"==typeof n?n(c):H(n)?null:r.a.Children.only(n):null},t}(r.a.Component);K.propTypes={computedMatch:c.a.object,path:c.a.string,exact:c.a.bool,strict:c.a.bool,sensitive:c.a.bool,component:c.a.func,render:c.a.func,children:c.a.oneOfType([c.a.func,c.a.node]),location:c.a.object},K.contextTypes={router:c.a.shape({history:c.a.object.isRequired,route:c.a.object.isRequired,staticContext:c.a.object})},K.childContextTypes={router:c.a.object.isRequired};var V=K,q=V,G=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},$="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var Y=function(e){var t=e.to,n=e.exact,o=e.strict,i=e.location,a=e.activeClassName,l=e.className,u=e.activeStyle,s=e.style,c=e.isActive,f=e.ariaCurrent,d=function(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","ariaCurrent"]);return r.a.createElement(q,{path:"object"===(void 0===t?"undefined":$(t))?t.pathname:t,exact:n,strict:o,location:i,children:function(e){var n=e.location,o=e.match,i=!!(c?c(o,n):o);return r.a.createElement(I,G({to:t,className:i?[l,a].filter(function(e){return e}).join(" "):l,style:i?G({},s,u):s,"aria-current":i&&f},d))}})};Y.propTypes={to:I.propTypes.to,exact:c.a.bool,strict:c.a.bool,location:c.a.object,activeClassName:c.a.string,className:c.a.string,activeStyle:c.a.object,style:c.a.object,isActive:c.a.func,ariaCurrent:c.a.oneOf(["page","step","location","true"])},Y.defaultProps={activeClassName:"active",ariaCurrent:"true"};var Q=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){h()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(r.a.Component);Q.propTypes={when:c.a.bool,message:c.a.oneOfType([c.a.func,c.a.string]).isRequired},Q.defaultProps={when:!0},Q.contextTypes={router:c.a.shape({history:c.a.shape({block:c.a.func.isRequired}).isRequired}).isRequired};var X=n(72),Z=n(71),J=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},ee=function(e,t,n,o){var r=void 0;"string"==typeof e?(r=function(e){var t=e||"/",n="",o="",r=t.indexOf("#");-1!==r&&(o=t.substr(r),t=t.substr(0,r));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===o?"":o}}(e)).state=t:(void 0===(r=J({},e)).pathname&&(r.pathname=""),r.search?"?"!==r.search.charAt(0)&&(r.search="?"+r.search):r.search="",r.hash?"#"!==r.hash.charAt(0)&&(r.hash="#"+r.hash):r.hash="",void 0!==t&&void 0===r.state&&(r.state=t));try{r.pathname=decodeURI(r.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+r.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(r.key=n),o?r.pathname?"/"!==r.pathname.charAt(0)&&(r.pathname=Object(X.default)(r.pathname,o.pathname)):r.pathname=o.pathname:r.pathname||(r.pathname="/"),r},te=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(Z.default)(e.state,t.state)};"undefined"==typeof window||!window.document||window.document.createElement,"function"==typeof Symbol&&Symbol.iterator,Object.assign,Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign;var ne=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){h()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=ee(e.to),n=ee(this.props.to);te(t,n)?u()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.perform=function(){var e=this.context.router.history,t=this.props,n=t.push,o=t.to;n?e.push(o):e.replace(o)},t.prototype.render=function(){return null},t}(r.a.Component);ne.propTypes={push:c.a.bool,from:c.a.string,to:c.a.oneOfType([c.a.string,c.a.object]).isRequired},ne.defaultProps={push:!1},ne.contextTypes={router:c.a.shape({history:c.a.shape({push:c.a.func.isRequired,replace:c.a.func.isRequired}).isRequired,staticContext:c.a.object}).isRequired};var oe=n(16),re=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};function ie(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ae=function(e,t){return e?re({},t,{pathname:Object(oe.addLeadingSlash)(e)+t.pathname}):t},le=function(e){return"string"==typeof e?Object(oe.parsePath)(e):(n=(t=e).pathname,o=void 0===n?"/":n,r=t.search,i=void 0===r?"":r,a=t.hash,l=void 0===a?"":a,{pathname:o,search:"?"===i?"":i,hash:"#"===l?"":l});var t,n,o,r,i,a,l},ue=function(e){return"string"==typeof e?e:Object(oe.createPath)(e)},se=function(e){return function(){h()(!1,"You cannot %s with <StaticRouter>",e)}},ce=function(){},fe=function(e){function t(){var n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];return n=o=ie(this,e.call.apply(e,[this].concat(i))),o.createHref=function(e){return Object(oe.addLeadingSlash)(o.props.basename+ue(e))},o.handlePush=function(e){var t=o.props,n=t.basename,r=t.context;r.action="PUSH",r.location=ae(n,le(e)),r.url=ue(r.location)},o.handleReplace=function(e){var t=o.props,n=t.basename,r=t.context;r.action="REPLACE",r.location=ae(n,le(e)),r.url=ue(r.location)},o.handleListen=function(){return ce},o.handleBlock=function(){return ce},ie(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){u()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),o=function(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}(e,["basename","context","location"]),i={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Object(oe.addLeadingSlash)(e);return 0!==t.pathname.indexOf(n)?t:re({},t,{pathname:t.pathname.substr(n.length)})}(t,le(n)),push:this.handlePush,replace:this.handleReplace,go:se("go"),goBack:se("goBack"),goForward:se("goForward"),listen:this.handleListen,block:this.handleBlock};return r.a.createElement(b,re({},o,{history:i}))},t}(r.a.Component);fe.propTypes={basename:c.a.string,context:c.a.object.isRequired,location:c.a.oneOfType([c.a.string,c.a.object])},fe.defaultProps={basename:"",location:"/"},fe.childContextTypes={router:c.a.object.isRequired};var de=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){h()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){u()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),u()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,o=void 0,i=void 0;return r.a.Children.forEach(t,function(t){if(r.a.isValidElement(t)){var a=t.props,l=a.path,u=a.exact,s=a.strict,c=a.sensitive,f=a.from,d=l||f;null==o&&(i=t,o=d?z(n.pathname,{path:d,exact:u,strict:s,sensitive:c}):e.match)}}),o?r.a.cloneElement(i,{location:n,computedMatch:o}):null},t}(r.a.Component);de.contextTypes={router:c.a.shape({route:c.a.object.isRequired}).isRequired},de.propTypes={children:c.a.node,location:c.a.object};n(112),Object.assign;for(var pe=n(111),he=n.n(pe),me=n(70),ye=n.n(me),ve=n(41),be=n.n(ve),ge=n(69),xe=n.n(ge),ke=(n(73),n(123),n(110)),Ce=n.n(ke),we=[{address:"/calendars",name:"Calendars"},{address:"/our-schools",name:"Our Schools"},{address:"/school-board",name:"School Board"},{address:"/student-parent-resources",name:"Student/Parent Resources"},{address:"/staff-resources",name:"Staff Resources"},{address:"/employment",name:"Employment"},{address:"/",name:"Homepage"}],_e=[],Se=0;Se<we.length;Se++)_e.push(r.a.createElement(I,{className:"link ",to:we[Se].address},r.a.createElement(Ce.a,{primaryText:we[Se].name})));var Te=[];Te.push(r.a.createElement("div",null,r.a.createElement("div",null,r.a.createElement(I,{to:we[0].address},r.a.createElement("div",{className:"button"},we[0].name)),r.a.createElement(I,{to:we[1].address},r.a.createElement("div",{className:"button"},we[1].name)),r.a.createElement(I,{to:we[2].address},r.a.createElement("div",{className:"button"},we[2].name)),r.a.createElement("br",null),r.a.createElement("hr",null)),r.a.createElement("div",null,r.a.createElement(I,{to:we[3].address},r.a.createElement("div",{className:"button"},we[3].name)),r.a.createElement(I,{to:we[4].address},r.a.createElement("div",{className:"button"},we[4].name)),r.a.createElement(I,{to:we[5].address},r.a.createElement("div",{className:"button"},we[5].name)),r.a.createElement(I,{to:we[6].address},r.a.createElement("div",{className:"button"},we[6].name)),r.a.createElement("hr",null))));class Ee extends o.Component{constructor(e){super(e),this.state={headerMobile:"header-mobile",headerLandscape:"header-landscape"}}mobileRender(){return r.a.createElement("div",{className:this.props.headerMobile},r.a.createElement("img",{src:"https://s9.postimg.cc/bfkkx6mhb/logo.png",className:"image"}),r.a.createElement("div",{className:"header-title"},"MSAD 58"),r.a.createElement(ye.a,{className:"icon",iconButtonElement:r.a.createElement(be.a,null,r.a.createElement(xe.a,null))},_e))}computerRender(){return r.a.createElement("div",{className:this.state.headerLandscape},Te)}render(){return this.props.showMobile?this.mobileRender():this.computerRender()}}n(121);var Oe=()=>r.a.createElement("div",{className:"footer"},"© 2018 -");n(252);var Me=()=>r.a.createElement("div",{className:"background"});n(85);class Pe extends o.Component{constructor(e){super(e)}render(){return r.a.createElement("div",{className:"page"},"Calendars ",r.a.createElement("br",null),"Calendars ",r.a.createElement("br",null),"Calendars ",r.a.createElement("br",null),"Calendars ",r.a.createElement("br",null),"Calendars ",r.a.createElement("br",null),"Calendars ",r.a.createElement("br",null),"Calendars ",r.a.createElement("br",null),"Calendars ",r.a.createElement("br",null),"Calendars ",r.a.createElement("br",null),"Calendars ",r.a.createElement("br",null),"Calendars ",r.a.createElement("br",null),"Calendars ",r.a.createElement("br",null),"Calendars ",r.a.createElement("br",null))}}class Ie extends o.Component{constructor(e){super(e)}render(){return r.a.createElement("div",{className:"page"},"STUFF")}}class Re extends o.Component{constructor(e){super(e)}render(){return r.a.createElement("div",{className:"page"},"STUFF")}}class Fe extends o.Component{constructor(e){super(e)}render(){return r.a.createElement("div",{className:"page"},"STUFF")}}class je extends o.Component{constructor(e){super(e)}render(){return r.a.createElement("div",{className:"page"},"STUFF")}}class Ae extends o.Component{constructor(e){super(e)}render(){return r.a.createElement("div",{className:"page"},"1 ",r.a.createElement("br",null),"2 ",r.a.createElement("br",null),"3 ",r.a.createElement("br",null),"4 ",r.a.createElement("br",null),"5 ",r.a.createElement("br",null),"6 ",r.a.createElement("br",null),"7 ",r.a.createElement("br",null))}}class De extends o.Component{constructor(e){super(e)}render(){return r.a.createElement("div",{className:"page"},"THIS ",r.a.createElement("br",null),"IS ",r.a.createElement("br",null),"THE ",r.a.createElement("br",null),"HOMEPAGE ",r.a.createElement("br",null),"THIS ",r.a.createElement("br",null),"IS ",r.a.createElement("br",null),"THE ",r.a.createElement("br",null),"HOMEPAGE ",r.a.createElement("br",null),"THIS ",r.a.createElement("br",null),r.a.createElement("hr",null),"IS ",r.a.createElement("br",null),"THE ",r.a.createElement("br",null),"HOMEPAGE ",r.a.createElement("br",null),"THIS ",r.a.createElement("br",null),"IS ",r.a.createElement("br",null),"THE ",r.a.createElement("br",null),"HOMEPAGE ",r.a.createElement("br",null),"THIS ",r.a.createElement("br",null),"IS ",r.a.createElement("br",null),"THE ",r.a.createElement("br",null),"HOMEPAGE ",r.a.createElement("br",null),"THIS ",r.a.createElement("br",null),"IS ",r.a.createElement("br",null),"THE ",r.a.createElement("br",null),"HOMEPAGE ",r.a.createElement("br",null),"THIS ",r.a.createElement("br",null),"IS ",r.a.createElement("br",null),"THE ",r.a.createElement("br",null),"HOMEPAGE ",r.a.createElement("br",null),"THIS ",r.a.createElement("br",null),"IS ",r.a.createElement("br",null),"THE ",r.a.createElement("br",null),"HOMEPAGE ",r.a.createElement("br",null),"THIS ",r.a.createElement("br",null),"IS ",r.a.createElement("br",null),"THE ",r.a.createElement("br",null),"HOMEPAGE ",r.a.createElement("br",null),"THIS ",r.a.createElement("br",null),"IS ",r.a.createElement("br",null),"THE ",r.a.createElement("br",null),"HOMEPAGE ",r.a.createElement("br",null))}}n(119);var Le=()=>r.a.createElement("div",{className:"title-container"},r.a.createElement("img",{className:"title-image",src:"https://s9.postimg.cc/bfkkx6mhb/logo.png"}),r.a.createElement("br",null),r.a.createElement("i",null,"Empowering learners to invent their future")),Ne=(n(254),0);class We extends o.Component{constructor(e){super(e),this.bodyRef=r.a.createRef(),this.handleResize=this.handleResize.bind(this),this.handleScroll=this.handleScroll.bind(this),this.state={showMobile:!1,fixHeader:!1,headerMobile:"header-mobile",headerLandscape:"header-landscape"}}componentDidMount(){window.addEventListener("resize",this.handleResize),this.bodyRef.current.addEventListener("scroll",this.handleScroll),window.innerWidth<700&&this.setState({showMobile:!0})}handleScroll(){Ne=this.bodyRef.current.scrollTop,!this.state.fixHeader&&Ne>=356&&this.setState({fixHeader:!0,headerMobile:"header-mobile-fixed"}),this.state.fixHeader&&Ne<356&&this.setState({fixHeader:!1,headerMobile:"header-mobile"})}handleResize(){!this.state.showMobile&&window.innerWidth<700&&this.setState({showMobile:!0}),this.state.showMobile&&window.innerWidth>700&&this.setState({showMobile:!1})}render(){return r.a.createElement(C,null,r.a.createElement("div",{className:"body",ref:this.bodyRef},r.a.createElement(Le,null),r.a.createElement(Ee,{showMobile:this.state.showMobile,headerMobile:this.state.headerMobile}),r.a.createElement(q,{exact:!0,path:"/",component:De}),r.a.createElement(q,{path:"/calendars",component:Pe}),r.a.createElement(q,{path:"/our-schools",component:Ie}),r.a.createElement(q,{path:"/school-board",component:Re}),r.a.createElement(q,{path:"/student-parent-resources",component:Fe}),r.a.createElement(q,{path:"/staff-resources",component:je}),r.a.createElement(q,{path:"/employment",component:Ae})))}}class ze extends o.Component{constructor(e){super(e)}render(){return r.a.createElement(he.a,null,r.a.createElement(C,null,r.a.createElement("div",null,r.a.createElement(Me,null),r.a.createElement(We,null),r.a.createElement(Oe,null))))}}a.a.render(r.a.createElement(()=>r.a.createElement(ze,null),null),document.getElementById("root"))},function(e,t,n){(t=e.exports=n(37)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Oswald);",""]),t.push([e.i,".title-image {\n  top: 0px;\n  left: 0px;\n  height: 260px;\n  width: 280px;\n  position: relative;\n  margin: 5px;\n}\n\n.title-container{\n  font-family: 'Oswald', sans-serif;\n  color: #04327c;\n  font-size: 40px;\n  text-align: center;\n  height: 330px;\n  width: 100%;\n  top: 0px;\n  left: 0px;\n  margin: 10px;\n  overflow: hidden;\n}\n",""])},function(e,t,n){var o=n(118);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(36)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(t=e.exports=n(37)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Oswald);",""]),t.push([e.i,".footer {\n  background: radial-gradient(farthest-corner at 10% 2%, #ffffb3, #ffff66);\n  color: black;\n  position: fixed;\n  left: 0px;\n  width: 100%;\n  bottom: 0%;\n}\n",""])},function(e,t,n){var o=n(120);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(36)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=b(n(11)),r=b(n(10)),i=b(n(7)),a=b(n(3)),l=b(n(4)),u=b(n(6)),s=b(n(5)),c=b(n(8)),f=n(0),d=b(f),p=b(n(1)),h=b(n(14)),m=n(38),y=b(n(43)),v=b(n(44));function b(e){return e&&e.__esModule?e:{default:e}}var g=function(e){function t(){var e,n,o,r;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=o=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),o.state={hovered:!1,keyboardFocused:!1,touched:!1,initialZDepth:0,zDepth:0},o.handleMouseDown=function(e){0===e.button&&o.setState({zDepth:o.state.initialZDepth+1}),o.props.onMouseDown&&o.props.onMouseDown(e)},o.handleMouseUp=function(e){o.setState({zDepth:o.state.initialZDepth}),o.props.onMouseUp&&o.props.onMouseUp(e)},o.handleMouseLeave=function(e){o.state.keyboardFocused||o.setState({zDepth:o.state.initialZDepth,hovered:!1}),o.props.onMouseLeave&&o.props.onMouseLeave(e)},o.handleMouseEnter=function(e){o.state.keyboardFocused||o.state.touched||o.setState({hovered:!0}),o.props.onMouseEnter&&o.props.onMouseEnter(e)},o.handleTouchStart=function(e){o.setState({touched:!0,zDepth:o.state.initialZDepth+1}),o.props.onTouchStart&&o.props.onTouchStart(e)},o.handleTouchEnd=function(e){o.setState({touched:!0,zDepth:o.state.initialZDepth}),o.props.onTouchEnd&&o.props.onTouchEnd(e)},o.handleKeyboardFocus=function(e,t){var n=t&&!o.props.disabled?o.state.initialZDepth+1:o.state.initialZDepth;o.setState({zDepth:n,keyboardFocused:t})},r=n,(0,u.default)(o,r)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentWillMount",value:function(){var e=this.props.disabled?0:1;this.setState({zDepth:e,initialZDepth:e})}},{key:"componentWillReceiveProps",value:function(e){var t=e.disabled?0:1,n={zDepth:t,initialZDepth:t};e.disabled&&(n.hovered=!1),this.setState(n)}},{key:"render",value:function(){var e=this.props,t=(e.backgroundColor,e.buttonStyle),n=e.children,i=e.className,a=e.disabled,l=(e.disabledBackgroundColor,e.disabledLabelColor,e.fullWidth,e.icon),u=e.label,s=(e.labelColor,e.labelPosition),p=e.labelStyle,b=e.overlayStyle,g=(e.primary,e.rippleStyle),x=(e.secondary,e.style),k=(0,r.default)(e,["backgroundColor","buttonStyle","children","className","disabled","disabledBackgroundColor","disabledLabelColor","fullWidth","icon","label","labelColor","labelPosition","labelStyle","overlayStyle","primary","rippleStyle","secondary","style"]),C=this.context.muiTheme.prepareStyles,w=function(e,t,n){var o=t.muiTheme,r=o.baseTheme,i=o.button,a=o.raisedButton,l=o.borderRadius,u=e.disabled,s=e.disabledBackgroundColor,c=e.disabledLabelColor,f=e.fullWidth,d=e.icon,p=e.label,y=e.labelPosition,v=e.primary,b=e.secondary,g=e.style,x=v||b?.4:.08,k=a.color,C=a.textColor;u?(k=s||a.disabledColor,C=c||a.disabledTextColor):v?(k=a.primaryColor,C=a.primaryTextColor):b?(k=a.secondaryColor,C=a.secondaryTextColor):(e.backgroundColor&&(k=e.backgroundColor),e.labelColor&&(C=e.labelColor));var w=g&&g.height||i.height;return{root:{display:"inline-block",transition:h.default.easeOut(),minWidth:f?"100%":i.minWidth},button:{height:w,lineHeight:w+"px",width:"100%",padding:0,borderRadius:l,transition:h.default.easeOut(),backgroundColor:k,textAlign:"center"},label:{position:"relative",opacity:1,fontSize:a.fontSize,letterSpacing:0,textTransform:a.textTransform||i.textTransform||"uppercase",fontWeight:a.fontWeight,margin:0,userSelect:"none",paddingLeft:d&&"before"!==y?8:r.spacing.desktopGutterLess,paddingRight:d&&"before"===y?8:r.spacing.desktopGutterLess,color:C},icon:{verticalAlign:"middle",marginLeft:p&&"before"!==y?12:0,marginRight:p&&"before"===y?12:0},overlay:{height:w,borderRadius:l,backgroundColor:(n.keyboardFocused||n.hovered)&&!u&&(0,m.fade)(C,x),transition:h.default.easeOut(),top:0},ripple:{color:C,opacity:v||b?.16:.1}}}(this.props,this.context,this.state),_=(0,c.default)({},w.ripple,g),S=a?{}:{onMouseDown:this.handleMouseDown,onMouseUp:this.handleMouseUp,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd,onKeyboardFocus:this.handleKeyboardFocus},T=u&&d.default.createElement("span",{style:C((0,c.default)(w.label,p)),key:"labelElement"},u),E=l&&(0,f.cloneElement)(l,{color:l.props.color||w.label.color,style:(0,c.default)(w.icon,l.props.style),key:"iconCloned"}),O="before"===s?[T,E,n]:[n,E,T];return d.default.createElement(v.default,{className:i,style:(0,c.default)(w.root,x),zDepth:this.state.zDepth},d.default.createElement(y.default,(0,o.default)({},k,S,{ref:"container",disabled:a,style:(0,c.default)(w.button,t),focusRippleColor:_.color,touchRippleColor:_.color,focusRippleOpacity:_.opacity,touchRippleOpacity:_.opacity}),d.default.createElement("div",{ref:"overlay",style:C((0,c.default)(w.overlay,b))},O)))}}]),t}(f.Component);g.muiName="RaisedButton",g.defaultProps={disabled:!1,labelPosition:"after",fullWidth:!1,primary:!1,secondary:!1},g.contextTypes={muiTheme:p.default.object.isRequired},g.propTypes={},t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=n(122),i=(o=r)&&o.__esModule?o:{default:o};t.default=i.default},function(e,t,n){(t=e.exports=n(37)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Oswald);",""]),t.push([e.i,".header-title {\n  font-family: 'Oswald', sans-serif;\n  font-size: 40px;\n  color: black;\n  display: inline-block;\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.header-mobile-fixed {\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 3.8em;\n  background-color: white;\n  position: fixed;\n  opacity: 0.75;\n}\n\n.header-mobile {\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 3.8em;\n  background-color: white;\n  position: relative;\n}\n\n.header-landscape {\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 3.8em;\n  position: relative;\n  text-align: center;\n  display: block;\n}\n\n.link {\n  margin: 15px;\n  padding: 15px 15px 15px 15px;\n}\n\n.icon {\n  top: 0px;\n  float: right;\n}\n\n.image {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.button{\n  font-family: 'Oswald', sans-serif;\n  font-size: 18px;\n  padding: 4px;\n  border: 3px solid #000293;\n  background: #000293;\n  background-image:\n  radial-gradient(\n    #3677e2,\n    #002d77\n  );\n  color: #d1cd02;\n  transition: all .2s ease-in-out;\n  margin: 5px;\n  border-radius: 10px;\n  height: auto;\n  width:  150px;\n  text-align: center;\n  display: inline-block;\n}\n\n.button:hover {\n  border: 1px solid #333;\n  color: #d1cd02;\n  border-radius: 30px;\n  cursor:  pointer;\n}\n\nhr {\n  width: 60%;\n  margin-left: auto;\n  margin-right: auto;\n}\n",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),i=(a(n(1)),a(n(80)));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){var t=e.children,n=e.open,a=e.nestedLevel,l=e.style;return n?r.default.createElement(i.default,{style:l},o.Children.map(t,function(e){return(0,o.isValidElement)(e)?(0,o.cloneElement)(e,{nestedLevel:a+1}):e})):null};l.propTypes={},t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=a(n(0)),r=a(n(35)),i=a(n(34));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){return o.default.createElement(i.default,e,o.default.createElement("path",{d:"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"}))};(l=(0,r.default)(l)).displayName="NavigationExpandMore",l.muiName="SvgIcon",t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=a(n(0)),r=a(n(35)),i=a(n(34));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){return o.default.createElement(i.default,e,o.default.createElement("path",{d:"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"}))};(l=(0,r.default)(l)).displayName="NavigationExpandLess",l.muiName="SvgIcon",t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.extendChildren=function(e,t,n){return i.default.Children.map(e,function(e){if(!i.default.isValidElement(e))return e;var o="function"==typeof t?t(e):t,r="function"==typeof n?n(e):n||e.props.children;return i.default.cloneElement(e,o,r)})};var o,r=n(0),i=(o=r)&&o.__esModule?o:{default:o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=m(n(11)),r=m(n(10)),i=m(n(7)),a=m(n(3)),l=m(n(4)),u=m(n(6)),s=m(n(5)),c=m(n(8)),f=n(0),d=m(f),p=m(n(1)),h=m(n(14));function m(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){var e,n,o,r;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=o=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),o.state={offsetWidth:null},r=n,(0,u.default)(o,r)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.setRippleSize(),this.setTooltipPosition()}},{key:"componentWillReceiveProps",value:function(){this.setTooltipPosition()}},{key:"componentDidUpdate",value:function(){this.setRippleSize()}},{key:"setRippleSize",value:function(){var e=this.refs.ripple,t=this.refs.tooltip,n=parseInt(t.offsetWidth,10)/("center"===this.props.horizontalPosition?2:1),o=parseInt(t.offsetHeight,10),r=Math.ceil(2*Math.sqrt(Math.pow(o,2)+Math.pow(n,2)));this.props.show?(e.style.height=r+"px",e.style.width=r+"px"):(e.style.width="0px",e.style.height="0px")}},{key:"setTooltipPosition",value:function(){this.setState({offsetWidth:this.refs.tooltip.offsetWidth})}},{key:"render",value:function(){var e=this.props,t=(e.horizontalPosition,e.label),n=(e.show,e.touch,e.verticalPosition,(0,r.default)(e,["horizontalPosition","label","show","touch","verticalPosition"])),i=this.context.muiTheme.prepareStyles,a=function(e,t,n){var o=e.verticalPosition,r=e.horizontalPosition,i=e.touch?10:0,a=e.touch?-20:-10,l="bottom"===o?14+i:-14-i,u=t.muiTheme,s=u.baseTheme,c=u.zIndex,f=u.tooltip,d=u.borderRadius;return{root:{position:"absolute",fontFamily:s.fontFamily,fontSize:"10px",lineHeight:"22px",padding:"0 8px",zIndex:c.tooltip,color:f.color,overflow:"hidden",top:-1e4,borderRadius:d,userSelect:"none",opacity:0,right:"left"===r?12:null,left:"center"===r?(n.offsetWidth-48)/2*-1:"right"===r?12:null,transition:h.default.easeOut("0ms","top","450ms")+", "+h.default.easeOut("450ms","transform","0ms")+", "+h.default.easeOut("450ms","opacity","0ms")},label:{position:"relative",whiteSpace:"nowrap"},ripple:{position:"absolute",left:"center"===r?"50%":"left"===r?"100%":"0%",top:"bottom"===o?0:"100%",transform:"translate(-50%, -50%)",borderRadius:"50%",backgroundColor:"transparent",transition:h.default.easeOut("0ms","width","450ms")+", "+h.default.easeOut("0ms","height","450ms")+", "+h.default.easeOut("450ms","backgroundColor","0ms")},rootWhenShown:{top:"top"===o?a:36,opacity:f.opacity,transform:"translate(0px, "+l+"px)",transition:h.default.easeOut("0ms","top","0ms")+", "+h.default.easeOut("450ms","transform","0ms")+", "+h.default.easeOut("450ms","opacity","0ms")},rootWhenTouched:{fontSize:"14px",lineHeight:"32px",padding:"0 16px"},rippleWhenShown:{backgroundColor:f.rippleBackgroundColor,transition:h.default.easeOut("450ms","width","0ms")+", "+h.default.easeOut("450ms","height","0ms")+", "+h.default.easeOut("450ms","backgroundColor","0ms")}}}(this.props,this.context,this.state);return d.default.createElement("div",(0,o.default)({},n,{ref:"tooltip",style:i((0,c.default)(a.root,this.props.show&&a.rootWhenShown,this.props.touch&&a.rootWhenTouched,this.props.style))}),d.default.createElement("div",{ref:"ripple",style:i((0,c.default)(a.ripple,this.props.show&&a.rippleWhenShown))}),d.default.createElement("span",{style:i(a.label)},t))}}]),t}(f.Component);y.contextTypes={muiTheme:p.default.object.isRequired},y.propTypes={},t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=m(n(11)),r=m(n(10)),i=m(n(7)),a=m(n(3)),l=m(n(4)),u=m(n(6)),s=m(n(5)),c=m(n(8)),f=n(0),d=m(f),p=m(n(1)),h=m(n(14));function m(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){var e,n,o,r;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=o=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),o.state={hovered:!1},o.handleMouseLeave=function(e){void 0!==o.props.hoverColor&&o.setState({hovered:!1}),o.props.onMouseLeave&&o.props.onMouseLeave(e)},o.handleMouseEnter=function(e){void 0!==o.props.hoverColor&&o.setState({hovered:!0}),o.props.onMouseEnter&&o.props.onMouseEnter(e)},r=n,(0,u.default)(o,r)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.props,t=(e.hoverColor,e.onMouseLeave,e.onMouseEnter,e.style),n=(0,r.default)(e,["hoverColor","onMouseLeave","onMouseEnter","style"]),i=this.context.muiTheme.prepareStyles,a=function(e,t,n){var o=e.color,r=e.hoverColor,i=t.muiTheme.baseTheme,a=o||i.palette.textColor,l=r||a;return{root:{color:n.hovered?l:a,position:"relative",fontSize:i.spacing.iconSize,display:"inline-block",userSelect:"none",transition:h.default.easeOut()}}}(this.props,this.context,this.state);return d.default.createElement("span",(0,o.default)({},n,{onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,style:i((0,c.default)(a.root,t))}))}}]),t}(f.Component);y.muiName="FontIcon",y.defaultProps={onMouseEnter:function(){},onMouseLeave:function(){}},y.contextTypes={muiTheme:p.default.object.isRequired},y.propTypes={},t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=n(130),i=(o=r)&&o.__esModule?o:{default:o};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=g(n(11)),r=g(n(10)),i=g(n(7)),a=g(n(3)),l=g(n(4)),u=g(n(6)),s=g(n(5)),c=g(n(8)),f=n(0),d=g(f),p=g(n(1)),h=g(n(14)),m=(g(n(20)),g(n(43))),y=g(n(131)),v=g(n(129)),b=n(128);function g(e){return e&&e.__esModule?e:{default:e}}var x=function(e){function t(){var e,n,o,r;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=o=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),o.state={hovered:!1,isKeyboardFocused:!1,touch:!1,tooltipShown:!1},o.handleBlur=function(e){o.hideTooltip(),o.props.onBlur&&o.props.onBlur(e)},o.handleFocus=function(e){o.showTooltip(),o.props.onFocus&&o.props.onFocus(e)},o.handleMouseLeave=function(e){o.button.isKeyboardFocused()||o.hideTooltip(),o.setState({hovered:!1}),o.props.onMouseLeave&&o.props.onMouseLeave(e)},o.handleMouseOut=function(e){o.props.disabled&&o.hideTooltip(),o.props.onMouseOut&&o.props.onMouseOut(e)},o.handleMouseEnter=function(e){o.showTooltip(),o.state.touch||o.setState({hovered:!0}),o.props.onMouseEnter&&o.props.onMouseEnter(e)},o.handleTouchStart=function(e){o.setState({touch:!0}),o.props.onTouchStart&&o.props.onTouchStart(e)},o.handleKeyboardFocus=function(e,t){var n=o.props,r=n.disabled,i=n.onFocus,a=n.onBlur,l=n.onKeyboardFocus;t&&!r?(o.showTooltip(),i&&i(e)):(o.hideTooltip(),a&&a(e)),o.setState({isKeyboardFocused:t}),l&&l(e,t)},r=n,(0,u.default)(o,r)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentWillReceiveProps",value:function(e){e.disabled&&this.setState({hovered:!1})}},{key:"setKeyboardFocus",value:function(){this.button.setKeyboardFocus()}},{key:"showTooltip",value:function(){this.props.tooltip&&this.setState({tooltipShown:!0})}},{key:"hideTooltip",value:function(){this.props.tooltip&&this.setState({tooltipShown:!1})}},{key:"render",value:function(){var e,t,n=this,i=this.props,a=i.disabled,l=i.hoveredStyle,u=i.disableTouchRipple,s=i.children,f=i.iconClassName,p=i.style,g=i.tooltip,x=i.tooltipPosition,k=i.tooltipStyles,C=i.touch,w=i.iconStyle,_=(0,r.default)(i,["disabled","hoveredStyle","disableTouchRipple","children","iconClassName","style","tooltip","tooltipPosition","tooltipStyles","touch","iconStyle"]),S=void 0,T=(this.props,e=this.context,t=e.muiTheme.baseTheme,{root:{boxSizing:"border-box",overflow:"visible",transition:h.default.easeOut(),padding:t.spacing.iconSize/2,width:2*t.spacing.iconSize,height:2*t.spacing.iconSize,fontSize:0},tooltip:{boxSizing:"border-box"},disabled:{color:t.palette.disabledColor,fill:t.palette.disabledColor,cursor:"default"}}),E=x.split("-"),O=(this.state.hovered||this.state.isKeyboardFocused)&&!a,M=(0,c.default)(T.root,p,O?l:{}),P=g?d.default.createElement(v.default,{label:g,show:this.state.tooltipShown,touch:C,style:(0,c.default)(T.tooltip,k),verticalPosition:E[0],horizontalPosition:E[1]}):null;if(f){var I=w.iconHoverColor,R=(0,r.default)(w,["iconHoverColor"]);S=d.default.createElement(y.default,{className:f,hoverColor:a?null:I,style:(0,c.default)({},a&&T.disabled,R),color:this.context.muiTheme.baseTheme.palette.textColor},s)}var F=a?(0,c.default)({},w,T.disabled):w;return d.default.createElement(m.default,(0,o.default)({ref:function(e){return n.button=e}},_,{centerRipple:!0,disabled:a,onTouchStart:this.handleTouchStart,style:M,disableTouchRipple:u,onBlur:this.handleBlur,onFocus:this.handleFocus,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,onMouseOut:this.handleMouseOut,onKeyboardFocus:this.handleKeyboardFocus}),P,S,(0,b.extendChildren)(s,{style:F}))}}]),t}(f.Component);x.muiName="IconButton",x.defaultProps={disabled:!1,disableTouchRipple:!1,iconStyle:{},tooltipPosition:"bottom-center",touch:!1},x.contextTypes={muiTheme:p.default.object.isRequired},x.propTypes={},t.default=x},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=b(n(11)),r=b(n(10)),i=b(n(7)),a=b(n(3)),l=b(n(4)),u=b(n(6)),s=b(n(5)),c=b(n(8)),f=n(0),d=b(f),p=b(n(1)),h=b(n(12)),m=b(n(23)),y=b(n(42)),v=b(n(14));function b(e){return e&&e.__esModule?e:{default:e}}var g=function(e){function t(){return(0,a.default)(this,t),(0,u.default)(this,(t.__proto__||(0,i.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"shouldComponentUpdate",value:function(e){return!(0,m.default)(this.props,e)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.enterTimer),clearTimeout(this.leaveTimer)}},{key:"componentWillAppear",value:function(e){this.initializeAnimation(e)}},{key:"componentWillEnter",value:function(e){this.initializeAnimation(e)}},{key:"componentDidAppear",value:function(){this.animate()}},{key:"componentDidEnter",value:function(){this.animate()}},{key:"componentWillLeave",value:function(e){h.default.findDOMNode(this).style.opacity=0;var t=this.props.aborted?0:2e3;this.enterTimer=setTimeout(e,t)}},{key:"animate",value:function(){var e=h.default.findDOMNode(this).style,t=v.default.easeOut("2s","opacity")+", "+v.default.easeOut("1s","transform");y.default.set(e,"transition",t),y.default.set(e,"transform","scale(1)")}},{key:"initializeAnimation",value:function(e){var t=h.default.findDOMNode(this).style;t.opacity=this.props.opacity,y.default.set(t,"transform","scale(0)"),this.leaveTimer=setTimeout(e,0)}},{key:"render",value:function(){var e=this.props,t=(e.aborted,e.color),n=(e.opacity,e.style),i=(e.touchGenerated,(0,r.default)(e,["aborted","color","opacity","style","touchGenerated"])),a=this.context.muiTheme.prepareStyles,l=(0,c.default)({position:"absolute",top:0,left:0,height:"100%",width:"100%",borderRadius:"50%",backgroundColor:t},n);return d.default.createElement("div",(0,o.default)({},i,{style:a(l)}))}}]),t}(f.Component);g.defaultProps={opacity:.1,aborted:!1},g.contextTypes={muiTheme:p.default.object.isRequired},g.propTypes={},t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=b(n(93)),r=b(n(7)),i=b(n(3)),a=b(n(4)),l=b(n(6)),u=b(n(5)),s=b(n(82)),c=b(n(8)),f=n(0),d=b(f),p=b(n(1)),h=b(n(12)),m=b(n(74)),y=b(n(78)),v=b(n(133));function b(e){return e&&e.__esModule?e:{default:e}}var g=function(e){return(0,s.default)(e).slice(1)},x=function(e){function t(e,n){(0,i.default)(this,t);var a=(0,l.default)(this,(t.__proto__||(0,r.default)(t)).call(this,e,n));return a.handleMouseDown=function(e){0===e.button&&a.start(e,!1)},a.handleMouseUp=function(){a.end()},a.handleMouseLeave=function(){a.end()},a.handleTouchStart=function(e){e.stopPropagation(),a.props.abortOnScroll&&e.touches&&(a.startListeningForScrollAbort(e),a.startTime=Date.now()),a.start(e,!0)},a.handleTouchEnd=function(){a.end()},a.handleTouchMove=function(e){if(Math.abs(Date.now()-a.startTime)>300)a.stopListeningForScrollAbort();else{var t=Math.abs(e.touches[0].clientY-a.firstTouchY),n=Math.abs(e.touches[0].clientX-a.firstTouchX);if(t>6||n>6){var r=a.state.ripples,i=r[0],l=d.default.cloneElement(i,{aborted:!0});r=g(r),r=[].concat((0,o.default)(r),[l]),a.setState({ripples:r},function(){a.end()})}}},a.ignoreNextMouseDown=!1,a.state={hasRipples:!1,nextKey:0,ripples:[]},a}return(0,u.default)(t,e),(0,a.default)(t,[{key:"start",value:function(e,t){var n=this.context.muiTheme.ripple;if(!this.ignoreNextMouseDown||t){var r=this.state.ripples;r=[].concat((0,o.default)(r),[d.default.createElement(v.default,{key:this.state.nextKey,style:this.props.centerRipple?{}:this.getRippleStyle(e),color:this.props.color||n.color,opacity:this.props.opacity,touchGenerated:t})]),this.ignoreNextMouseDown=t,this.setState({hasRipples:!0,nextKey:this.state.nextKey+1,ripples:r})}else this.ignoreNextMouseDown=!1}},{key:"end",value:function(){var e=this.state.ripples;this.setState({ripples:g(e)}),this.props.abortOnScroll&&this.stopListeningForScrollAbort()}},{key:"startListeningForScrollAbort",value:function(e){this.firstTouchY=e.touches[0].clientY,this.firstTouchX=e.touches[0].clientX,document.body.addEventListener("touchmove",this.handleTouchMove)}},{key:"stopListeningForScrollAbort",value:function(){document.body.removeEventListener("touchmove",this.handleTouchMove)}},{key:"getRippleStyle",value:function(e){var t=h.default.findDOMNode(this),n=t.offsetHeight,o=t.offsetWidth,r=y.default.offset(t),i=e.touches&&e.touches.length,a=i?e.touches[0].pageX:e.pageX,l=i?e.touches[0].pageY:e.pageY,u=a-r.left,s=l-r.top,c=this.calcDiag(u,s),f=this.calcDiag(o-u,s),d=this.calcDiag(o-u,n-s),p=this.calcDiag(u,n-s),m=Math.max(c,f,d,p),v=2*m;return{directionInvariant:!0,height:v,width:v,top:s-m,left:u-m}}},{key:"calcDiag",value:function(e,t){return Math.sqrt(e*e+t*t)}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.style,o=this.state,r=o.hasRipples,i=o.ripples,a=this.context.muiTheme.prepareStyles,l=void 0;if(r){var u=(0,c.default)({height:"100%",width:"100%",position:"absolute",top:0,left:0,overflow:"hidden",pointerEvents:"none",zIndex:1},n);l=d.default.createElement(m.default,{style:a(u)},i)}return d.default.createElement("div",{onMouseUp:this.handleMouseUp,onMouseDown:this.handleMouseDown,onMouseLeave:this.handleMouseLeave,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd},l,t)}}]),t}(f.Component);x.defaultProps={abortOnScroll:!0},x.contextTypes={muiTheme:p.default.object.isRequired},x.propTypes={},t.default=x},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=v(n(11)),r=v(n(10)),i=v(n(7)),a=v(n(3)),l=v(n(4)),u=v(n(6)),s=v(n(5)),c=v(n(8)),f=n(0),d=v(f),p=v(n(1)),h=v(n(12)),m=v(n(42)),y=v(n(14));function v(e){return e&&e.__esModule?e:{default:e}}var b=function(e){function t(){return(0,a.default)(this,t),(0,u.default)(this,(t.__proto__||(0,i.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentWillUnmount",value:function(){clearTimeout(this.enterTimer),clearTimeout(this.leaveTimer)}},{key:"componentWillAppear",value:function(e){this.initializeAnimation(e)}},{key:"componentWillEnter",value:function(e){this.initializeAnimation(e)}},{key:"componentDidAppear",value:function(){this.animate()}},{key:"componentDidEnter",value:function(){this.animate()}},{key:"componentWillLeave",value:function(e){var t=h.default.findDOMNode(this).style;t.opacity="0",m.default.set(t,"transform","scale("+this.props.minScale+")"),this.leaveTimer=setTimeout(e,450)}},{key:"animate",value:function(){var e=h.default.findDOMNode(this).style;e.opacity="1",m.default.set(e,"transform","scale("+this.props.maxScale+")")}},{key:"initializeAnimation",value:function(e){var t=h.default.findDOMNode(this).style;t.opacity="0",m.default.set(t,"transform","scale(0)"),this.enterTimer=setTimeout(e,this.props.enterDelay)}},{key:"render",value:function(){var e=this.props,t=e.children,n=(e.enterDelay,e.maxScale,e.minScale,e.style),i=(0,r.default)(e,["children","enterDelay","maxScale","minScale","style"]),a=this.context.muiTheme.prepareStyles,l=(0,c.default)({},{position:"absolute",height:"100%",width:"100%",top:0,left:0,transition:y.default.easeOut(null,["transform","opacity"])},n);return d.default.createElement("div",(0,o.default)({},i,{style:a(l)}),t)}}]),t}(f.Component);b.defaultProps={enterDelay:0,maxScale:1,minScale:0},b.contextTypes={muiTheme:p.default.object.isRequired},b.propTypes={},t.default=b},function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=function(e){if(!e)return e;var t={};return o.Children.map(e,function(e){return e}).forEach(function(e){t[e.key]=e}),t},t.mergeChildMappings=function(e,t){function n(n){return t.hasOwnProperty(n)?t[n]:e[n]}e=e||{},t=t||{};var o={},r=[];for(var i in e)t.hasOwnProperty(i)?r.length&&(o[i]=r,r=[]):r.push(i);var a=void 0,l={};for(var u in t){if(o.hasOwnProperty(u))for(a=0;a<o[u].length;a++){var s=o[u][a];l[o[u][a]]=n(s)}l[u]=n(u)}for(a=0;a<r.length;a++)l[r[a]]=n(r[a]);return l};var o=n(0)},function(e,t){e.exports=function(){for(var e=arguments.length,t=[],n=0;n<e;n++)t[n]=arguments[n];if(0!==(t=t.filter(function(e){return null!=e})).length)return 1===t.length?t[0]:t.reduce(function(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=y(n(11)),r=y(n(10)),i=y(n(7)),a=y(n(3)),l=y(n(4)),u=y(n(6)),s=y(n(5)),c=y(n(8)),f=n(0),d=y(f),p=y(n(1)),h=y(n(74)),m=y(n(135));function y(e){return e&&e.__esModule?e:{default:e}}var v=function(e){function t(){return(0,a.default)(this,t),(0,u.default)(this,(t.__proto__||(0,i.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.childStyle,i=e.enterDelay,a=e.maxScale,l=e.minScale,u=e.style,s=(0,r.default)(e,["children","childStyle","enterDelay","maxScale","minScale","style"]),f=this.context.muiTheme.prepareStyles,p=(0,c.default)({},{position:"relative",height:"100%"},u),y=d.default.Children.map(t,function(e){return d.default.createElement(m.default,{key:e.key,enterDelay:i,maxScale:a,minScale:l,style:n},e)});return d.default.createElement(h.default,(0,o.default)({},s,{style:f(p),component:"div"}),y)}}]),t}(f.Component);v.defaultProps={enterDelay:0},v.contextTypes={muiTheme:p.default.object.isRequired},v.propTypes={},t.default=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=v(n(7)),r=v(n(3)),i=v(n(4)),a=v(n(6)),l=v(n(5)),u=v(n(8)),s=n(0),c=v(s),f=v(n(1)),d=v(n(12)),p=v(n(23)),h=v(n(42)),m=v(n(14)),y=v(n(138));function v(e){return e&&e.__esModule?e:{default:e}}var b=750,g=function(e){function t(){var e,n,i,l;(0,r.default)(this,t);for(var u=arguments.length,s=Array(u),c=0;c<u;c++)s[c]=arguments[c];return n=i=(0,a.default)(this,(e=t.__proto__||(0,o.default)(t)).call.apply(e,[this].concat(s))),i.pulsate=function(){var e=d.default.findDOMNode(i.refs.innerCircle);if(e){var t="scale(1)"===(e.style.transform||"scale(1)")?"scale(0.85)":"scale(1)";h.default.set(e.style,"transform",t),i.timeout=setTimeout(i.pulsate,b)}},l=n,(0,a.default)(i,l)}return(0,l.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){this.props.show&&(this.setRippleSize(),this.pulsate())}},{key:"shouldComponentUpdate",value:function(e,t){return!(0,p.default)(this.props,e)||!(0,p.default)(this.state,t)}},{key:"componentDidUpdate",value:function(){this.props.show?(this.setRippleSize(),this.pulsate()):this.timeout&&clearTimeout(this.timeout)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeout)}},{key:"getRippleElement",value:function(e){var t=e.color,n=e.innerStyle,o=e.opacity,r=this.context.muiTheme,i=r.prepareStyles,a=r.ripple,l=(0,u.default)({position:"absolute",height:"100%",width:"100%",borderRadius:"50%",opacity:o||.16,backgroundColor:t||a.color,transition:m.default.easeOut(b+"ms","transform",null,m.default.easeInOutFunction)},n);return c.default.createElement("div",{ref:"innerCircle",style:i((0,u.default)({},l))})}},{key:"setRippleSize",value:function(){var e=d.default.findDOMNode(this.refs.innerCircle),t=e.offsetHeight,n=e.offsetWidth,o=Math.max(t,n),r=0;-1!==e.style.top.indexOf("px",e.style.top.length-2)&&(r=parseInt(e.style.top)),e.style.height=o+"px",e.style.top=t/2-o/2+r+"px"}},{key:"render",value:function(){var e=this.props,t=e.show,n=e.style,o=(0,u.default)({height:"100%",width:"100%",position:"absolute",top:0,left:0},n),r=t?this.getRippleElement(this.props):null;return c.default.createElement(y.default,{maxScale:.85,style:o},r)}}]),t}(s.Component);g.contextTypes={muiTheme:f.default.object.isRequired},g.propTypes={},t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=w(n(10)),r=w(n(11)),i=w(n(7)),a=w(n(3)),l=w(n(4)),u=w(n(6)),s=w(n(5)),c=w(n(8)),f=n(0),d=w(f),p=w(n(1)),h=w(n(12)),m=w(n(23)),y=n(38),v=w(n(14)),b=w(n(43)),g=w(n(41)),x=w(n(127)),k=w(n(126)),C=w(n(125));function w(e){return e&&e.__esModule?e:{default:e}}var _=function(e){function t(){var e,n,o,l;(0,a.default)(this,t);for(var s=arguments.length,c=Array(s),f=0;f<s;f++)c[f]=arguments[f];return n=o=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(c))),o.state={hovered:!1,isKeyboardFocused:!1,open:!1,rightIconButtonHovered:!1,rightIconButtonKeyboardFocused:!1,touch:!1},o.handleKeyboardFocus=function(e,t){o.setState({isKeyboardFocused:t}),o.props.onKeyboardFocus(e,t)},o.handleMouseEnter=function(e){o.state.touch||o.setState({hovered:!0}),o.props.onMouseEnter(e)},o.handleMouseLeave=function(e){o.setState({hovered:!1}),o.props.onMouseLeave(e)},o.handleClick=function(e){o.props.onClick&&o.props.onClick(e),o.props.primaryTogglesNestedList&&o.handleNestedListToggle(e)},o.handleNestedListToggle=function(e){o.props.leftCheckbox&&e.preventDefault(),e.stopPropagation(),null===o.props.open?o.setState({open:!o.state.open},function(){o.props.onNestedListToggle(o)}):o.props.onNestedListToggle((0,r.default)({},o,{state:{open:!o.state.open}}))},o.handleRightIconButtonKeyboardFocus=function(e,t){t&&o.setState({isKeyboardFocused:!1,rightIconButtonKeyboardFocused:t});var n=o.props.rightIconButton;n&&n.props.onKeyboardFocus&&n.props.onKeyboardFocus(e,t)},o.handleRightIconButtonMouseLeave=function(e){var t=o.props.rightIconButton;o.setState({rightIconButtonHovered:!1}),t&&t.props.onMouseLeave&&t.props.onMouseLeave(e)},o.handleRightIconButtonMouseEnter=function(e){var t=o.props.rightIconButton;o.setState({rightIconButtonHovered:!0}),t&&t.props.onMouseEnter&&t.props.onMouseEnter(e)},o.handleRightIconButtonMouseUp=function(e){var t=o.props.rightIconButton;e.stopPropagation(),t&&t.props.onMouseUp&&t.props.onMouseUp(e)},o.handleRightIconButtonClick=function(e){var t=o.props.rightIconButton;e.stopPropagation(),t&&t.props.onClick&&t.props.onClick(e)},o.handleTouchStart=function(e){o.setState({touch:!0}),o.props.onTouchStart(e)},o.handleTouchEnd=function(e){o.setState({touch:!0}),o.props.onTouchEnd(e)},l=n,(0,u.default)(o,l)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentWillMount",value:function(){this.setState({open:null===this.props.open?!0===this.props.initiallyOpen:this.props.open})}},{key:"componentWillReceiveProps",value:function(e){null!==e.open&&this.setState({open:e.open}),e.disabled&&this.state.hovered&&this.setState({hovered:!1})}},{key:"shouldComponentUpdate",value:function(e,t,n){return!(0,m.default)(this.props,e)||!(0,m.default)(this.state,t)||!(0,m.default)(this.context,n)}},{key:"applyFocusState",value:function(e){if(this.button){var t=h.default.findDOMNode(this.button);switch(e){case"none":t.blur();break;case"focused":t.focus();break;case"keyboard-focused":this.button.setKeyboardFocus(),t.focus()}}}},{key:"createDisabledElement",value:function(e,t,n){var o=this.props,i=o.innerDivStyle,a=o.style,l=(0,c.default)({},e.root,e.innerDiv,i,a);return d.default.createElement("div",(0,r.default)({},n,{style:this.context.muiTheme.prepareStyles(l)}),t)}},{key:"createLabelElement",value:function(e,t,n){var o=this.props,i=o.innerDivStyle,a=o.style,l=(0,c.default)({},e.root,e.innerDiv,i,e.label,a);return d.default.createElement("label",(0,r.default)({},n,{style:this.context.muiTheme.prepareStyles(l)}),t)}},{key:"createTextElement",value:function(e,t,n){var o=this.context.muiTheme.prepareStyles;if(d.default.isValidElement(t)){var r=(0,c.default)({},e,t.props.style);return"string"==typeof t.type&&(r=o(r)),d.default.cloneElement(t,{key:n,style:r})}return d.default.createElement("div",{key:n,style:o(e)},t)}},{key:"pushElement",value:function(e,t,n,o){if(t){var i=(0,c.default)({},n,t.props.style);e.push(d.default.cloneElement(t,(0,r.default)({key:e.length,style:i},o)))}}},{key:"render",value:function(){var e=this,t=this.props,n=t.autoGenerateNestedIndicator,i=t.children,a=t.containerElement,l=t.disabled,u=t.disableKeyboardFocus,s=(t.hoverColor,t.initiallyOpen,t.innerDivStyle),f=(t.insetChildren,t.leftAvatar),p=t.leftCheckbox,h=t.leftIcon,m=t.nestedItems,w=t.nestedLevel,_=t.nestedListStyle,S=(t.onKeyboardFocus,t.isKeyboardFocused,t.onMouseEnter,t.onMouseLeave,t.onNestedListToggle,t.onTouchStart,t.onClick,t.rightAvatar),T=t.rightIcon,E=t.rightIconButton,O=t.rightToggle,M=t.primaryText,P=t.primaryTogglesNestedList,I=t.secondaryText,R=(t.secondaryTextLines,t.style),F=(0,o.default)(t,["autoGenerateNestedIndicator","children","containerElement","disabled","disableKeyboardFocus","hoverColor","initiallyOpen","innerDivStyle","insetChildren","leftAvatar","leftCheckbox","leftIcon","nestedItems","nestedLevel","nestedListStyle","onKeyboardFocus","isKeyboardFocused","onMouseEnter","onMouseLeave","onNestedListToggle","onTouchStart","onClick","rightAvatar","rightIcon","rightIconButton","rightToggle","primaryText","primaryTogglesNestedList","secondaryText","secondaryTextLines","style"]),j=this.context.muiTheme.prepareStyles,A=function(e,t,n){var o=e.autoGenerateNestedIndicator,r=e.insetChildren,i=e.leftAvatar,a=e.leftCheckbox,l=e.leftIcon,u=e.nestedItems,s=e.nestedLevel,c=e.rightAvatar,f=e.rightIcon,d=e.rightIconButton,p=e.rightToggle,h=e.secondaryText,m=e.secondaryTextLines,b=t.muiTheme,g=b.listItem,x=b.baseTheme.palette.textColor,k=e.hoverColor||(0,y.fade)(x,.1),C=!h&&(i||c),w=!h&&!(i||c),_=h&&1===m,S=h&&m>1;return{root:{backgroundColor:!(void 0!==e.isKeyboardFocused?e:n).isKeyboardFocused&&!n.hovered||n.rightIconButtonHovered||n.rightIconButtonKeyboardFocused?null:k,color:x,display:"block",fontSize:16,lineHeight:"16px",position:"relative",transition:v.default.easeOut()},innerDiv:{marginLeft:s*g.nestedLevelDepth,paddingLeft:l||i||a||r?72:16,paddingRight:f||c||d||u.length&&o?56:p?72:16,paddingBottom:C?20:16,paddingTop:w||S?16:20,position:"relative"},icons:{height:24,width:24,display:"block",position:"absolute",top:_?12:C?4:0,margin:12},leftIcon:{left:4},rightIcon:{right:4},avatars:{position:"absolute",top:C?8:16},label:{cursor:"pointer"},leftAvatar:{left:16},rightAvatar:{right:16},leftCheckbox:{position:"absolute",display:"block",width:24,top:_?24:C?16:12,left:16},primaryText:{},rightIconButton:{position:"absolute",display:"block",top:_?12:C?4:0,right:4},rightToggle:{position:"absolute",display:"block",width:54,top:_?25:C?17:13,right:8},secondaryText:{fontSize:14,lineHeight:S?"18px":"16px",height:S?36:16,margin:0,marginTop:4,color:g.secondaryTextColor,overflow:"hidden",textOverflow:"ellipsis",whiteSpace:S?null:"nowrap",display:S?"-webkit-box":null,WebkitLineClamp:S?2:null,WebkitBoxOrient:S?"vertical":null}}}(this.props,this.context,this.state),D=[i];if(h){var L={color:h.props.color||this.context.muiTheme.listItem.leftIconColor};this.pushElement(D,h,(0,c.default)({},A.icons,A.leftIcon),L)}if(T){var N={color:T.props.color||this.context.muiTheme.listItem.rightIconColor};this.pushElement(D,T,(0,c.default)({},A.icons,A.rightIcon),N)}f&&this.pushElement(D,f,(0,c.default)({},A.avatars,A.leftAvatar)),S&&this.pushElement(D,S,(0,c.default)({},A.avatars,A.rightAvatar)),p&&this.pushElement(D,p,(0,c.default)({},A.leftCheckbox));var W=m.length&&n&&!(S||T||E||O);if(E||W){var z=E,B={onKeyboardFocus:this.handleRightIconButtonKeyboardFocus,onMouseEnter:this.handleRightIconButtonMouseEnter,onMouseLeave:this.handleRightIconButtonMouseLeave,onClick:this.handleRightIconButtonClick,onMouseDown:this.handleRightIconButtonMouseUp,onMouseUp:this.handleRightIconButtonMouseUp};W&&(z=this.state.open?d.default.createElement(g.default,null,d.default.createElement(x.default,null)):d.default.createElement(g.default,null,d.default.createElement(k.default,null)),B.onClick=this.handleNestedListToggle),this.pushElement(D,z,(0,c.default)({},A.rightIconButton),B)}if(O&&this.pushElement(D,O,(0,c.default)({},A.rightToggle)),M){var U=this.createTextElement(A.primaryText,M,"primaryText");D.push(U)}if(I){var H=this.createTextElement(A.secondaryText,I,"secondaryText");D.push(H)}var K=m.length?d.default.createElement(C.default,{nestedLevel:w,open:this.state.open,style:_},m):void 0,V=!P&&(p||O);return d.default.createElement("div",null,V?this.createLabelElement(A,D,F):l?this.createDisabledElement(A,D,F):d.default.createElement(b.default,(0,r.default)({containerElement:a},F,{disableKeyboardFocus:u||this.state.rightIconButtonKeyboardFocused,onKeyboardFocus:this.handleKeyboardFocus,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd,onClick:this.handleClick,disabled:l,ref:function(t){return e.button=t},style:(0,c.default)({},A.root,R)}),d.default.createElement("div",{style:j((0,c.default)(A.innerDiv,s))},D)),K)}}]),t}(f.Component);_.muiName="ListItem",_.defaultProps={autoGenerateNestedIndicator:!0,containerElement:"span",disableKeyboardFocus:!1,disabled:!1,initiallyOpen:!1,insetChildren:!1,nestedItems:[],nestedLevel:0,onKeyboardFocus:function(){},onMouseEnter:function(){},onMouseLeave:function(){},onNestedListToggle:function(){},onTouchEnd:function(){},onTouchStart:function(){},open:null,primaryTogglesNestedList:!1,secondaryTextLines:1},_.contextTypes={muiTheme:p.default.object.isRequired},_.propTypes={},t.default=_},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=m(n(11)),r=m(n(10)),i=m(n(7)),a=m(n(3)),l=m(n(4)),u=m(n(6)),s=m(n(5)),c=m(n(8)),f=n(0),d=m(f),p=m(n(1)),h=m(n(14));function m(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){var e,n,o,r;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=o=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),o.state={hovered:!1},o.handleMouseLeave=function(e){o.setState({hovered:!1}),o.props.onMouseLeave(e)},o.handleMouseEnter=function(e){o.setState({hovered:!0}),o.props.onMouseEnter(e)},r=n,(0,u.default)(o,r)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.color,i=e.hoverColor,a=(e.onMouseEnter,e.onMouseLeave,e.style),l=e.viewBox,u=(0,r.default)(e,["children","color","hoverColor","onMouseEnter","onMouseLeave","style","viewBox"]),s=this.context.muiTheme,f=s.svgIcon,p=s.prepareStyles,m=n||"currentColor",y=i||m,v=(0,c.default)({display:"inline-block",color:f.color,fill:this.state.hovered?y:m,height:24,width:24,userSelect:"none",transition:h.default.easeOut()},a);return d.default.createElement("svg",(0,o.default)({},u,{onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave,style:p(v),viewBox:l}),t)}}]),t}(f.Component);y.muiName="SvgIcon",y.defaultProps={onMouseEnter:function(){},onMouseLeave:function(){},viewBox:"0 0 24 24"},y.contextTypes={muiTheme:p.default.object.isRequired},y.propTypes={},t.default=y},function(e,t,n){"use strict";t.__esModule=!0;t.default=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":void 0}},function(e,t,n){"use strict";t.__esModule=!0;t.default=function(e,t){return function(n){return n[e]=t,n}}},function(e,t,n){"use strict";t.__esModule=!0;var o=n(0);r(n(76)),r(n(75));function r(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return function(t){var n=(0,o.createFactory)(t);return function(t){function o(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,t.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,t),o.prototype.shouldComponentUpdate=function(t){return e(this.props,t)},o.prototype.render=function(){return n(this.props)},o}(o.Component)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=a(n(0)),r=a(n(35)),i=a(n(34));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){return o.default.createElement(i.default,e,o.default.createElement("path",{d:"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"}))};(l=(0,r.default)(l)).displayName="NavigationCheck",l.muiName="SvgIcon",t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=h(n(7)),r=h(n(3)),i=h(n(4)),a=h(n(6)),l=h(n(5)),u=h(n(8)),s=h(n(14)),c=n(0),f=h(c),d=h(n(1)),p=(h(n(20)),h(n(44)));function h(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function t(){var e,n,i,l;(0,r.default)(this,t);for(var u=arguments.length,s=Array(u),c=0;c<u;c++)s[c]=arguments[c];return n=i=(0,a.default)(this,(e=t.__proto__||(0,o.default)(t)).call.apply(e,[this].concat(s))),i.state={open:!1},l=n,(0,a.default)(i,l)}return(0,l.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){this.setState({open:!0})}},{key:"componentWillReceiveProps",value:function(e){this.setState({open:e.open})}},{key:"render",value:function(){var e,t,n,o,r,i,a,l=this.props,c=l.className,d=l.style,h=l.zDepth,m=this.context.muiTheme.prepareStyles,y=(e=this.props,t=this.context,n=this.state,o=e.targetOrigin,r=n.open,i=t.muiTheme,a=o.horizontal.replace("middle","vertical"),{root:{position:"fixed",zIndex:i.zIndex.popover,opacity:r?1:0,transform:r?"scale(1, 1)":"scale(0, 0)",transformOrigin:a+" "+o.vertical,transition:s.default.easeOut("250ms",["transform","opacity"]),maxHeight:"100%"},horizontal:{maxHeight:"100%",overflowY:"auto",transform:r?"scaleX(1)":"scaleX(0)",opacity:r?1:0,transformOrigin:a+" "+o.vertical,transition:s.default.easeOut("250ms",["transform","opacity"])},vertical:{opacity:r?1:0,transform:r?"scaleY(1)":"scaleY(0)",transformOrigin:a+" "+o.vertical,transition:s.default.easeOut("500ms",["transform","opacity"])}});return f.default.createElement(p.default,{style:(0,u.default)(y.root,d),zDepth:h,className:c},f.default.createElement("div",{style:m(y.horizontal)},f.default.createElement("div",{style:m(y.vertical)},this.props.children)))}}]),t}(c.Component);m.defaultProps={style:{},zDepth:1},m.contextTypes={muiTheme:d.default.object.isRequired},m.propTypes={},t.default=m},function(e,t,n){(function(t){var n="Expected a function",o=NaN,r="[object Symbol]",i=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,u=/^0o[0-7]+$/i,s=parseInt,c="object"==typeof t&&t&&t.Object===Object&&t,f="object"==typeof self&&self&&self.Object===Object&&self,d=c||f||Function("return this")(),p=Object.prototype.toString,h=Math.max,m=Math.min,y=function(){return d.Date.now()};function v(e,t,o){var r,i,a,l,u,s,c=0,f=!1,d=!1,p=!0;if("function"!=typeof e)throw new TypeError(n);function v(t){var n=r,o=i;return r=i=void 0,c=t,l=e.apply(o,n)}function x(e){var n=e-s;return void 0===s||n>=t||n<0||d&&e-c>=a}function k(){var e=y();if(x(e))return C(e);u=setTimeout(k,function(e){var n=t-(e-s);return d?m(n,a-(e-c)):n}(e))}function C(e){return u=void 0,p&&r?v(e):(r=i=void 0,l)}function w(){var e=y(),n=x(e);if(r=arguments,i=this,s=e,n){if(void 0===u)return function(e){return c=e,u=setTimeout(k,t),f?v(e):l}(s);if(d)return u=setTimeout(k,t),v(s)}return void 0===u&&(u=setTimeout(k,t)),l}return t=g(t)||0,b(o)&&(f=!!o.leading,a=(d="maxWait"in o)?h(g(o.maxWait)||0,t):a,p="trailing"in o?!!o.trailing:p),w.cancel=function(){void 0!==u&&clearTimeout(u),c=0,r=s=i=u=void 0},w.flush=function(){return void 0===u?l:C(y())},w}function b(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function g(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&p.call(e)==r}(e))return o;if(b(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=b(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(i,"");var n=l.test(e);return n||u.test(e)?s(e.slice(2),n?2:8):a.test(e)?o:+e}e.exports=function(e,t,o){var r=!0,i=!0;if("function"!=typeof e)throw new TypeError(n);return b(o)&&(r="leading"in o?!!o.leading:r,i="trailing"in o?!!o.trailing:i),v(e,t,{leading:r,maxWait:t,trailing:i})}}).call(this,n(91))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=m(n(11)),r=m(n(10)),i=m(n(7)),a=m(n(3)),l=m(n(4)),u=m(n(6)),s=m(n(5)),c=m(n(8)),f=n(0),d=m(f),p=m(n(1)),h=(m(n(20)),m(n(14)));function m(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){return(0,a.default)(this,t),(0,u.default)(this,(t.__proto__||(0,i.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=(e.circle,e.rounded,e.style),i=(e.transitionEnabled,e.zDepth,(0,r.default)(e,["children","circle","rounded","style","transitionEnabled","zDepth"])),a=this.context.muiTheme.prepareStyles,l=function(e,t){var n=e.rounded,o=e.circle,r=e.transitionEnabled,i=e.zDepth,a=t.muiTheme,l=a.baseTheme,u=a.paper,s=a.borderRadius;return{root:{color:u.color,backgroundColor:u.backgroundColor,transition:r&&h.default.easeOut(),boxSizing:"border-box",fontFamily:l.fontFamily,WebkitTapHighlightColor:"rgba(0,0,0,0)",boxShadow:u.zDepthShadows[i-1],borderRadius:o?"50%":n?s:"0px"}}}(this.props,this.context);return d.default.createElement("div",(0,o.default)({},i,{style:a((0,c.default)(l.root,n))}),t)}}]),t}(f.Component);y.defaultProps={circle:!1,rounded:!0,transitionEnabled:!0,zDepth:1},y.contextTypes={muiTheme:p.default.object.isRequired},y.propTypes={},t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=d(n(7)),r=d(n(3)),i=d(n(4)),a=d(n(6)),l=d(n(5)),u=n(0),s=d(n(1)),c=n(12),f=d(n(78));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(){var e,n,i,l;(0,r.default)(this,t);for(var u=arguments.length,s=Array(u),c=0;c<u;c++)s[c]=arguments[c];return n=i=(0,a.default)(this,(e=t.__proto__||(0,o.default)(t)).call.apply(e,[this].concat(s))),i.onClickAway=function(e){if(!e.defaultPrevented&&i.props.componentClickAway&&i.props.open){var t=i.layer;(e.target!==t&&e.target===window||document.documentElement.contains(e.target)&&!f.default.isDescendant(t,e.target))&&i.props.componentClickAway(e)}},l=n,(0,a.default)(i,l)}return(0,l.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){this.renderLayer()}},{key:"componentDidUpdate",value:function(){this.renderLayer()}},{key:"componentWillUnmount",value:function(){this.unrenderLayer()}},{key:"getLayer",value:function(){return this.layer}},{key:"unrenderLayer",value:function(){this.layer&&(this.props.useLayerForClickAway?(this.layer.style.position="relative",this.layer.removeEventListener("click",this.onClickAway)):window.removeEventListener("click",this.onClickAway),(0,c.unmountComponentAtNode)(this.layer),document.body.removeChild(this.layer),this.layer=null)}},{key:"renderLayer",value:function(){var e=this,t=this.props,n=t.open,o=t.render;if(n){this.layer||(this.layer=document.createElement("div"),document.body.appendChild(this.layer),this.props.useLayerForClickAway?(this.layer.addEventListener("click",this.onClickAway),this.layer.style.position="fixed",this.layer.style.top=0,this.layer.style.bottom=0,this.layer.style.left=0,this.layer.style.right=0,this.layer.style.zIndex=this.context.muiTheme.zIndex.layer):setTimeout(function(){window.addEventListener("click",e.onClickAway)},0));var r=o();this.layerElement=(0,c.unstable_renderSubtreeIntoContainer)(this,r,this.layer)}else this.unrenderLayer()}},{key:"render",value:function(){return null}}]),t}(u.Component);p.defaultProps={useLayerForClickAway:!0},p.contextTypes={muiTheme:s.default.object.isRequired},p.propTypes={},t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.passiveOption=void 0;var o,r=n(102),i=(o=r)&&o.__esModule?o:{default:o};var a;t.passiveOption=(a=null,function(){if(null!==a)return a;var e,t,n,o=!1;try{window.addEventListener("test",null,(e={},t="passive",n={get:function(){o=!0}},(0,i.default)(e,t,n)))}catch(e){}return a=o,o}());t.default={}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=m(n(7)),r=m(n(3)),i=m(n(4)),a=m(n(6)),l=m(n(5)),u=m(n(58)),s=m(n(86)),c=m(n(10)),f=m(n(84));t.withOptions=function(e,t){return{handler:e,options:v(t)}};var d=m(n(0)),p=(m(n(1)),m(n(66))),h=(m(n(2)),n(150));function m(e){return e&&e.__esModule?e:{default:e}}var y={capture:!1,passive:!1};function v(e){return(0,f.default)({},y,e)}function b(e,t,n){var o=[e,t];return o.push(h.passiveOption?n:n.capture),o}function g(e,t,n,o){e.addEventListener.apply(e,b(t,n,o))}function x(e,t,n,o){e.removeEventListener.apply(e,b(t,n,o))}var k=function(e){function t(){return(0,r.default)(this,t),(0,a.default)(this,(t.__proto__||(0,o.default)(t)).apply(this,arguments))}return(0,l.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){this.addListeners()}},{key:"shouldComponentUpdate",value:function(e){return!(0,p.default)(this.props,e)}},{key:"componentWillUpdate",value:function(){this.removeListeners()}},{key:"componentDidUpdate",value:function(){this.addListeners()}},{key:"componentWillUnmount",value:function(){this.removeListeners()}},{key:"addListeners",value:function(){this.applyListeners(g)}},{key:"removeListeners",value:function(){this.applyListeners(x)}},{key:"applyListeners",value:function(e){var t=this.props.target;if(t){var n=t;"string"==typeof t&&(n=window[t]),function(e,t){e.children,e.target;var n=(0,c.default)(e,["children","target"]);(0,s.default)(n).forEach(function(e){if("on"===e.substring(0,2)){var o=n[e],r=void 0===o?"undefined":(0,u.default)(o),i="object"===r;if(i||"function"===r){var a="capture"===e.substr(-7).toLowerCase(),l=e.substring(2).toLowerCase();l=a?l.substring(0,l.length-7):l,i?t(l,o.handler,o.options):t(l,o,v({capture:a}))}}})}(this.props,e.bind(null,n))}}},{key:"render",value:function(){return this.props.children||null}}]),t}(d.default.Component);k.propTypes={},t.default=k},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HotKeyHolder=void 0;var o=i(n(3)),r=i(n(4));function i(e){return e&&e.__esModule?e:{default:e}}t.HotKeyHolder=function(){function e(){var t=this;(0,o.default)(this,e),this.clear=function(){t.timerId=null,t.lastKeys=null}}return(0,r.default)(e,[{key:"append",value:function(e){return clearTimeout(this.timerId),this.timerId=setTimeout(this.clear,500),this.lastKeys=(this.lastKeys||"")+e}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=u(n(11)),r=u(n(10)),i=u(n(8)),a=u(n(0)),l=u(n(1));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e,t){var n=e.children,l=e.inset,u=e.style,s=(0,r.default)(e,["children","inset","style"]),c=t.muiTheme,f=c.prepareStyles,d=c.subheader,p={root:{boxSizing:"border-box",color:d.color,fontSize:14,fontWeight:d.fontWeight,lineHeight:"48px",paddingLeft:l?72:16,width:"100%"}};return a.default.createElement("div",(0,o.default)({},s,{style:f((0,i.default)(p.root,u))}),n)};s.muiName="Subheader",s.propTypes={},s.defaultProps={inset:!1},s.contextTypes={muiTheme:l.default.object.isRequired},t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=n(153),i=(o=r)&&o.__esModule?o:{default:o};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=f(n(7)),r=f(n(3)),i=f(n(4)),a=f(n(6)),l=f(n(5)),u=n(0),s=(f(n(1)),f(n(12))),c=f(n(45));function f(e){return e&&e.__esModule?e:{default:e}}var d=function e(t,n){return null!==n&&(t===n||e(t,n.parentNode))},p=["mouseup","touchend"],h=function(e){return p.forEach(function(t){return c.default.on(document,t,e)})},m=function(e){return p.forEach(function(t){return c.default.off(document,t,e)})},y=function(e){function t(){var e,n,i,l;(0,r.default)(this,t);for(var u=arguments.length,c=Array(u),f=0;f<u;f++)c[f]=arguments[f];return n=i=(0,a.default)(this,(e=t.__proto__||(0,o.default)(t)).call.apply(e,[this].concat(c))),i.handleClickAway=function(e){if(!e.defaultPrevented&&i.isCurrentlyMounted){var t=s.default.findDOMNode(i);document.documentElement.contains(e.target)&&!d(t,e.target)&&i.props.onClickAway(e)}},l=n,(0,a.default)(i,l)}return(0,l.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){this.isCurrentlyMounted=!0,this.props.onClickAway&&h(this.handleClickAway)}},{key:"componentDidUpdate",value:function(e){e.onClickAway!==this.props.onClickAway&&(m(this.handleClickAway),this.props.onClickAway&&h(this.handleClickAway))}},{key:"componentWillUnmount",value:function(){this.isCurrentlyMounted=!1,m(this.handleClickAway)}},{key:"render",value:function(){return this.props.children}}]),t}(u.Component);y.propTypes={},t.default=y},function(e,t,n){"use strict";var o=n(30),r=n(49),i=n(39),a=n(33),l=n(97),u=Object.assign;e.exports=!u||n(26)(function(){var e={},t={},n=Symbol(),o="abcdefghijklmnopqrst";return e[n]=7,o.split("").forEach(function(e){t[e]=e}),7!=u({},e)[n]||Object.keys(u({},t)).join("")!=o})?function(e,t){for(var n=a(e),u=arguments.length,s=1,c=r.f,f=i.f;u>s;)for(var d,p=l(arguments[s++]),h=c?o(p).concat(c(p)):o(p),m=h.length,y=0;m>y;)f.call(p,d=h[y++])&&(n[d]=p[d]);return n}:u},function(e,t,n){var o=n(18);o(o.S+o.F,"Object",{assign:n(156)})},function(e,t,n){n(157),e.exports=n(13).Object.assign},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=b(n(11)),r=b(n(10)),i=b(n(7)),a=b(n(3)),l=b(n(4)),u=b(n(6)),s=b(n(5)),c=b(n(8)),f=n(0),d=b(f),p=b(n(1)),h=b(n(12)),m=b(n(45)),y=(b(n(20)),b(n(83))),v=b(n(79));b(n(2));function b(e){return e&&e.__esModule?e:{default:e}}var g=function(e){function t(){var e,n,o,r;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=o=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),o.state={menuInitiallyKeyboardFocused:!1,open:!1},o.handleItemClick=function(e,t){if(0!==o.props.clickCloseDelay&&!t.props.hasOwnProperty("menuItems")){var n=m.default.isKeyboard(e);o.timerCloseId=setTimeout(function(){o.close(n?"enter":"itemTap",n)},o.props.clickCloseDelay)}o.props.onItemClick(e,t)},o.handleRequestClose=function(e){o.close(e)},o.handleEscKeyDownMenu=function(e){o.close("escape",e)},r=n,(0,u.default)(o,r)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentWillReceiveProps",value:function(e){null!=e.open&&this.setState({open:e.open,anchorEl:this.refs.iconMenuContainer})}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timerCloseId)}},{key:"isOpen",value:function(){return this.state.open}},{key:"close",value:function(e,t){var n=this;this.state.open&&(null!==this.props.open?this.props.onRequestChange(!1,e):this.setState({open:!1},function(){if(t){var e=n.refs.iconButton;h.default.findDOMNode(e).focus(),e.setKeyboardFocus()}}))}},{key:"open",value:function(e,t){if(null!==this.props.open)return this.props.onRequestChange(!0,e),this.setState({menuInitiallyKeyboardFocused:m.default.isKeyboard(t),anchorEl:t.currentTarget});this.setState({open:!0,menuInitiallyKeyboardFocused:m.default.isKeyboard(t),anchorEl:t.currentTarget})}},{key:"render",value:function(){var e=this,t=this.props,n=t.anchorOrigin,i=t.className,a=t.animated,l=t.animation,u=t.iconButtonElement,s=t.iconStyle,f=(t.onItemClick,t.onKeyboardFocus),p=t.onMouseDown,h=t.onMouseLeave,b=t.onMouseEnter,g=t.onMouseUp,x=(t.onRequestChange,t.onClick),k=t.listStyle,C=t.menuStyle,w=t.style,_=t.targetOrigin,S=(t.clickCloseDelay,t.useLayerForClickAway),T=(0,r.default)(t,["anchorOrigin","className","animated","animation","iconButtonElement","iconStyle","onItemClick","onKeyboardFocus","onMouseDown","onMouseLeave","onMouseEnter","onMouseUp","onRequestChange","onClick","listStyle","menuStyle","style","targetOrigin","clickCloseDelay","useLayerForClickAway"]),E=this.context.muiTheme.prepareStyles,O=this.state,M=O.open,P=O.anchorEl,I={display:"inline-block",position:"relative"},R={position:"relative"},F=(0,c.default)(I,w),j=(0,c.default)(R,C),A={onKeyboardFocus:f,onClick:function(t){e.open(m.default.isKeyboard(t)?"keyboard":"iconTap",t),u.props.onClick&&u.props.onClick(t)},ref:"iconButton"};(s||u.props.iconStyle)&&(A.iconStyle=s?(0,c.default)({},s,u.props.iconStyle):u.props.iconStyle);var D=d.default.cloneElement(u,A),L=d.default.createElement(y.default,(0,o.default)({},T,{initiallyKeyboardFocused:this.state.menuInitiallyKeyboardFocused,onEscKeyDown:this.handleEscKeyDownMenu,onItemClick:this.handleItemClick,style:j,listStyle:k}),this.props.children);return d.default.createElement("div",{ref:"iconMenuContainer",className:i,onMouseDown:p,onMouseLeave:h,onMouseEnter:b,onMouseUp:g,onClick:x,style:E(F)},D,d.default.createElement(v.default,{anchorOrigin:n,targetOrigin:_,open:M,anchorEl:P,childContextTypes:this.constructor.childContextTypes,useLayerForClickAway:S,onRequestClose:this.handleRequestClose,animated:a,animation:l,context:this.context},L))}}]),t}(f.Component);g.muiName="IconMenu",g.defaultProps={anchorOrigin:{vertical:"top",horizontal:"left"},animated:!0,multiple:!1,open:null,onItemClick:function(){},onKeyboardFocus:function(){},onMouseDown:function(){},onMouseLeave:function(){},onMouseEnter:function(){},onMouseUp:function(){},onRequestChange:function(){},onClick:function(){},targetOrigin:{vertical:"top",horizontal:"left"},clickCloseDelay:200,useLayerForClickAway:!1},g.contextTypes={muiTheme:p.default.object.isRequired},g.propTypes={},t.default=g},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(e,t,n){(t=e.exports=n(37)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Oswald);",""]),t.push([e.i,".page {\n  color: #1A3549;\n  margin-top: 3em;\n  margin-left: 0px;\n  padding: 0px;\n  width: 100%;\n  top: 0px;\n  left: 0px;\n  z-index: -1;\n  display: inline-block;\n  position: relative;\n  overflow: scroll;\n}\n",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(3),i=(o=r)&&o.__esModule?o:{default:o},a=n(48);t.default=new function e(){(0,i.default)(this,e),this.textFullBlack=a.fullBlack,this.textDarkBlack=a.darkBlack,this.textLightBlack=a.lightBlack,this.textMinBlack=a.minBlack,this.textFullWhite=a.fullWhite,this.textDarkWhite=a.darkWhite,this.textLightWhite=a.lightWhite,this.fontWeightLight=300,this.fontWeightNormal=400,this.fontWeightMedium=500,this.fontStyleButtonFontSize=14}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(0===t.length)return function(e){return e};if(1===t.length)return t[0];return t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}},function(e,t,n){var o=n(33),r=n(30);n(105)("keys",function(){return function(e){return r(o(e))}})},function(e,t,n){n(164),e.exports=n(13).Object.keys},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(86),i=(o=r)&&o.__esModule?o:{default:o};t.default=function(e){if(e.isRtl)return function(e){if(!0===e.directionInvariant)return e;var t={right:"left",left:"right",marginRight:"marginLeft",marginLeft:"marginRight",paddingRight:"paddingLeft",paddingLeft:"paddingRight",borderRight:"borderLeft",borderLeft:"borderRight"},n={};return(0,i.default)(e).forEach(function(o){var r=e[o],i=o;switch(t.hasOwnProperty(o)&&(i=t[o]),o){case"float":case"textAlign":"right"===r?r="left":"left"===r&&(r="right");break;case"direction":"ltr"===r?r="rtl":"rtl"===r&&(r="ltr");break;case"transform":if(!r)break;var u=void 0;(u=r.match(a))&&(r=r.replace(u[0],u[1]+-parseFloat(u[4]))),(u=r.match(l))&&(r=r.replace(u[0],u[1]+-parseFloat(u[4])+u[5]+u[6]?", "+(-parseFloat(u[7])+u[8]):""));break;case"transformOrigin":if(!r)break;r.indexOf("right")>-1?r=r.replace("right","left"):r.indexOf("left")>-1&&(r=r.replace("left","right"))}n[i]=r}),n}};var a=/((^|\s)translate(3d|X)?\()(\-?[\d]+)/,l=/((^|\s)skew(x|y)?\()\s*(\-?[\d]+)(deg|rad|grad)(,\s*(\-?[\d]+)(deg|rad|grad))?/},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){0};var o,r=n(2);(o=r)&&o.__esModule},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,a){if("string"==typeof t&&l.hasOwnProperty(e)){var s=function(e,t){if((0,r.default)(e))return e;for(var n=e.split(/,(?![^()]*(?:\([^()]*\))?\))/g),i=0,a=n.length;i<a;++i){var l=n[i],s=[l];for(var c in t){var f=(0,o.default)(c);if(l.indexOf(f)>-1&&"order"!==f)for(var d=t[c],p=0,h=d.length;p<h;++p)s.unshift(l.replace(f,u[d[p]]+f))}n[i]=s.join(",")}return n.join(",")}(t,a),c=s.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(e){return!/-moz-|-ms-/.test(e)}).join(",");if(e.indexOf("Webkit")>-1)return c;var f=s.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(e){return!/-webkit-|-ms-/.test(e)}).join(",");return e.indexOf("Moz")>-1?f:(n["Webkit"+(0,i.default)(e)]=c,n["Moz"+(0,i.default)(e)]=f,s)}};var o=a(n(87)),r=a(n(46)),i=a(n(47));function a(e){return e&&e.__esModule?e:{default:e}}var l={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},u={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(r.hasOwnProperty(e)&&i.hasOwnProperty(t))return o.map(function(e){return e+t})};var o=["-webkit-","-moz-",""],r={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},i={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&l.test(t))return a.map(function(e){return e+t})};var o,r=n(46),i=(o=r)&&o.__esModule?o:{default:o};var a=["-webkit-","-moz-",""],l=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?n.WebkitBoxOrient="vertical":n.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?n.WebkitBoxDirection="reverse":n.WebkitBoxDirection="normal");r.hasOwnProperty(e)&&(n[r[e]]=o[t]||t)};var o={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple"},r={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){r.hasOwnProperty(e)&&(n[r[e]]=o[t]||t)};var o={"space-around":"distribute","space-between":"justify","flex-start":"start","flex-end":"end"},r={alignContent:"msFlexLinePack",alignSelf:"msFlexItemAlign",alignItems:"msFlexAlign",justifyContent:"msFlexPack",order:"msFlexOrder",flexGrow:"msFlexPositive",flexShrink:"msFlexNegative",flexBasis:"msFlexPreferredSize"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("display"===e&&o.hasOwnProperty(t))return o[t]};var o={flex:["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex","flex"],"inline-flex":["-webkit-inline-box","-moz-inline-box","-ms-inline-flexbox","-webkit-inline-flex","inline-flex"]};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&t.indexOf("calc(")>-1)return a.map(function(e){return t.replace(/calc\(/g,e+"calc(")})};var o,r=n(46),i=(o=r)&&o.__esModule?o:{default:o};var a=["-webkit-","-moz-",""];e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=c(n(174)),r=c(n(173)),i=c(n(172)),a=c(n(171)),l=c(n(170)),u=c(n(169)),s=c(n(168));function c(e){return e&&e.__esModule?e:{default:e}}t.default={plugins:[o.default,r.default,i.default,a.default,l.default,u.default,s.default],prefixMap:{transform:["Webkit","ms"],transformOrigin:["Webkit","ms"],transformOriginX:["Webkit","ms"],transformOriginY:["Webkit","ms"],backfaceVisibility:["Webkit"],perspective:["Webkit"],perspectiveOrigin:["Webkit"],transformStyle:["Webkit"],transformOriginZ:["Webkit"],animation:["Webkit"],animationDelay:["Webkit"],animationDirection:["Webkit"],animationFillMode:["Webkit"],animationDuration:["Webkit"],animationIterationCount:["Webkit"],animationName:["Webkit"],animationPlayState:["Webkit"],animationTimingFunction:["Webkit"],appearance:["Webkit","Moz"],userSelect:["Webkit","Moz","ms"],fontKerning:["Webkit"],textEmphasisPosition:["Webkit"],textEmphasis:["Webkit"],textEmphasisStyle:["Webkit"],textEmphasisColor:["Webkit"],boxDecorationBreak:["Webkit"],clipPath:["Webkit"],maskImage:["Webkit"],maskMode:["Webkit"],maskRepeat:["Webkit"],maskPosition:["Webkit"],maskClip:["Webkit"],maskOrigin:["Webkit"],maskSize:["Webkit"],maskComposite:["Webkit"],mask:["Webkit"],maskBorderSource:["Webkit"],maskBorderMode:["Webkit"],maskBorderSlice:["Webkit"],maskBorderWidth:["Webkit"],maskBorderOutset:["Webkit"],maskBorderRepeat:["Webkit"],maskBorder:["Webkit"],maskType:["Webkit"],textDecorationStyle:["Webkit","Moz"],textDecorationSkip:["Webkit","Moz"],textDecorationLine:["Webkit","Moz"],textDecorationColor:["Webkit","Moz"],filter:["Webkit"],fontFeatureSettings:["Webkit","Moz"],breakAfter:["Webkit","Moz","ms"],breakBefore:["Webkit","Moz","ms"],breakInside:["Webkit","Moz","ms"],columnCount:["Webkit","Moz"],columnFill:["Webkit","Moz"],columnGap:["Webkit","Moz"],columnRule:["Webkit","Moz"],columnRuleColor:["Webkit","Moz"],columnRuleStyle:["Webkit","Moz"],columnRuleWidth:["Webkit","Moz"],columns:["Webkit","Moz"],columnSpan:["Webkit","Moz"],columnWidth:["Webkit","Moz"],flex:["Webkit","ms"],flexBasis:["Webkit"],flexDirection:["Webkit","ms"],flexGrow:["Webkit"],flexFlow:["Webkit","ms"],flexShrink:["Webkit"],flexWrap:["Webkit","ms"],alignContent:["Webkit"],alignItems:["Webkit"],alignSelf:["Webkit"],justifyContent:["Webkit"],order:["Webkit"],transitionDelay:["Webkit"],transitionDuration:["Webkit"],transitionProperty:["Webkit"],transitionTimingFunction:["Webkit"],backdropFilter:["Webkit"],scrollSnapType:["Webkit","ms"],scrollSnapPointsX:["Webkit","ms"],scrollSnapPointsY:["Webkit","ms"],scrollSnapDestination:["Webkit","ms"],scrollSnapCoordinate:["Webkit","ms"],shapeImageThreshold:["Webkit"],shapeImageMargin:["Webkit"],shapeImageOutside:["Webkit"],hyphens:["Webkit","Moz","ms"],flowInto:["Webkit","ms"],flowFrom:["Webkit","ms"],regionFragment:["Webkit","ms"],boxSizing:["Moz"],textAlignLast:["Moz"],tabSize:["Moz"],wrapFlow:["ms"],wrapThrough:["ms"],wrapMargin:["ms"],touchAction:["ms"],gridTemplateColumns:["ms"],gridTemplateRows:["ms"],gridTemplateAreas:["ms"],gridTemplate:["ms"],gridAutoColumns:["ms"],gridAutoRows:["ms"],gridAutoFlow:["ms"],grid:["ms"],gridRowStart:["ms"],gridColumnStart:["ms"],gridRowEnd:["ms"],gridRow:["ms"],gridColumn:["ms"],gridColumnEnd:["ms"],gridColumnGap:["ms"],gridRowGap:["ms"],gridArea:["ms"],gridGap:["ms"],textSizeAdjust:["Webkit","ms"],borderImage:["Webkit"],borderImageOutset:["Webkit"],borderImageRepeat:["Webkit"],borderImageSlice:["Webkit"],borderImageSource:["Webkit"],borderImageWidth:["Webkit"]}}},function(e,t,n){"use strict";var o=/[A-Z]/g,r=/^ms-/,i={};e.exports=function(e){return e in i?i[e]:i[e]=e.replace(o,"-$&").toLowerCase().replace(r,"-ms-")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,o){var r=o.cssPrefix,u=o.keepUnprefixed,s=o.requiresPrefix;if("string"==typeof t&&a.hasOwnProperty(e)){l||(l=Object.keys(s).map(function(e){return(0,i.default)(e)}));var c=t.split(/,(?![^()]*(?:\([^()]*\))?\))/g);return l.forEach(function(e){c.forEach(function(t,n){t.indexOf(e)>-1&&"order"!==e&&(c[n]=t.replace(e,r+e)+(u?","+t:""))})}),c.join(",")}};var o,r=n(87),i=(o=r)&&o.__esModule?o:{default:o};var a={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},l=void 0;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,o){var r=o.cssPrefix,u=o.keepUnprefixed;if(a.hasOwnProperty(e)&&l.hasOwnProperty(t))return(0,i.default)(r+t,t,u)};var o,r=n(24),i=(o=r)&&o.__esModule?o:{default:o};var a={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},l={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,o){var r=o.browserName,l=o.browserVersion,u=o.cssPrefix,s=o.keepUnprefixed;if("string"==typeof t&&a.test(t)&&("firefox"===r&&l<16||"chrome"===r&&l<26||("safari"===r||"ios_saf"===r)&&l<7||("opera"===r||"op_mini"===r)&&l<12.1||"android"===r&&l<4.4||"and_uc"===r))return(0,i.default)(u+t,t,s)};var o,r=n(24),i=(o=r)&&o.__esModule?o:{default:o};var a=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,o){var r=o.browserName,s=o.browserVersion,c=o.cssPrefix,f=o.keepUnprefixed,d=o.requiresPrefix;if((u.indexOf(e)>-1||"display"===e&&"string"==typeof t&&t.indexOf("flex")>-1)&&("firefox"===r&&s<22||"chrome"===r&&s<21||("safari"===r||"ios_saf"===r)&&s<=6.1||"android"===r&&s<4.4||"and_uc"===r)){if(delete d[e],f||Array.isArray(n[e])||delete n[e],"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?n.WebkitBoxOrient="vertical":n.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?n.WebkitBoxDirection="reverse":n.WebkitBoxDirection="normal"),"display"===e&&a.hasOwnProperty(t))return(0,i.default)(c+a[t],t,f);l.hasOwnProperty(e)&&(n[l[e]]=a[t]||t)}};var o,r=n(24),i=(o=r)&&o.__esModule?o:{default:o};var a={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple",flex:"box","inline-flex":"inline-box"},l={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines"},u=Object.keys(l).concat(["alignContent","alignSelf","order","flexGrow","flexShrink","flexBasis","flexDirection"]);e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,o){var r=o.browserName,u=o.browserVersion,s=o.cssPrefix,c=o.keepUnprefixed,f=o.requiresPrefix;if((l.hasOwnProperty(e)||"display"===e&&"string"==typeof t&&t.indexOf("flex")>-1)&&("ie_mob"===r||"ie"===r)&&10===u){if(delete f[e],c||Array.isArray(n[e])||delete n[e],"display"===e&&a.hasOwnProperty(t))return(0,i.default)(s+a[t],t,c);l.hasOwnProperty(e)&&(n[l[e]]=a[t]||t)}};var o,r=n(24),i=(o=r)&&o.__esModule?o:{default:o};var a={"space-around":"distribute","space-between":"justify","flex-start":"start","flex-end":"end",flex:"flexbox","inline-flex":"inline-flexbox"},l={alignContent:"msFlexLinePack",alignSelf:"msFlexItemAlign",alignItems:"msFlexAlign",justifyContent:"msFlexPack",order:"msFlexOrder",flexGrow:"msFlexPositive",flexShrink:"msFlexNegative",flexBasis:"msFlexPreferredSize"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,o){var r=o.browserName,l=o.browserVersion,u=o.cssPrefix,s=o.keepUnprefixed;if("display"===e&&a[t]&&("chrome"===r&&l<29&&l>20||("safari"===r||"ios_saf"===r)&&l<9&&l>6||"opera"===r&&(15===l||16===l)))return(0,i.default)(u+t,t,s)};var o,r=n(24),i=(o=r)&&o.__esModule?o:{default:o};var a={flex:!0,"inline-flex":!0};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,o){var r=o.browserName,a=o.browserVersion,l=o.cssPrefix,u=o.keepUnprefixed;if("string"==typeof t&&t.indexOf("calc(")>-1&&("firefox"===r&&a<15||"chrome"===r&&a<25||"safari"===r&&a<6.1||"ios_saf"===r&&a<7))return(0,i.default)(t.replace(/calc\(/g,l+"calc("),t,u)};var o,r=n(24),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=c(n(183)),r=c(n(182)),i=c(n(181)),a=c(n(180)),l=c(n(179)),u=c(n(178)),s=c(n(177));function c(e){return e&&e.__esModule?e:{default:e}}t.default={plugins:[o.default,r.default,i.default,a.default,l.default,u.default,s.default],prefixMap:{chrome:{transform:35,transformOrigin:35,transformOriginX:35,transformOriginY:35,backfaceVisibility:35,perspective:35,perspectiveOrigin:35,transformStyle:35,transformOriginZ:35,animation:42,animationDelay:42,animationDirection:42,animationFillMode:42,animationDuration:42,animationIterationCount:42,animationName:42,animationPlayState:42,animationTimingFunction:42,appearance:60,userSelect:53,fontKerning:32,textEmphasisPosition:60,textEmphasis:60,textEmphasisStyle:60,textEmphasisColor:60,boxDecorationBreak:60,clipPath:54,maskImage:60,maskMode:60,maskRepeat:60,maskPosition:60,maskClip:60,maskOrigin:60,maskSize:60,maskComposite:60,mask:60,maskBorderSource:60,maskBorderMode:60,maskBorderSlice:60,maskBorderWidth:60,maskBorderOutset:60,maskBorderRepeat:60,maskBorder:60,maskType:60,textDecorationStyle:56,textDecorationSkip:56,textDecorationLine:56,textDecorationColor:56,filter:52,fontFeatureSettings:47,breakAfter:49,breakBefore:49,breakInside:49,columnCount:49,columnFill:49,columnGap:49,columnRule:49,columnRuleColor:49,columnRuleStyle:49,columnRuleWidth:49,columns:49,columnSpan:49,columnWidth:49},safari:{flex:8,flexBasis:8,flexDirection:8,flexGrow:8,flexFlow:8,flexShrink:8,flexWrap:8,alignContent:8,alignItems:8,alignSelf:8,justifyContent:8,order:8,transition:6,transitionDelay:6,transitionDuration:6,transitionProperty:6,transitionTimingFunction:6,transform:8,transformOrigin:8,transformOriginX:8,transformOriginY:8,backfaceVisibility:8,perspective:8,perspectiveOrigin:8,transformStyle:8,transformOriginZ:8,animation:8,animationDelay:8,animationDirection:8,animationFillMode:8,animationDuration:8,animationIterationCount:8,animationName:8,animationPlayState:8,animationTimingFunction:8,appearance:10.1,userSelect:10.1,backdropFilter:10.1,fontKerning:9,scrollSnapType:10,scrollSnapPointsX:10,scrollSnapPointsY:10,scrollSnapDestination:10,scrollSnapCoordinate:10,textEmphasisPosition:7,textEmphasis:7,textEmphasisStyle:7,textEmphasisColor:7,boxDecorationBreak:10.1,clipPath:10.1,maskImage:10.1,maskMode:10.1,maskRepeat:10.1,maskPosition:10.1,maskClip:10.1,maskOrigin:10.1,maskSize:10.1,maskComposite:10.1,mask:10.1,maskBorderSource:10.1,maskBorderMode:10.1,maskBorderSlice:10.1,maskBorderWidth:10.1,maskBorderOutset:10.1,maskBorderRepeat:10.1,maskBorder:10.1,maskType:10.1,textDecorationStyle:10.1,textDecorationSkip:10.1,textDecorationLine:10.1,textDecorationColor:10.1,shapeImageThreshold:10,shapeImageMargin:10,shapeImageOutside:10,filter:9,hyphens:10.1,flowInto:10.1,flowFrom:10.1,breakBefore:8,breakAfter:8,breakInside:8,regionFragment:10.1,columnCount:8,columnFill:8,columnGap:8,columnRule:8,columnRuleColor:8,columnRuleStyle:8,columnRuleWidth:8,columns:8,columnSpan:8,columnWidth:8},firefox:{appearance:55,userSelect:55,boxSizing:28,textAlignLast:48,textDecorationStyle:35,textDecorationSkip:35,textDecorationLine:35,textDecorationColor:35,tabSize:55,hyphens:42,fontFeatureSettings:33,breakAfter:51,breakBefore:51,breakInside:51,columnCount:51,columnFill:51,columnGap:51,columnRule:51,columnRuleColor:51,columnRuleStyle:51,columnRuleWidth:51,columns:51,columnSpan:51,columnWidth:51},opera:{flex:16,flexBasis:16,flexDirection:16,flexGrow:16,flexFlow:16,flexShrink:16,flexWrap:16,alignContent:16,alignItems:16,alignSelf:16,justifyContent:16,order:16,transform:22,transformOrigin:22,transformOriginX:22,transformOriginY:22,backfaceVisibility:22,perspective:22,perspectiveOrigin:22,transformStyle:22,transformOriginZ:22,animation:29,animationDelay:29,animationDirection:29,animationFillMode:29,animationDuration:29,animationIterationCount:29,animationName:29,animationPlayState:29,animationTimingFunction:29,appearance:45,userSelect:40,fontKerning:19,textEmphasisPosition:45,textEmphasis:45,textEmphasisStyle:45,textEmphasisColor:45,boxDecorationBreak:45,clipPath:41,maskImage:45,maskMode:45,maskRepeat:45,maskPosition:45,maskClip:45,maskOrigin:45,maskSize:45,maskComposite:45,mask:45,maskBorderSource:45,maskBorderMode:45,maskBorderSlice:45,maskBorderWidth:45,maskBorderOutset:45,maskBorderRepeat:45,maskBorder:45,maskType:45,textDecorationStyle:43,textDecorationSkip:43,textDecorationLine:43,textDecorationColor:43,filter:39,fontFeatureSettings:34,breakAfter:36,breakBefore:36,breakInside:36,columnCount:36,columnFill:36,columnGap:36,columnRule:36,columnRuleColor:36,columnRuleStyle:36,columnRuleWidth:36,columns:36,columnSpan:36,columnWidth:36},ie:{flex:10,flexDirection:10,flexFlow:10,flexWrap:10,transform:9,transformOrigin:9,transformOriginX:9,transformOriginY:9,userSelect:11,wrapFlow:11,wrapThrough:11,wrapMargin:11,scrollSnapType:11,scrollSnapPointsX:11,scrollSnapPointsY:11,scrollSnapDestination:11,scrollSnapCoordinate:11,touchAction:10,hyphens:11,flowInto:11,flowFrom:11,breakBefore:11,breakAfter:11,breakInside:11,regionFragment:11,gridTemplateColumns:11,gridTemplateRows:11,gridTemplateAreas:11,gridTemplate:11,gridAutoColumns:11,gridAutoRows:11,gridAutoFlow:11,grid:11,gridRowStart:11,gridColumnStart:11,gridRowEnd:11,gridRow:11,gridColumn:11,gridColumnEnd:11,gridColumnGap:11,gridRowGap:11,gridArea:11,gridGap:11,textSizeAdjust:11},edge:{userSelect:15,wrapFlow:15,wrapThrough:15,wrapMargin:15,scrollSnapType:15,scrollSnapPointsX:15,scrollSnapPointsY:15,scrollSnapDestination:15,scrollSnapCoordinate:15,hyphens:15,flowInto:15,flowFrom:15,breakBefore:15,breakAfter:15,breakInside:15,regionFragment:15,gridTemplateColumns:15,gridTemplateRows:15,gridTemplateAreas:15,gridTemplate:15,gridAutoColumns:15,gridAutoRows:15,gridAutoFlow:15,grid:15,gridRowStart:15,gridColumnStart:15,gridRowEnd:15,gridRow:15,gridColumn:15,gridColumnEnd:15,gridColumnGap:15,gridRowGap:15,gridArea:15,gridGap:15},ios_saf:{flex:8.1,flexBasis:8.1,flexDirection:8.1,flexGrow:8.1,flexFlow:8.1,flexShrink:8.1,flexWrap:8.1,alignContent:8.1,alignItems:8.1,alignSelf:8.1,justifyContent:8.1,order:8.1,transition:6,transitionDelay:6,transitionDuration:6,transitionProperty:6,transitionTimingFunction:6,transform:8.1,transformOrigin:8.1,transformOriginX:8.1,transformOriginY:8.1,backfaceVisibility:8.1,perspective:8.1,perspectiveOrigin:8.1,transformStyle:8.1,transformOriginZ:8.1,animation:8.1,animationDelay:8.1,animationDirection:8.1,animationFillMode:8.1,animationDuration:8.1,animationIterationCount:8.1,animationName:8.1,animationPlayState:8.1,animationTimingFunction:8.1,appearance:10,userSelect:10,backdropFilter:10,fontKerning:10,scrollSnapType:10,scrollSnapPointsX:10,scrollSnapPointsY:10,scrollSnapDestination:10,scrollSnapCoordinate:10,boxDecorationBreak:10,clipPath:10,maskImage:10,maskMode:10,maskRepeat:10,maskPosition:10,maskClip:10,maskOrigin:10,maskSize:10,maskComposite:10,mask:10,maskBorderSource:10,maskBorderMode:10,maskBorderSlice:10,maskBorderWidth:10,maskBorderOutset:10,maskBorderRepeat:10,maskBorder:10,maskType:10,textSizeAdjust:10,textDecorationStyle:10,textDecorationSkip:10,textDecorationLine:10,textDecorationColor:10,shapeImageThreshold:10,shapeImageMargin:10,shapeImageOutside:10,filter:9,hyphens:10,flowInto:10,flowFrom:10,breakBefore:8.1,breakAfter:8.1,breakInside:8.1,regionFragment:10,columnCount:8.1,columnFill:8.1,columnGap:8.1,columnRule:8.1,columnRuleColor:8.1,columnRuleStyle:8.1,columnRuleWidth:8.1,columns:8.1,columnSpan:8.1,columnWidth:8.1},android:{borderImage:4.2,borderImageOutset:4.2,borderImageRepeat:4.2,borderImageSlice:4.2,borderImageSource:4.2,borderImageWidth:4.2,flex:4.2,flexBasis:4.2,flexDirection:4.2,flexGrow:4.2,flexFlow:4.2,flexShrink:4.2,flexWrap:4.2,alignContent:4.2,alignItems:4.2,alignSelf:4.2,justifyContent:4.2,order:4.2,transition:4.2,transitionDelay:4.2,transitionDuration:4.2,transitionProperty:4.2,transitionTimingFunction:4.2,transform:4.4,transformOrigin:4.4,transformOriginX:4.4,transformOriginY:4.4,backfaceVisibility:4.4,perspective:4.4,perspectiveOrigin:4.4,transformStyle:4.4,transformOriginZ:4.4,animation:4.4,animationDelay:4.4,animationDirection:4.4,animationFillMode:4.4,animationDuration:4.4,animationIterationCount:4.4,animationName:4.4,animationPlayState:4.4,animationTimingFunction:4.4,appearance:53,userSelect:53,fontKerning:4.4,textEmphasisPosition:53,textEmphasis:53,textEmphasisStyle:53,textEmphasisColor:53,boxDecorationBreak:53,clipPath:53,maskImage:53,maskMode:53,maskRepeat:53,maskPosition:53,maskClip:53,maskOrigin:53,maskSize:53,maskComposite:53,mask:53,maskBorderSource:53,maskBorderMode:53,maskBorderSlice:53,maskBorderWidth:53,maskBorderOutset:53,maskBorderRepeat:53,maskBorder:53,maskType:53,filter:4.4,fontFeatureSettings:4.4,breakAfter:53,breakBefore:53,breakInside:53,columnCount:53,columnFill:53,columnGap:53,columnRule:53,columnRuleColor:53,columnRuleStyle:53,columnRuleWidth:53,columns:53,columnSpan:53,columnWidth:53},and_chr:{appearance:56,textEmphasisPosition:56,textEmphasis:56,textEmphasisStyle:56,textEmphasisColor:56,boxDecorationBreak:56,maskImage:56,maskMode:56,maskRepeat:56,maskPosition:56,maskClip:56,maskOrigin:56,maskSize:56,maskComposite:56,mask:56,maskBorderSource:56,maskBorderMode:56,maskBorderSlice:56,maskBorderWidth:56,maskBorderOutset:56,maskBorderRepeat:56,maskBorder:56,maskType:56,textDecorationStyle:56,textDecorationSkip:56,textDecorationLine:56,textDecorationColor:56},and_uc:{flex:11,flexBasis:11,flexDirection:11,flexGrow:11,flexFlow:11,flexShrink:11,flexWrap:11,alignContent:11,alignItems:11,alignSelf:11,justifyContent:11,order:11,transition:11,transitionDelay:11,transitionDuration:11,transitionProperty:11,transitionTimingFunction:11,transform:11,transformOrigin:11,transformOriginX:11,transformOriginY:11,backfaceVisibility:11,perspective:11,perspectiveOrigin:11,transformStyle:11,transformOriginZ:11,animation:11,animationDelay:11,animationDirection:11,animationFillMode:11,animationDuration:11,animationIterationCount:11,animationName:11,animationPlayState:11,animationTimingFunction:11,appearance:11,userSelect:11,fontKerning:11,textEmphasisPosition:11,textEmphasis:11,textEmphasisStyle:11,textEmphasisColor:11,maskImage:11,maskMode:11,maskRepeat:11,maskPosition:11,maskClip:11,maskOrigin:11,maskSize:11,maskComposite:11,mask:11,maskBorderSource:11,maskBorderMode:11,maskBorderSlice:11,maskBorderWidth:11,maskBorderOutset:11,maskBorderRepeat:11,maskBorder:11,maskType:11,textSizeAdjust:11,filter:11,hyphens:11,flowInto:11,flowFrom:11,breakBefore:11,breakAfter:11,breakInside:11,regionFragment:11,fontFeatureSettings:11,columnCount:11,columnFill:11,columnGap:11,columnRule:11,columnRuleColor:11,columnRuleStyle:11,columnRuleWidth:11,columns:11,columnSpan:11,columnWidth:11},op_mini:{}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if("chrome"===e&&t<43||("safari"===e||"ios_saf"===e)&&t<9||"opera"===e&&t<30||"android"===e&&t<=4.4||"and_uc"===e)return n+"keyframes";return"keyframes"},e.exports=t.default},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t,n){var o;o=function(){var e=!0;function t(t){function n(e){var n=t.match(e);return n&&n.length>1&&n[1]||""}function o(e){var n=t.match(e);return n&&n.length>1&&n[2]||""}var r,i=n(/(ipod|iphone|ipad)/i).toLowerCase(),a=!/like android/i.test(t)&&/android/i.test(t),l=/nexus\s*[0-6]\s*/i.test(t),u=!l&&/nexus\s*[0-9]+/i.test(t),s=/CrOS/.test(t),c=/silk/i.test(t),f=/sailfish/i.test(t),d=/tizen/i.test(t),p=/(web|hpw)os/i.test(t),h=/windows phone/i.test(t),m=(/SamsungBrowser/i.test(t),!h&&/windows/i.test(t)),y=!i&&!c&&/macintosh/i.test(t),v=!a&&!f&&!d&&!p&&/linux/i.test(t),b=o(/edg([ea]|ios)\/(\d+(\.\d+)?)/i),g=n(/version\/(\d+(\.\d+)?)/i),x=/tablet/i.test(t)&&!/tablet pc/i.test(t),k=!x&&/[^-]mobi/i.test(t),C=/xbox/i.test(t);/opera/i.test(t)?r={name:"Opera",opera:e,version:g||n(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)}:/opr\/|opios/i.test(t)?r={name:"Opera",opera:e,version:n(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i)||g}:/SamsungBrowser/i.test(t)?r={name:"Samsung Internet for Android",samsungBrowser:e,version:g||n(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)}:/coast/i.test(t)?r={name:"Opera Coast",coast:e,version:g||n(/(?:coast)[\s\/](\d+(\.\d+)?)/i)}:/yabrowser/i.test(t)?r={name:"Yandex Browser",yandexbrowser:e,version:g||n(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)}:/ucbrowser/i.test(t)?r={name:"UC Browser",ucbrowser:e,version:n(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)}:/mxios/i.test(t)?r={name:"Maxthon",maxthon:e,version:n(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)}:/epiphany/i.test(t)?r={name:"Epiphany",epiphany:e,version:n(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)}:/puffin/i.test(t)?r={name:"Puffin",puffin:e,version:n(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)}:/sleipnir/i.test(t)?r={name:"Sleipnir",sleipnir:e,version:n(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)}:/k-meleon/i.test(t)?r={name:"K-Meleon",kMeleon:e,version:n(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)}:h?(r={name:"Windows Phone",osname:"Windows Phone",windowsphone:e},b?(r.msedge=e,r.version=b):(r.msie=e,r.version=n(/iemobile\/(\d+(\.\d+)?)/i))):/msie|trident/i.test(t)?r={name:"Internet Explorer",msie:e,version:n(/(?:msie |rv:)(\d+(\.\d+)?)/i)}:s?r={name:"Chrome",osname:"Chrome OS",chromeos:e,chromeBook:e,chrome:e,version:n(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)}:/edg([ea]|ios)/i.test(t)?r={name:"Microsoft Edge",msedge:e,version:b}:/vivaldi/i.test(t)?r={name:"Vivaldi",vivaldi:e,version:n(/vivaldi\/(\d+(\.\d+)?)/i)||g}:f?r={name:"Sailfish",osname:"Sailfish OS",sailfish:e,version:n(/sailfish\s?browser\/(\d+(\.\d+)?)/i)}:/seamonkey\//i.test(t)?r={name:"SeaMonkey",seamonkey:e,version:n(/seamonkey\/(\d+(\.\d+)?)/i)}:/firefox|iceweasel|fxios/i.test(t)?(r={name:"Firefox",firefox:e,version:n(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)},/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(t)&&(r.firefoxos=e,r.osname="Firefox OS")):c?r={name:"Amazon Silk",silk:e,version:n(/silk\/(\d+(\.\d+)?)/i)}:/phantom/i.test(t)?r={name:"PhantomJS",phantom:e,version:n(/phantomjs\/(\d+(\.\d+)?)/i)}:/slimerjs/i.test(t)?r={name:"SlimerJS",slimer:e,version:n(/slimerjs\/(\d+(\.\d+)?)/i)}:/blackberry|\bbb\d+/i.test(t)||/rim\stablet/i.test(t)?r={name:"BlackBerry",osname:"BlackBerry OS",blackberry:e,version:g||n(/blackberry[\d]+\/(\d+(\.\d+)?)/i)}:p?(r={name:"WebOS",osname:"WebOS",webos:e,version:g||n(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)},/touchpad\//i.test(t)&&(r.touchpad=e)):/bada/i.test(t)?r={name:"Bada",osname:"Bada",bada:e,version:n(/dolfin\/(\d+(\.\d+)?)/i)}:d?r={name:"Tizen",osname:"Tizen",tizen:e,version:n(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i)||g}:/qupzilla/i.test(t)?r={name:"QupZilla",qupzilla:e,version:n(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i)||g}:/chromium/i.test(t)?r={name:"Chromium",chromium:e,version:n(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i)||g}:/chrome|crios|crmo/i.test(t)?r={name:"Chrome",chrome:e,version:n(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)}:a?r={name:"Android",version:g}:/safari|applewebkit/i.test(t)?(r={name:"Safari",safari:e},g&&(r.version=g)):i?(r={name:"iphone"==i?"iPhone":"ipad"==i?"iPad":"iPod"},g&&(r.version=g)):r=/googlebot/i.test(t)?{name:"Googlebot",googlebot:e,version:n(/googlebot\/(\d+(\.\d+))/i)||g}:{name:n(/^(.*)\/(.*) /),version:o(/^(.*)\/(.*) /)},!r.msedge&&/(apple)?webkit/i.test(t)?(/(apple)?webkit\/537\.36/i.test(t)?(r.name=r.name||"Blink",r.blink=e):(r.name=r.name||"Webkit",r.webkit=e),!r.version&&g&&(r.version=g)):!r.opera&&/gecko\//i.test(t)&&(r.name=r.name||"Gecko",r.gecko=e,r.version=r.version||n(/gecko\/(\d+(\.\d+)?)/i)),r.windowsphone||!a&&!r.silk?!r.windowsphone&&i?(r[i]=e,r.ios=e,r.osname="iOS"):y?(r.mac=e,r.osname="macOS"):C?(r.xbox=e,r.osname="Xbox"):m?(r.windows=e,r.osname="Windows"):v&&(r.linux=e,r.osname="Linux"):(r.android=e,r.osname="Android");var w="";r.windows?w=function(e){switch(e){case"NT":return"NT";case"XP":return"XP";case"NT 5.0":return"2000";case"NT 5.1":return"XP";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}}(n(/Windows ((NT|XP)( \d\d?.\d)?)/i)):r.windowsphone?w=n(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i):r.mac?w=(w=n(/Mac OS X (\d+([_\.\s]\d+)*)/i)).replace(/[_\s]/g,"."):i?w=(w=n(/os (\d+([_\s]\d+)*) like mac os x/i)).replace(/[_\s]/g,"."):a?w=n(/android[ \/-](\d+(\.\d+)*)/i):r.webos?w=n(/(?:web|hpw)os\/(\d+(\.\d+)*)/i):r.blackberry?w=n(/rim\stablet\sos\s(\d+(\.\d+)*)/i):r.bada?w=n(/bada\/(\d+(\.\d+)*)/i):r.tizen&&(w=n(/tizen[\/\s](\d+(\.\d+)*)/i)),w&&(r.osversion=w);var _=!r.windows&&w.split(".")[0];return x||u||"ipad"==i||a&&(3==_||_>=4&&!k)||r.silk?r.tablet=e:(k||"iphone"==i||"ipod"==i||a||l||r.blackberry||r.webos||r.bada)&&(r.mobile=e),r.msedge||r.msie&&r.version>=10||r.yandexbrowser&&r.version>=15||r.vivaldi&&r.version>=1||r.chrome&&r.version>=20||r.samsungBrowser&&r.version>=4||r.firefox&&r.version>=20||r.safari&&r.version>=6||r.opera&&r.version>=10||r.ios&&r.osversion&&r.osversion.split(".")[0]>=6||r.blackberry&&r.version>=10.1||r.chromium&&r.version>=20?r.a=e:r.msie&&r.version<10||r.chrome&&r.version<20||r.firefox&&r.version<20||r.safari&&r.version<6||r.opera&&r.version<10||r.ios&&r.osversion&&r.osversion.split(".")[0]<6||r.chromium&&r.version<20?r.c=e:r.x=e,r}var n=t("undefined"!=typeof navigator&&navigator.userAgent||"");function o(e){return e.split(".").length}function r(e,t){var n,o=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(n=0;n<e.length;n++)o.push(t(e[n]));return o}function i(e){for(var t=Math.max(o(e[0]),o(e[1])),n=r(e,function(e){var n=t-o(e);return r((e+=new Array(n+1).join(".0")).split("."),function(e){return new Array(20-e.length).join("0")+e}).reverse()});--t>=0;){if(n[0][t]>n[1][t])return 1;if(n[0][t]!==n[1][t])return-1;if(0===t)return 0}}function a(e,o,r){var a=n;"string"==typeof o&&(r=o,o=void 0),void 0===o&&(o=!1),r&&(a=t(r));var l=""+a.version;for(var u in e)if(e.hasOwnProperty(u)&&a[u]){if("string"!=typeof e[u])throw new Error("Browser version in the minVersion map should be a string: "+u+": "+String(e));return i([l,e[u]])<0}return o}return n.test=function(e){for(var t=0;t<e.length;++t){var o=e[t];if("string"==typeof o&&o in n)return!0}return!1},n.isUnsupportedBrowser=a,n.compareVersions=i,n.check=function(e,t,n){return!a(e,t,n)},n._detect=t,n.detect=t,n},void 0!==e&&e.exports?e.exports=o():n(186)("bowser",o)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=i.default._detect(e);t.yandexbrowser&&(t=i.default._detect(e.replace(/YaBrowser\/[0-9.]*/,"")));for(var n in a)if(t.hasOwnProperty(n)){var o=a[n];t.jsPrefix=o,t.cssPrefix="-"+o.toLowerCase()+"-";break}t.browserName=function(e){if(e.firefox)return"firefox";if(e.mobile||e.tablet){if(e.ios)return"ios_saf";if(e.android)return"android";if(e.opera)return"op_mini"}for(var t in l)if(e.hasOwnProperty(t))return l[t]}(t),t.version?t.browserVersion=parseFloat(t.version):t.browserVersion=parseInt(parseFloat(t.osversion),10);t.osVersion=parseFloat(t.osversion),"ios_saf"===t.browserName&&t.browserVersion>t.osVersion&&(t.browserVersion=t.osVersion);"android"===t.browserName&&t.chrome&&t.browserVersion>37&&(t.browserName="and_chr");"android"===t.browserName&&t.osVersion<5&&(t.browserVersion=t.osVersion);"android"===t.browserName&&t.samsungBrowser&&(t.browserName="and_chr",t.browserVersion=44);return t};var o,r=n(187),i=(o=r)&&o.__esModule?o:{default:o};var a={chrome:"Webkit",safari:"Webkit",ios:"Webkit",android:"Webkit",phantom:"Webkit",opera:"Webkit",webos:"Webkit",blackberry:"Webkit",bada:"Webkit",tizen:"Webkit",chromium:"Webkit",vivaldi:"Webkit",firefox:"Moz",seamoney:"Moz",sailfish:"Moz",msie:"ms",msedge:"ms"},l={chrome:"chrome",chromium:"chrome",safari:"safari",firfox:"firefox",msedge:"edge",opera:"opera",vivaldi:"opera",msie:"ie"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();t.default=function(e){var t=e.prefixMap,n=e.plugins,c=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e};return function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var o="undefined"!=typeof navigator?navigator.userAgent:void 0;if(this._userAgent=n.userAgent||o,this._keepUnprefixed=n.keepUnprefixed||!1,this._userAgent&&(this._browserInfo=(0,r.default)(this._userAgent)),!this._browserInfo||!this._browserInfo.cssPrefix)return this._useFallback=!0,!1;this.prefixedKeyframes=(0,i.default)(this._browserInfo.browserName,this._browserInfo.browserVersion,this._browserInfo.cssPrefix);var a=this._browserInfo.browserName&&t[this._browserInfo.browserName];if(a){for(var l in this._requiresPrefix={},a)a[l]>=this._browserInfo.browserVersion&&(this._requiresPrefix[l]=!0);this._hasPropsRequiringPrefix=Object.keys(this._requiresPrefix).length>0}else this._useFallback=!0;this._metaData={browserVersion:this._browserInfo.browserVersion,browserName:this._browserInfo.browserName,cssPrefix:this._browserInfo.cssPrefix,jsPrefix:this._browserInfo.jsPrefix,keepUnprefixed:this._keepUnprefixed,requiresPrefix:this._requiresPrefix}}return o(e,[{key:"prefix",value:function(e){return this._useFallback?c(e):this._hasPropsRequiringPrefix?this._prefixStyle(e):e}},{key:"_prefixStyle",value:function(e){for(var t in e){var o=e[t];if((0,u.default)(o))e[t]=this.prefix(o);else if(Array.isArray(o)){for(var r=[],i=0,c=o.length;i<c;++i){var f=(0,s.default)(n,t,o[i],e,this._metaData);(0,l.default)(r,f||o[i])}r.length>0&&(e[t]=r)}else{var d=(0,s.default)(n,t,o,e,this._metaData);d&&(e[t]=d),this._requiresPrefix.hasOwnProperty(t)&&(e[this._browserInfo.jsPrefix+(0,a.default)(t)]=o,this._keepUnprefixed||delete e[t])}}return e}}],[{key:"prefixAll",value:function(e){return c(e)}}]),e}()};var r=c(n(188)),i=c(n(185)),a=c(n(47)),l=c(n(89)),u=c(n(88)),s=c(n(90));function c(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(e.hasOwnProperty(t))for(var o=e[t],r=0,a=o.length;r<a;++r)n[o[r]+(0,i.default)(t)]=n[t]};var o,r=n(47),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.prefixMap,n=e.plugins;return function e(l){for(var u in l){var s=l[u];if((0,a.default)(s))l[u]=e(s);else if(Array.isArray(s)){for(var c=[],f=0,d=s.length;f<d;++f){var p=(0,r.default)(n,u,s[f],l,t);(0,i.default)(c,p||s[f])}c.length>0&&(l[u]=c)}else{var h=(0,r.default)(n,u,s,l,t);h&&(l[u]=h),(0,o.default)(t,u,l)}}return l}};var o=l(n(190)),r=l(n(90)),i=l(n(89)),a=l(n(88));function l(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t="undefined"!=typeof navigator,n=e.userAgent;void 0===n&&t&&(n=navigator.userAgent),void 0!==n||u||(u=!0);var l=(0,o.default)(a.default);if(!1===n)return null;if("all"===n||void 0===n)return function(e){var n=-1!==["flex","inline-flex"].indexOf(e.display),o=l(e);if(n){var r=o.display;o.display=t?r[r.length-1]:r.join("; display: ")}return o};var s=new((0,r.default)(i.default,l))({userAgent:n});return function(e){return s.prefix(e)}};var o=l(n(191)),r=l(n(189)),i=l(n(184)),a=l(n(175));l(n(2));function l(e){return e&&e.__esModule?e:{default:e}}var u=!1},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={menu:1e3,appBar:1100,drawerOverlay:1200,drawer:1300,dialogOverlay:1400,dialog:1500,layer:2e3,popover:2100,snackbar:2900,tooltip:3e3}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={iconSize:24,desktopGutter:24,desktopGutterMore:32,desktopGutterLess:16,desktopGutterMini:8,desktopKeylineIncrement:64,desktopDropDownMenuItemHeight:32,desktopDropDownMenuFontSize:15,desktopDrawerMenuItemHeight:48,desktopSubheaderHeight:48,desktopToolbarHeight:56}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(48),i=n(38),a=n(194),l=(o=a)&&o.__esModule?o:{default:o};t.default={spacing:l.default,fontFamily:"Roboto, sans-serif",borderRadius:2,palette:{primary1Color:r.cyan500,primary2Color:r.cyan700,primary3Color:r.grey400,accent1Color:r.pinkA200,accent2Color:r.grey100,accent3Color:r.grey500,textColor:r.darkBlack,secondaryTextColor:(0,i.fade)(r.darkBlack,.54),alternateTextColor:r.white,canvasColor:r.white,borderColor:r.grey300,disabledColor:(0,i.fade)(r.darkBlack,.3),pickerHeaderColor:r.cyan500,clockCircleColor:(0,i.fade)(r.darkBlack,.07),shadowColor:r.fullBlack}}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){(function(e,n){var o=200,r="__lodash_hash_undefined__",i=800,a=16,l=9007199254740991,u="[object Arguments]",s="[object AsyncFunction]",c="[object Function]",f="[object GeneratorFunction]",d="[object Null]",p="[object Object]",h="[object Proxy]",m="[object Undefined]",y=/^\[object .+?Constructor\]$/,v=/^(?:0|[1-9]\d*)$/,b={};b["[object Float32Array]"]=b["[object Float64Array]"]=b["[object Int8Array]"]=b["[object Int16Array]"]=b["[object Int32Array]"]=b["[object Uint8Array]"]=b["[object Uint8ClampedArray]"]=b["[object Uint16Array]"]=b["[object Uint32Array]"]=!0,b[u]=b["[object Array]"]=b["[object ArrayBuffer]"]=b["[object Boolean]"]=b["[object DataView]"]=b["[object Date]"]=b["[object Error]"]=b[c]=b["[object Map]"]=b["[object Number]"]=b[p]=b["[object RegExp]"]=b["[object Set]"]=b["[object String]"]=b["[object WeakMap]"]=!1;var g="object"==typeof e&&e&&e.Object===Object&&e,x="object"==typeof self&&self&&self.Object===Object&&self,k=g||x||Function("return this")(),C="object"==typeof t&&t&&!t.nodeType&&t,w=C&&"object"==typeof n&&n&&!n.nodeType&&n,_=w&&w.exports===C,S=_&&g.process,T=function(){try{return S&&S.binding&&S.binding("util")}catch(e){}}(),E=T&&T.isTypedArray;function O(e,t){return"__proto__"==t?void 0:e[t]}var M,P,I,R=Array.prototype,F=Function.prototype,j=Object.prototype,A=k["__core-js_shared__"],D=F.toString,L=j.hasOwnProperty,N=(M=/[^.]+$/.exec(A&&A.keys&&A.keys.IE_PROTO||""))?"Symbol(src)_1."+M:"",W=j.toString,z=D.call(Object),B=RegExp("^"+D.call(L).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),U=_?k.Buffer:void 0,H=k.Symbol,K=k.Uint8Array,V=U?U.allocUnsafe:void 0,q=(P=Object.getPrototypeOf,I=Object,function(e){return P(I(e))}),G=Object.create,$=j.propertyIsEnumerable,Y=R.splice,Q=H?H.toStringTag:void 0,X=function(){try{var e=Ce(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),Z=U?U.isBuffer:void 0,J=Math.max,ee=Date.now,te=Ce(k,"Map"),ne=Ce(Object,"create"),oe=function(){function e(){}return function(t){if(!Fe(t))return{};if(G)return G(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();function re(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}function ie(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}function ae(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}function le(e){var t=this.__data__=new ie(e);this.size=t.size}function ue(e,t){var n=Oe(e),o=!n&&Ee(e),r=!n&&!o&&Pe(e),i=!n&&!o&&!r&&Ae(e),a=n||o||r||i,l=a?function(e,t){for(var n=-1,o=Array(e);++n<e;)o[n]=t(n);return o}(e.length,String):[],u=l.length;for(var s in e)!t&&!L.call(e,s)||a&&("length"==s||r&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||we(s,u))||l.push(s);return l}function se(e,t,n){(void 0===n||Te(e[t],n))&&(void 0!==n||t in e)||de(e,t,n)}function ce(e,t,n){var o=e[t];L.call(e,t)&&Te(o,n)&&(void 0!==n||t in e)||de(e,t,n)}function fe(e,t){for(var n=e.length;n--;)if(Te(e[n][0],t))return n;return-1}function de(e,t,n){"__proto__"==t&&X?X(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}re.prototype.clear=function(){this.__data__=ne?ne(null):{},this.size=0},re.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},re.prototype.get=function(e){var t=this.__data__;if(ne){var n=t[e];return n===r?void 0:n}return L.call(t,e)?t[e]:void 0},re.prototype.has=function(e){var t=this.__data__;return ne?void 0!==t[e]:L.call(t,e)},re.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=ne&&void 0===t?r:t,this},ie.prototype.clear=function(){this.__data__=[],this.size=0},ie.prototype.delete=function(e){var t=this.__data__,n=fe(t,e);return!(n<0||(n==t.length-1?t.pop():Y.call(t,n,1),--this.size,0))},ie.prototype.get=function(e){var t=this.__data__,n=fe(t,e);return n<0?void 0:t[n][1]},ie.prototype.has=function(e){return fe(this.__data__,e)>-1},ie.prototype.set=function(e,t){var n=this.__data__,o=fe(n,e);return o<0?(++this.size,n.push([e,t])):n[o][1]=t,this},ae.prototype.clear=function(){this.size=0,this.__data__={hash:new re,map:new(te||ie),string:new re}},ae.prototype.delete=function(e){var t=ke(this,e).delete(e);return this.size-=t?1:0,t},ae.prototype.get=function(e){return ke(this,e).get(e)},ae.prototype.has=function(e){return ke(this,e).has(e)},ae.prototype.set=function(e,t){var n=ke(this,e),o=n.size;return n.set(e,t),this.size+=n.size==o?0:1,this},le.prototype.clear=function(){this.__data__=new ie,this.size=0},le.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},le.prototype.get=function(e){return this.__data__.get(e)},le.prototype.has=function(e){return this.__data__.has(e)},le.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ie){var r=n.__data__;if(!te||r.length<o-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new ae(r)}return n.set(e,t),this.size=n.size,this};var pe,he=function(e,t,n){for(var o=-1,r=Object(e),i=n(e),a=i.length;a--;){var l=i[pe?a:++o];if(!1===t(r[l],l,r))break}return e};function me(e){return null==e?void 0===e?m:d:Q&&Q in Object(e)?function(e){var t=L.call(e,Q),n=e[Q];try{e[Q]=void 0;var o=!0}catch(e){}var r=W.call(e);o&&(t?e[Q]=n:delete e[Q]);return r}(e):function(e){return W.call(e)}(e)}function ye(e){return je(e)&&me(e)==u}function ve(e){return!(!Fe(e)||N&&N in e)&&(Ie(e)?B:y).test(function(e){if(null!=e){try{return D.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}function be(e){if(!Fe(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t=_e(e),n=[];for(var o in e)("constructor"!=o||!t&&L.call(e,o))&&n.push(o);return n}function ge(e,t,n,o,r){e!==t&&he(t,function(i,a){if(Fe(i))r||(r=new le),function(e,t,n,o,r,i,a){var l=O(e,n),u=O(t,n),s=a.get(u);if(s)return void se(e,n,s);var c=i?i(l,u,n+"",e,t,a):void 0,f=void 0===c;if(f){var d=Oe(u),h=!d&&Pe(u),m=!d&&!h&&Ae(u);c=u,d||h||m?Oe(l)?c=l:je(x=l)&&Me(x)?c=function(e,t){var n=-1,o=e.length;t||(t=Array(o));for(;++n<o;)t[n]=e[n];return t}(l):h?(f=!1,c=function(e,t){if(t)return e.slice();var n=e.length,o=V?V(n):new e.constructor(n);return e.copy(o),o}(u,!0)):m?(f=!1,y=u,v=!0?(b=y.buffer,g=new b.constructor(b.byteLength),new K(g).set(new K(b)),g):y.buffer,c=new y.constructor(v,y.byteOffset,y.length)):c=[]:function(e){if(!je(e)||me(e)!=p)return!1;var t=q(e);if(null===t)return!0;var n=L.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&D.call(n)==z}(u)||Ee(u)?(c=l,Ee(l)?c=function(e){return function(e,t,n,o){var r=!n;n||(n={});var i=-1,a=t.length;for(;++i<a;){var l=t[i],u=o?o(n[l],e[l],l,n,e):void 0;void 0===u&&(u=e[l]),r?de(n,l,u):ce(n,l,u)}return n}(e,De(e))}(l):(!Fe(l)||o&&Ie(l))&&(c=function(e){return"function"!=typeof e.constructor||_e(e)?{}:oe(q(e))}(u))):f=!1}var y,v,b,g;var x;f&&(a.set(u,c),r(c,u,o,i,a),a.delete(u));se(e,n,c)}(e,t,a,n,ge,o,r);else{var l=o?o(O(e,a),i,a+"",e,t,r):void 0;void 0===l&&(l=i),se(e,a,l)}},De)}function xe(e,t){return Se(function(e,t,n){return t=J(void 0===t?e.length-1:t,0),function(){for(var o=arguments,r=-1,i=J(o.length-t,0),a=Array(i);++r<i;)a[r]=o[t+r];r=-1;for(var l=Array(t+1);++r<t;)l[r]=o[r];return l[t]=n(a),function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}(e,this,l)}}(e,t,We),e+"")}function ke(e,t){var n,o,r=e.__data__;return("string"==(o=typeof(n=t))||"number"==o||"symbol"==o||"boolean"==o?"__proto__"!==n:null===n)?r["string"==typeof t?"string":"hash"]:r.map}function Ce(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return ve(n)?n:void 0}function we(e,t){var n=typeof e;return!!(t=null==t?l:t)&&("number"==n||"symbol"!=n&&v.test(e))&&e>-1&&e%1==0&&e<t}function _e(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||j)}var Se=function(e){var t=0,n=0;return function(){var o=ee(),r=a-(o-n);if(n=o,r>0){if(++t>=i)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(X?function(e,t){return X(e,"toString",{configurable:!0,enumerable:!1,value:(n=t,function(){return n}),writable:!0});var n}:We);function Te(e,t){return e===t||e!=e&&t!=t}var Ee=ye(function(){return arguments}())?ye:function(e){return je(e)&&L.call(e,"callee")&&!$.call(e,"callee")},Oe=Array.isArray;function Me(e){return null!=e&&Re(e.length)&&!Ie(e)}var Pe=Z||function(){return!1};function Ie(e){if(!Fe(e))return!1;var t=me(e);return t==c||t==f||t==s||t==h}function Re(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=l}function Fe(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function je(e){return null!=e&&"object"==typeof e}var Ae=E?function(e){return function(t){return e(t)}}(E):function(e){return je(e)&&Re(e.length)&&!!b[me(e)]};function De(e){return Me(e)?ue(e,!0):be(e)}var Le,Ne=(Le=function(e,t,n){ge(e,t,n)},xe(function(e,t){var n=-1,o=t.length,r=o>1?t[o-1]:void 0,i=o>2?t[2]:void 0;for(r=Le.length>3&&"function"==typeof r?(o--,r):void 0,i&&function(e,t,n){if(!Fe(n))return!1;var o=typeof t;return!!("number"==o?Me(n)&&we(t,n.length):"string"==o&&t in n)&&Te(n[t],e)}(t[0],t[1],i)&&(r=o<3?void 0:r,o=1),e=Object(e);++n<o;){var a=t[n];a&&Le(e,a,n,r)}return e}));function We(e){return e}n.exports=Ne}).call(this,n(91),n(196)(e))},function(e,t,n){var o=n(15)("iterator"),r=!1;try{var i=[7][o]();i.return=function(){r=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!r)return!1;var n=!1;try{var i=[7],a=i[o]();a.next=function(){return{done:n=!0}},i[o]=function(){return a},e(i)}catch(e){}return n}},function(e,t,n){var o=n(54),r=n(15)("toStringTag"),i="Arguments"==o(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),r))?n:i?o(t):"Object"==(a=o(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,n){var o=n(199),r=n(15)("iterator"),i=n(31);e.exports=n(13).getIteratorMethod=function(e){if(void 0!=e)return e[r]||e["@@iterator"]||i[o(e)]}},function(e,t,n){"use strict";var o=n(17),r=n(32);e.exports=function(e,t,n){t in e?o.f(e,t,r(0,n)):e[t]=n}},function(e,t,n){var o=n(31),r=n(15)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||i[r]===e)}},function(e,t,n){var o=n(28);e.exports=function(e,t,n,r){try{return r?t(o(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&o(i.call(e)),t}}},function(e,t,n){"use strict";var o=n(60),r=n(18),i=n(33),a=n(203),l=n(202),u=n(96),s=n(201),c=n(200);r(r.S+r.F*!n(198)(function(e){Array.from(e)}),"Array",{from:function(e){var t,n,r,f,d=i(e),p="function"==typeof this?this:Array,h=arguments.length,m=h>1?arguments[1]:void 0,y=void 0!==m,v=0,b=c(d);if(y&&(m=o(m,h>2?arguments[2]:void 0,2)),void 0==b||p==Array&&l(b))for(n=new p(t=u(d.length));t>v;v++)s(n,v,y?m(d[v],v):d[v]);else for(f=b.call(d),n=new p;!(r=f.next()).done;v++)s(n,v,y?a(f,m,[r.value,v],!0):r.value);return n.length=v,n}})},function(e,t,n){n(101),n(204),e.exports=n(13).Array.from},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=h(n(93));t.default=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),h=1;h<t;h++)n[h-1]=arguments[h];var m=e=r.default.apply(void 0,[{zIndex:l.default,isRtl:!1,userAgent:void 0},a.default,e].concat(n)),y=m.spacing,v=m.fontFamily,b=m.palette,g={spacing:y,fontFamily:v,palette:b};e=(0,r.default)({appBar:{color:b.primary1Color,textColor:b.alternateTextColor,height:y.desktopKeylineIncrement,titleFontWeight:d.default.fontWeightNormal,padding:y.desktopGutter},avatar:{color:b.canvasColor,backgroundColor:(0,i.emphasize)(b.canvasColor,.26)},badge:{color:b.alternateTextColor,textColor:b.textColor,primaryColor:b.primary1Color,primaryTextColor:b.alternateTextColor,secondaryColor:b.accent1Color,secondaryTextColor:b.alternateTextColor,fontWeight:d.default.fontWeightMedium},bottomNavigation:{backgroundColor:b.canvasColor,unselectedColor:(0,i.fade)(b.textColor,.54),selectedColor:b.primary1Color,height:56,unselectedFontSize:12,selectedFontSize:14},button:{height:36,minWidth:88,iconButtonSize:2*y.iconSize},card:{titleColor:(0,i.fade)(b.textColor,.87),subtitleColor:(0,i.fade)(b.textColor,.54),fontWeight:d.default.fontWeightMedium},cardMedia:{color:p.darkWhite,overlayContentBackground:p.lightBlack,titleColor:p.darkWhite,subtitleColor:p.lightWhite},cardText:{textColor:b.textColor},checkbox:{boxColor:b.textColor,checkedColor:b.primary1Color,requiredColor:b.primary1Color,disabledColor:b.disabledColor,labelColor:b.textColor,labelDisabledColor:b.disabledColor},chip:{backgroundColor:(0,i.emphasize)(b.canvasColor,.12),deleteIconColor:(0,i.fade)(b.textColor,.26),textColor:(0,i.fade)(b.textColor,.87),fontSize:14,fontWeight:d.default.fontWeightNormal,shadow:"0 1px 6px "+(0,i.fade)(b.shadowColor,.12)+",\n        0 1px 4px "+(0,i.fade)(b.shadowColor,.12)},datePicker:{color:b.primary1Color,textColor:b.alternateTextColor,calendarTextColor:b.textColor,selectColor:b.primary2Color,selectTextColor:b.alternateTextColor,calendarYearBackgroundColor:b.canvasColor,headerColor:b.pickerHeaderColor||b.primary1Color},dialog:{titleFontSize:22,bodyFontSize:16,bodyColor:(0,i.fade)(b.textColor,.6)},dropDownMenu:{accentColor:b.borderColor},enhancedButton:{tapHighlightColor:p.transparent},flatButton:{color:p.transparent,buttonFilterColor:"#999999",disabledTextColor:(0,i.fade)(b.textColor,.3),textColor:b.textColor,primaryTextColor:b.primary1Color,secondaryTextColor:b.accent1Color,fontSize:d.default.fontStyleButtonFontSize,fontWeight:d.default.fontWeightMedium},floatingActionButton:{buttonSize:56,miniSize:40,color:b.primary1Color,iconColor:b.alternateTextColor,secondaryColor:b.accent1Color,secondaryIconColor:b.alternateTextColor,disabledTextColor:b.disabledColor,disabledColor:(0,i.emphasize)(b.canvasColor,.12)},gridTile:{textColor:p.white},icon:{color:b.canvasColor,backgroundColor:b.primary1Color},inkBar:{backgroundColor:b.accent1Color},drawer:{width:4*y.desktopKeylineIncrement,color:b.canvasColor},listItem:{nestedLevelDepth:18,secondaryTextColor:b.secondaryTextColor,leftIconColor:p.grey600,rightIconColor:p.grey600},menu:{backgroundColor:b.canvasColor,containerBackgroundColor:b.canvasColor},menuItem:{dataHeight:32,height:48,hoverColor:(0,i.fade)(b.textColor,.1),padding:y.desktopGutter,selectedTextColor:b.accent1Color,rightIconDesktopFill:p.grey600},menuSubheader:{padding:y.desktopGutter,borderColor:b.borderColor,textColor:b.primary1Color},overlay:{backgroundColor:p.lightBlack},paper:{color:b.textColor,backgroundColor:b.canvasColor,zDepthShadows:[[1,6,.12,1,4,.12],[3,10,.16,3,10,.23],[10,30,.19,6,10,.23],[14,45,.25,10,18,.22],[19,60,.3,15,20,.22]].map(function(e){return"0 "+e[0]+"px "+e[1]+"px "+(0,i.fade)(b.shadowColor,e[2])+",\n         0 "+e[3]+"px "+e[4]+"px "+(0,i.fade)(b.shadowColor,e[5])})},radioButton:{borderColor:b.textColor,backgroundColor:b.alternateTextColor,checkedColor:b.primary1Color,requiredColor:b.primary1Color,disabledColor:b.disabledColor,size:24,labelColor:b.textColor,labelDisabledColor:b.disabledColor},raisedButton:{color:b.alternateTextColor,textColor:b.textColor,primaryColor:b.primary1Color,primaryTextColor:b.alternateTextColor,secondaryColor:b.accent1Color,secondaryTextColor:b.alternateTextColor,disabledColor:(0,i.darken)(b.alternateTextColor,.1),disabledTextColor:(0,i.fade)(b.textColor,.3),fontSize:d.default.fontStyleButtonFontSize,fontWeight:d.default.fontWeightMedium},refreshIndicator:{strokeColor:b.borderColor,loadingStrokeColor:b.primary1Color},ripple:{color:(0,i.fade)(b.textColor,.87)},slider:{trackSize:2,trackColor:b.primary3Color,trackColorSelected:b.accent3Color,handleSize:12,handleSizeDisabled:8,handleSizeActive:18,handleColorZero:b.primary3Color,handleFillColor:b.alternateTextColor,selectionColor:b.primary1Color,rippleColor:b.primary1Color},snackbar:{textColor:b.alternateTextColor,backgroundColor:b.textColor,actionColor:b.accent1Color},subheader:{color:(0,i.fade)(b.textColor,.54),fontWeight:d.default.fontWeightMedium},stepper:{backgroundColor:"transparent",hoverBackgroundColor:(0,i.fade)(p.black,.06),iconColor:b.primary1Color,hoveredIconColor:p.grey700,inactiveIconColor:p.grey500,textColor:(0,i.fade)(p.black,.87),disabledTextColor:(0,i.fade)(p.black,.26),connectorLineColor:p.grey400},svgIcon:{color:b.textColor},table:{backgroundColor:b.canvasColor},tableFooter:{borderColor:b.borderColor,textColor:b.accent3Color},tableHeader:{borderColor:b.borderColor},tableHeaderColumn:{textColor:b.accent3Color,height:56,spacing:24},tableRow:{hoverColor:b.accent2Color,stripeColor:(0,i.fade)((0,i.lighten)(b.primary1Color,.5),.4),selectedColor:b.borderColor,textColor:b.textColor,borderColor:b.borderColor,height:48},tableRowColumn:{height:48,spacing:24},tabs:{backgroundColor:b.primary1Color,textColor:(0,i.fade)(b.alternateTextColor,.7),selectedTextColor:b.alternateTextColor},textField:{textColor:b.textColor,hintColor:b.disabledColor,floatingLabelColor:b.disabledColor,disabledTextColor:b.disabledColor,errorColor:p.red500,focusColor:b.primary1Color,backgroundColor:"transparent",borderColor:b.borderColor},timePicker:{color:b.alternateTextColor,textColor:b.alternateTextColor,accentColor:b.primary1Color,clockColor:b.textColor,clockCircleColor:b.clockCircleColor,headerColor:b.pickerHeaderColor||b.primary1Color,selectColor:b.primary2Color,selectTextColor:b.alternateTextColor},toggle:{thumbOnColor:b.primary1Color,thumbOffColor:b.accent2Color,thumbDisabledColor:b.borderColor,thumbRequiredColor:b.primary1Color,trackOnColor:(0,i.fade)(b.primary1Color,.5),trackOffColor:b.primary3Color,trackDisabledColor:b.primary3Color,labelColor:b.textColor,labelDisabledColor:b.disabledColor,trackRequiredColor:(0,i.fade)(b.primary1Color,.5)},toolbar:{color:(0,i.fade)(b.textColor,.54),hoverColor:(0,i.fade)(b.textColor,.87),backgroundColor:(0,i.darken)(b.accent2Color,.05),height:56,titleFontSize:20,iconColor:(0,i.fade)(b.textColor,.4),separatorColor:(0,i.fade)(b.textColor,.175),menuHoverColor:(0,i.fade)(b.textColor,.1)},tooltip:{color:p.white,rippleBackgroundColor:p.grey700,opacity:.9}},e,{baseTheme:g,rawTheme:g});var x=[u.default,c.default,s.default].map(function(t){return t(e)}).filter(function(e){return e});return e.prepareStyles=f.default.apply(void 0,(0,o.default)(x)),e};var r=h(n(197)),i=n(38),a=h(n(195)),l=h(n(193)),u=h(n(192)),s=h(n(167)),c=h(n(166)),f=h(n(163)),d=h(n(162)),p=n(48);function h(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){var o=n(18);o(o.S,"Object",{create:n(55)})},function(e,t,n){n(207);var o=n(13).Object;e.exports=function(e,t){return o.create(e,t)}},function(e,t,n){e.exports={default:n(208),__esModule:!0}},function(e,t,n){var o=n(27),r=n(28),i=function(e,t){if(r(e),!o(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,o){try{(o=n(60)(Function.call,n(94).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:o(e,n),e}}({},!1):void 0),check:i}},function(e,t,n){var o=n(18);o(o.S,"Object",{setPrototypeOf:n(210).set})},function(e,t,n){n(211),e.exports=n(13).Object.setPrototypeOf},function(e,t,n){e.exports={default:n(212),__esModule:!0}},function(e,t,n){n(50)("observable")},function(e,t,n){n(50)("asyncIterator")},function(e,t){},function(e,t,n){var o=n(25),r=n(95).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return r(e)}catch(e){return a.slice()}}(e):r(o(e))}},function(e,t,n){var o=n(54);e.exports=Array.isArray||function(e){return"Array"==o(e)}},function(e,t,n){var o=n(30),r=n(49),i=n(39);e.exports=function(e){var t=o(e),n=r.f;if(n)for(var a,l=n(e),u=i.f,s=0;l.length>s;)u.call(e,a=l[s++])&&t.push(a);return t}},function(e,t,n){var o=n(40)("meta"),r=n(27),i=n(22),a=n(17).f,l=0,u=Object.isExtensible||function(){return!0},s=!n(26)(function(){return u(Object.preventExtensions({}))}),c=function(e){a(e,o,{value:{i:"O"+ ++l,w:{}}})},f=e.exports={KEY:o,NEED:!1,fastKey:function(e,t){if(!r(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,o)){if(!u(e))return"F";if(!t)return"E";c(e)}return e[o].i},getWeak:function(e,t){if(!i(e,o)){if(!u(e))return!0;if(!t)return!1;c(e)}return e[o].w},onFreeze:function(e){return s&&f.NEED&&u(e)&&!i(e,o)&&c(e),e}}},function(e,t,n){"use strict";var o=n(19),r=n(22),i=n(21),a=n(18),l=n(99),u=n(220).KEY,s=n(26),c=n(61),f=n(52),d=n(40),p=n(15),h=n(51),m=n(50),y=n(219),v=n(218),b=n(28),g=n(27),x=n(25),k=n(59),C=n(32),w=n(55),_=n(217),S=n(94),T=n(17),E=n(30),O=S.f,M=T.f,P=_.f,I=o.Symbol,R=o.JSON,F=R&&R.stringify,j=p("_hidden"),A=p("toPrimitive"),D={}.propertyIsEnumerable,L=c("symbol-registry"),N=c("symbols"),W=c("op-symbols"),z=Object.prototype,B="function"==typeof I,U=o.QObject,H=!U||!U.prototype||!U.prototype.findChild,K=i&&s(function(){return 7!=w(M({},"a",{get:function(){return M(this,"a",{value:7}).a}})).a})?function(e,t,n){var o=O(z,t);o&&delete z[t],M(e,t,n),o&&e!==z&&M(z,t,o)}:M,V=function(e){var t=N[e]=w(I.prototype);return t._k=e,t},q=B&&"symbol"==typeof I.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof I},G=function(e,t,n){return e===z&&G(W,t,n),b(e),t=k(t,!0),b(n),r(N,t)?(n.enumerable?(r(e,j)&&e[j][t]&&(e[j][t]=!1),n=w(n,{enumerable:C(0,!1)})):(r(e,j)||M(e,j,C(1,{})),e[j][t]=!0),K(e,t,n)):M(e,t,n)},$=function(e,t){b(e);for(var n,o=y(t=x(t)),r=0,i=o.length;i>r;)G(e,n=o[r++],t[n]);return e},Y=function(e){var t=D.call(this,e=k(e,!0));return!(this===z&&r(N,e)&&!r(W,e))&&(!(t||!r(this,e)||!r(N,e)||r(this,j)&&this[j][e])||t)},Q=function(e,t){if(e=x(e),t=k(t,!0),e!==z||!r(N,t)||r(W,t)){var n=O(e,t);return!n||!r(N,t)||r(e,j)&&e[j][t]||(n.enumerable=!0),n}},X=function(e){for(var t,n=P(x(e)),o=[],i=0;n.length>i;)r(N,t=n[i++])||t==j||t==u||o.push(t);return o},Z=function(e){for(var t,n=e===z,o=P(n?W:x(e)),i=[],a=0;o.length>a;)!r(N,t=o[a++])||n&&!r(z,t)||i.push(N[t]);return i};B||(l((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(n){this===z&&t.call(W,n),r(this,j)&&r(this[j],e)&&(this[j][e]=!1),K(this,e,C(1,n))};return i&&H&&K(z,e,{configurable:!0,set:t}),V(e)}).prototype,"toString",function(){return this._k}),S.f=Q,T.f=G,n(95).f=_.f=X,n(39).f=Y,n(49).f=Z,i&&!n(56)&&l(z,"propertyIsEnumerable",Y,!0),h.f=function(e){return V(p(e))}),a(a.G+a.W+a.F*!B,{Symbol:I});for(var J="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;J.length>ee;)p(J[ee++]);for(var te=E(p.store),ne=0;te.length>ne;)m(te[ne++]);a(a.S+a.F*!B,"Symbol",{for:function(e){return r(L,e+="")?L[e]:L[e]=I(e)},keyFor:function(e){if(!q(e))throw TypeError(e+" is not a symbol!");for(var t in L)if(L[t]===e)return t},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!B,"Object",{create:function(e,t){return void 0===t?w(e):$(w(e),t)},defineProperty:G,defineProperties:$,getOwnPropertyDescriptor:Q,getOwnPropertyNames:X,getOwnPropertySymbols:Z}),R&&a(a.S+a.F*(!B||s(function(){var e=I();return"[null]"!=F([e])||"{}"!=F({a:e})||"{}"!=F(Object(e))})),"JSON",{stringify:function(e){for(var t,n,o=[e],r=1;arguments.length>r;)o.push(arguments[r++]);if(n=t=o[1],(g(t)||void 0!==e)&&!q(e))return v(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!q(t))return t}),o[1]=t,F.apply(R,o)}}),I.prototype[A]||n(29)(I.prototype,A,I.prototype.valueOf),f(I,"Symbol"),f(Math,"Math",!0),f(o.JSON,"JSON",!0)},function(e,t,n){n(221),n(216),n(215),n(214),e.exports=n(13).Symbol},function(e,t,n){e.exports={default:n(222),__esModule:!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t){e.exports=function(){}},function(e,t,n){"use strict";var o=n(225),r=n(224),i=n(31),a=n(25);e.exports=n(100)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,r(1)):r(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},function(e,t,n){n(226);for(var o=n(19),r=n(29),i=n(31),a=n(15)("toStringTag"),l="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),u=0;u<l.length;u++){var s=l[u],c=o[s],f=c&&c.prototype;f&&!f[a]&&r(f,a,s),i[s]=i.Array}},function(e,t,n){var o=n(19).document;e.exports=o&&o.documentElement},function(e,t,n){var o=n(57),r=Math.max,i=Math.min;e.exports=function(e,t){return(e=o(e))<0?r(e+t,0):i(e,t)}},function(e,t,n){var o=n(25),r=n(96),i=n(229);e.exports=function(e){return function(t,n,a){var l,u=o(t),s=r(u.length),c=i(a,s);if(e&&n!=n){for(;s>c;)if((l=u[c++])!=l)return!0}else for(;s>c;c++)if((e||c in u)&&u[c]===n)return e||c||0;return!e&&-1}}},function(e,t,n){var o=n(17),r=n(28),i=n(30);e.exports=n(21)?Object.defineProperties:function(e,t){r(e);for(var n,a=i(t),l=a.length,u=0;l>u;)o.f(e,n=a[u++],t[n]);return e}},function(e,t,n){"use strict";var o=n(55),r=n(32),i=n(52),a={};n(29)(a,n(15)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=o(a,{next:r(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var o=n(57),r=n(63);e.exports=function(e){return function(t,n){var i,a,l=String(r(t)),u=o(n),s=l.length;return u<0||u>=s?e?"":void 0:(i=l.charCodeAt(u))<55296||i>56319||u+1===s||(a=l.charCodeAt(u+1))<56320||a>57343?e?l.charAt(u):i:e?l.slice(u,u+2):a-56320+(i-55296<<10)+65536}}},function(e,t,n){n(101),n(227),e.exports=n(51).f("iterator")},function(e,t,n){e.exports={default:n(234),__esModule:!0}},function(e,t,n){var o=n(18);o(o.S+o.F*!n(21),"Object",{defineProperty:n(17).f})},function(e,t,n){n(236);var o=n(13).Object;e.exports=function(e,t,n){return o.defineProperty(e,t,n)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var o=n(33),r=n(106);n(105)("getPrototypeOf",function(){return function(e){return r(o(e))}})},function(e,t,n){n(239),e.exports=n(13).Object.getPrototypeOf},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var o=n(67),r=n(68),i=n(242);e.exports=function(){function e(e,t,n,o,a,l){l!==i&&r(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var o=n(244);e.exports=function(e){return o(e)&&3==e.nodeType}},function(e,t,n){"use strict";var o=n(245);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!o(t)&&(o(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var o=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:o,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:o&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:o&&!!window.screen,isInWorker:!o};e.exports=r},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var o=n(68),r=n(0),i=n(248),a=n(109),l=n(67),u=n(247),s=n(66),c=n(246),f=n(108);function d(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||d("227");var p={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,o,r,i,a,l,u){(function(e,t,n,o,r,i,a,l,u){this._hasCaughtError=!1,this._caughtError=null;var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(p,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,o,r,i,a,l,u){if(p.invokeGuardedCallback.apply(this,arguments),p.hasCaughtError()){var s=p.clearCaughtError();p._hasRethrowError||(p._hasRethrowError=!0,p._rethrowError=s)}},rethrowCaughtError:function(){return function(){if(p._hasRethrowError){var e=p._rethrowError;throw p._rethrowError=null,p._hasRethrowError=!1,e}}.apply(p,arguments)},hasCaughtError:function(){return p._hasCaughtError},clearCaughtError:function(){if(p._hasCaughtError){var e=p._caughtError;return p._caughtError=null,p._hasCaughtError=!1,e}d("198")}};var h=null,m={};function y(){if(h)for(var e in m){var t=m[e],n=h.indexOf(e);if(-1<n||d("96",e),!b[n])for(var o in t.extractEvents||d("97",e),b[n]=t,n=t.eventTypes){var r=void 0,i=n[o],a=t,l=o;g.hasOwnProperty(l)&&d("99",l),g[l]=i;var u=i.phasedRegistrationNames;if(u){for(r in u)u.hasOwnProperty(r)&&v(u[r],a,l);r=!0}else i.registrationName?(v(i.registrationName,a,l),r=!0):r=!1;r||d("98",o,e)}}}function v(e,t,n){x[e]&&d("100",e),x[e]=t,k[e]=t.eventTypes[n].dependencies}var b=[],g={},x={},k={};function C(e){h&&d("101"),h=Array.prototype.slice.call(e),y()}function w(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var o=e[t];m.hasOwnProperty(t)&&m[t]===o||(m[t]&&d("102",t),m[t]=o,n=!0)}n&&y()}var _=Object.freeze({plugins:b,eventNameDispatchConfigs:g,registrationNameModules:x,registrationNameDependencies:k,possibleRegistrationNames:null,injectEventPluginOrder:C,injectEventPluginsByName:w}),S=null,T=null,E=null;function O(e,t,n,o){t=e.type||"unknown-event",e.currentTarget=E(o),p.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function M(e,t){return null==t&&d("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var I=null;function R(e,t){if(e){var n=e._dispatchListeners,o=e._dispatchInstances;if(Array.isArray(n))for(var r=0;r<n.length&&!e.isPropagationStopped();r++)O(e,t,n[r],o[r]);else n&&O(e,t,n,o);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function F(e){return R(e,!0)}function j(e){return R(e,!1)}var A={injectEventPluginOrder:C,injectEventPluginsByName:w};function D(e,t){var n=e.stateNode;if(!n)return null;var o=S(n);if(!o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&d("231",t,typeof n),n)}function L(e,t){null!==e&&(I=M(I,e)),e=I,I=null,e&&(P(e,t?F:j),I&&d("95"),p.rethrowCaughtError())}function N(e,t,n,o){for(var r=null,i=0;i<b.length;i++){var a=b[i];a&&(a=a.extractEvents(e,t,n,o))&&(r=M(r,a))}L(r,!1)}var W=Object.freeze({injection:A,getListener:D,runEventsInBatch:L,runExtractedEventsInBatch:N}),z=Math.random().toString(36).slice(2),B="__reactInternalInstance$"+z,U="__reactEventHandlers$"+z;function H(e){if(e[B])return e[B];for(;!e[B];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[B]).tag||6===e.tag?e:null}function K(e){if(5===e.tag||6===e.tag)return e.stateNode;d("33")}function V(e){return e[U]||null}var q=Object.freeze({precacheFiberNode:function(e,t){t[B]=e},getClosestInstanceFromNode:H,getInstanceFromNode:function(e){return!(e=e[B])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:K,getFiberCurrentPropsFromNode:V,updateFiberProps:function(e,t){e[U]=t}});function G(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){for(var o=[];e;)o.push(e),e=G(e);for(e=o.length;0<e--;)t(o[e],"captured",n);for(e=0;e<o.length;e++)t(o[e],"bubbled",n)}function Y(e,t,n){(t=D(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=M(n._dispatchListeners,t),n._dispatchInstances=M(n._dispatchInstances,e))}function Q(e){e&&e.dispatchConfig.phasedRegistrationNames&&$(e._targetInst,Y,e)}function X(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;$(t=t?G(t):null,Y,e)}}function Z(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=D(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=M(n._dispatchListeners,t),n._dispatchInstances=M(n._dispatchInstances,e))}function J(e){e&&e.dispatchConfig.registrationName&&Z(e._targetInst,null,e)}function ee(e){P(e,Q)}function te(e,t,n,o){if(n&&o)e:{for(var r=n,i=o,a=0,l=r;l;l=G(l))a++;l=0;for(var u=i;u;u=G(u))l++;for(;0<a-l;)r=G(r),a--;for(;0<l-a;)i=G(i),l--;for(;a--;){if(r===i||r===i.alternate)break e;r=G(r),i=G(i)}r=null}else r=null;for(i=r,r=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)r.push(n),n=G(n);for(n=[];o&&o!==i&&(null===(a=o.alternate)||a!==i);)n.push(o),o=G(o);for(o=0;o<r.length;o++)Z(r[o],"bubbled",e);for(e=n.length;0<e--;)Z(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){P(e,X)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){P(e,J)}}),oe=null;function re(){return!oe&&i.canUseDOM&&(oe="textContent"in document.documentElement?"textContent":"innerText"),oe}var ie={_root:null,_startText:null,_fallbackText:null};function ae(){if(ie._fallbackText)return ie._fallbackText;var e,t,n=ie._startText,o=n.length,r=le(),i=r.length;for(e=0;e<o&&n[e]===r[e];e++);var a=o-e;for(t=1;t<=a&&n[o-t]===r[i-t];t++);return ie._fallbackText=r.slice(e,1<t?1-t:void 0),ie._fallbackText}function le(){return"value"in ie._root?ie._root.value:ie._root[re()]}var ue="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),se={type:null,target:null,currentTarget:l.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ce(e,t,n,o){for(var r in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(r)&&((t=e[r])?this[r]=t(n):"target"===r?this.target=o:this[r]=n[r]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?l.thatReturnsTrue:l.thatReturnsFalse,this.isPropagationStopped=l.thatReturnsFalse,this}function fe(e,t,n,o){if(this.eventPool.length){var r=this.eventPool.pop();return this.call(r,e,t,n,o),r}return new this(e,t,n,o)}function de(e){e instanceof this||d("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function pe(e){e.eventPool=[],e.getPooled=fe,e.release=de}a(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=l.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=l.thatReturnsTrue)},persist:function(){this.isPersistent=l.thatReturnsTrue},isPersistent:l.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ue.length;t++)this[ue[t]]=null}}),ce.Interface=se,ce.extend=function(e){function t(){}function n(){return o.apply(this,arguments)}var o=this;t.prototype=o.prototype;var r=new t;return a(r,n.prototype),n.prototype=r,n.prototype.constructor=n,n.Interface=a({},o.Interface,e),n.extend=o.extend,pe(n),n},pe(ce);var he=ce.extend({data:null}),me=ce.extend({data:null}),ye=[9,13,27,32],ve=i.canUseDOM&&"CompositionEvent"in window,be=null;i.canUseDOM&&"documentMode"in document&&(be=document.documentMode);var ge=i.canUseDOM&&"TextEvent"in window&&!be,xe=i.canUseDOM&&(!ve||be&&8<be&&11>=be),ke=String.fromCharCode(32),Ce={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},we=!1;function _e(e,t){switch(e){case"topKeyUp":return-1!==ye.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Se(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Te=!1;var Ee={eventTypes:Ce,extractEvents:function(e,t,n,o){var r=void 0,i=void 0;if(ve)e:{switch(e){case"topCompositionStart":r=Ce.compositionStart;break e;case"topCompositionEnd":r=Ce.compositionEnd;break e;case"topCompositionUpdate":r=Ce.compositionUpdate;break e}r=void 0}else Te?_e(e,n)&&(r=Ce.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(r=Ce.compositionStart);return r?(xe&&(Te||r!==Ce.compositionStart?r===Ce.compositionEnd&&Te&&(i=ae()):(ie._root=o,ie._startText=le(),Te=!0)),r=he.getPooled(r,t,n,o),i?r.data=i:null!==(i=Se(n))&&(r.data=i),ee(r),i=r):i=null,(e=ge?function(e,t){switch(e){case"topCompositionEnd":return Se(t);case"topKeyPress":return 32!==t.which?null:(we=!0,ke);case"topTextInput":return(e=t.data)===ke&&we?null:e;default:return null}}(e,n):function(e,t){if(Te)return"topCompositionEnd"===e||!ve&&_e(e,t)?(e=ae(),ie._root=null,ie._startText=null,ie._fallbackText=null,Te=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return xe?null:t.data;default:return null}}(e,n))?((t=me.getPooled(Ce.beforeInput,t,n,o)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Oe=null,Me={injectFiberControlledHostComponent:function(e){Oe=e}},Pe=null,Ie=null;function Re(e){if(e=T(e)){Oe&&"function"==typeof Oe.restoreControlledState||d("194");var t=S(e.stateNode);Oe.restoreControlledState(e.stateNode,e.type,t)}}function Fe(e){Pe?Ie?Ie.push(e):Ie=[e]:Pe=e}function je(){return null!==Pe||null!==Ie}function Ae(){if(Pe){var e=Pe,t=Ie;if(Ie=Pe=null,Re(e),t)for(e=0;e<t.length;e++)Re(t[e])}}var De=Object.freeze({injection:Me,enqueueStateRestore:Fe,needsStateRestore:je,restoreStateIfNeeded:Ae});function Le(e,t){return e(t)}function Ne(e,t,n){return e(t,n)}function We(){}var ze=!1;function Be(e,t){if(ze)return e(t);ze=!0;try{return Le(e,t)}finally{ze=!1,je()&&(We(),Ae())}}var Ue={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function He(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ue[e.type]:"textarea"===t}function Ke(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ve(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function qe(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ge(e){e._valueTracker||(e._valueTracker=function(e){var t=qe(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),o=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){o=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return o},setValue:function(e){o=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),o="";return e&&(o=qe(e)?e.checked?"true":"false":e.value),(e=o)!==n&&(t.setValue(e),!0)}var Ye=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Qe="function"==typeof Symbol&&Symbol.for,Xe=Qe?Symbol.for("react.element"):60103,Ze=Qe?Symbol.for("react.call"):60104,Je=Qe?Symbol.for("react.return"):60105,et=Qe?Symbol.for("react.portal"):60106,tt=Qe?Symbol.for("react.fragment"):60107,nt=Qe?Symbol.for("react.strict_mode"):60108,ot=Qe?Symbol.for("react.provider"):60109,rt=Qe?Symbol.for("react.context"):60110,it=Qe?Symbol.for("react.async_mode"):60111,at=Qe?Symbol.for("react.forward_ref"):60112,lt="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||void 0===e?null:"function"==typeof(e=lt&&e[lt]||e["@@iterator"])?e:null}function st(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Ze:return"ReactCall";case Je:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case at:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function ct(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,o=e._debugSource,r=st(e),i=null;n&&(i=st(n)),n=o,r="\n    in "+(r||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:r=""}t+=r,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,dt={},pt={};function ht(e,t,n,o,r){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=o,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t}var mt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){mt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];mt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){mt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){mt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){mt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){mt[e]=new ht(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){mt[e]=new ht(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){mt[e]=new ht(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){mt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var yt=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function bt(e,t,n,o){var r=mt.hasOwnProperty(t)?mt[t]:null;(null!==r?0===r.type:!o&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,o){if(null===t||void 0===t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,o)&&(n=null),o||null===r?function(e){return!!pt.hasOwnProperty(e)||!dt.hasOwnProperty(e)&&(ft.test(e)?pt[e]=!0:(dt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,o=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,o?e.setAttributeNS(o,t,n):e.setAttribute(t,n))))}function gt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xt(e,t){var n=null==t.defaultValue?"":t.defaultValue,o=null!=t.checked?t.checked:t.defaultChecked;n=St(null!=t.value?t.value:n),e._wrapperState={initialChecked:o,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function kt(e,t){null!=(t=t.checked)&&bt(e,"checked",t,!1)}function Ct(e,t){kt(e,t);var n=St(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?_t(e,t.type,n):t.hasOwnProperty("defaultValue")&&_t(e,t.type,St(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function wt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function _t(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function St(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(yt,vt);mt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(yt,vt);mt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(yt,vt);mt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),mt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var Tt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Et(e,t,n){return(e=ce.getPooled(Tt.change,e,t,n)).type="change",Fe(n),ee(e),e}var Ot=null,Mt=null;function Pt(e){L(e,!1)}function It(e){if($e(K(e)))return e}function Rt(e,t){if("topChange"===e)return t}var Ft=!1;function jt(){Ot&&(Ot.detachEvent("onpropertychange",At),Mt=Ot=null)}function At(e){"value"===e.propertyName&&It(Mt)&&Be(Pt,e=Et(Mt,e,Ke(e)))}function Dt(e,t,n){"topFocus"===e?(jt(),Mt=n,(Ot=t).attachEvent("onpropertychange",At)):"topBlur"===e&&jt()}function Lt(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return It(Mt)}function Nt(e,t){if("topClick"===e)return It(t)}function Wt(e,t){if("topInput"===e||"topChange"===e)return It(t)}i.canUseDOM&&(Ft=Ve("input")&&(!document.documentMode||9<document.documentMode));var zt={eventTypes:Tt,_isInputEventSupported:Ft,extractEvents:function(e,t,n,o){var r=t?K(t):window,i=void 0,a=void 0,l=r.nodeName&&r.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===r.type?i=Rt:He(r)?Ft?i=Wt:(i=Lt,a=Dt):(l=r.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===r.type||"radio"===r.type)&&(i=Nt),i&&(i=i(e,t)))return Et(i,n,o);a&&a(e,r,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||r._wrapperState)&&e.controlled&&"number"===r.type&&_t(r,"number",r.value)}},Bt=ce.extend({view:null,detail:null}),Ut={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ut[e])&&!!t[e]}function Kt(){return Ht}var Vt=Bt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Kt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),qt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Gt={eventTypes:qt,extractEvents:function(e,t,n,o){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var r=o.window===o?o:(r=o.ownerDocument)?r.defaultView||r.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?H(t):null):e=null,e===t)return null;var i=null==e?r:K(e);r=null==t?r:K(t);var a=Vt.getPooled(qt.mouseLeave,e,n,o);return a.type="mouseleave",a.target=i,a.relatedTarget=r,(n=Vt.getPooled(qt.mouseEnter,t,n,o)).type="mouseenter",n.target=r,n.relatedTarget=i,te(a,n,e,t),[a,n]}};function $t(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Yt(e){return!!(e=e._reactInternalFiber)&&2===$t(e)}function Qt(e){2!==$t(e)&&d("188")}function Xt(e){var t=e.alternate;if(!t)return 3===(t=$t(e))&&d("188"),1===t?null:e;for(var n=e,o=t;;){var r=n.return,i=r?r.alternate:null;if(!r||!i)break;if(r.child===i.child){for(var a=r.child;a;){if(a===n)return Qt(r),e;if(a===o)return Qt(r),t;a=a.sibling}d("188")}if(n.return!==o.return)n=r,o=i;else{a=!1;for(var l=r.child;l;){if(l===n){a=!0,n=r,o=i;break}if(l===o){a=!0,o=r,n=i;break}l=l.sibling}if(!a){for(l=i.child;l;){if(l===n){a=!0,n=i,o=r;break}if(l===o){a=!0,o=i,n=r;break}l=l.sibling}a||d("189")}}n.alternate!==o&&d("190")}return 3!==n.tag&&d("188"),n.stateNode.current===n?e:t}function Zt(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Jt=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=Bt.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var on={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},rn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=Bt.extend({key:function(e){if(e.key){var t=on[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?rn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Kt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ln=Vt.extend({dataTransfer:null}),un=Bt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Kt}),sn=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),cn=Vt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},dn={};function pn(e,t){var n=e[0].toUpperCase()+e.slice(1),o="on"+n;t={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[n="top"+n],isInteractive:t},fn[e]=t,dn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){pn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){pn(e,!1)});var hn={eventTypes:fn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=dn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,o){var r=dn[e];if(!r)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Vt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=ln;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=un;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Jt;break;case"topTransitionEnd":e=sn;break;case"topScroll":e=Bt;break;case"topWheel":e=cn;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=ce}return ee(t=e.getPooled(r,t,n,o)),t}},mn=hn.isInteractiveTopLevelEventType,yn=[];function vn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=H(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],N(e.topLevelType,t,e.nativeEvent,Ke(e.nativeEvent))}var bn=!0;function gn(e){bn=!!e}function xn(e,t,n){if(!n)return null;e=(mn(e)?Cn:wn).bind(null,e),n.addEventListener(t,e,!1)}function kn(e,t,n){if(!n)return null;e=(mn(e)?Cn:wn).bind(null,e),n.addEventListener(t,e,!0)}function Cn(e,t){Ne(wn,e,t)}function wn(e,t){if(bn){var n=Ke(t);if(null!==(n=H(n))&&"number"==typeof n.tag&&2!==$t(n)&&(n=null),yn.length){var o=yn.pop();o.topLevelType=e,o.nativeEvent=t,o.targetInst=n,e=o}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Be(vn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>yn.length&&yn.push(e)}}}var _n=Object.freeze({get _enabled(){return bn},setEnabled:gn,isEnabled:function(){return bn},trapBubbledEvent:xn,trapCapturedEvent:kn,dispatchEvent:wn});function Sn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var Tn={animationend:Sn("Animation","AnimationEnd"),animationiteration:Sn("Animation","AnimationIteration"),animationstart:Sn("Animation","AnimationStart"),transitionend:Sn("Transition","TransitionEnd")},En={},On={};function Mn(e){if(En[e])return En[e];if(!Tn[e])return e;var t,n=Tn[e];for(t in n)if(n.hasOwnProperty(t)&&t in On)return En[e]=n[t];return e}i.canUseDOM&&(On=document.createElement("div").style,"AnimationEvent"in window||(delete Tn.animationend.animation,delete Tn.animationiteration.animation,delete Tn.animationstart.animation),"TransitionEvent"in window||delete Tn.transitionend.transition);var Pn={topAnimationEnd:Mn("animationend"),topAnimationIteration:Mn("animationiteration"),topAnimationStart:Mn("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:Mn("transitionend"),topWheel:"wheel"},In={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Rn={},Fn=0,jn="_reactListenersID"+(""+Math.random()).slice(2);function An(e){return Object.prototype.hasOwnProperty.call(e,jn)||(e[jn]=Fn++,Rn[e[jn]]={}),Rn[e[jn]]}function Dn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Ln(e,t){var n,o=Dn(e);for(e=0;o;){if(3===o.nodeType){if(n=e+o.textContent.length,e<=t&&n>=t)return{node:o,offset:t-e};e=n}e:{for(;o;){if(o.nextSibling){o=o.nextSibling;break e}o=o.parentNode}o=void 0}o=Dn(o)}}function Nn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Wn=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Bn=null,Un=null,Hn=null,Kn=!1;function Vn(e,t){if(Kn||null==Bn||Bn!==u())return null;var n=Bn;return"selectionStart"in n&&Nn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Hn&&s(Hn,n)?null:(Hn=n,(e=ce.getPooled(zn.select,Un,e,t)).type="select",e.target=Bn,ee(e),e)}var qn={eventTypes:zn,extractEvents:function(e,t,n,o){var r,i=o.window===o?o.document:9===o.nodeType?o:o.ownerDocument;if(!(r=!i)){e:{i=An(i),r=k.onSelect;for(var a=0;a<r.length;a++){var l=r[a];if(!i.hasOwnProperty(l)||!i[l]){i=!1;break e}}i=!0}r=!i}if(r)return null;switch(i=t?K(t):window,e){case"topFocus":(He(i)||"true"===i.contentEditable)&&(Bn=i,Un=t,Hn=null);break;case"topBlur":Hn=Un=Bn=null;break;case"topMouseDown":Kn=!0;break;case"topContextMenu":case"topMouseUp":return Kn=!1,Vn(n,o);case"topSelectionChange":if(Wn)break;case"topKeyDown":case"topKeyUp":return Vn(n,o)}return null}};function Gn(e,t,n,o){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=o,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function $n(e,t,n){var o=e.alternate;return null===o?((o=new Gn(e.tag,t,e.key,e.mode)).type=e.type,o.stateNode=e.stateNode,o.alternate=e,e.alternate=o):(o.pendingProps=t,o.effectTag=0,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null),o.expirationTime=n,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,o.sibling=e.sibling,o.index=e.index,o.ref=e.ref,o}function Yn(e,t,n){var o=e.type,r=e.key;e=e.props;var i=void 0;if("function"==typeof o)i=o.prototype&&o.prototype.isReactComponent?2:0;else if("string"==typeof o)i=5;else switch(o){case tt:return Qn(e.children,t,n,r);case it:i=11,t|=3;break;case nt:i=11,t|=2;break;case Ze:i=7;break;case Je:i=9;break;default:if("object"==typeof o&&null!==o)switch(o.$$typeof){case ot:i=13;break;case rt:i=12;break;case at:i=14;break;default:if("number"==typeof o.tag)return(t=o).pendingProps=e,t.expirationTime=n,t;d("130",null==o?o:typeof o,"")}else d("130",null==o?o:typeof o,"")}return(t=new Gn(i,e,r,t)).type=o,t.expirationTime=n,t}function Qn(e,t,n,o){return(e=new Gn(10,e,o,t)).expirationTime=n,e}function Xn(e,t,n){return(e=new Gn(6,e,null,t)).expirationTime=n,e}function Zn(e,t,n){return(t=new Gn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}A.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),S=q.getFiberCurrentPropsFromNode,T=q.getInstanceFromNode,E=q.getNodeFromInstance,A.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:Gt,ChangeEventPlugin:zt,SelectEventPlugin:qn,BeforeInputEventPlugin:Ee});var Jn=null,eo=null;function to(e){return function(t){try{return e(t)}catch(e){}}}function no(e){"function"==typeof Jn&&Jn(e)}function oo(e){"function"==typeof eo&&eo(e)}function ro(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function io(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ao=void 0,lo=void 0;function uo(e){ao=lo=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=ro(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=ro(null)):e=null,ao=n,lo=e!==n?e:null}function so(e,t){uo(e),e=ao;var n=lo;null===n?io(e,t):null===e.last||null===n.last?(io(e,t),io(n,t)):(io(e,t),n.last=t)}function co(e,t,n,o){return"function"==typeof(e=e.partialState)?e.call(t,n,o):e}function fo(e,t,n,o,r,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var l=!0,u=n.first,s=!1;null!==u;){var c=u.expirationTime;if(c>i){var f=n.expirationTime;(0===f||f>c)&&(n.expirationTime=c),s||(s=!0,n.baseState=e)}else s||(n.first=u.next,null===n.first&&(n.last=null)),u.isReplace?(e=co(u,o,e,r),l=!0):(c=co(u,o,e,r))&&(e=l?a({},e,c):a(e,c),l=!1),u.isForced&&(n.hasForceUpdate=!0),null!==u.callback&&(null===(c=n.callbackList)&&(c=n.callbackList=[]),c.push(u)),null!==u.capturedValue&&(null===(c=n.capturedValues)?n.capturedValues=[u.capturedValue]:c.push(u.capturedValue));u=u.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),s||(n.baseState=e),e}function po(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var o=n[e],r=o.callback;o.callback=null,"function"!=typeof r&&d("191",r),r.call(t)}}var ho=Array.isArray;function mo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var o=void 0;(n=n._owner)&&(2!==n.tag&&d("110"),o=n.stateNode),o||d("147",e);var r=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===r?t.ref:((t=function(e){var t=o.refs===f?o.refs={}:o.refs;null===e?delete t[r]:t[r]=e})._stringRef=r,t)}"string"!=typeof e&&d("148"),n._owner||d("254",e)}return e}function yo(e,t){"textarea"!==e.type&&d("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function vo(e){function t(t,n){if(e){var o=t.lastEffect;null!==o?(o.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,o){if(!e)return null;for(;null!==o;)t(n,o),o=o.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t,n){return(e=$n(e,t,n)).index=0,e.sibling=null,e}function i(t,n,o){return t.index=o,e?null!==(o=t.alternate)?(o=o.index)<n?(t.effectTag=2,n):o:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,o){return null===t||6!==t.tag?((t=Xn(n,e.mode,o)).return=e,t):((t=r(t,n,o)).return=e,t)}function u(e,t,n,o){return null!==t&&t.type===n.type?((o=r(t,n.props,o)).ref=mo(e,t,n),o.return=e,o):((o=Yn(n,e.mode,o)).ref=mo(e,t,n),o.return=e,o)}function s(e,t,n,o){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Zn(n,e.mode,o)).return=e,t):((t=r(t,n.children||[],o)).return=e,t)}function c(e,t,n,o,i){return null===t||10!==t.tag?((t=Qn(n,e.mode,o,i)).return=e,t):((t=r(t,n,o)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Xe:return(n=Yn(t,e.mode,n)).ref=mo(e,null,t),n.return=e,n;case et:return(t=Zn(t,e.mode,n)).return=e,t}if(ho(t)||ut(t))return(t=Qn(t,e.mode,n,null)).return=e,t;yo(e,t)}return null}function p(e,t,n,o){var r=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==r?null:l(e,t,""+n,o);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Xe:return n.key===r?n.type===tt?c(e,t,n.props.children,o,r):u(e,t,n,o):null;case et:return n.key===r?s(e,t,n,o):null}if(ho(n)||ut(n))return null!==r?null:c(e,t,n,o,null);yo(e,n)}return null}function h(e,t,n,o,r){if("string"==typeof o||"number"==typeof o)return l(t,e=e.get(n)||null,""+o,r);if("object"==typeof o&&null!==o){switch(o.$$typeof){case Xe:return e=e.get(null===o.key?n:o.key)||null,o.type===tt?c(t,e,o.props.children,r,o.key):u(t,e,o,r);case et:return s(t,e=e.get(null===o.key?n:o.key)||null,o,r)}if(ho(o)||ut(o))return c(t,e=e.get(n)||null,o,r,null);yo(t,o)}return null}function m(r,a,l,u){for(var s=null,c=null,d=a,m=a=0,y=null;null!==d&&m<l.length;m++){d.index>m?(y=d,d=null):y=d.sibling;var v=p(r,d,l[m],u);if(null===v){null===d&&(d=y);break}e&&d&&null===v.alternate&&t(r,d),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v,d=y}if(m===l.length)return n(r,d),s;if(null===d){for(;m<l.length;m++)(d=f(r,l[m],u))&&(a=i(d,a,m),null===c?s=d:c.sibling=d,c=d);return s}for(d=o(r,d);m<l.length;m++)(y=h(d,r,m,l[m],u))&&(e&&null!==y.alternate&&d.delete(null===y.key?m:y.key),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y);return e&&d.forEach(function(e){return t(r,e)}),s}function y(r,a,l,u){var s=ut(l);"function"!=typeof s&&d("150"),null==(l=s.call(l))&&d("151");for(var c=s=null,m=a,y=a=0,v=null,b=l.next();null!==m&&!b.done;y++,b=l.next()){m.index>y?(v=m,m=null):v=m.sibling;var g=p(r,m,b.value,u);if(null===g){m||(m=v);break}e&&m&&null===g.alternate&&t(r,m),a=i(g,a,y),null===c?s=g:c.sibling=g,c=g,m=v}if(b.done)return n(r,m),s;if(null===m){for(;!b.done;y++,b=l.next())null!==(b=f(r,b.value,u))&&(a=i(b,a,y),null===c?s=b:c.sibling=b,c=b);return s}for(m=o(r,m);!b.done;y++,b=l.next())null!==(b=h(m,r,y,b.value,u))&&(e&&null!==b.alternate&&m.delete(null===b.key?y:b.key),a=i(b,a,y),null===c?s=b:c.sibling=b,c=b);return e&&m.forEach(function(e){return t(r,e)}),s}return function(e,o,i,l){"object"==typeof i&&null!==i&&i.type===tt&&null===i.key&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case Xe:e:{var s=i.key;for(u=o;null!==u;){if(u.key===s){if(10===u.tag?i.type===tt:u.type===i.type){n(e,u.sibling),(o=r(u,i.type===tt?i.props.children:i.props,l)).ref=mo(e,u,i),o.return=e,e=o;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===tt?((o=Qn(i.props.children,e.mode,l,i.key)).return=e,e=o):((l=Yn(i,e.mode,l)).ref=mo(e,o,i),l.return=e,e=l)}return a(e);case et:e:{for(u=i.key;null!==o;){if(o.key===u){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(e,o.sibling),(o=r(o,i.children||[],l)).return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}(o=Zn(i,e.mode,l)).return=e,e=o}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==o&&6===o.tag?(n(e,o.sibling),(o=r(o,i,l)).return=e,e=o):(n(e,o),(o=Xn(i,e.mode,l)).return=e,e=o),a(e);if(ho(i))return m(e,o,i,l);if(ut(i))return y(e,o,i,l);if(u&&yo(e,i),void 0===i)switch(e.tag){case 2:case 1:d("152",(l=e.type).displayName||l.name||"Component")}return n(e,o)}}var bo=vo(!0),go=vo(!1);function xo(e,t,n,o,r,i,l){function u(e,t,n){c(e,t,n,t.expirationTime)}function c(e,t,n,o){t.child=null===e?go(t,null,n,o):bo(t,e.child,n,o)}function p(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,o,r,i){if(p(e,t),!n&&!r)return o&&O(t,!1),v(e,t);n=t.stateNode,Ye.current=t;var a=r?null:n.render();return t.effectTag|=1,r&&(c(e,t,null,i),t.child=null),c(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,o&&O(t,!0),t.child}function m(e){var t=e.stateNode;t.pendingContext?E(e,t.pendingContext,t.pendingContext!==t.context):t.context&&E(e,t.context,!1),k(e,t.containerInfo)}function y(e,t,n,o){var r=e.child;for(null!==r&&(r.return=e);null!==r;){switch(r.tag){case 12:var i=0|r.stateNode;if(r.type===t&&0!=(i&n)){for(i=r;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>o)i.expirationTime=o,null!==a&&(0===a.expirationTime||a.expirationTime>o)&&(a.expirationTime=o);else{if(null===a||!(0===a.expirationTime||a.expirationTime>o))break;a.expirationTime=o}i=i.return}i=null}else i=r.child;break;case 13:i=r.type===e.type?null:r.child;break;default:i=r.child}if(null!==i)i.return=r;else for(i=r;null!==i;){if(i===e){i=null;break}if(null!==(r=i.sibling)){i=r;break}i=i.return}r=i}}function v(e,t){if(null!==e&&t.child!==e.child&&d("153"),null!==t.child){var n=$n(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$n(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var b=e.shouldSetTextContent,g=e.shouldDeprioritizeSubtree,x=t.pushHostContext,k=t.pushHostContainer,C=o.pushProvider,w=n.getMaskedContext,_=n.getUnmaskedContext,S=n.hasContextChanged,T=n.pushContextProvider,E=n.pushTopLevelContextObject,O=n.invalidateContextProvider,M=r.enterHydrationState,P=r.resetHydrationState,I=r.tryToClaimNextHydratableInstance,R=(e=function(e,t,n,o,r){function i(e,t,n,o,r,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,r,i):!(e.prototype&&e.prototype.isPureReactComponent&&s(t,n)&&s(o,r))}function l(e,t){t.updater=v,e.stateNode=t,t._reactInternalFiber=e}function u(e,t,n,o){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,o),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,o),t.state!==e&&v.enqueueReplaceState(t,t.state,null)}function c(e,t,n,o){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,o)}var d=e.cacheContext,p=e.getMaskedContext,h=e.getUnmaskedContext,m=e.isContextConsumer,y=e.hasContextChanged,v={isMounted:Yt,enqueueSetState:function(e,o,r){e=e._reactInternalFiber,r=void 0===r?null:r;var i=n(e);so(e,{expirationTime:i,partialState:o,callback:r,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,o,r){e=e._reactInternalFiber,r=void 0===r?null:r;var i=n(e);so(e,{expirationTime:i,partialState:o,callback:r,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,o){e=e._reactInternalFiber,o=void 0===o?null:o;var r=n(e);so(e,{expirationTime:r,partialState:null,callback:o,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,r)}};return{adoptClassInstance:l,callGetDerivedStateFromProps:c,constructClassInstance:function(e,t){var n=e.type,o=h(e),r=m(e),i=r?p(e,o):f,u=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return l(e,n),e.memoizedState=u,null!==(t=c(e,0,t,u))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),r&&d(e,o,i),n},mountClassInstance:function(e,t){var n=e.type,o=e.alternate,r=e.stateNode,i=e.pendingProps,a=h(e);r.props=i,r.state=e.memoizedState,r.refs=f,r.context=p(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&v.enqueueReplaceState(r,r.state,null),null!==(n=e.updateQueue)&&(r.state=fo(o,e,n,r,i,t))),"function"==typeof r.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,l=e.stateNode;l.props=e.memoizedProps,l.state=e.memoizedState;var s=e.memoizedProps,f=e.pendingProps,d=l.context,m=h(e);m=p(e,m),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(s!==f||d!==m)&&u(e,l,f,m),d=e.memoizedState,t=null!==e.updateQueue?fo(null,e,e.updateQueue,l,f,t):d;var v=void 0;if(s!==f&&(v=c(e,0,f,t)),null!==v&&void 0!==v){t=null===t||void 0===t?v:a({},t,v);var b=e.updateQueue;null!==b&&(b.baseState=a({},b.baseState,v))}return s!==f||d!==t||y()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((s=i(e,s,f,d,t,m))?(n||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(e.effectTag|=4)):("function"==typeof l.componentDidMount&&(e.effectTag|=4),o(e,f),r(e,t)),l.props=f,l.state=t,l.context=m,s):("function"==typeof l.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var l=t.type,s=t.stateNode;s.props=t.memoizedProps,s.state=t.memoizedState;var f=t.memoizedProps,d=t.pendingProps,m=s.context,v=h(t);v=p(t,v),(l="function"==typeof l.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(f!==d||m!==v)&&u(t,s,d,v),m=t.memoizedState,n=null!==t.updateQueue?fo(e,t,t.updateQueue,s,d,n):m;var b=void 0;if(f!==d&&(b=c(t,0,d,n)),null!==b&&void 0!==b){n=null===n||void 0===n?b:a({},n,b);var g=t.updateQueue;null!==g&&(g.baseState=a({},g.baseState,b))}return f!==d||m!==n||y()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((b=i(t,f,d,m,n,v))?(l||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(d,n,v),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(d,n,v)),"function"==typeof s.componentDidUpdate&&(t.effectTag|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof s.componentDidUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),o(t,d),r(t,n)),s.props=d,s.state=n,s.context=v,b):("function"!=typeof s.componentDidUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,l,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,F=e.callGetDerivedStateFromProps,j=e.constructClassInstance,A=e.mountClassInstance,D=e.resumeMountClassInstance,L=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:m(t);break;case 2:T(t);break;case 4:k(t,t.stateNode.containerInfo);break;case 13:C(t)}return null}switch(t.tag){case 0:null!==e&&d("155");var o=t.type,r=t.pendingProps,i=_(t);return o=o(r,i=w(t,i)),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(r=F(t,o,r,t.memoizedState))&&void 0!==r&&(t.memoizedState=a({},t.memoizedState,r))),r=T(t),R(t,o),A(t,n),e=h(e,t,!0,r,!1,n)):(t.tag=1,u(e,t,o),t.memoizedProps=r,e=t.child),e;case 1:return r=t.type,n=t.pendingProps,S()||t.memoizedProps!==n?(o=_(t),r=r(n,o=w(t,o)),t.effectTag|=1,u(e,t,r),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 2:r=T(t),null===e?null===t.stateNode?(j(t,t.pendingProps),A(t,n),o=!0):o=D(t,n):o=L(e,t,n),i=!1;var l=t.updateQueue;return null!==l&&null!==l.capturedValues&&(i=o=!0),h(e,t,o,r,i,n);case 3:e:if(m(t),o=t.updateQueue,null!==o){if(i=t.memoizedState,r=fo(e,t,o,null,null,n),t.memoizedState=r,null!==(o=t.updateQueue)&&null!==o.capturedValues)o=null;else{if(i===r){P(),e=v(e,t);break e}o=r.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&M(t)?(t.effectTag|=2,t.child=go(t,null,o,n)):(P(),u(e,t,o)),t.memoizedState=r,e=t.child}else P(),e=v(e,t);return e;case 5:return x(t),null===e&&I(t),r=t.type,l=t.memoizedProps,o=t.pendingProps,i=null!==e?e.memoizedProps:null,S()||l!==o||((l=1&t.mode&&g(r,o))&&(t.expirationTime=1073741823),l&&1073741823===n)?(l=o.children,b(r,o)?l=null:i&&b(r,i)&&(t.effectTag|=16),p(e,t),1073741823!==n&&1&t.mode&&g(r,o)?(t.expirationTime=1073741823,t.memoizedProps=o,e=null):(u(e,t,l),t.memoizedProps=o,e=t.child)):e=v(e,t),e;case 6:return null===e&&I(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return r=t.pendingProps,S()||t.memoizedProps!==r||(r=t.memoizedProps),o=r.children,t.stateNode=null===e?go(t,t.stateNode,o,n):bo(t,e.stateNode,o,n),t.memoizedProps=r,t.stateNode;case 9:return null;case 4:return k(t,t.stateNode.containerInfo),r=t.pendingProps,S()||t.memoizedProps!==r?(null===e?t.child=bo(t,null,r,n):u(e,t,r),t.memoizedProps=r,e=t.child):e=v(e,t),e;case 14:return u(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,S()||t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 11:return n=t.pendingProps.children,S()||null!==n&&t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 13:return function(e,t,n){var o=t.type._context,r=t.pendingProps,i=t.memoizedProps;if(!S()&&i===r)return t.stateNode=0,C(t),v(e,t);var a=r.value;if(t.memoizedProps=r,null===i)a=1073741823;else if(i.value===r.value){if(i.children===r.children)return t.stateNode=0,C(t),v(e,t);a=0}else{var l=i.value;if(l===a&&(0!==l||1/l==1/a)||l!=l&&a!=a){if(i.children===r.children)return t.stateNode=0,C(t),v(e,t);a=0}else if(a="function"==typeof o._calculateChangedBits?o._calculateChangedBits(l,a):1073741823,0==(a|=0)){if(i.children===r.children)return t.stateNode=0,C(t),v(e,t)}else y(t,o,a,n)}return t.stateNode=a,C(t),u(e,t,r.children),t.child}(e,t,n);case 12:e:{o=t.type,i=t.pendingProps,l=t.memoizedProps,r=o._currentValue;var s=o._changedBits;if(S()||0!==s||l!==i){t.memoizedProps=i;var c=i.unstable_observedBits;if(void 0!==c&&null!==c||(c=1073741823),t.stateNode=c,0!=(s&c))y(t,o,s,n);else if(l===i){e=v(e,t);break e}u(e,t,n=(n=i.children)(r)),e=t.child}else e=v(e,t)}return e;default:d("156")}}}}function ko(e,t){var n=t.source;null===t.stack&&ct(n),null!==n&&st(n),t=t.value,null!==e&&2===e.tag&&st(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var Co={};function wo(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)j(e),e=e.return;te=null,ne=0,ee=null,ie=!1}function n(e){return null!==ae&&ae.has(e)}function o(e){for(;;){var t=e.alternate,n=e.return,o=e.sibling;if(0==(512&e.effectTag)){t=I(t,e,ne);var r=e;if(1073741823===ne||1073741823!==r.expirationTime){e:switch(r.tag){case 3:case 2:var i=r.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=r.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;r.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==o)return o;if(null===n){ie=!0;break}e=n}else{if(null!==(e=F(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==o)return o;if(null===n)break;e=n}}return null}function r(e){var t=P(e.alternate,e,ne);return null===t&&(t=o(e)),Ye.current=null,t}function i(e,n,i){J&&d("243"),J=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=$n((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==ee&&!_();)ee=r(ee);else for(;null!==ee;)ee=r(ee)}catch(e){if(null===ee){a=!0,S(e);break}var l=(i=ee).return;if(null===l){a=!0,S(e);break}R(l,i,e),ee=o(i)}break}return J=!1,a||null!==ee?null:ie?(e.pendingCommitExpirationTime=n,e.current.alternate):void d("262")}function l(e,t,n,o){so(t,{expirationTime:o,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:ct(e)},next:null}),c(t,o)}function u(e,t){e:{J&&!re&&d("263");for(var o=e.return;null!==o;){switch(o.tag){case 2:var r=o.stateNode;if("function"==typeof o.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&!n(r)){l(e,o,t,1),e=void 0;break e}break;case 3:l(e,o,t,1),e=void 0;break e}o=o.return}3===e.tag&&l(e,e,t,1),e=void 0}return e}function s(e){return e=0!==Z?Z:J?re?1:ne:1&e.mode?ke?10*(1+((p()+15)/10|0)):25*(1+((p()+500)/25|0)):1,ke&&(0===he||e>he)&&(he=e),e}function c(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var o=e.stateNode;!J&&0!==ne&&n<ne&&t(),J&&!re&&te===o||y(o,n),_e>we&&d("185")}e=e.return}n=void 0}return n}function p(){return Q=K()-Y,2+(Q/10|0)}function h(e,t,n,o,r){var i=Z;Z=1;try{return e(t,n,o,r)}finally{Z=i}}function m(e){if(0!==se){if(e>se)return;q(ce)}var t=K()-Y;se=e,ce=V(b,{timeout:10*(e-2)-t})}function y(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ue?(le=ue=e,e.nextScheduledRoot=e):(ue=ue.nextScheduledRoot=e).nextScheduledRoot=le;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(ge?xe&&(de=e,pe=1,C(e,1,!1)):1===t?g():m(t))}function v(){var e=0,t=null;if(null!==ue)for(var n=ue,o=le;null!==o;){var r=o.remainingExpirationTime;if(0===r){if((null===n||null===ue)&&d("244"),o===o.nextScheduledRoot){le=ue=o.nextScheduledRoot=null;break}if(o===le)le=r=o.nextScheduledRoot,ue.nextScheduledRoot=r,o.nextScheduledRoot=null;else{if(o===ue){(ue=n).nextScheduledRoot=le,o.nextScheduledRoot=null;break}n.nextScheduledRoot=o.nextScheduledRoot,o.nextScheduledRoot=null}o=n.nextScheduledRoot}else{if((0===e||r<e)&&(e=r,t=o),o===ue)break;n=o,o=o.nextScheduledRoot}}null!==(n=de)&&n===t&&1===e?_e++:_e=0,de=t,pe=e}function b(e){x(0,!0,e)}function g(){x(1,!1,null)}function x(e,t,n){if(be=n,v(),t)for(;null!==de&&0!==pe&&(0===e||e>=pe)&&(!me||p()>=pe);)C(de,pe,!me),v();else for(;null!==de&&0!==pe&&(0===e||e>=pe);)C(de,pe,!1),v();null!==be&&(se=0,ce=-1),0!==pe&&m(pe),be=null,me=!1,k()}function k(){if(_e=0,null!==Ce){var e=Ce;Ce=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ye||(ye=!0,ve=e)}}}if(ye)throw e=ve,ve=null,ye=!1,e}function C(e,t,n){fe&&d("245"),fe=!0,n?null!==(n=e.finishedWork)?w(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(_()?e.finishedWork=n:w(e,n,t))):null!==(n=e.finishedWork)?w(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&w(e,n,t)),fe=!1}function w(e,t,n){var o=e.firstBatch;if(null!==o&&o._expirationTime<=n&&(null===Ce?Ce=[o]:Ce.push(o),o._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,re=J=!0,(n=t.stateNode).current===t&&d("177"),0===(o=n.pendingCommitExpirationTime)&&d("261"),n.pendingCommitExpirationTime=0;var r=p();if(Ye.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;for(G(n.containerInfo),oe=i;null!==oe;){var a=!1,l=void 0;try{for(;null!==oe;)2048&oe.effectTag&&A(oe.alternate,oe),oe=oe.nextEffect}catch(e){a=!0,l=e}a&&(null===oe&&d("178"),u(oe,l),null!==oe&&(oe=oe.nextEffect))}for(oe=i;null!==oe;){a=!1,l=void 0;try{for(;null!==oe;){var s=oe.effectTag;if(16&s&&D(oe),128&s){var c=oe.alternate;null!==c&&H(c)}switch(14&s){case 2:L(oe),oe.effectTag&=-3;break;case 6:L(oe),oe.effectTag&=-3,W(oe.alternate,oe);break;case 4:W(oe.alternate,oe);break;case 8:N(oe)}oe=oe.nextEffect}}catch(e){a=!0,l=e}a&&(null===oe&&d("178"),u(oe,l),null!==oe&&(oe=oe.nextEffect))}for($(n.containerInfo),n.current=t,oe=i;null!==oe;){s=!1,c=void 0;try{for(i=n,a=r,l=o;null!==oe;){var f=oe.effectTag;36&f&&z(i,oe.alternate,oe,a,l),256&f&&B(oe,S),128&f&&U(oe);var h=oe.nextEffect;oe.nextEffect=null,oe=h}}catch(e){s=!0,c=e}s&&(null===oe&&d("178"),u(oe,c),null!==oe&&(oe=oe.nextEffect))}J=re=!1,no(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function _(){return!(null===be||be.timeRemaining()>Se)&&(me=!0)}function S(e){null===de&&d("246"),de.remainingExpirationTime=0,ye||(ye=!0,ve=e)}var T=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,o){e[++t]=n.current,n.current=o},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),E=function(e,t){function n(e){return e===Co&&d("174"),e}var o=e.getChildHostContext,r=e.getRootHostContext;e=t.createCursor;var i=t.push,a=t.pop,l=e(Co),u=e(Co),s=e(Co);return{getHostContext:function(){return n(l.current)},getRootHostContainer:function(){return n(s.current)},popHostContainer:function(e){a(l,e),a(u,e),a(s,e)},popHostContext:function(e){u.current===e&&(a(l,e),a(u,e))},pushHostContainer:function(e,t){i(s,t,e),i(u,e,e),i(l,Co,e),t=r(t),a(l,e),i(l,t,e)},pushHostContext:function(e){var t=n(s.current),r=n(l.current);r!==(t=o(r,e.type,t))&&(i(u,e,e),i(l,t,e))}}}(e,T),O=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function o(e,t){var n=e.stateNode,o=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var r in n=n.getChildContext())r in o||d("108",st(e)||"Unknown",r);return a({},t,n)}var r=e.createCursor,i=e.push,l=e.pop,u=r(f),s=r(!1),c=f;return{getUnmaskedContext:function(e){return n(e)?c:u.current},cacheContext:t,getMaskedContext:function(e,n){var o=e.type.contextTypes;if(!o)return f;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in o)a[i]=n[i];return r&&t(e,n,a),a},hasContextChanged:function(){return s.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(l(s,e),l(u,e))},popTopLevelContextObject:function(e){l(s,e),l(u,e)},pushTopLevelContextObject:function(e,t,n){null!=u.cursor&&d("168"),i(u,t,e),i(s,n,e)},processChildContext:o,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,c=u.current,i(u,t,e),i(s,s.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||d("169"),t){var r=o(e,c);n.__reactInternalMemoizedMergedChildContext=r,l(s,e),l(u,e),i(u,r,e)}else l(s,e);i(s,t,e)},findCurrentUnmaskedContext:function(e){for((2!==$t(e)||2!==e.tag)&&d("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||d("171")}return e.stateNode.context}}}(T);T=function(e){var t=e.createCursor,n=e.push,o=e.pop,r=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(r,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;o(r,e),o(i,e),o(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(T);var M=function(e){function t(e,t){var n=new Gn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function o(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var r=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){d("175")},prepareToHydrateHostTextInstance:function(){d("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,l=e.getNextHydratableSibling,u=e.getFirstHydratableChild,s=e.hydrateInstance,c=e.hydrateTextInstance,f=null,p=null,h=!1;return{enterHydrationState:function(e){return p=u(e.stateNode.containerInfo),f=e,h=!0},resetHydrationState:function(){p=f=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var o=p;if(o){if(!n(e,o)){if(!(o=l(o))||!n(e,o))return e.effectTag|=2,h=!1,void(f=e);t(f,p)}f=e,p=u(o)}else e.effectTag|=2,h=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=s(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return c(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!h)return o(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!r(n,e.memoizedProps))for(n=p;n;)t(e,n),n=l(n);return o(e),p=f?l(e.stateNode):null,!0}}}(e),P=xo(e,E,O,T,M,c,s).beginWork,I=function(e,t,n,o,r){function i(e){e.effectTag|=4}var a=e.createInstance,l=e.createTextInstance,u=e.appendInitialChild,s=e.finalizeInitialChildren,c=e.prepareUpdate,f=e.persistence,p=t.getRootHostContainer,h=t.popHostContext,m=t.getHostContext,y=t.popHostContainer,v=n.popContextProvider,b=n.popTopLevelContextObject,g=o.popProvider,x=r.prepareToHydrateHostInstance,k=r.prepareToHydrateHostTextInstance,C=r.popHydrationState,w=void 0,_=void 0,S=void 0;return e.mutation?(w=function(){},_=function(e,t,n){(t.updateQueue=n)&&i(t)},S=function(e,t,n,o){n!==o&&i(t)}):d(f?"235":"236"),{completeWork:function(e,t,n){var o=t.pendingProps;switch(t.tag){case 1:return null;case 2:return v(t),e=t.stateNode,null!==(o=t.updateQueue)&&null!==o.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:o.capturedValues=null),null;case 3:return y(t),b(t),(o=t.stateNode).pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),null!==e&&null!==e.child||(C(t),t.effectTag&=-3),w(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=p();var r=t.type;if(null!==e&&null!=t.stateNode){var f=e.memoizedProps,T=t.stateNode,E=m();T=c(T,r,f,o,n,E),_(e,t,T,r,f,o,n,E),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!o)return null===t.stateNode&&d("166"),null;if(e=m(),C(t))x(t,n,e)&&i(t);else{f=a(r,o,n,e,t);e:for(E=t.child;null!==E;){if(5===E.tag||6===E.tag)u(f,E.stateNode);else if(4!==E.tag&&null!==E.child){E.child.return=E,E=E.child;continue}if(E===t)break;for(;null===E.sibling;){if(null===E.return||E.return===t)break e;E=E.return}E.sibling.return=E.return,E=E.sibling}s(f,r,o,n,e)&&i(t),t.stateNode=f}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)S(e,t,e.memoizedProps,o);else{if("string"!=typeof o)return null===t.stateNode&&d("166"),null;e=p(),n=m(),C(t)?k(t)&&i(t):t.stateNode=l(o,e,n,t)}return null;case 7:(o=t.memoizedProps)||d("165"),t.tag=8,r=[];e:for((f=t.stateNode)&&(f.return=t);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)d("247");else if(9===f.tag)r.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===t)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}return o=(f=o.handler)(o.props,r),t.child=bo(t,null!==e?e.child:null,o,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return y(t),w(t),null;case 13:return g(t),null;case 12:return null;case 0:d("167");default:d("156")}}}}(e,E,O,T,M).completeWork,R=(E=function(e,t,n,o,r){var i=e.popHostContainer,a=e.popHostContext,l=t.popContextProvider,u=t.popTopLevelContextObject,s=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:ct(t)};do{switch(e.tag){case 3:return uo(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!r(n)){uo(e);var o=(n=e.updateQueue).capturedValues;return null===o?n.capturedValues=[t]:o.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:l(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),u(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return s(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:l(e);break;case 3:i(e),u(e);break;case 5:a(e);break;case 4:i(e);break;case 13:s(e)}}}}(E,O,T,0,n)).throwException,F=E.unwindWork,j=E.unwindInterruptedWork,A=(E=function(e,t,n,o,r){function i(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(oo(e),e.tag){case 2:i(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:i(e);break;case 7:l(e.stateNode);break;case 4:f&&s(e)}}function l(e){for(var t=e;;)if(a(t),null===t.child||f&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function u(e){return 5===e.tag||3===e.tag||4===e.tag}function s(e){for(var t=e,n=!1,o=void 0,r=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&d("160"),n.tag){case 5:o=n.stateNode,r=!1;break e;case 3:case 4:o=n.stateNode.containerInfo,r=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)l(t),r?C(o,t.stateNode):k(o,t.stateNode);else if(4===t.tag?o=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var c=e.getPublicInstance,f=e.mutation;e=e.persistence,f||d(e?"235":"236");var p=f.commitMount,h=f.commitUpdate,m=f.resetTextContent,y=f.commitTextUpdate,v=f.appendChild,b=f.appendChildToContainer,g=f.insertBefore,x=f.insertInContainerBefore,k=f.removeChild,C=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,o=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,o),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:d("163")}},commitResetTextContent:function(e){m(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(u(t)){var n=t;break e}t=t.return}d("160"),n=void 0}var o=t=void 0;switch(n.tag){case 5:t=n.stateNode,o=!1;break;case 3:case 4:t=n.stateNode.containerInfo,o=!0;break;default:d("161")}16&n.effectTag&&(m(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||u(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var r=e;;){if(5===r.tag||6===r.tag)n?o?x(t,r.stateNode,n):g(t,r.stateNode,n):o?b(t,r.stateNode):v(t,r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},commitDeletion:function(e){s(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var o=t.memoizedProps;e=null!==e?e.memoizedProps:o;var r=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&h(n,i,r,e,o,t)}break;case 6:null===t.stateNode&&d("162"),n=t.memoizedProps,y(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:d("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var o=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(o,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&po(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=c(n.child.stateNode);break;case 2:e=n.child.stateNode}po(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&p(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:d("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var o=e.updateQueue;(null===o||null===o.capturedValues)&&d("264");var i=o.capturedValues;for(o.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&r(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<i.length;n++){var a=(o=i[n]).value,l=o.stack;ko(e,o),t.componentDidCatch(a,{componentStack:null!==l?l:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&d("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)ko(e,o=i[n]),t(o.value);break;default:d("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=c(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,u,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,D=E.commitResetTextContent,L=E.commitPlacement,N=E.commitDeletion,W=E.commitWork,z=E.commitLifeCycles,B=E.commitErrorLogging,U=E.commitAttachRef,H=E.commitDetachRef,K=e.now,V=e.scheduleDeferredCallback,q=e.cancelDeferredCallback,G=e.prepareForCommit,$=e.resetAfterCommit,Y=K(),Q=Y,X=0,Z=0,J=!1,ee=null,te=null,ne=0,oe=null,re=!1,ie=!1,ae=null,le=null,ue=null,se=0,ce=-1,fe=!1,de=null,pe=0,he=0,me=!1,ye=!1,ve=null,be=null,ge=!1,xe=!1,ke=!1,Ce=null,we=1e3,_e=0,Se=1;return{recalculateCurrentTime:p,computeExpirationForFiber:s,scheduleWork:c,requestWork:y,flushRoot:function(e,t){fe&&d("253"),de=e,pe=t,C(e,t,!1),g(),k()},batchedUpdates:function(e,t){var n=ge;ge=!0;try{return e(t)}finally{(ge=n)||fe||g()}},unbatchedUpdates:function(e,t){if(ge&&!xe){xe=!0;try{return e(t)}finally{xe=!1}}return e(t)},flushSync:function(e,t){fe&&d("187");var n=ge;ge=!0;try{return h(e,t)}finally{ge=n,g()}},flushControlled:function(e){var t=ge;ge=!0;try{h(e)}finally{(ge=t)||fe||x(1,!1,null)}},deferredUpdates:function(e){var t=Z;Z=25*(1+((p()+500)/25|0));try{return e()}finally{Z=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(ke)return e(t,n);ge||fe||0===he||(x(he,!1,null),he=0);var o=ke,r=ge;ge=ke=!0;try{return e(t,n)}finally{ke=o,(ge=r)||fe||g()}},flushInteractiveUpdates:function(){fe||0===he||(x(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((p()+500)/25|0));return e<=X&&(e=X+1),X=e},legacyContext:O}}function _o(e){function t(e,t,n,o,r,a){if(o=t.current,n){n=n._reactInternalFiber;var l=u(n);n=s(n)?c(n,l):l}else n=f;return null===t.context?t.context=n:t.pendingContext=n,so(o,{expirationTime:r,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(o,r),r}var n=e.getPublicInstance,o=(e=wo(e)).recalculateCurrentTime,r=e.computeExpirationForFiber,i=e.scheduleWork,l=e.legacyContext,u=l.findCurrentUnmaskedContext,s=l.isContextProvider,c=l.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new Gn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,i,a){var l=n.current;return t(e,n,i,o(),l=r(l),a)},updateContainerAtExpirationTime:function(e,n,r,i,a){return t(e,n,r,o(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?d("188"):d("268",Object.keys(e))),null===(e=Zt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Jn=to(function(e){return t.onCommitFiberRoot(n,e)}),eo=to(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=Zt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var So=Object.freeze({default:_o}),To=So&&_o||So,Eo=To.default?To.default:To;var Oo="object"==typeof performance&&"function"==typeof performance.now,Mo=void 0;Mo=Oo?function(){return performance.now()}:function(){return Date.now()};var Po=void 0,Io=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Ro=null,Fo=!1,jo=-1,Ao=!1,Do=0,Lo=33,No=33,Wo=void 0;Wo=Oo?{didTimeout:!1,timeRemaining:function(){var e=Do-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Do-Date.now();return 0<e?e:0}};var zo="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===zo){if(Fo=!1,e=Mo(),0>=Do-e){if(!(-1!==jo&&jo<=e))return void(Ao||(Ao=!0,requestAnimationFrame(Bo)));Wo.didTimeout=!0}else Wo.didTimeout=!1;jo=-1,e=Ro,Ro=null,null!==e&&e(Wo)}},!1);var Bo=function(e){Ao=!1;var t=e-Do+No;t<No&&Lo<No?(8>t&&(t=8),No=t<Lo?Lo:t):Lo=t,Do=e+No,Fo||(Fo=!0,window.postMessage(zo,"*"))};Po=function(e,t){return Ro=e,null!=t&&"number"==typeof t.timeout&&(jo=Mo()+t.timeout),Ao||(Ao=!0,requestAnimationFrame(Bo)),0},Io=function(){Ro=null,Fo=!1,jo=-1}}else Po=window.requestIdleCallback,Io=window.cancelIdleCallback;else Po=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Io=function(e){clearTimeout(e)};function Uo(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Ho(e,t,n,o){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&o&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(o&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function Ko(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Vo(e,t){return null!=t.dangerouslySetInnerHTML&&d("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function qo(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&d("92"),Array.isArray(t)&&(1>=t.length||d("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Go(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function $o(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Yo={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Qo(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Xo(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Qo(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Zo,Jo=void 0,er=(Zo=function(e,t){if(e.namespaceURI!==Yo.svg||"innerHTML"in e)e.innerHTML=t;else{for((Jo=Jo||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Jo.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,o){MSApp.execUnsafeLocalFunction(function(){return Zo(e,t)})}:Zo);function tr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var nr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},or=["Webkit","ms","Moz","O"];function rr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var o=0===n.indexOf("--"),r=n,i=t[n];r=null==i||"boolean"==typeof i||""===i?"":o||"number"!=typeof i||0===i||nr.hasOwnProperty(r)&&nr[r]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),o?e.setProperty(n,r):e[n]=r}}Object.keys(nr).forEach(function(e){or.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),nr[t]=nr[e]})});var ir=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ar(e,t,n){t&&(ir[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&d("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&d("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||d("61")),null!=t.style&&"object"!=typeof t.style&&d("62",n()))}function lr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ur=l.thatReturns("");function sr(e,t){var n=An(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=k[t];for(var o=0;o<t.length;o++){var r=t[o];n.hasOwnProperty(r)&&n[r]||("topScroll"===r?kn("topScroll","scroll",e):"topFocus"===r||"topBlur"===r?(kn("topFocus","focus",e),kn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===r?(Ve("cancel",!0)&&kn("topCancel","cancel",e),n.topCancel=!0):"topClose"===r?(Ve("close",!0)&&kn("topClose","close",e),n.topClose=!0):Pn.hasOwnProperty(r)&&xn(r,Pn[r],e),n[r]=!0)}}function cr(e,t,n,o){return n=9===n.nodeType?n:n.ownerDocument,o===Yo.html&&(o=Qo(e)),o===Yo.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(o,e),e}function fr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function dr(e,t,n,o){var r=lr(t,n);switch(t){case"iframe":case"object":xn("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in In)In.hasOwnProperty(i)&&xn(i,In[i],e);i=n;break;case"source":xn("topError","error",e),i=n;break;case"img":case"image":case"link":xn("topError","error",e),xn("topLoad","load",e),i=n;break;case"form":xn("topReset","reset",e),xn("topSubmit","submit",e),i=n;break;case"details":xn("topToggle","toggle",e),i=n;break;case"input":xt(e,n),i=gt(e,n),xn("topInvalid","invalid",e),sr(o,"onChange");break;case"option":i=Uo(e,n);break;case"select":Ko(e,n),i=a({},n,{value:void 0}),xn("topInvalid","invalid",e),sr(o,"onChange");break;case"textarea":qo(e,n),i=Vo(e,n),xn("topInvalid","invalid",e),sr(o,"onChange");break;default:i=n}ar(t,i,ur);var u,s=i;for(u in s)if(s.hasOwnProperty(u)){var c=s[u];"style"===u?rr(e,c):"dangerouslySetInnerHTML"===u?null!=(c=c?c.__html:void 0)&&er(e,c):"children"===u?"string"==typeof c?("textarea"!==t||""!==c)&&tr(e,c):"number"==typeof c&&tr(e,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(x.hasOwnProperty(u)?null!=c&&sr(o,u):null!=c&&bt(e,u,c,r))}switch(t){case"input":Ge(e),wt(e,n);break;case"textarea":Ge(e),$o(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Ho(e,!!n.multiple,t,!1):null!=n.defaultValue&&Ho(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=l)}}function pr(e,t,n,o,r){var i=null;switch(t){case"input":n=gt(e,n),o=gt(e,o),i=[];break;case"option":n=Uo(e,n),o=Uo(e,o),i=[];break;case"select":n=a({},n,{value:void 0}),o=a({},o,{value:void 0}),i=[];break;case"textarea":n=Vo(e,n),o=Vo(e,o),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof o.onClick&&(e.onclick=l)}ar(t,o,ur),t=e=void 0;var u=null;for(e in n)if(!o.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var s=n[e];for(t in s)s.hasOwnProperty(t)&&(u||(u={}),u[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(x.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in o){var c=o[e];if(s=null!=n?n[e]:void 0,o.hasOwnProperty(e)&&c!==s&&(null!=c||null!=s))if("style"===e)if(s){for(t in s)!s.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(u||(u={}),u[t]="");for(t in c)c.hasOwnProperty(t)&&s[t]!==c[t]&&(u||(u={}),u[t]=c[t])}else u||(i||(i=[]),i.push(e,u)),u=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(i=i||[]).push(e,""+c)):"children"===e?s===c||"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(x.hasOwnProperty(e)?(null!=c&&sr(r,e),i||s===c||(i=[])):(i=i||[]).push(e,c))}return u&&(i=i||[]).push("style",u),i}function hr(e,t,n,o,r){"input"===n&&"radio"===r.type&&null!=r.name&&kt(e,r),lr(n,o),o=lr(n,r);for(var i=0;i<t.length;i+=2){var a=t[i],l=t[i+1];"style"===a?rr(e,l):"dangerouslySetInnerHTML"===a?er(e,l):"children"===a?tr(e,l):bt(e,a,l,o)}switch(n){case"input":Ct(e,r);break;case"textarea":Go(e,r);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!r.multiple,null!=(n=r.value)?Ho(e,!!r.multiple,n,!1):t!==!!r.multiple&&(null!=r.defaultValue?Ho(e,!!r.multiple,r.defaultValue,!0):Ho(e,!!r.multiple,r.multiple?[]:"",!1))}}function mr(e,t,n,o,r){switch(t){case"iframe":case"object":xn("topLoad","load",e);break;case"video":case"audio":for(var i in In)In.hasOwnProperty(i)&&xn(i,In[i],e);break;case"source":xn("topError","error",e);break;case"img":case"image":case"link":xn("topError","error",e),xn("topLoad","load",e);break;case"form":xn("topReset","reset",e),xn("topSubmit","submit",e);break;case"details":xn("topToggle","toggle",e);break;case"input":xt(e,n),xn("topInvalid","invalid",e),sr(r,"onChange");break;case"select":Ko(e,n),xn("topInvalid","invalid",e),sr(r,"onChange");break;case"textarea":qo(e,n),xn("topInvalid","invalid",e),sr(r,"onChange")}for(var a in ar(t,n,ur),o=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(o=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(o=["children",""+i]):x.hasOwnProperty(a)&&null!=i&&sr(r,a));switch(t){case"input":Ge(e),wt(e,n);break;case"textarea":Ge(e),$o(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=l)}return o}function yr(e,t){return e.nodeValue!==t}var vr=Object.freeze({createElement:cr,createTextNode:fr,setInitialProperties:dr,diffProperties:pr,updateProperties:hr,diffHydratedProperties:mr,diffHydratedText:yr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Ct(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var o=n[t];if(o!==e&&o.form===e.form){var r=V(o);r||d("90"),$e(o),Ct(o,r)}}}break;case"textarea":Go(e,n);break;case"select":null!=(t=n.value)&&Ho(e,!!n.multiple,t,!1)}}});Me.injectFiberControlledHostComponent(vr);var br=null,gr=null;function xr(e){this._expirationTime=Sr.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function kr(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Cr(e,t,n){this._internalRoot=Sr.createContainer(e,t,n)}function wr(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function _r(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}xr.prototype.render=function(e){this._defer||d("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,o=new kr;return Sr.updateContainerAtExpirationTime(e,t,null,n,o._onCommit),o},xr.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},xr.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||d("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var o=null,r=t;r!==this;)o=r,r=r._next;null===o&&d("251"),o._next=r._next,this._next=t,e.firstBatch=this}this._defer=!1,Sr.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},xr.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},kr.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},kr.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&d("191",n),n()}}},Cr.prototype.render=function(e,t){var n=this._internalRoot,o=new kr;return null!==(t=void 0===t?null:t)&&o.then(t),Sr.updateContainer(e,n,null,o._onCommit),o},Cr.prototype.unmount=function(e){var t=this._internalRoot,n=new kr;return null!==(e=void 0===e?null:e)&&n.then(e),Sr.updateContainer(null,t,null,n._onCommit),n},Cr.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var o=this._internalRoot,r=new kr;return null!==(n=void 0===n?null:n)&&r.then(n),Sr.updateContainer(t,o,e,r._onCommit),r},Cr.prototype.createBatch=function(){var e=new xr(this),t=e._expirationTime,n=this._internalRoot,o=n.firstBatch;if(null===o)n.firstBatch=e,e._next=null;else{for(n=null;null!==o&&o._expirationTime<=t;)n=o,o=o._next;e._next=o,null!==n&&(n._next=e)}return e};var Sr=Eo({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Xo(null,"");break;default:e=Xo(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Xo(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){br=bn;var e=u();if(Nn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var o=n.anchorOffset,r=n.focusNode;n=n.focusOffset;try{t.nodeType,r.nodeType}catch(e){t=null;break e}var i=0,a=-1,l=-1,s=0,c=0,f=e,d=null;t:for(;;){for(var p;f!==t||0!==o&&3!==f.nodeType||(a=i+o),f!==r||0!==n&&3!==f.nodeType||(l=i+n),3===f.nodeType&&(i+=f.nodeValue.length),null!==(p=f.firstChild);)d=f,f=p;for(;;){if(f===e)break t;if(d===t&&++s===o&&(a=i),d===r&&++c===n&&(l=i),null!==(p=f.nextSibling))break;d=(f=d).parentNode}f=p}t=-1===a||-1===l?null:{start:a,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;gr={focusedElem:e,selectionRange:t},gn(!1)},resetAfterCommit:function(){var e=gr,t=u(),n=e.focusedElem,o=e.selectionRange;if(t!==n&&c(document.documentElement,n)){if(Nn(n))if(t=o.start,void 0===(e=o.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var r=n[re()].length;e=Math.min(o.start,r),o=void 0===o.end?e:Math.min(o.end,r),!t.extend&&e>o&&(r=o,o=e,e=r),r=Ln(n,e);var i=Ln(n,o);if(r&&i&&(1!==t.rangeCount||t.anchorNode!==r.node||t.anchorOffset!==r.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(r.node,r.offset),t.removeAllRanges(),e>o?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}gr=null,gn(br),br=null},createInstance:function(e,t,n,o,r){return(e=cr(e,t,n,o))[B]=r,e[U]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,o){return dr(e,t,n,o),_r(t,n)},prepareUpdate:function(e,t,n,o,r){return pr(e,t,n,o,r)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,o){return(e=fr(e,t))[B]=o,e},now:Mo,mutation:{commitMount:function(e,t,n){_r(t,n)&&e.focus()},commitUpdate:function(e,t,n,o,r){e[U]=r,hr(e,t,n,o,r)},resetTextContent:function(e){tr(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,o,r,i){return e[B]=i,e[U]=n,mr(e,t,n,r,o)},hydrateTextInstance:function(e,t,n){return e[B]=n,yr(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Po,cancelDeferredCallback:Io}),Tr=Sr;function Er(e,t,n,o,r){wr(n)||d("200");var i=n._reactRootContainer;if(i){if("function"==typeof r){var a=r;r=function(){var e=Sr.getPublicRootInstance(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,r):i.render(t,r)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Cr(e,!1,t)}(n,o),"function"==typeof r){var l=r;r=function(){var e=Sr.getPublicRootInstance(i._internalRoot);l.call(e)}}Sr.unbatchedUpdates(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,r):i.render(t,r)})}return Sr.getPublicRootInstance(i._internalRoot)}function Or(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return wr(t)||d("200"),function(e,t,n){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==o?null:""+o,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Le=Tr.batchedUpdates,Ne=Tr.interactiveUpdates,We=Tr.flushInteractiveUpdates;var Mr={createPortal:Or,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:Sr.findHostInstance(e)},hydrate:function(e,t,n){return Er(null,e,t,!0,n)},render:function(e,t,n){return Er(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,o){return(null==e||void 0===e._reactInternalFiber)&&d("38"),Er(e,t,n,!1,o)},unmountComponentAtNode:function(e){return wr(e)||d("40"),!!e._reactRootContainer&&(Sr.unbatchedUpdates(function(){Er(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Or.apply(void 0,arguments)},unstable_batchedUpdates:Sr.batchedUpdates,unstable_deferredUpdates:Sr.deferredUpdates,flushSync:Sr.flushSync,unstable_flushControlled:Sr.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:W,EventPluginRegistry:_,EventPropagators:ne,ReactControlledComponent:De,ReactDOMComponentTree:q,ReactDOMEventListener:_n},unstable_createRoot:function(e,t){return new Cr(e,!0,null!=t&&!0===t.hydrate)}};Sr.injectIntoDevTools({findFiberByHostInstance:H,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Pr=Object.freeze({default:Mr}),Ir=Pr&&Mr||Pr;e.exports=Ir.default?Ir.default:Ir},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var o=n(109),r=n(68),i=n(108),a=n(67),l="function"==typeof Symbol&&Symbol.for,u=l?Symbol.for("react.element"):60103,s=l?Symbol.for("react.portal"):60106,c=l?Symbol.for("react.fragment"):60107,f=l?Symbol.for("react.strict_mode"):60108,d=l?Symbol.for("react.provider"):60109,p=l?Symbol.for("react.context"):60110,h=l?Symbol.for("react.async_mode"):60111,m=l?Symbol.for("react.forward_ref"):60112,y="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function g(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||b}function x(){}function k(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||b}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=g.prototype;var C=k.prototype=new x;C.constructor=k,o(C,g.prototype),C.isPureReactComponent=!0;var w={current:null},_=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var o=void 0,r={},i=null,a=null;if(null!=t)for(o in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)_.call(t,o)&&!S.hasOwnProperty(o)&&(r[o]=t[o]);var l=arguments.length-2;if(1===l)r.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];r.children=s}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===r[o]&&(r[o]=l[o]);return{$$typeof:u,type:e,key:i,ref:a,props:r,_owner:w.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var O=/\/+/g,M=[];function P(e,t,n,o){if(M.length){var r=M.pop();return r.result=e,r.keyPrefix=t,r.func=n,r.context=o,r.count=0,r}return{result:e,keyPrefix:t,func:n,context:o,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>M.length&&M.push(e)}function R(e,t,n,o){var r=typeof e;"undefined"!==r&&"boolean"!==r||(e=null);var i=!1;if(null===e)i=!0;else switch(r){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case u:case s:i=!0}}if(i)return n(o,e,""===t?"."+F(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var l=t+F(r=e[a],a);i+=R(r,l,n,o)}else if(null===e||void 0===e?l=null:l="function"==typeof(l=y&&e[y]||e["@@iterator"])?l:null,"function"==typeof l)for(e=l.call(e),a=0;!(r=e.next()).done;)i+=R(r=r.value,l=t+F(r,a++),n,o);else"object"===r&&v("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function F(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function j(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var o=e.result,r=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?D(e,o,n,a.thatReturnsArgument):null!=e&&(E(e)&&(t=r+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),o.push(e))}function D(e,t,n,o,r){var i="";null!=n&&(i=(""+n).replace(O,"$&/")+"/"),t=P(t,i,o,r),null==e||R(e,"",A,t),I(t)}var L={Children:{map:function(e,t,n){if(null==e)return e;var o=[];return D(e,o,null,t,n),o},forEach:function(e,t,n){if(null==e)return e;t=P(null,null,t,n),null==e||R(e,"",j,t),I(t)},count:function(e){return null==e?0:R(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return D(e,t,null,a.thatReturnsArgument),t},only:function(e){return E(e)||v("143"),e}},createRef:function(){return{current:null}},Component:g,PureComponent:k,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:p,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:m,render:e}},Fragment:c,StrictMode:f,unstable_AsyncMode:h,createElement:T,cloneElement:function(e,t,n){(null===e||void 0===e)&&v("267",e);var r=void 0,i=o({},e.props),a=e.key,l=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,s=w.current),void 0!==t.key&&(a=""+t.key);var c=void 0;for(r in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)_.call(t,r)&&!S.hasOwnProperty(r)&&(i[r]=void 0===t[r]&&void 0!==c?c[r]:t[r])}if(1===(r=arguments.length-2))i.children=n;else if(1<r){c=Array(r);for(var f=0;f<r;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:u,type:e.type,key:a,ref:l,props:i,_owner:s}},createFactory:function(e){var t=T.bind(null,e);return t.type=e,t},isValidElement:E,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:w,assign:o}},N=Object.freeze({default:L}),W=N&&L||N;e.exports=W.default?W.default:W},function(e,t,n){(e.exports=n(37)(!1)).push([e.i,'.background {\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  z-index: -2;\n  position: absolute;\n  background-image: url("https://s9.postimg.cc/3lnnn6j5r/Screen_Shot_2018-05-10_at_1.26.25_PM.png");\n  background-size: cover;\n  filter: blur(5px);\n}\n',""])},function(e,t,n){var o=n(251);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(36)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(37)(!1)).push([e.i,".body {\n  width:  100%;\n  height: 100%;\n  overflow: scroll;\n}\n",""])},function(e,t,n){var o=n(253);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(36)(o,r);o.locals&&(e.exports=o.locals)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NpbXBsZS1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9zdHlsZXMvdHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS91dGlscy9wcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjb21wb3NlL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL2dldFByZWZpeGVkVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9TdmdJY29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWNvbXBvc2UvcHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS91dGlscy9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvSWNvbkJ1dHRvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvdXRpbHMvYXV0b1ByZWZpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvaW50ZXJuYWwvRW5oYW5jZWRCdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL1BhcGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS91dGlscy9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvY2FwaXRhbGl6ZVN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvc3R5bGVzL2NvbG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvc3ZnLWljb25zL25hdmlnYXRpb24vbW9yZS12ZXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9JY29uTWVudS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL3N0eWxlcy9oZWFkZXIuY3NzP2Q0YjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbkdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWNvbXBvc2Uvd3JhcERpc3BsYXlOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWNvbXBvc2Uvc2V0RGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL01lbnVJdGVtL01lbnVJdGVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS91dGlscy9kb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL1BvcG92ZXIvUG9wb3Zlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvTGlzdC9MaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9rZXljb2RlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvTWVudS9NZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvc3R5bGVzL3BhZ2VzLmNzcz84MDFjIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1pbi1qcy11dGlscy9saWIvaHlwaGVuYXRlUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL2FkZE5ld1ZhbHVlc09ubHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9wcmVmaXhWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvRE9NVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9NZW51SXRlbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvc3R5bGVzL011aVRoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0Jyb3dzZXJSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvSGFzaFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9MaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTmF2TGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL1BhdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9oZWFkZXIvbGlua3MuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9oZWFkZXIvSGVhZGVyLmpzeCIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvZm9vdGVyL0Zvb3Rlci5qc3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL2JhY2tncm91bmQvQmFja2dyb3VuZC5qc3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL2JvZHkvcGFnZXMvQ2FsZW5kYXJzL0NhbGVuZGFycy5qc3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL2JvZHkvcGFnZXMvT3VyLVNjaG9vbHMvT3VyLVNjaG9vbHMuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9ib2R5L3BhZ2VzL1NjaG9vbC1Cb2FyZC9TY2hvb2wtQm9hcmQuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9ib2R5L3BhZ2VzL1N0dWRlbnQtUGFyZW50LVJlc291cmNlcy9TdHVkZW50LVBhcmVudC1SZXNvdXJjZXMuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9ib2R5L3BhZ2VzL1N0YWZmLVJlc291cmNlcy9TdGFmZi1SZXNvdXJjZXMuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9ib2R5L3BhZ2VzL0VtcGxveW1lbnQvRW1wbG95bWVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL2JvZHkvcGFnZXMvSG9tZXBhZ2UvSG9tZXBhZ2UuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9ib2R5L1RpdGxlLmpzeCIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvYm9keS9Cb2R5LmpzeCIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL0FwcC5qc3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L2luZGV4LmpzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9zdHlsZXMvdGl0bGUuY3NzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9zdHlsZXMvdGl0bGUuY3NzPzlmM2MiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL3N0eWxlcy9mb290ZXIuY3NzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9zdHlsZXMvZm9vdGVyLmNzcz81MDJlIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9SYWlzZWRCdXR0b24vUmFpc2VkQnV0dG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9SYWlzZWRCdXR0b24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL3N0eWxlcy9oZWFkZXIuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9MaXN0L05lc3RlZExpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2V4cGFuZC1tb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9zdmctaWNvbnMvbmF2aWdhdGlvbi9leHBhbmQtbGVzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvdXRpbHMvY2hpbGRVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvaW50ZXJuYWwvVG9vbHRpcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvRm9udEljb24vRm9udEljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL0ZvbnRJY29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9JY29uQnV0dG9uL0ljb25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2ludGVybmFsL0NpcmNsZVJpcHBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvaW50ZXJuYWwvVG91Y2hSaXBwbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2ludGVybmFsL1NjYWxlSW5DaGlsZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoYWluLWZ1bmN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9pbnRlcm5hbC9TY2FsZUluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9pbnRlcm5hbC9Gb2N1c1JpcHBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvTGlzdC9MaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvU3ZnSWNvbi9TdmdJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWNvbXBvc2UvZ2V0RGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zZXRTdGF0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zaG91bGRVcGRhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2NoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9Qb3BvdmVyL1BvcG92ZXJBbmltYXRpb25EZWZhdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gudGhyb3R0bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL1BhcGVyL1BhcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9pbnRlcm5hbC9SZW5kZXJUb0xheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9saWIvc3VwcG9ydHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWV2ZW50LWxpc3RlbmVyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvTWVudS9tZW51VXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL1N1YmhlYWRlci9TdWJoZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL1N1YmhlYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvaW50ZXJuYWwvQ2xpY2tBd2F5TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL0ljb25NZW51L0ljb25NZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL3N0eWxlcy9wYWdlcy5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3N0eWxlcy90eXBvZ3JhcGh5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWNvbXBvc2UvY29tcG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3V0aWxzL3J0bC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvdXRpbHMvY2FsbE9uY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy90cmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvc2l6aW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZ3JhZGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4Ym94T2xkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleGJveElFLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2NhbGMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3V0aWxzL2F1dG9wcmVmaXhlclN0YXRpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHlwaGVuYXRlLXN0eWxlLW5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9zaXppbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvZ3JhZGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvZmxleGJveE9sZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9mbGV4Ym94SUUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvZmxleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9jYWxjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS91dGlscy9hdXRvcHJlZml4ZXJEeW5hbWljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvZ2V0UHJlZml4ZWRLZXlmcmFtZXMuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvd3Nlci9zcmMvYm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvdXRpbHMvZ2V0QnJvd3NlckluZm9ybWF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9jcmVhdGVQcmVmaXhlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL3ByZWZpeFByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL2NyZWF0ZVByZWZpeGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS91dGlscy9hdXRvcHJlZml4ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3N0eWxlcy96SW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3N0eWxlcy9zcGFjaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9zdHlsZXMvYmFzZVRoZW1lcy9saWdodEJhc2VUaGVtZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gubWVyZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvc3R5bGVzL2dldE11aVRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvY29udGFpbnNOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvc3R5bGVzL2JhY2tncm91bmQuY3NzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9zdHlsZXMvYmFja2dyb3VuZC5jc3M/MzkzZSIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvc3R5bGVzL2JvZHkuY3NzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9zdHlsZXMvYm9keS5jc3M/ZTUyZCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZGVmYXVsdCIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJvYmoiLCJfZGVmaW5lUHJvcGVydHkiLCJfZGVmaW5lUHJvcGVydHkyIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsIndyaXRhYmxlIiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3NldFByb3RvdHlwZU9mMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY3JlYXRlMiIsIl90eXBlb2YzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJfdHlwZW9mMiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsImFyZ3VtZW50cyIsInNvdXJjZSIsImNvbmRpdGlvbiIsImZvcm1hdCIsImEiLCJiIiwiZSIsImYiLCJlcnJvciIsInVuZGVmaW5lZCIsIkVycm9yIiwiYXJncyIsImFyZ0luZGV4IiwicmVwbGFjZSIsImZyYW1lc1RvUG9wIiwia2V5cyIsImluZGV4T2YiLCJfYXNzaWduIiwiX2Fzc2lnbjIiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImNvbnNvbGUiLCJjb3JlIiwidmVyc2lvbiIsIl9fZSIsImVhc2VPdXRGdW5jdGlvbiIsImVhc2VJbk91dEZ1bmN0aW9uIiwiZWFzZU91dCIsImR1cmF0aW9uIiwiZGVsYXkiLCJlYXNlRnVuY3Rpb24iLCJ0aGlzIiwidG9TdHJpbmciLCJ0cmFuc2l0aW9ucyIsImNyZWF0ZSIsInN0b3JlIiwidWlkIiwiU3ltYm9sIiwiVVNFX1NZTUJPTCIsImFkZExlYWRpbmdTbGFzaCIsInBhdGgiLCJjaGFyQXQiLCJzdHJpcExlYWRpbmdTbGFzaCIsInN1YnN0ciIsImhhc0Jhc2VuYW1lIiwicHJlZml4IiwiUmVnRXhwIiwidGVzdCIsInN0cmlwQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJzbGljZSIsInBhcnNlUGF0aCIsInBhdGhuYW1lIiwic2VhcmNoIiwiaGFzaCIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwiY3JlYXRlUGF0aCIsImxvY2F0aW9uIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJnbG9iYWwiLCJjdHgiLCJoaWRlIiwiaGFzIiwiJGV4cG9ydCIsInR5cGUiLCJvd24iLCJvdXQiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIklTX0JJTkQiLCJCIiwiSVNfV1JBUCIsIlciLCJleHBQcm90byIsIkMiLCJhcHBseSIsIkZ1bmN0aW9uIiwidmlydHVhbCIsIlIiLCJVIiwid2luZG93IiwiTWF0aCIsIl9fZyIsIl9wcm9wVHlwZXMiLCJfcHJvcFR5cGVzMiIsImhvcml6b250YWwiLCJvbmVPZiIsInZlcnRpY2FsIiwiY29ybmVycyIsIm9yaWdpbiIsInNoYXBlIiwiY29ybmVyc0FuZENlbnRlciIsInN0cmluZ09yTnVtYmVyIiwib25lT2ZUeXBlIiwic3RyaW5nIiwibnVtYmVyIiwiekRlcHRoIiwiaXQiLCJfc2hhbGxvd0VxdWFsIiwiX3NoYWxsb3dFcXVhbDIiLCJwcmVmaXhlZFZhbHVlIiwia2VlcFVucHJlZml4ZWQiLCJJT2JqZWN0IiwiZGVmaW5lZCIsImV4ZWMiLCJpc09iamVjdCIsImNyZWF0ZURlc2MiLCIka2V5cyIsImVudW1CdWdLZXlzIiwiYml0bWFwIiwiX1N2Z0ljb24iLCJfU3ZnSWNvbjIiLCJfc2hvdWxkVXBkYXRlMiIsIkJhc2VDb21wb25lbnQiLCJuZXh0UHJvcHMiLCJob2MiLCJmbiIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJvcHRpb25zIiwiaXRlbSIsImRvbVN0eWxlIiwiaWQiLCJyZWZzIiwiaiIsInBhcnRzIiwicHVzaCIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibGlzdCIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpZHgiLCJzcGxpY2UiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXR0cnMiLCJhZGRBdHRycyIsImVsIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsInVwZGF0ZSIsInJlbW92ZSIsInJlc3VsdCIsInRyYW5zZm9ybSIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYmluZCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJidG9hIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwidXNlU291cmNlTWFwIiwibWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY29uY2F0IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiY29udmVydENvbG9yVG9TdHJpbmciLCJjb252ZXJ0SGV4VG9SR0IiLCJkZWNvbXBvc2VDb2xvciIsImdldENvbnRyYXN0UmF0aW8iLCJmb3JlZ3JvdW5kIiwiYmFja2dyb3VuZCIsImx1bUEiLCJnZXRMdW1pbmFuY2UiLCJsdW1CIiwiY29udHJhc3RSYXRpbyIsIm1heCIsIm1pbiIsIk51bWJlciIsInRvRml4ZWQiLCJlbXBoYXNpemUiLCJjb2xvciIsImNvZWZmaWNpZW50IiwiZGFya2VuIiwibGlnaHRlbiIsImZhZGUiLCJjbGFtcCIsInZhbHVlcyIsIl93YXJuaW5nIiwicGFyc2VJbnQiLCJjb2xvclN0cmluZyIsImV4dGVuZGVkQ29sb3IiLCJtYXJrZXIiLCJzdWJzdHJpbmciLCJzcGxpdCIsInBhcnNlRmxvYXQiLCJyZ2IiLCJ2YWwiLCJwb3ciLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInB4IiwicmFuZG9tIiwiX0ljb25CdXR0b24iLCJfSWNvbkJ1dHRvbjIiLCJzZXQiLCJfZXh0ZW5kczMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzIiwiX2dldFByb3RvdHlwZU9mMiIsIl9jbGFzc0NhbGxDaGVjazMiLCJfY3JlYXRlQ2xhc3MzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zIiwiX2luaGVyaXRzMyIsIl9zaW1wbGVBc3NpZ24yIiwiX3JlYWN0IiwiX3JlYWN0MiIsIl9ldmVudHMyIiwiX2tleWNvZGUyIiwiX0ZvY3VzUmlwcGxlMiIsIl9Ub3VjaFJpcHBsZTIiLCJzdHlsZUluamVjdGVkIiwibGlzdGVuaW5nIiwidGFiUHJlc3NlZCIsIkVuaGFuY2VkQnV0dG9uIiwiX0NvbXBvbmVudCIsIl9yZWYiLCJfdGVtcCIsIl90aGlzIiwiX3JldCIsIl9sZW4iLCJBcnJheSIsIl9rZXkiLCJzdGF0ZSIsImlzS2V5Ym9hcmRGb2N1c2VkIiwiaGFuZGxlS2V5RG93biIsImV2ZW50IiwiZGlzYWJsZWQiLCJkaXNhYmxlS2V5Ym9hcmRGb2N1cyIsImhhbmRsZUNsaWNrIiwicmVtb3ZlS2V5Ym9hcmRGb2N1cyIsIm9uS2V5RG93biIsImhhbmRsZUtleVVwIiwib25LZXlVcCIsImhhbmRsZUJsdXIiLCJjYW5jZWxGb2N1c1RpbWVvdXQiLCJvbkJsdXIiLCJoYW5kbGVGb2N1cyIsInBlcnNpc3QiLCJmb2N1c1RpbWVvdXQiLCJzZXRUaW1lb3V0Iiwic2V0S2V5Ym9hcmRGb2N1cyIsIm9uRm9jdXMiLCJvbkNsaWNrIiwiX3Byb3BzIiwia2V5Ym9hcmRGb2N1c2VkIiwic2V0U3RhdGUiLCJpbm5lckhUTUwiLCJib2R5IiwiaW5qZWN0U3R5bGUiLCJvbiIsImJ1dHRvbiIsImZvY3VzIiwib25LZXlib2FyZEZvY3VzIiwiY2xlYXJUaW1lb3V0IiwiX3Byb3BzMiIsImNlbnRlclJpcHBsZSIsImNoaWxkcmVuIiwiZGlzYWJsZUZvY3VzUmlwcGxlIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiZm9jdXNSaXBwbGVDb2xvciIsImZvY3VzUmlwcGxlT3BhY2l0eSIsInRvdWNoUmlwcGxlQ29sb3IiLCJ0b3VjaFJpcHBsZU9wYWNpdHkiLCJmb2N1c1JpcHBsZSIsIm9wYWNpdHkiLCJzaG93Iiwib3ZlcmZsb3ciLCJ0b3VjaFJpcHBsZSIsIl90aGlzMiIsIl9wcm9wczMiLCJjb250YWluZXJFbGVtZW50IiwidGFiSW5kZXgiLCJvdGhlciIsIl9jb250ZXh0JG11aVRoZW1lIiwiY29udGV4dCIsIm11aVRoZW1lIiwicHJlcGFyZVN0eWxlcyIsImVuaGFuY2VkQnV0dG9uIiwibWVyZ2VkU3R5bGVzIiwiYm9yZGVyIiwiYm94U2l6aW5nIiwiZGlzcGxheSIsImZvbnRGYW1pbHkiLCJiYXNlVGhlbWUiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsInRhcEhpZ2hsaWdodENvbG9yIiwiY3Vyc29yIiwidGV4dERlY29yYXRpb24iLCJtYXJnaW4iLCJwYWRkaW5nIiwib3V0bGluZSIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsInBvc2l0aW9uIiwidmVydGljYWxBbGlnbiIsImJhY2tncm91bmRDb2xvciIsImJ1dHRvblByb3BzIiwicmVmIiwibm9kZSIsImJ1dHRvbkNoaWxkcmVuIiwiY3JlYXRlQnV0dG9uQ2hpbGRyZW4iLCJpc1ZhbGlkRWxlbWVudCIsImNsb25lRWxlbWVudCIsIkNvbXBvbmVudCIsImRlZmF1bHRQcm9wcyIsImNvbnRleHRUeXBlcyIsImlzUmVxdWlyZWQiLCJwcm9wVHlwZXMiLCJfUGFwZXIiLCJfUGFwZXIyIiwib25jZSIsImNhbGxiYWNrIiwidHlwZUFycmF5IiwicmVjdXJzaXZlRnVuY3Rpb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50Iiwib2ZmIiwiZGV0YWNoRXZlbnQiLCJpc0tleWJvYXJkIiwicmVnZXgiLCJzdHIiLCJ0b1VwcGVyQ2FzZSIsInJlZDUwIiwicmVkMTAwIiwicmVkMjAwIiwicmVkMzAwIiwicmVkNDAwIiwicmVkNTAwIiwicmVkNjAwIiwicmVkNzAwIiwicmVkODAwIiwicmVkOTAwIiwicmVkQTEwMCIsInJlZEEyMDAiLCJyZWRBNDAwIiwicmVkQTcwMCIsInBpbms1MCIsInBpbmsxMDAiLCJwaW5rMjAwIiwicGluazMwMCIsInBpbms0MDAiLCJwaW5rNTAwIiwicGluazYwMCIsInBpbms3MDAiLCJwaW5rODAwIiwicGluazkwMCIsInBpbmtBMTAwIiwicGlua0EyMDAiLCJwaW5rQTQwMCIsInBpbmtBNzAwIiwicHVycGxlNTAiLCJwdXJwbGUxMDAiLCJwdXJwbGUyMDAiLCJwdXJwbGUzMDAiLCJwdXJwbGU0MDAiLCJwdXJwbGU1MDAiLCJwdXJwbGU2MDAiLCJwdXJwbGU3MDAiLCJwdXJwbGU4MDAiLCJwdXJwbGU5MDAiLCJwdXJwbGVBMTAwIiwicHVycGxlQTIwMCIsInB1cnBsZUE0MDAiLCJwdXJwbGVBNzAwIiwiZGVlcFB1cnBsZTUwIiwiZGVlcFB1cnBsZTEwMCIsImRlZXBQdXJwbGUyMDAiLCJkZWVwUHVycGxlMzAwIiwiZGVlcFB1cnBsZTQwMCIsImRlZXBQdXJwbGU1MDAiLCJkZWVwUHVycGxlNjAwIiwiZGVlcFB1cnBsZTcwMCIsImRlZXBQdXJwbGU4MDAiLCJkZWVwUHVycGxlOTAwIiwiZGVlcFB1cnBsZUExMDAiLCJkZWVwUHVycGxlQTIwMCIsImRlZXBQdXJwbGVBNDAwIiwiZGVlcFB1cnBsZUE3MDAiLCJpbmRpZ281MCIsImluZGlnbzEwMCIsImluZGlnbzIwMCIsImluZGlnbzMwMCIsImluZGlnbzQwMCIsImluZGlnbzUwMCIsImluZGlnbzYwMCIsImluZGlnbzcwMCIsImluZGlnbzgwMCIsImluZGlnbzkwMCIsImluZGlnb0ExMDAiLCJpbmRpZ29BMjAwIiwiaW5kaWdvQTQwMCIsImluZGlnb0E3MDAiLCJibHVlNTAiLCJibHVlMTAwIiwiYmx1ZTIwMCIsImJsdWUzMDAiLCJibHVlNDAwIiwiYmx1ZTUwMCIsImJsdWU2MDAiLCJibHVlNzAwIiwiYmx1ZTgwMCIsImJsdWU5MDAiLCJibHVlQTEwMCIsImJsdWVBMjAwIiwiYmx1ZUE0MDAiLCJibHVlQTcwMCIsImxpZ2h0Qmx1ZTUwIiwibGlnaHRCbHVlMTAwIiwibGlnaHRCbHVlMjAwIiwibGlnaHRCbHVlMzAwIiwibGlnaHRCbHVlNDAwIiwibGlnaHRCbHVlNTAwIiwibGlnaHRCbHVlNjAwIiwibGlnaHRCbHVlNzAwIiwibGlnaHRCbHVlODAwIiwibGlnaHRCbHVlOTAwIiwibGlnaHRCbHVlQTEwMCIsImxpZ2h0Qmx1ZUEyMDAiLCJsaWdodEJsdWVBNDAwIiwibGlnaHRCbHVlQTcwMCIsImN5YW41MCIsImN5YW4xMDAiLCJjeWFuMjAwIiwiY3lhbjMwMCIsImN5YW40MDAiLCJjeWFuNTAwIiwiY3lhbjYwMCIsImN5YW43MDAiLCJjeWFuODAwIiwiY3lhbjkwMCIsImN5YW5BMTAwIiwiY3lhbkEyMDAiLCJjeWFuQTQwMCIsImN5YW5BNzAwIiwidGVhbDUwIiwidGVhbDEwMCIsInRlYWwyMDAiLCJ0ZWFsMzAwIiwidGVhbDQwMCIsInRlYWw1MDAiLCJ0ZWFsNjAwIiwidGVhbDcwMCIsInRlYWw4MDAiLCJ0ZWFsOTAwIiwidGVhbEExMDAiLCJ0ZWFsQTIwMCIsInRlYWxBNDAwIiwidGVhbEE3MDAiLCJncmVlbjUwIiwiZ3JlZW4xMDAiLCJncmVlbjIwMCIsImdyZWVuMzAwIiwiZ3JlZW40MDAiLCJncmVlbjUwMCIsImdyZWVuNjAwIiwiZ3JlZW43MDAiLCJncmVlbjgwMCIsImdyZWVuOTAwIiwiZ3JlZW5BMTAwIiwiZ3JlZW5BMjAwIiwiZ3JlZW5BNDAwIiwiZ3JlZW5BNzAwIiwibGlnaHRHcmVlbjUwIiwibGlnaHRHcmVlbjEwMCIsImxpZ2h0R3JlZW4yMDAiLCJsaWdodEdyZWVuMzAwIiwibGlnaHRHcmVlbjQwMCIsImxpZ2h0R3JlZW41MDAiLCJsaWdodEdyZWVuNjAwIiwibGlnaHRHcmVlbjcwMCIsImxpZ2h0R3JlZW44MDAiLCJsaWdodEdyZWVuOTAwIiwibGlnaHRHcmVlbkExMDAiLCJsaWdodEdyZWVuQTIwMCIsImxpZ2h0R3JlZW5BNDAwIiwibGlnaHRHcmVlbkE3MDAiLCJsaW1lNTAiLCJsaW1lMTAwIiwibGltZTIwMCIsImxpbWUzMDAiLCJsaW1lNDAwIiwibGltZTUwMCIsImxpbWU2MDAiLCJsaW1lNzAwIiwibGltZTgwMCIsImxpbWU5MDAiLCJsaW1lQTEwMCIsImxpbWVBMjAwIiwibGltZUE0MDAiLCJsaW1lQTcwMCIsInllbGxvdzUwIiwieWVsbG93MTAwIiwieWVsbG93MjAwIiwieWVsbG93MzAwIiwieWVsbG93NDAwIiwieWVsbG93NTAwIiwieWVsbG93NjAwIiwieWVsbG93NzAwIiwieWVsbG93ODAwIiwieWVsbG93OTAwIiwieWVsbG93QTEwMCIsInllbGxvd0EyMDAiLCJ5ZWxsb3dBNDAwIiwieWVsbG93QTcwMCIsImFtYmVyNTAiLCJhbWJlcjEwMCIsImFtYmVyMjAwIiwiYW1iZXIzMDAiLCJhbWJlcjQwMCIsImFtYmVyNTAwIiwiYW1iZXI2MDAiLCJhbWJlcjcwMCIsImFtYmVyODAwIiwiYW1iZXI5MDAiLCJhbWJlckExMDAiLCJhbWJlckEyMDAiLCJhbWJlckE0MDAiLCJhbWJlckE3MDAiLCJvcmFuZ2U1MCIsIm9yYW5nZTEwMCIsIm9yYW5nZTIwMCIsIm9yYW5nZTMwMCIsIm9yYW5nZTQwMCIsIm9yYW5nZTUwMCIsIm9yYW5nZTYwMCIsIm9yYW5nZTcwMCIsIm9yYW5nZTgwMCIsIm9yYW5nZTkwMCIsIm9yYW5nZUExMDAiLCJvcmFuZ2VBMjAwIiwib3JhbmdlQTQwMCIsIm9yYW5nZUE3MDAiLCJkZWVwT3JhbmdlNTAiLCJkZWVwT3JhbmdlMTAwIiwiZGVlcE9yYW5nZTIwMCIsImRlZXBPcmFuZ2UzMDAiLCJkZWVwT3JhbmdlNDAwIiwiZGVlcE9yYW5nZTUwMCIsImRlZXBPcmFuZ2U2MDAiLCJkZWVwT3JhbmdlNzAwIiwiZGVlcE9yYW5nZTgwMCIsImRlZXBPcmFuZ2U5MDAiLCJkZWVwT3JhbmdlQTEwMCIsImRlZXBPcmFuZ2VBMjAwIiwiZGVlcE9yYW5nZUE0MDAiLCJkZWVwT3JhbmdlQTcwMCIsImJyb3duNTAiLCJicm93bjEwMCIsImJyb3duMjAwIiwiYnJvd24zMDAiLCJicm93bjQwMCIsImJyb3duNTAwIiwiYnJvd242MDAiLCJicm93bjcwMCIsImJyb3duODAwIiwiYnJvd245MDAiLCJibHVlR3JleTUwIiwiYmx1ZUdyZXkxMDAiLCJibHVlR3JleTIwMCIsImJsdWVHcmV5MzAwIiwiYmx1ZUdyZXk0MDAiLCJibHVlR3JleTUwMCIsImJsdWVHcmV5NjAwIiwiYmx1ZUdyZXk3MDAiLCJibHVlR3JleTgwMCIsImJsdWVHcmV5OTAwIiwiZ3JleTUwIiwiZ3JleTEwMCIsImdyZXkyMDAiLCJncmV5MzAwIiwiZ3JleTQwMCIsImdyZXk1MDAiLCJncmV5NjAwIiwiZ3JleTcwMCIsImdyZXk4MDAiLCJncmV5OTAwIiwiYmxhY2siLCJ3aGl0ZSIsInRyYW5zcGFyZW50IiwiZnVsbEJsYWNrIiwiZGFya0JsYWNrIiwibGlnaHRCbGFjayIsIm1pbkJsYWNrIiwiZmFpbnRCbGFjayIsImZ1bGxXaGl0ZSIsImRhcmtXaGl0ZSIsImxpZ2h0V2hpdGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJMSUJSQVJZIiwid2tzRXh0IiwiJFN5bWJvbCIsImRlZiIsIlRBRyIsInRhZyIsInN0YXQiLCJkUHMiLCJJRV9QUk9UTyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJfaXRlcmF0b3IyIiwiX3N5bWJvbDIiLCJfdHlwZW9mIiwidmFsdWVPZiIsImFGdW5jdGlvbiIsInRoYXQiLCJzaGFyZWQiLCJfd2FybmluZzIiLCJwcm9tcHQiLCJsaXN0ZW5lcnMiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImFjdGlvbiIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwibGlzdGVuZXIiLCJub3RpZnlMaXN0ZW5lcnMiLCJsb2NhdGlvbnNBcmVFcXVhbCIsImNyZWF0ZUxvY2F0aW9uIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJfcmVzb2x2ZVBhdGhuYW1lMiIsIl92YWx1ZUVxdWFsMiIsIl9QYXRoVXRpbHMiLCJjdXJyZW50TG9jYXRpb24iLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImlzIiwieCIsInkiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJtYWtlRW1wdHlGdW5jdGlvbiIsImFyZyIsImVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJucyIsInRoYXRSZXR1cm5zRmFsc2UiLCJ0aGF0UmV0dXJuc1RydWUiLCJ0aGF0UmV0dXJuc051bGwiLCJ0aGF0UmV0dXJuc1RoaXMiLCJ0aGF0UmV0dXJuc0FyZ3VtZW50IiwidmFsaWRhdGVGb3JtYXQiLCJfcHVyZTIiLCJOYXZpZ2F0aW9uTW9yZVZlcnQiLCJkaXNwbGF5TmFtZSIsIm11aU5hbWUiLCJNZW51SXRlbSIsIkljb25NZW51IiwiX0ljb25NZW51MyIsIl9NZW51SXRlbTMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiaXRlcmF0b3IiLCJ2YWx1ZUVxdWFsIiwiaXNBcnJheSIsImV2ZXJ5IiwiYVR5cGUiLCJhVmFsdWUiLCJiVmFsdWUiLCJhS2V5cyIsImJLZXlzIiwiaXNBYnNvbHV0ZSIsInNwbGljZU9uZSIsImsiLCJwb3AiLCJ0byIsImZyb20iLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJoYXNUcmFpbGluZ1NsYXNoIiwibGFzdCIsInVwIiwidW5zaGlmdCIsImhtciIsImxvY2FscyIsIl9jaGFpbkZ1bmN0aW9uMiIsIl9DaGlsZE1hcHBpbmciLCJhbnkiLCJmdW5jIiwiVHJhbnNpdGlvbkdyb3VwIiwiX1JlYWN0JENvbXBvbmVudCIsIl9jbGFzc0NhbGxDaGVjayIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwicGVyZm9ybUFwcGVhciIsImNvbXBvbmVudCIsImN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzIiwiY29tcG9uZW50V2lsbEFwcGVhciIsIl9oYW5kbGVEb25lQXBwZWFyaW5nIiwiY29tcG9uZW50RGlkQXBwZWFyIiwiY3VycmVudENoaWxkTWFwcGluZyIsImdldENoaWxkTWFwcGluZyIsInBlcmZvcm1MZWF2ZSIsInBlcmZvcm1FbnRlciIsImNvbXBvbmVudFdpbGxFbnRlciIsIl9oYW5kbGVEb25lRW50ZXJpbmciLCJjb21wb25lbnREaWRFbnRlciIsImNvbXBvbmVudFdpbGxMZWF2ZSIsIl9oYW5kbGVEb25lTGVhdmluZyIsImNvbXBvbmVudERpZExlYXZlIiwia2V5c1RvRW50ZXIiLCJuZXdDaGlsZHJlbiIsImNoaWxkUmVmcyIsInNldFByb3RvdHlwZU9mIiwiX2luaGVyaXRzIiwiY29tcG9uZW50V2lsbE1vdW50Iiwia2V5c1RvTGVhdmUiLCJjb21wb25lbnREaWRNb3VudCIsImluaXRpYWxDaGlsZE1hcHBpbmciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dENoaWxkTWFwcGluZyIsInByZXZDaGlsZE1hcHBpbmciLCJtZXJnZUNoaWxkTWFwcGluZ3MiLCJoYXNQcmV2IiwiaGFzTmV4dCIsImNvbXBvbmVudERpZFVwZGF0ZSIsInJlbmRlciIsIl90aGlzMyIsImNoaWxkcmVuVG9SZW5kZXIiLCJfbG9vcCIsImNoaWxkIiwiaXNDYWxsYmFja1JlZiIsImZhY3RvcnlDaGlsZCIsImNoaWxkRmFjdG9yeSIsInRyYW5zaXRpb25MZWF2ZSIsInRyYW5zaXRpb25OYW1lIiwidHJhbnNpdGlvbkFwcGVhciIsInRyYW5zaXRpb25FbnRlciIsInRyYW5zaXRpb25MZWF2ZVRpbWVvdXQiLCJ0cmFuc2l0aW9uRW50ZXJUaW1lb3V0IiwidHJhbnNpdGlvbkFwcGVhclRpbWVvdXQiLCJfZ2V0RGlzcGxheU5hbWUiLCJfZ2V0RGlzcGxheU5hbWUyIiwiaG9jTmFtZSIsIl9zZXRTdGF0aWMiLCJfc2V0U3RhdGljMiIsIl9yZWFjdERvbTIiLCJfUG9wb3ZlcjIiLCJfY2hlY2syIiwiX0xpc3RJdGVtMiIsIl9NZW51MiIsIm5lc3RlZE1lbnVTdHlsZSIsImNsb25lTWVudUl0ZW0iLCJtZW51SXRlbXMiLCJoYW5kbGVSZXF1ZXN0Q2xvc2UiLCJwcmV2ZW50RGVmYXVsdCIsImFuY2hvckVsIiwiZmluZERPTU5vZGUiLCJhcHBseUZvY3VzU3RhdGUiLCJmb2N1c1N0YXRlIiwibmV4dFN0YXRlIiwibmV4dENvbnRleHQiLCJsaXN0SXRlbSIsImRpc2FibGVkQ29sb3IiLCJ0ZXh0Q29sb3IiLCJpbmRlbnQiLCJzaWRlUGFkZGluZyIsImNoZWNrZWQiLCJkZXNrdG9wIiwiaW5uZXJEaXZTdHlsZSIsImluc2V0Q2hpbGRyZW4iLCJsZWZ0SWNvbiIsInJpZ2h0SWNvbiIsInNlY29uZGFyeVRleHQiLCJhbmltYXRpb24iLCJhbmNob3JPcmlnaW4iLCJ0YXJnZXRPcmlnaW4iLCJwYWxldHRlIiwicm9vdCIsIm1pbkhlaWdodCIsImxpbmVIZWlnaHQiLCJ3aGl0ZVNwYWNlIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ1RvcCIsImZsb2F0IiwibGVmdEljb25EZXNrdG9wIiwibGVmdCIsInRvcCIsInJpZ2h0SWNvbkRlc2t0b3AiLCJyaWdodCIsImZpbGwiLCJtZW51SXRlbSIsInJpZ2h0SWNvbkRlc2t0b3BGaWxsIiwibWVyZ2VkUm9vdFN0eWxlcyIsIm1lcmdlZElubmVyRGl2U3R5bGVzIiwibGVmdEljb25FbGVtZW50IiwibWVyZ2VkTGVmdEljb25TdHlsZXMiLCJyaWdodEljb25FbGVtZW50IiwibWVyZ2VkUmlnaHRJY29uU3R5bGVzIiwic2Vjb25kYXJ5VGV4dEVsZW1lbnQiLCJzZWNvbmRhcnlUZXh0SXNBbkVsZW1lbnQiLCJtZXJnZWRTZWNvbmRhcnlUZXh0U3R5bGVzIiwiY2hpbGRNZW51UG9wb3ZlciIsInVzZUxheWVyRm9yQ2xpY2tBd2F5Iiwib25SZXF1ZXN0Q2xvc2UiLCJDaGlsZHJlbiIsImhvdmVyQ29sb3IiLCJyb2xlIiwiaXNEZXNjZW5kYW50IiwicGFyZW50Iiwib2Zmc2V0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJfcmVhY3RFdmVudExpc3RlbmVyMiIsIl9SZW5kZXJUb0xheWVyMiIsIl9sb2Rhc2gyIiwiX1BvcG92ZXJBbmltYXRpb25EZWZhdWx0MiIsIlBvcG92ZXIiLCJ0aW1lb3V0IiwicmVuZGVyTGF5ZXIiLCJfdGhpcyRwcm9wcyIsImFuaW1hdGVkIiwiYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbiIsImNhbkF1dG9Qb3NpdGlvbiIsInNjcm9sbGFibGVDb250YWluZXIiLCJzdHlsZVJvb3QiLCJ6SW5kZXgiLCJwb3BvdmVyIiwiQW5pbWF0aW9uIiwiY2xvc2luZyIsImNvbXBvbmVudENsaWNrQXdheSIsInJlcXVlc3RDbG9zZSIsInNldFBsYWNlbWVudCIsInNjcm9sbGluZyIsInBvcG92ZXJSZWZzIiwibGF5ZXIiLCJnZXRMYXllciIsInRhcmdldEVsIiwiX3RoaXMkcHJvcHMyIiwiYW5jaG9yIiwiZ2V0QW5jaG9yUG9zaXRpb24iLCJnZXRUYXJnZXRQb3NpdGlvbiIsInRhcmdldFBvc2l0aW9uIiwiYXBwbHlBdXRvUG9zaXRpb25JZk5lZWRlZCIsIm1heEhlaWdodCIsImlubmVySGVpZ2h0IiwiaGFuZGxlUmVzaXplIiwiaGFuZGxlU2Nyb2xsIiwicGxhY2VtZW50VGltZW91dCIsImNhbmNlbCIsInJlYXNvbiIsIndpZHRoIiwib2Zmc2V0V2lkdGgiLCJoZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJib3R0b20iLCJtaWRkbGUiLCJjZW50ZXIiLCJhbmNob3JQb3NpdGlvbiIsImlubmVyV2lkdGgiLCJtZWRpYW4iLCJ0IiwicG9zaXRpb25zIiwib3ZlcmxhcCIsImdldE92ZXJsYXBNb2RlIiwiYW5jaG9yUG9zIiwiX2dldFBvc2l0aW9ucyIsImdldFBvc2l0aW9ucyIsIm5ld1RvcCIsIm5ld0xlZnQiLCJvblNjcm9sbCIsIm9uUmVzaXplIiwib3ZlcmZsb3dZIiwiX1N1YmhlYWRlcjIiLCJMaXN0IiwiaGFzU3ViaGVhZGVyIiwidG9BcnJheSIsImtleUNvZGUiLCJzZWFyY2hJbnB1dCIsImhhc0tleUNvZGUiLCJ3aGljaCIsImNoYXJDb2RlIiwibmFtZXMiLCJmb3VuZE5hbWVkS2V5IiwiU3RyaW5nIiwiY29kZXMiLCJ0b0xvd2VyQ2FzZSIsImFsaWFzZXMiLCJjaGFyQ29kZUF0IiwiaXNFdmVudEtleSIsIm5hbWVPckNvZGUiLCJjb2RlIiwiYmFja3NwYWNlIiwidGFiIiwiZW50ZXIiLCJzaGlmdCIsImN0cmwiLCJhbHQiLCJwYXVzZS9icmVhayIsImNhcHMgbG9jayIsImVzYyIsInNwYWNlIiwicGFnZSB1cCIsInBhZ2UgZG93biIsImVuZCIsImhvbWUiLCJkb3duIiwiaW5zZXJ0IiwiZGVsZXRlIiwiY29tbWFuZCIsImxlZnQgY29tbWFuZCIsInJpZ2h0IGNvbW1hbmQiLCJudW1wYWQgKiIsIm51bXBhZCArIiwibnVtcGFkIC0iLCJudW1wYWQgLiIsIm51bXBhZCAvIiwibnVtIGxvY2siLCJzY3JvbGwgbG9jayIsIm15IGNvbXB1dGVyIiwibXkgY2FsY3VsYXRvciIsIjsiLCI9IiwiLCIsIi0iLCIuIiwiLyIsImAiLCJbIiwiXFwiLCJdIiwiJyIsIndpbmRvd3MiLCLih6ciLCLijKUiLCLijIMiLCLijJgiLCJjdGwiLCJjb250cm9sIiwib3B0aW9uIiwicGF1c2UiLCJicmVhayIsImNhcHMiLCJyZXR1cm4iLCJlc2NhcGUiLCJzcGMiLCJzcGFjZWJhciIsInBndXAiLCJwZ2RuIiwiaW5zIiwiZGVsIiwiY21kIiwiZnJvbUNoYXJDb2RlIiwidGl0bGUiLCJhbGlhcyIsIl9mcm9tIiwiX2Zyb20yIiwiYXJyIiwiX3RvQXJyYXkzIiwiX0NsaWNrQXdheUxpc3RlbmVyMiIsIl9MaXN0MiIsIl9tZW51VXRpbHMiLCJNZW51IiwiX2luaXRpYWxpc2VQcm9wcyIsImZpbHRlcmVkQ2hpbGRyZW4iLCJnZXRGaWx0ZXJlZENoaWxkcmVuIiwic2VsZWN0ZWRJbmRleCIsImdldExhc3RTZWxlY3RlZEluZGV4IiwibmV3Rm9jdXNJbmRleCIsImRpc2FibGVBdXRvRm9jdXMiLCJvbk1lbnVJdGVtRm9jdXNDaGFuZ2UiLCJmb2N1c0luZGV4IiwiaW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkIiwia2V5V2lkdGgiLCJob3RLZXlIb2xkZXIiLCJIb3RLZXlIb2xkZXIiLCJhdXRvV2lkdGgiLCJzZXRXaWR0aCIsInNldFNjb2xsUG9zaXRpb24iLCJtdWx0aXBsZSIsInZhbHVlTGluayIsInJlcXVlc3RDaGFuZ2UiLCJvbkNoYW5nZSIsImNoaWxkSW5kZXgiLCJjaGlsZElzRGlzYWJsZWQiLCJzZWxlY3RlZENoaWxkU3R5bGVzIiwiaXNDaGlsZFNlbGVjdGVkIiwic2VsZWN0ZWRNZW51SXRlbSIsInNlbGVjdGVkTWVudUl0ZW1TdHlsZSIsIm1lcmdlZENoaWxkU3R5bGVzIiwibWVudUl0ZW1TdHlsZSIsImV4dHJhUHJvcHMiLCJpc0ZvY3VzZWQiLCJoYW5kbGVNZW51SXRlbUNsaWNrIiwic2V0Rm9jdXNJbmRleCIsIm1lbnVJdGVtQ291bnQiLCJjaGlsZElzQURpdmlkZXIiLCJtZW51SXRlbUluZGV4IiwiZm91bmRJbmRleCIsInByaW1hcnlUZXh0IiwiZ2V0VmFsdWVMaW5rIiwibWVudVZhbHVlIiwiaXRlbVZhbHVlIiwiaXRlbUluZGV4IiwiX21lbnVWYWx1ZSIsIm5ld01lbnVWYWx1ZSIsIm9uSXRlbUNsaWNrIiwibWF4SW5kZXgiLCJnZXRNZW51SXRlbUNvdW50IiwiY2hpbGRWYWx1ZSIsIm5ld0luZGV4IiwiZm9jdXNlZE1lbnVJdGVtIiwibWVudUl0ZW1IZWlnaHQiLCJvZmZzZXRUb3AiLCJzY3JvbGxDb250YWluZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJsaXN0RWwiLCJlbFdpZHRoIiwibWluV2lkdGgiLCJrZXlJbmNyZW1lbnRzIiwibmV3V2lkdGgiLCJfdGhpczQiLCJsaXN0U3R5bGUiLCJvbkVzY0tleURvd24iLCJtZW51IiwiZGl2aWRlciIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsInVzZXJTZWxlY3QiLCJzZWxlY3RlZFRleHRDb2xvciIsImdldFN0eWxlcyIsIm1lcmdlZExpc3RTdHlsZXMiLCJjaGlsZE5hbWUiLCJuZXdDaGlsZCIsIm9uQ2xpY2tBd2F5IiwiaGFuZGxlQ2xpY2tBd2F5Iiwib25XaGVlbCIsImhhbmRsZU9uV2hlZWwiLCJfdGhpczUiLCJkZWZhdWx0UHJldmVudGVkIiwiZm9jdXNlZEl0ZW0iLCJpbmNyZW1lbnRLZXlib2FyZEZvY3VzSW5kZXgiLCJzaGlmdEtleSIsImRlY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleCIsImhvdEtleXMiLCJhcHBlbmQiLCJzZXRGb2N1c0luZGV4U3RhcnRzV2l0aCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsIndoZWVsRGVsdGEiLCJkZWx0YVkiLCJpc0RlbHRhUG9zaXRpdmUiLCJjYW5jZWxTY3JvbGxFdmVudCIsIl9oeXBoZW5hdGVTdHlsZU5hbWUyIiwiX2h5cGhlbmF0ZVN0eWxlTmFtZSIsImFkZElmTmV3IiwibGVuIiwicGx1Z2lucyIsIm1ldGFEYXRhIiwicHJvY2Vzc2VkVmFsdWUiLCJnIiwiZXZhbCIsImFycjIiLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0b0ludGVnZXIiLCJjb2YiLCJhcnJheUluZGV4T2YiLCJyZWRlZmluZSIsIkl0ZXJhdG9ycyIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJnZXRQcm90b3R5cGVPZiIsIklURVJBVE9SIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiQmFzZSIsIk5BTUUiLCJuZXh0IiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsImtpbmQiLCJwcm90byIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsIiRhdCIsIml0ZXJhdGVkIiwiX3QiLCJfaSIsInBvaW50IiwiZG9uZSIsImZhaWxzIiwiS0VZIiwiZXhwIiwidG9PYmplY3QiLCJPYmplY3RQcm90byIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsIm1lc3NhZ2UiLCJjb25maXJtIiwic3VwcG9ydHNIaXN0b3J5IiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5Iiwic3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSIsInN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsInByb3BJc0VudW1lcmFibGUiLCJ0ZXN0MSIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwiX01lbnVJdGVtIiwiX01lbnVJdGVtMiIsIl9nZXRNdWlUaGVtZTIiLCJNdWlUaGVtZVByb3ZpZGVyIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJSRUFDVF9TVEFUSUNTIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5Iiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJmYWN0b3J5IiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImVzY2FwZWQiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwicGF0dGVybiIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwibWF0Y2hlcyIsIm9wdHMiLCJkYXRhIiwiZW5jb2RlIiwicHJldHR5IiwidG9rZW4iLCJzZWdtZW50IiwiYXR0YWNoS2V5cyIsInJlIiwiZmxhZ3MiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiZ3JvdXBzIiwibWF0Y2giLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsIl9Mb2NhdGlvblV0aWxzIiwiX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsInRyYW5zaXRpb25NYW5hZ2VyIiwiY3JlYXRlS2V5IiwiZW50cnkiLCJjcmVhdGVIcmVmIiwiZ28iLCJuZXh0SW5kZXgiLCJvayIsIm5leHRFbnRyaWVzIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiY2FuR28iLCJibG9jayIsImxpc3RlbiIsIl9pbnZhcmlhbnQyIiwiX0RPTVV0aWxzIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJnbG9iYWxIaXN0b3J5IiwiY2FuR29XaXRob3V0UmVsb2FkIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJiYXNlbmFtZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImdldERPTUxvY2F0aW9uIiwiZm9yY2VOZXh0UG9wIiwiaWdub3JlUGF0aCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImhhbmRsZVBvcCIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImZyb21JbmRleCIsImRlbHRhIiwiaW5pdGlhbExvY2F0aW9uIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaEhhc2hQYXRoIiwicHJldkluZGV4IiwibmV4dFBhdGhzIiwidW5ibG9jayIsInVubGlzdGVuIiwiZ2V0SGlzdG9yeVN0YXRlIiwiY2FuVXNlSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJoYW5kbGVQb3BTdGF0ZSIsImFsbEtleXMiLCJwdXNoU3RhdGUiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsIlJvdXRlcl9Sb3V0ZXIiLCJSb3V0ZXIiLCJjb21wdXRlTWF0Y2giLCJnZXRDaGlsZENvbnRleHQiLCJyb3V0ZXIiLCJ1cmwiLCJwYXJhbXMiLCJpc0V4YWN0IiwiaW52YXJpYW50X2Jyb3dzZXJfZGVmYXVsdCIsInJlYWN0X2RlZmF1bHQiLCJjb3VudCIsImJyb3dzZXJfZGVmYXVsdCIsImNvbXBvbmVudFdpbGxVbm1vdW50Iiwib25seSIsInByb3BfdHlwZXNfZGVmYXVsdCIsImVzX1JvdXRlciIsInJlYWN0X3JvdXRlcl9kb21fZXNfUm91dGVyIiwiQnJvd3NlclJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiQnJvd3NlclJvdXRlcl9Ccm93c2VyUm91dGVyIiwiQnJvd3NlclJvdXRlciIsIkJyb3dzZXJSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVCcm93c2VySGlzdG9yeV9kZWZhdWx0IiwiQnJvd3NlclJvdXRlcl9pbmhlcml0cyIsImJvb2wiLCJlc19Ccm93c2VyUm91dGVyIiwiSGFzaFJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiSGFzaFJvdXRlcl9IYXNoUm91dGVyIiwiSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVIYXNoSGlzdG9yeV9kZWZhdWx0IiwiSGFzaFJvdXRlcl9pbmhlcml0cyIsIkxpbmtfZXh0ZW5kcyIsIkxpbmtfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImlzTW9kaWZpZWRFdmVudCIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5IiwiTGlua19MaW5rIiwiTGluayIsIkxpbmtfY2xhc3NDYWxsQ2hlY2siLCJMaW5rX2luaGVyaXRzIiwiaW5uZXJSZWYiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJlc19MaW5rIiwiTWVtb3J5Um91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJNZW1vcnlSb3V0ZXJfTWVtb3J5Um91dGVyIiwiTWVtb3J5Um91dGVyIiwiTWVtb3J5Um91dGVyX2NsYXNzQ2FsbENoZWNrIiwiY3JlYXRlTWVtb3J5SGlzdG9yeV9kZWZhdWx0IiwiTWVtb3J5Um91dGVyX2luaGVyaXRzIiwiYXJyYXkiLCJwYXR0ZXJuQ2FjaGUiLCJjYWNoZUNvdW50IiwiZXNfbWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRwYXRoIiwiX29wdGlvbnMkZXhhY3QiLCJleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwiY2FjaGUiLCJjb21waWxlZFBhdHRlcm4iLCJwYXRoX3RvX3JlZ2V4cF9kZWZhdWx0IiwibWF0Y2hQYXRoX2NvbXBpbGVQYXRoIiwicmVkdWNlIiwiUm91dGVfZXh0ZW5kcyIsIlJvdXRlX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSb3V0ZV9pc0VtcHR5Q2hpbGRyZW4iLCJSb3V0ZV9Sb3V0ZSIsIlJvdXRlIiwiUm91dGVfY2xhc3NDYWxsQ2hlY2siLCJSb3V0ZV9pbmhlcml0cyIsImNvbXB1dGVkTWF0Y2giLCJfY29udGV4dCRyb3V0ZXIiLCJzdGF0aWNDb250ZXh0IiwiZXNfUm91dGUiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JvdXRlIiwiTmF2TGlua19leHRlbmRzIiwiTmF2TGlua19OYXZMaW5rIiwiYWN0aXZlQ2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJnZXRJc0FjdGl2ZSIsImFyaWFDdXJyZW50IiwicmVzdCIsIk5hdkxpbmtfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfcmVmMiIsImFyaWEtY3VycmVudCIsIlByb21wdF9Qcm9tcHQiLCJQcm9tcHQiLCJQcm9tcHRfY2xhc3NDYWxsQ2hlY2siLCJQcm9tcHRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlByb21wdF9pbmhlcml0cyIsImVuYWJsZSIsImRpc2FibGUiLCJ3aGVuIiwiTG9jYXRpb25VdGlsc19leHRlbmRzIiwiTG9jYXRpb25VdGlsc19jcmVhdGVMb2NhdGlvbiIsInJlc29sdmVfcGF0aG5hbWUiLCJMb2NhdGlvblV0aWxzX2xvY2F0aW9uc0FyZUVxdWFsIiwidmFsdWVfZXF1YWwiLCJSZWRpcmVjdF9SZWRpcmVjdCIsIlJlZGlyZWN0IiwiUmVkaXJlY3RfY2xhc3NDYWxsQ2hlY2siLCJSZWRpcmVjdF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVkaXJlY3RfaW5oZXJpdHMiLCJpc1N0YXRpYyIsInBlcmZvcm0iLCJwcmV2UHJvcHMiLCJwcmV2VG8iLCJuZXh0VG8iLCJTdGF0aWNSb3V0ZXJfZXh0ZW5kcyIsIlN0YXRpY1JvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3RhdGljUm91dGVyX2FkZEJhc2VuYW1lIiwiUGF0aFV0aWxzIiwiU3RhdGljUm91dGVyX2NyZWF0ZUxvY2F0aW9uIiwiX29iamVjdCRwYXRobmFtZSIsIl9vYmplY3Qkc2VhcmNoIiwiX29iamVjdCRoYXNoIiwiU3RhdGljUm91dGVyX2NyZWF0ZVVSTCIsIlN0YXRpY1JvdXRlcl9zdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIm5vb3AiLCJTdGF0aWNSb3V0ZXJfU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlUHVzaCIsImhhbmRsZVJlcGxhY2UiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsIlN0YXRpY1JvdXRlcl9pbmhlcml0cyIsIlN0YXRpY1JvdXRlcl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIlN0YXRpY1JvdXRlcl9zdHJpcEJhc2VuYW1lIiwiU3dpdGNoX1N3aXRjaCIsIlN3aXRjaCIsIlN3aXRjaF9jbGFzc0NhbGxDaGVjayIsIlN3aXRjaF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3dpdGNoX2luaGVyaXRzIiwiZWxlbWVudCIsIl9lbGVtZW50JHByb3BzIiwicGF0aFByb3AiLCJwYWdlcyIsImFkZHJlc3MiLCJsaW5rcyIsIk1lbnVJdGVtX2RlZmF1bHQiLCJidXR0b25zIiwiSGVhZGVyX0hlYWRlciIsInJlYWN0Iiwic3VwZXIiLCJoZWFkZXJNb2JpbGUiLCJoZWFkZXJMYW5kc2NhcGUiLCJtb2JpbGVSZW5kZXIiLCJJY29uTWVudV9kZWZhdWx0IiwiaWNvbkJ1dHRvbkVsZW1lbnQiLCJJY29uQnV0dG9uX2RlZmF1bHQiLCJtb3JlX3ZlcnRfZGVmYXVsdCIsImNvbXB1dGVyUmVuZGVyIiwic2hvd01vYmlsZSIsImZvb3Rlcl9Gb290ZXIiLCJiYWNrZ3JvdW5kX0JhY2tncm91bmQiLCJDYWxlbmRhcnNfQ29udGVudCIsIk91cl9TY2hvb2xzX0NvbnRlbnQiLCJTY2hvb2xfQm9hcmRfQ29udGVudCIsIlN0dWRlbnRfUGFyZW50X1Jlc291cmNlc19Db250ZW50IiwiU3RhZmZfUmVzb3VyY2VzX0NvbnRlbnQiLCJFbXBsb3ltZW50X0VtcGxveW1lbnQiLCJIb21lcGFnZV9Db250ZW50IiwiYm9keV9UaXRsZSIsIkJvZHlfc2Nyb2xsIiwiQm9keV9Cb2R5IiwiYm9keVJlZiIsImNyZWF0ZVJlZiIsImZpeEhlYWRlciIsImN1cnJlbnQiLCJBcHBfQXBwIiwiTXVpVGhlbWVQcm92aWRlcl9kZWZhdWx0IiwicmVhY3RfZG9tX2RlZmF1bHQiLCJnZXRFbGVtZW50QnlJZCIsIl90cmFuc2l0aW9uczIiLCJfY29sb3JNYW5pcHVsYXRvciIsIl9FbmhhbmNlZEJ1dHRvbjIiLCJSYWlzZWRCdXR0b24iLCJob3ZlcmVkIiwidG91Y2hlZCIsImluaXRpYWxaRGVwdGgiLCJoYW5kbGVNb3VzZURvd24iLCJvbk1vdXNlRG93biIsImhhbmRsZU1vdXNlVXAiLCJvbk1vdXNlVXAiLCJoYW5kbGVNb3VzZUxlYXZlIiwib25Nb3VzZUxlYXZlIiwiaGFuZGxlTW91c2VFbnRlciIsIm9uTW91c2VFbnRlciIsImhhbmRsZVRvdWNoU3RhcnQiLCJvblRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsIm9uVG91Y2hFbmQiLCJoYW5kbGVLZXlib2FyZEZvY3VzIiwiYnV0dG9uU3R5bGUiLCJpY29uIiwiZGlzYWJsZWRCYWNrZ3JvdW5kQ29sb3IiLCJkaXNhYmxlZExhYmVsQ29sb3IiLCJmdWxsV2lkdGgiLCJsYWJlbCIsImxhYmVsUG9zaXRpb24iLCJsYWJlbENvbG9yIiwibGFiZWxTdHlsZSIsIm92ZXJsYXlTdHlsZSIsInJpcHBsZVN0eWxlIiwicHJpbWFyeSIsInNlY29uZGFyeSIsInJhaXNlZEJ1dHRvbiIsImJvcmRlclJhZGl1cyIsImFtb3VudCIsImRpc2FibGVkVGV4dENvbG9yIiwicHJpbWFyeUNvbG9yIiwicHJpbWFyeVRleHRDb2xvciIsInNlY29uZGFyeUNvbG9yIiwic2Vjb25kYXJ5VGV4dENvbG9yIiwiYnV0dG9uSGVpZ2h0IiwidHJhbnNpdGlvbiIsInRleHRBbGlnbiIsImxldHRlclNwYWNpbmciLCJ0ZXh0VHJhbnNmb3JtIiwic3BhY2luZyIsImRlc2t0b3BHdXR0ZXJMZXNzIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0Iiwib3ZlcmxheSIsInJpcHBsZSIsIm1lcmdlZFJpcHBsZVN0eWxlcyIsImJ1dHRvbkV2ZW50SGFuZGxlcnMiLCJsYWJlbEVsZW1lbnQiLCJpY29uQ2xvbmVkIiwiZW5oYW5jZWRCdXR0b25DaGlsZHJlbiIsIl9SYWlzZWRCdXR0b24iLCJfUmFpc2VkQnV0dG9uMiIsIk5lc3RlZExpc3QiLCJuZXN0ZWRMZXZlbCIsIk5hdmlnYXRpb25FeHBhbmRNb3JlIiwiTmF2aWdhdGlvbkV4cGFuZExlc3MiLCJleHRlbmRDaGlsZHJlbiIsImV4dGVuZGVkUHJvcHMiLCJleHRlbmRlZENoaWxkcmVuIiwibmV3UHJvcHMiLCJUb29sdGlwIiwic2V0UmlwcGxlU2l6ZSIsInNldFRvb2x0aXBQb3NpdGlvbiIsInRvb2x0aXAiLCJ0b29sdGlwV2lkdGgiLCJob3Jpem9udGFsUG9zaXRpb24iLCJ0b29sdGlwSGVpZ2h0IiwicmlwcGxlRGlhbWV0ZXIiLCJzcXJ0IiwidG91Y2giLCJ2ZXJ0aWNhbFBvc2l0aW9uIiwidG91Y2hNYXJnaW5PZmZzZXQiLCJ0b3VjaE9mZnNldFRvcCIsInJvb3RXaGVuU2hvd24iLCJyb290V2hlblRvdWNoZWQiLCJyaXBwbGVXaGVuU2hvd24iLCJyaXBwbGVCYWNrZ3JvdW5kQ29sb3IiLCJGb250SWNvbiIsIm9mZkNvbG9yIiwib25Db2xvciIsImljb25TaXplIiwiX0ZvbnRJY29uIiwiX0ZvbnRJY29uMiIsIl9Ub29sdGlwMiIsIl9jaGlsZFV0aWxzIiwiSWNvbkJ1dHRvbiIsInRvb2x0aXBTaG93biIsImhpZGVUb29sdGlwIiwic2hvd1Rvb2x0aXAiLCJoYW5kbGVNb3VzZU91dCIsIm9uTW91c2VPdXQiLCJob3ZlcmVkU3R5bGUiLCJpY29uQ2xhc3NOYW1lIiwidG9vbHRpcFBvc2l0aW9uUHJvcCIsInRvb2x0aXBQb3NpdGlvbiIsInRvb2x0aXBTdHlsZXMiLCJpY29uU3R5bGUiLCJmb250aWNvbiIsInRvb2x0aXBFbGVtZW50IiwiaWNvbkhvdmVyQ29sb3IiLCJpY29uU3R5bGVGb250SWNvbiIsImNoaWxkcmVuU3R5bGUiLCJfYXV0b1ByZWZpeDIiLCJDaXJjbGVSaXBwbGUiLCJlbnRlclRpbWVyIiwibGVhdmVUaW1lciIsImluaXRpYWxpemVBbmltYXRpb24iLCJhbmltYXRlIiwicmVtb3ZlQWZ0ZXIiLCJhYm9ydGVkIiwidHJhbnNpdGlvblZhbHVlIiwidG91Y2hHZW5lcmF0ZWQiLCJfdG9Db25zdW1hYmxlQXJyYXkzIiwiX1RyYW5zaXRpb25Hcm91cDIiLCJfZG9tMiIsIl9DaXJjbGVSaXBwbGUyIiwiVG91Y2hSaXBwbGUiLCJzdGFydCIsImFib3J0T25TY3JvbGwiLCJ0b3VjaGVzIiwic3RhcnRMaXN0ZW5pbmdGb3JTY3JvbGxBYm9ydCIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJoYW5kbGVUb3VjaE1vdmUiLCJhYnMiLCJzdG9wTGlzdGVuaW5nRm9yU2Nyb2xsQWJvcnQiLCJjbGllbnRZIiwiZmlyc3RUb3VjaFkiLCJkZWx0YVgiLCJjbGllbnRYIiwiZmlyc3RUb3VjaFgiLCJjdXJyZW50UmlwcGxlcyIsInJpcHBsZXMiLCJhYm9ydGVkUmlwcGxlIiwiaWdub3JlTmV4dE1vdXNlRG93biIsImhhc1JpcHBsZXMiLCJuZXh0S2V5IiwiaXNSaXBwbGVUb3VjaEdlbmVyYXRlZCIsInRoZW1lIiwiZ2V0UmlwcGxlU3R5bGUiLCJlbEhlaWdodCIsImlzVG91Y2hFdmVudCIsInBhZ2VYIiwicGFnZVkiLCJwb2ludGVyWCIsInBvaW50ZXJZIiwidG9wTGVmdERpYWciLCJjYWxjRGlhZyIsInRvcFJpZ2h0RGlhZyIsImJvdFJpZ2h0RGlhZyIsImJvdExlZnREaWFnIiwicmlwcGxlUmFkaXVzIiwicmlwcGxlU2l6ZSIsImRpcmVjdGlvbkludmFyaWFudCIsIl9zdGF0ZSIsInJpcHBsZUdyb3VwIiwicG9pbnRlckV2ZW50cyIsIlNjYWxlSW5DaGlsZCIsIm1pblNjYWxlIiwibWF4U2NhbGUiLCJlbnRlckRlbGF5IiwicHJldiIsImdldFZhbHVlRm9yS2V5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwiY2hpbGRNYXBwaW5nIiwicGVuZGluZ05leHRLZXkiLCJfU2NhbGVJbkNoaWxkMiIsIlNjYWxlSW4iLCJjaGlsZFN0eWxlIiwiX1NjYWxlSW4yIiwicHVsc2F0ZUR1cmF0aW9uIiwiRm9jdXNSaXBwbGUiLCJwdWxzYXRlIiwiaW5uZXJDaXJjbGUiLCJuZXh0U2NhbGUiLCJpbm5lclN0eWxlIiwiaW5uZXJTdHlsZXMiLCJzaXplIiwib2xkVG9wIiwiZ2V0UmlwcGxlRWxlbWVudCIsIl9leHBhbmRMZXNzMiIsIl9leHBhbmRNb3JlMiIsIl9OZXN0ZWRMaXN0MiIsIkxpc3RJdGVtIiwicmlnaHRJY29uQnV0dG9uSG92ZXJlZCIsInJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXNlZCIsInByaW1hcnlUb2dnbGVzTmVzdGVkTGlzdCIsImhhbmRsZU5lc3RlZExpc3RUb2dnbGUiLCJsZWZ0Q2hlY2tib3giLCJvbk5lc3RlZExpc3RUb2dnbGUiLCJoYW5kbGVSaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzIiwiaWNvbkJ1dHRvbiIsInJpZ2h0SWNvbkJ1dHRvbiIsImhhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlTGVhdmUiLCJoYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZUVudGVyIiwiaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcCIsImhhbmRsZVJpZ2h0SWNvbkJ1dHRvbkNsaWNrIiwiaW5pdGlhbGx5T3BlbiIsImJ1dHRvbkVsIiwiYmx1ciIsImNvbnRlbnRDaGlsZHJlbiIsImFkZGl0aW9uYWxQcm9wcyIsIm1lcmdlZERpdlN0eWxlcyIsImlubmVyRGl2IiwibWVyZ2VkTGFiZWxTdHlsZXMiLCJiYXNlU3R5bGVzIiwiYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yIiwibGVmdEF2YXRhciIsIm5lc3RlZEl0ZW1zIiwibmVzdGVkTGlzdFN0eWxlIiwicmlnaHRBdmF0YXIiLCJyaWdodFRvZ2dsZSIsInNlY29uZGFyeVRleHRMaW5lcyIsInNpbmdsZUF2YXRhciIsInNpbmdsZU5vQXZhdGFyIiwidHdvTGluZSIsInRocmVlTGluZSIsIm5lc3RlZExldmVsRGVwdGgiLCJpY29ucyIsImF2YXRhcnMiLCJ0ZXh0T3ZlcmZsb3ciLCJXZWJraXRMaW5lQ2xhbXAiLCJXZWJraXRCb3hPcmllbnQiLCJsZWZ0SWNvbkNvbG9yIiwicHVzaEVsZW1lbnQiLCJfYWRkaXRpb25hbFByb3BzIiwicmlnaHRJY29uQ29sb3IiLCJuZWVkc05lc3RlZEluZGljYXRvciIsInJpZ2h0SWNvbkJ1dHRvbkVsZW1lbnQiLCJyaWdodEljb25CdXR0b25IYW5kbGVycyIsInByaW1hcnlUZXh0RWxlbWVudCIsImNyZWF0ZVRleHRFbGVtZW50IiwibmVzdGVkTGlzdCIsInNpbXBsZUxhYmVsIiwiY3JlYXRlTGFiZWxFbGVtZW50IiwiY3JlYXRlRGlzYWJsZWRFbGVtZW50IiwiU3ZnSWNvbiIsInZpZXdCb3giLCJzdmdJY29uIiwiY3JlYXRlRmFjdG9yeSIsIlNob3VsZFVwZGF0ZSIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIk5hdmlnYXRpb25DaGVjayIsIlBvcG92ZXJBbmltYXRpb25EZWZhdWx0IiwidHJhbnNmb3JtT3JpZ2luIiwiRlVOQ19FUlJPUl9URVhUIiwiTkFOIiwic3ltYm9sVGFnIiwicmVUcmltIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJvYmplY3RUb1N0cmluZyIsIm5hdGl2ZU1heCIsIm5hdGl2ZU1pbiIsImRlYm91bmNlIiwid2FpdCIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsInRyYWlsaW5nIiwiaW52b2tlRnVuYyIsInRpbWUiLCJ0aGlzQXJnIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0aW1lckV4cGlyZWQiLCJ0cmFpbGluZ0VkZ2UiLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImxlYWRpbmdFZGdlIiwidG9OdW1iZXIiLCJmbHVzaCIsImlzT2JqZWN0TGlrZSIsImlzU3ltYm9sIiwiaXNCaW5hcnkiLCJQYXBlciIsImNpcmNsZSIsInJvdW5kZWQiLCJ0cmFuc2l0aW9uRW5hYmxlZCIsInBhcGVyIiwiYm94U2hhZG93IiwiekRlcHRoU2hhZG93cyIsIl9yZWFjdERvbSIsIlJlbmRlclRvTGF5ZXIiLCJkb2N1bWVudEVsZW1lbnQiLCJjb250YWlucyIsInVucmVuZGVyTGF5ZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwibGF5ZXJFbGVtZW50IiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJwYXNzaXZlT3B0aW9uIiwiYXR0ciIsInN1cHBvcnRzUGFzc2l2ZU9wdGlvbiIsIl9rZXlzMiIsIndpdGhPcHRpb25zIiwiaGFuZGxlciIsIm1lcmdlRGVmYXVsdEV2ZW50T3B0aW9ucyIsIl9zdXBwb3J0cyIsImRlZmF1bHRFdmVudE9wdGlvbnMiLCJwYXNzaXZlIiwiZ2V0RXZlbnRMaXN0ZW5lckFyZ3MiLCJldmVudE5hbWUiLCJFdmVudExpc3RlbmVyIiwiYWRkTGlzdGVuZXJzIiwicmVtb3ZlTGlzdGVuZXJzIiwiYXBwbHlMaXN0ZW5lcnMiLCJvbk9yT2ZmIiwiaXRlcmF0ZWUiLCJldmVudFByb3BzIiwicHJvcCIsImZvckVhY2hMaXN0ZW5lciIsImNsZWFyIiwibGFzdEtleXMiLCJTdWJoZWFkZXIiLCJpbnNldCIsInN1YmhlYWRlciIsIl9TdWJoZWFkZXIiLCJjbGlja0F3YXlFdmVudHMiLCJ1bmJpbmQiLCJDbGlja0F3YXlMaXN0ZW5lciIsImlzQ3VycmVudGx5TW91bnRlZCIsImdldEtleXMiLCJnT1BTIiwiJGFzc2lnbiIsIkEiLCJLIiwiVCIsImFMZW4iLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwibWVudUluaXRpYWxseUtleWJvYXJkRm9jdXNlZCIsImhhbmRsZUl0ZW1DbGljayIsImNsaWNrQ2xvc2VEZWxheSIsInRpbWVyQ2xvc2VJZCIsImhhbmRsZUVzY0tleURvd25NZW51IiwiaWNvbk1lbnVDb250YWluZXIiLCJvblJlcXVlc3RDaGFuZ2UiLCJjdXJyZW50VGFyZ2V0IiwibWVudVN0eWxlIiwibWVyZ2VkTWVudVN0eWxlcyIsImljb25CdXR0b25Qcm9wcyIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsInRyaW0iLCIkMSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY29sb3JzIiwiVHlwb2dyYXBoeSIsInRleHRGdWxsQmxhY2siLCJ0ZXh0RGFya0JsYWNrIiwidGV4dExpZ2h0QmxhY2siLCJ0ZXh0TWluQmxhY2siLCJ0ZXh0RnVsbFdoaXRlIiwidGV4dERhcmtXaGl0ZSIsInRleHRMaWdodFdoaXRlIiwiZm9udFdlaWdodExpZ2h0IiwiZm9udFdlaWdodE5vcm1hbCIsImZvbnRXZWlnaHRNZWRpdW0iLCJmb250U3R5bGVCdXR0b25Gb250U2l6ZSIsImZ1bmNzIiwiX2tleXMiLCJpc1J0bCIsImZsaXBwZWRBdHRyaWJ1dGVzIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJMZWZ0IiwibmV3U3R5bGUiLCJhdHRyaWJ1dGUiLCJyZVRyYW5zbGF0ZSIsInJlU2tldyIsInByb3BlcnR5UHJlZml4TWFwIiwicHJvcGVydGllcyIsIm91dHB1dFZhbHVlIiwiX2lzUHJlZml4ZWRWYWx1ZTIiLCJtdWx0aXBsZVZhbHVlcyIsInNpbmdsZVZhbHVlIiwiZGFzaENhc2VQcm9wZXJ0eSIsIl9oeXBoZW5hdGVQcm9wZXJ0eTIiLCJwcmVmaXhlcyIsInBMZW4iLCJwcmVmaXhNYXBwaW5nIiwicHJlZml4VmFsdWUiLCJ3ZWJraXRPdXRwdXQiLCJtb3pPdXRwdXQiLCJfY2FwaXRhbGl6ZVN0cmluZzIiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJXZWJraXRUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvblByb3BlcnR5IiwiTW96VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb25Qcm9wZXJ0eSIsIldlYmtpdCIsIk1veiIsIm1zIiwibWF4V2lkdGgiLCJjb2x1bW5XaWR0aCIsIm1pbi1jb250ZW50IiwibWF4LWNvbnRlbnQiLCJmaWxsLWF2YWlsYWJsZSIsImZpdC1jb250ZW50IiwiY29udGFpbi1mbG9hdHMiLCJfaXNQcmVmaXhlZFZhbHVlIiwiV2Via2l0Qm94RGlyZWN0aW9uIiwiYWx0ZXJuYXRpdmVQcm9wcyIsImFsdGVybmF0aXZlVmFsdWVzIiwic3BhY2UtYXJvdW5kIiwic3BhY2UtYmV0d2VlbiIsImZsZXgtc3RhcnQiLCJmbGV4LWVuZCIsIndyYXAtcmV2ZXJzZSIsIndyYXAiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJmbGV4V3JhcCIsImFsaWduQ29udGVudCIsImFsaWduU2VsZiIsIm9yZGVyIiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZmxleEJhc2lzIiwiZmxleCIsImlubGluZS1mbGV4IiwiX2NhbGMyIiwiX2ZsZXgyIiwiX2ZsZXhib3hJRTIiLCJfZmxleGJveE9sZDIiLCJfZ3JhZGllbnQyIiwiX3NpemluZzIiLCJfdHJhbnNpdGlvbjIiLCJwcmVmaXhNYXAiLCJ0cmFuc2Zvcm1PcmlnaW5YIiwidHJhbnNmb3JtT3JpZ2luWSIsImJhY2tmYWNlVmlzaWJpbGl0eSIsInBlcnNwZWN0aXZlIiwicGVyc3BlY3RpdmVPcmlnaW4iLCJ0cmFuc2Zvcm1TdHlsZSIsInRyYW5zZm9ybU9yaWdpbloiLCJhbmltYXRpb25EZWxheSIsImFuaW1hdGlvbkRpcmVjdGlvbiIsImFuaW1hdGlvbkZpbGxNb2RlIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFuaW1hdGlvbk5hbWUiLCJhbmltYXRpb25QbGF5U3RhdGUiLCJhbmltYXRpb25UaW1pbmdGdW5jdGlvbiIsImFwcGVhcmFuY2UiLCJmb250S2VybmluZyIsInRleHRFbXBoYXNpc1Bvc2l0aW9uIiwidGV4dEVtcGhhc2lzIiwidGV4dEVtcGhhc2lzU3R5bGUiLCJ0ZXh0RW1waGFzaXNDb2xvciIsImJveERlY29yYXRpb25CcmVhayIsImNsaXBQYXRoIiwibWFza0ltYWdlIiwibWFza01vZGUiLCJtYXNrUmVwZWF0IiwibWFza1Bvc2l0aW9uIiwibWFza0NsaXAiLCJtYXNrT3JpZ2luIiwibWFza1NpemUiLCJtYXNrQ29tcG9zaXRlIiwibWFzayIsIm1hc2tCb3JkZXJTb3VyY2UiLCJtYXNrQm9yZGVyTW9kZSIsIm1hc2tCb3JkZXJTbGljZSIsIm1hc2tCb3JkZXJXaWR0aCIsIm1hc2tCb3JkZXJPdXRzZXQiLCJtYXNrQm9yZGVyUmVwZWF0IiwibWFza0JvcmRlciIsIm1hc2tUeXBlIiwidGV4dERlY29yYXRpb25TdHlsZSIsInRleHREZWNvcmF0aW9uU2tpcCIsInRleHREZWNvcmF0aW9uTGluZSIsInRleHREZWNvcmF0aW9uQ29sb3IiLCJmb250RmVhdHVyZVNldHRpbmdzIiwiYnJlYWtBZnRlciIsImJyZWFrQmVmb3JlIiwiYnJlYWtJbnNpZGUiLCJjb2x1bW5Db3VudCIsImNvbHVtbkZpbGwiLCJjb2x1bW5HYXAiLCJjb2x1bW5SdWxlIiwiY29sdW1uUnVsZUNvbG9yIiwiY29sdW1uUnVsZVN0eWxlIiwiY29sdW1uUnVsZVdpZHRoIiwiY29sdW1ucyIsImNvbHVtblNwYW4iLCJmbGV4RGlyZWN0aW9uIiwiZmxleEZsb3ciLCJ0cmFuc2l0aW9uRGVsYXkiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24iLCJiYWNrZHJvcEZpbHRlciIsInNjcm9sbFNuYXBUeXBlIiwic2Nyb2xsU25hcFBvaW50c1giLCJzY3JvbGxTbmFwUG9pbnRzWSIsInNjcm9sbFNuYXBEZXN0aW5hdGlvbiIsInNjcm9sbFNuYXBDb29yZGluYXRlIiwic2hhcGVJbWFnZVRocmVzaG9sZCIsInNoYXBlSW1hZ2VNYXJnaW4iLCJzaGFwZUltYWdlT3V0c2lkZSIsImh5cGhlbnMiLCJmbG93SW50byIsImZsb3dGcm9tIiwicmVnaW9uRnJhZ21lbnQiLCJ0ZXh0QWxpZ25MYXN0IiwidGFiU2l6ZSIsIndyYXBGbG93Iiwid3JhcFRocm91Z2giLCJ3cmFwTWFyZ2luIiwidG91Y2hBY3Rpb24iLCJncmlkVGVtcGxhdGVDb2x1bW5zIiwiZ3JpZFRlbXBsYXRlUm93cyIsImdyaWRUZW1wbGF0ZUFyZWFzIiwiZ3JpZFRlbXBsYXRlIiwiZ3JpZEF1dG9Db2x1bW5zIiwiZ3JpZEF1dG9Sb3dzIiwiZ3JpZEF1dG9GbG93IiwiZ3JpZCIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW5TdGFydCIsImdyaWRSb3dFbmQiLCJncmlkUm93IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uR2FwIiwiZ3JpZFJvd0dhcCIsImdyaWRBcmVhIiwiZ3JpZEdhcCIsInRleHRTaXplQWRqdXN0IiwiYm9yZGVySW1hZ2UiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlUmVwZWF0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlU291cmNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsInVwcGVyY2FzZVBhdHRlcm4iLCJtc1BhdHRlcm4iLCJjc3NQcmVmaXgiLCJyZXF1aXJlc1ByZWZpeCIsInJlcXVpcmVzUHJlZml4RGFzaENhc2VkIiwiX2h5cGhlbmF0ZVByb3BlcnR5IiwiX2dldFByZWZpeGVkVmFsdWUyIiwiX2dldFByZWZpeGVkVmFsdWUiLCJicm93c2VyTmFtZSIsImJyb3dzZXJWZXJzaW9uIiwiY2hyb21lIiwic2FmYXJpIiwiZmlyZWZveCIsIm9wZXJhIiwiaWUiLCJlZGdlIiwiaW9zX3NhZiIsImFuZHJvaWQiLCJhbmRfY2hyIiwiYW5kX3VjIiwib3BfbWluaSIsImRlZmluaXRpb24iLCJkZXRlY3QiLCJnZXRGaXJzdE1hdGNoIiwiZ2V0U2Vjb25kTWF0Y2giLCJpb3NkZXZpY2UiLCJuZXh1c01vYmlsZSIsIm5leHVzVGFibGV0IiwiY2hyb21lb3MiLCJzaWxrIiwic2FpbGZpc2giLCJ0aXplbiIsIndlYm9zIiwid2luZG93c3Bob25lIiwibWFjIiwibGludXgiLCJlZGdlVmVyc2lvbiIsInZlcnNpb25JZGVudGlmaWVyIiwidGFibGV0IiwibW9iaWxlIiwieGJveCIsInNhbXN1bmdCcm93c2VyIiwiY29hc3QiLCJ5YW5kZXhicm93c2VyIiwidWNicm93c2VyIiwibWF4dGhvbiIsImVwaXBoYW55IiwicHVmZmluIiwic2xlaXBuaXIiLCJrTWVsZW9uIiwib3NuYW1lIiwibXNlZGdlIiwibXNpZSIsImNocm9tZUJvb2siLCJ2aXZhbGRpIiwic2VhbW9ua2V5IiwiZmlyZWZveG9zIiwicGhhbnRvbSIsInNsaW1lciIsImJsYWNrYmVycnkiLCJ0b3VjaHBhZCIsImJhZGEiLCJxdXB6aWxsYSIsImNocm9taXVtIiwiZ29vZ2xlYm90IiwiYmxpbmsiLCJ3ZWJraXQiLCJnZWNrbyIsImlvcyIsIm9zVmVyc2lvbiIsImdldFdpbmRvd3NWZXJzaW9uIiwib3N2ZXJzaW9uIiwib3NNYWpvclZlcnNpb24iLCJib3dzZXIiLCJnZXRWZXJzaW9uUHJlY2lzaW9uIiwiY29tcGFyZVZlcnNpb25zIiwidmVyc2lvbnMiLCJwcmVjaXNpb24iLCJjaHVua3MiLCJjaHVuayIsInJldmVyc2UiLCJpc1Vuc3VwcG9ydGVkQnJvd3NlciIsIm1pblZlcnNpb25zIiwic3RyaWN0TW9kZSIsIl9ib3dzZXIiLCJicm93c2VyIiwiYnJvd3Nlckxpc3QiLCJicm93c2VySXRlbSIsImNoZWNrIiwiX2RldGVjdCIsImJyb3dzZXJJbmZvIiwiX2Jvd3NlcjIiLCJwcmVmaXhCeUJyb3dzZXIiLCJqc1ByZWZpeCIsImJyb3dzZXJCeUNhbkl1c2VBbGlhcyIsImdldEJyb3dzZXJOYW1lIiwic2VhbW9uZXkiLCJmaXJmb3giLCJfY3JlYXRlQ2xhc3MiLCJmYWxsYmFjayIsIlByZWZpeGVyIiwiZGVmYXVsdFVzZXJBZ2VudCIsIl91c2VyQWdlbnQiLCJfa2VlcFVucHJlZml4ZWQiLCJfYnJvd3NlckluZm8iLCJfZ2V0QnJvd3NlckluZm9ybWF0aW9uMiIsIl91c2VGYWxsYmFjayIsInByZWZpeGVkS2V5ZnJhbWVzIiwiX2dldFByZWZpeGVkS2V5ZnJhbWVzMiIsInByZWZpeERhdGEiLCJfcmVxdWlyZXNQcmVmaXgiLCJfaGFzUHJvcHNSZXF1aXJpbmdQcmVmaXgiLCJfbWV0YURhdGEiLCJfcHJlZml4U3R5bGUiLCJfaXNPYmplY3QyIiwiY29tYmluZWRWYWx1ZSIsIl9wcmVmaXhWYWx1ZTIiLCJfYWRkTmV3VmFsdWVzT25seTIiLCJfcHJvY2Vzc2VkVmFsdWUiLCJwcmVmaXhQcm9wZXJ0aWVzIiwicmVxdWlyZWRQcmVmaXhlcyIsIl9jYXBpdGFsaXplU3RyaW5nIiwicHJlZml4QWxsIiwiX3ByZWZpeFByb3BlcnR5MiIsImlzQ2xpZW50IiwiaGFzV2FybmVkQWJvdXRVc2VyQWdlbnQiLCJfY3JlYXRlUHJlZml4ZXIyIiwiX2F1dG9wcmVmaXhlclN0YXRpYzIiLCJpc0ZsZXgiLCJzdHlsZVByZWZpeGVkIiwicHJlZml4ZXIiLCJfY3JlYXRlUHJlZml4ZXI0IiwiX2F1dG9wcmVmaXhlckR5bmFtaWMyIiwiYXBwQmFyIiwiZHJhd2VyT3ZlcmxheSIsImRyYXdlciIsImRpYWxvZ092ZXJsYXkiLCJkaWFsb2ciLCJzbmFja2JhciIsImRlc2t0b3BHdXR0ZXIiLCJkZXNrdG9wR3V0dGVyTW9yZSIsImRlc2t0b3BHdXR0ZXJNaW5pIiwiZGVza3RvcEtleWxpbmVJbmNyZW1lbnQiLCJkZXNrdG9wRHJvcERvd25NZW51SXRlbUhlaWdodCIsImRlc2t0b3BEcm9wRG93bk1lbnVGb250U2l6ZSIsImRlc2t0b3BEcmF3ZXJNZW51SXRlbUhlaWdodCIsImRlc2t0b3BTdWJoZWFkZXJIZWlnaHQiLCJkZXNrdG9wVG9vbGJhckhlaWdodCIsIl9zcGFjaW5nIiwiX3NwYWNpbmcyIiwicHJpbWFyeTFDb2xvciIsInByaW1hcnkyQ29sb3IiLCJwcmltYXJ5M0NvbG9yIiwiYWNjZW50MUNvbG9yIiwiYWNjZW50MkNvbG9yIiwiYWNjZW50M0NvbG9yIiwiYWx0ZXJuYXRlVGV4dENvbG9yIiwiY2FudmFzQ29sb3IiLCJib3JkZXJDb2xvciIsInBpY2tlckhlYWRlckNvbG9yIiwiY2xvY2tDaXJjbGVDb2xvciIsInNoYWRvd0NvbG9yIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiSEFTSF9VTkRFRklORUQiLCJIT1RfQ09VTlQiLCJIT1RfU1BBTiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJhcmdzVGFnIiwiYXN5bmNUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibnVsbFRhZyIsIm9iamVjdFRhZyIsInByb3h5VGFnIiwidW5kZWZpbmVkVGFnIiwicmVJc0hvc3RDdG9yIiwicmVJc1VpbnQiLCJ0eXBlZEFycmF5VGFncyIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwiYmluZGluZyIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJzYWZlR2V0IiwiYXJyYXlQcm90byIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiY29yZUpzRGF0YSIsImZ1bmNUb1N0cmluZyIsIm1hc2tTcmNLZXkiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJyZUlzTmF0aXZlIiwiQnVmZmVyIiwiVWludDhBcnJheSIsImFsbG9jVW5zYWZlIiwiZ2V0UHJvdG90eXBlIiwib2JqZWN0Q3JlYXRlIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsImdldE5hdGl2ZSIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVOb3ciLCJNYXAiLCJuYXRpdmVDcmVhdGUiLCJiYXNlQ3JlYXRlIiwiSGFzaCIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU3RhY2siLCJfX2RhdGFfXyIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImJhc2VUaW1lcyIsImlzSW5kZXgiLCJhc3NpZ25NZXJnZVZhbHVlIiwiZXEiLCJiYXNlQXNzaWduVmFsdWUiLCJhc3NpZ25WYWx1ZSIsIm9ialZhbHVlIiwiYXNzb2NJbmRleE9mIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiZnJvbVJpZ2h0IiwiYmFzZUZvciIsImtleXNGdW5jIiwiaXRlcmFibGUiLCJiYXNlR2V0VGFnIiwiaXNPd24iLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsImJhc2VJc0FyZ3VtZW50cyIsImJhc2VJc05hdGl2ZSIsImlzRnVuY3Rpb24iLCJ0b1NvdXJjZSIsImJhc2VLZXlzSW4iLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiaXNQcm90b3R5cGUiLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsImN1c3RvbWl6ZXIiLCJzdGFjayIsInNyY1ZhbHVlIiwibWVyZ2VGdW5jIiwic3RhY2tlZCIsIm5ld1ZhbHVlIiwiaXNDb21tb24iLCJpc1R5cGVkIiwiaXNBcnJheUxpa2UiLCJjb3B5QXJyYXkiLCJidWZmZXIiLCJpc0RlZXAiLCJjb3B5IiwiY2xvbmVCdWZmZXIiLCJ0eXBlZEFycmF5IiwiYXJyYXlCdWZmZXIiLCJieXRlTGVuZ3RoIiwiYnl0ZU9mZnNldCIsIkN0b3IiLCJpc1BsYWluT2JqZWN0IiwiaXNOZXciLCJjb3B5T2JqZWN0Iiwia2V5c0luIiwidG9QbGFpbk9iamVjdCIsImluaXRDbG9uZU9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJiYXNlUmVzdCIsInNldFRvU3RyaW5nIiwib3RoZXJBcmdzIiwib3ZlclJlc3QiLCJpZGVudGl0eSIsImdldFZhbHVlIiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwic2hvcnRPdXQiLCJpc0xlbmd0aCIsImJhc2VVbmFyeSIsImFzc2lnbmVyIiwibWVyZ2UiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsInNhZmUiLCJpdGVyIiwiQVJHIiwidHJ5R2V0IiwiY2xhc3NvZiIsImdldEl0ZXJhdG9yTWV0aG9kIiwiJGRlZmluZVByb3BlcnR5IiwiQXJyYXlQcm90byIsInJldCIsImlzQXJyYXlJdGVyIiwidG9MZW5ndGgiLCJjcmVhdGVQcm9wZXJ0eSIsImdldEl0ZXJGbiIsImFycmF5TGlrZSIsInN0ZXAiLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJtb3JlIiwiX211aVRoZW1lIiwiX3pJbmRleDIiLCJfbGlnaHRCYXNlVGhlbWUyIiwidGl0bGVGb250V2VpZ2h0IiwiX3R5cG9ncmFwaHkyIiwiYXZhdGFyIiwiYmFkZ2UiLCJib3R0b21OYXZpZ2F0aW9uIiwidW5zZWxlY3RlZENvbG9yIiwic2VsZWN0ZWRDb2xvciIsInVuc2VsZWN0ZWRGb250U2l6ZSIsInNlbGVjdGVkRm9udFNpemUiLCJpY29uQnV0dG9uU2l6ZSIsImNhcmQiLCJ0aXRsZUNvbG9yIiwic3VidGl0bGVDb2xvciIsImNhcmRNZWRpYSIsIm92ZXJsYXlDb250ZW50QmFja2dyb3VuZCIsImNhcmRUZXh0IiwiY2hlY2tib3giLCJib3hDb2xvciIsImNoZWNrZWRDb2xvciIsInJlcXVpcmVkQ29sb3IiLCJsYWJlbERpc2FibGVkQ29sb3IiLCJjaGlwIiwiZGVsZXRlSWNvbkNvbG9yIiwic2hhZG93IiwiZGF0ZVBpY2tlciIsImNhbGVuZGFyVGV4dENvbG9yIiwic2VsZWN0Q29sb3IiLCJzZWxlY3RUZXh0Q29sb3IiLCJjYWxlbmRhclllYXJCYWNrZ3JvdW5kQ29sb3IiLCJoZWFkZXJDb2xvciIsInRpdGxlRm9udFNpemUiLCJib2R5Rm9udFNpemUiLCJib2R5Q29sb3IiLCJkcm9wRG93bk1lbnUiLCJhY2NlbnRDb2xvciIsImZsYXRCdXR0b24iLCJidXR0b25GaWx0ZXJDb2xvciIsImZsb2F0aW5nQWN0aW9uQnV0dG9uIiwiYnV0dG9uU2l6ZSIsIm1pbmlTaXplIiwiaWNvbkNvbG9yIiwic2Vjb25kYXJ5SWNvbkNvbG9yIiwiZ3JpZFRpbGUiLCJpbmtCYXIiLCJjb250YWluZXJCYWNrZ3JvdW5kQ29sb3IiLCJkYXRhSGVpZ2h0IiwibWVudVN1YmhlYWRlciIsInJhZGlvQnV0dG9uIiwicmVmcmVzaEluZGljYXRvciIsInN0cm9rZUNvbG9yIiwibG9hZGluZ1N0cm9rZUNvbG9yIiwic2xpZGVyIiwidHJhY2tTaXplIiwidHJhY2tDb2xvciIsInRyYWNrQ29sb3JTZWxlY3RlZCIsImhhbmRsZVNpemUiLCJoYW5kbGVTaXplRGlzYWJsZWQiLCJoYW5kbGVTaXplQWN0aXZlIiwiaGFuZGxlQ29sb3JaZXJvIiwiaGFuZGxlRmlsbENvbG9yIiwic2VsZWN0aW9uQ29sb3IiLCJyaXBwbGVDb2xvciIsImFjdGlvbkNvbG9yIiwic3RlcHBlciIsImhvdmVyQmFja2dyb3VuZENvbG9yIiwiaG92ZXJlZEljb25Db2xvciIsImluYWN0aXZlSWNvbkNvbG9yIiwiY29ubmVjdG9yTGluZUNvbG9yIiwidGFibGUiLCJ0YWJsZUZvb3RlciIsInRhYmxlSGVhZGVyIiwidGFibGVIZWFkZXJDb2x1bW4iLCJ0YWJsZVJvdyIsInN0cmlwZUNvbG9yIiwidGFibGVSb3dDb2x1bW4iLCJ0YWJzIiwidGV4dEZpZWxkIiwiaGludENvbG9yIiwiZmxvYXRpbmdMYWJlbENvbG9yIiwiZXJyb3JDb2xvciIsImZvY3VzQ29sb3IiLCJ0aW1lUGlja2VyIiwiY2xvY2tDb2xvciIsInRvZ2dsZSIsInRodW1iT25Db2xvciIsInRodW1iT2ZmQ29sb3IiLCJ0aHVtYkRpc2FibGVkQ29sb3IiLCJ0aHVtYlJlcXVpcmVkQ29sb3IiLCJ0cmFja09uQ29sb3IiLCJ0cmFja09mZkNvbG9yIiwidHJhY2tEaXNhYmxlZENvbG9yIiwidHJhY2tSZXF1aXJlZENvbG9yIiwidG9vbGJhciIsInNlcGFyYXRvckNvbG9yIiwibWVudUhvdmVyQ29sb3IiLCJyYXdUaGVtZSIsInRyYW5zZm9ybWVycyIsIl9hdXRvcHJlZml4ZXIyIiwiX3J0bDIiLCJfY2FsbE9uY2UyIiwiX2NvbXBvc2UyIiwiJE9iamVjdCIsIkQiLCJidWdneSIsImdPUE4iLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiREVTQ1JJUFRPUlMiLCIkZmFpbHMiLCJ3a3MiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUEQiLCIkRFAiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJVU0VfTkFUSVZFIiwiUU9iamVjdCIsInNldHRlciIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJzeW0iLCJfayIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRzZXQiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkFyZ3VtZW50cyIsIlRPX1NUUklOR19UQUciLCJET01JdGVyYWJsZXMiLCJDb2xsZWN0aW9uIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsIlRPX1NUUklORyIsInBvcyIsImRlc2MiLCIkZ2V0UHJvdG90eXBlT2YiLCJpbnZhcmlhbnQiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJzeW1ib2wiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJkZWZhdWx0VmlldyIsIm93bmVyRG9jdW1lbnQiLCJOb2RlIiwibm9kZU5hbWUiLCJpc05vZGUiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJkb2MiLCJhY3RpdmVFbGVtZW50IiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJiYSIsImVhIiwiZmEiLCJoYSIsImphIiwia2EiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImgiLCJ2IiwiaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yIiwiaGFzQ2F1Z2h0RXJyb3IiLCJjbGVhckNhdWdodEVycm9yIiwicmV0aHJvd0NhdWdodEVycm9yIiwib2EiLCJwYSIsInFhIiwicmEiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInNhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJ0YSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ2YSIsImRlcGVuZGVuY2llcyIsIndhIiwieGEiLCJDYSIsImZyZWV6ZSIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwic3RhdGVOb2RlIiwiUGEiLCJRYSIsIlJhIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIlNhIiwiVGEiLCJVYSIsIlZhIiwiWGEiLCJiYiIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiTCIsImNiIiwiZGIiLCJkaXNwYXRjaENvbmZpZyIsImViIiwiX3RhcmdldEluc3QiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwiYWx0ZXJuYXRlIiwia2IiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImxiIiwibWIiLCJNIiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm5iIiwib2IiLCJwYiIsInFiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiTiIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJzYiIsImV2ZW50UG9vbCIsInRiIiwiZGVzdHJ1Y3RvciIsInJiIiwiZ2V0UG9vbGVkIiwiY2FuY2VsQnViYmxlIiwiZXh0ZW5kIiwidWIiLCJ2YiIsIndiIiwieGIiLCJ5YiIsImRvY3VtZW50TW9kZSIsInpiIiwiQWIiLCJCYiIsIktiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIkxiIiwiTWIiLCJOYiIsImRldGFpbCIsIk9iIiwiUmIiLCJQYiIsImNoYXIiLCJRYiIsIlNiIiwiVGIiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50IiwiVWIiLCJWYiIsIldiIiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiZW5xdWV1ZVN0YXRlUmVzdG9yZSIsIm5lZWRzU3RhdGVSZXN0b3JlIiwicmVzdG9yZVN0YXRlSWZOZWVkZWQiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwidGVsIiwidGV4dCIsIndlZWsiLCJnYyIsImhjIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJpYyIsImpjIiwibGMiLCJfdmFsdWVUcmFja2VyIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJrYyIsIm1jIiwibmMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwib2MiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCIkJHR5cGVvZiIsIkJjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJDYyIsIkRjIiwiRWMiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwiViIsIlNjIiwiVGMiLCJVYyIsIkdjIiwiSGMiLCJGYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiVmMiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIldjIiwiWGMiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNoYW5nZSIsImNkIiwiZGQiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsInBkIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsInFkIiwidmlldyIsInJkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsInNkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInRkIiwidWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInNyY0VsZW1lbnQiLCJ0b0VsZW1lbnQiLCJ2ZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwid2QiLCJwYXJlbnRXaW5kb3ciLCJ4ZCIsImVmZmVjdFRhZyIsInlkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsInpkIiwiQWQiLCJzaWJsaW5nIiwiQmQiLCJEZCIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkVkIiwiY2xpcGJvYXJkRGF0YSIsIkZkIiwiR2QiLCJIZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIklkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIkpkIiwibG9jYWxlIiwiS2QiLCJkYXRhVHJhbnNmZXIiLCJMZCIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIk1kIiwiTmQiLCJ3aGVlbERlbHRhWCIsIndoZWVsRGVsdGFZIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiT2QiLCJQZCIsIlFkIiwiaXNJbnRlcmFjdGl2ZSIsIlJkIiwiaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlIiwiU2QiLCJUZCIsIlVkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFR5cGUiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiYWUiLCJiZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImNlIiwiZGUiLCJlZSIsImZlIiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuY2VsIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDbG9zZSIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRm9jdXMiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZCIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wU2Nyb2xsIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wVGV4dElucHV0IiwidG9wVG9nZ2xlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wV2hlZWwiLCJnZSIsInRvcEFib3J0IiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wRHVyYXRpb25DaGFuZ2UiLCJ0b3BFbXB0aWVkIiwidG9wRW5jcnlwdGVkIiwidG9wRW5kZWQiLCJ0b3BFcnJvciIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsImhlIiwiamUiLCJrZSIsImxlIiwibWUiLCJ0ZXh0Q29udGVudCIsIm5lIiwiY29udGVudEVkaXRhYmxlIiwib2UiLCJwZSIsInNlbGVjdCIsInFlIiwic2UiLCJ0ZSIsInVlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJ2ZSIsIm9uU2VsZWN0IiwieGUiLCJwZW5kaW5nUHJvcHMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibW9kZSIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJleHBpcmF0aW9uVGltZSIsInplIiwiQWUiLCJpc1JlYWN0Q29tcG9uZW50IiwiQmUiLCJDZSIsIkRlIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiRWUiLCJGZSIsIkdlIiwiSWUiLCJKZSIsIktlIiwiYmFzZVN0YXRlIiwiZmlyc3QiLCJjYWxsYmFja0xpc3QiLCJoYXNGb3JjZVVwZGF0ZSIsImlzSW5pdGlhbGl6ZWQiLCJjYXB0dXJlZFZhbHVlcyIsIkxlIiwiU2V0IiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJRZSIsInBhcnRpYWxTdGF0ZSIsIlJlIiwiaXNSZXBsYWNlIiwiaXNGb3JjZWQiLCJjYXB0dXJlZFZhbHVlIiwiU2UiLCJVZSIsIlZlIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIldlIiwiWGUiLCJ6IiwicSIsInUiLCJRIiwiSCIsIlllIiwiWmUiLCIkZSIsInBlbmRpbmdDb250ZXh0IiwiWSIsInNob3VsZFNldFRleHRDb250ZW50Iiwic2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSIsInB1c2hIb3N0Q29udGV4dCIsInB1c2hIb3N0Q29udGFpbmVyIiwicHVzaFByb3ZpZGVyIiwiZ2V0TWFza2VkQ29udGV4dCIsImdldFVubWFza2VkQ29udGV4dCIsImhhc0NvbnRleHRDaGFuZ2VkIiwicHVzaENvbnRleHRQcm92aWRlciIsInB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QiLCJpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyIiwiZW50ZXJIeWRyYXRpb25TdGF0ZSIsIldhIiwicmVzZXRIeWRyYXRpb25TdGF0ZSIsIkNiIiwidHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJKYyIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwidXBkYXRlciIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImNhY2hlQ29udGV4dCIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNNb3VudGVkIiwiZW5xdWV1ZVNldFN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiYWRvcHRDbGFzc0luc3RhbmNlIiwiY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbnN0cnVjdENsYXNzSW5zdGFuY2UiLCJtb3VudENsYXNzSW5zdGFuY2UiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJyZXN1bWVNb3VudENsYXNzSW5zdGFuY2UiLCJ1cGRhdGVDbGFzc0luc3RhbmNlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiVGUiLCJLYyIsIkxjIiwiRGIiLCJNYyIsIkViIiwiYmVnaW5Xb3JrIiwiaHlkcmF0ZSIsIl9jb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsImNmIiwic3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZyIsImVmIiwibGYiLCJJIiwiWWEiLCJaIiwiTmMiLCJ5YSIsImNhIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiT2MiLCJaYSIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsImNvbXBvbmVudERpZENhdGNoIiwiaWEiLCJ6YSIsImRhIiwiRmIiLCJ4ZyIsInllIiwiSWMiLCJQYyIsIkdiIiwibWciLCJRYyIsImxnIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsImxhIiwiSiIsIkhiIiwiYWEiLCIkYSIsIkliIiwiQWEiLCJfb25Db21wbGV0ZSIsIndnIiwiQmEiLCJKYiIsImZpbmlzaGVkV29yayIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJ6ZyIsImFiIiwia2ciLCJ3ZSIsImdnIiwiQWciLCJoZyIsImlnIiwiamciLCJ0aW1lUmVtYWluaW5nIiwiQmciLCJjcmVhdGVDdXJzb3IiLCJpc0VtcHR5IiwiY2hlY2tUaGF0U3RhY2tJc0VtcHR5IiwicmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2Iiwia2YiLCJnZXRDaGlsZEhvc3RDb250ZXh0IiwiZ2V0Um9vdEhvc3RDb250ZXh0IiwiZ2V0SG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250YWluZXIiLCJwb3BIb3N0Q29udGV4dCIsImZmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiaXNDb250ZXh0UHJvdmlkZXIiLCJwb3BDb250ZXh0UHJvdmlkZXIiLCJwb3BUb3BMZXZlbENvbnRleHRPYmplY3QiLCJwcm9jZXNzQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCIsImhmIiwicG9wUHJvdmlkZXIiLCJqZiIsImh5ZHJhdGlvbiIsInByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSIsInBvcEh5ZHJhdGlvblN0YXRlIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsImdldE5leHRIeWRyYXRhYmxlU2libGluZyIsImdldEZpcnN0SHlkcmF0YWJsZUNoaWxkIiwiaHlkcmF0ZUluc3RhbmNlIiwiaHlkcmF0ZVRleHRJbnN0YW5jZSIsImdmIiwiY3JlYXRlSW5zdGFuY2UiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsInByZXBhcmVVcGRhdGUiLCJwZXJzaXN0ZW5jZSIsIm11dGF0aW9uIiwiY29tcGxldGVXb3JrIiwiYWYiLCJ0aHJvd0V4Y2VwdGlvbiIsInVud2luZFdvcmsiLCJ1bndpbmRJbnRlcnJ1cHRlZFdvcmsiLCJiZiIsImdldFB1YmxpY0luc3RhbmNlIiwiY29tbWl0TW91bnQiLCJjb21taXRVcGRhdGUiLCJyZXNldFRleHRDb250ZW50IiwiY29tbWl0VGV4dFVwZGF0ZSIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tbWl0UmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFBsYWNlbWVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdExpZmVDeWNsZXMiLCJjb21taXRFcnJvckxvZ2dpbmciLCJjb21wb25lbnRTdGFjayIsImNvbW1pdEF0dGFjaFJlZiIsImNvbW1pdERldGFjaFJlZiIsImRmIiwiYWRkIiwic2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrIiwiY2FuY2VsRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiUmMiLCJyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsInJlcXVlc3RXb3JrIiwiZmx1c2hSb290IiwiYmF0Y2hlZFVwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZmx1c2hDb250cm9sbGVkIiwiZGVmZXJyZWRVcGRhdGVzIiwic3luY1VwZGF0ZXMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsImNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJsZWdhY3lDb250ZXh0IiwibWYiLCJjcmVhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lIiwiZ2V0UHVibGljUm9vdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzIiwiQ2QiLCJpbmplY3RJbnRvRGV2VG9vbHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIkhlIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJuZiIsIm9mIiwicGYiLCJyZiIsInBlcmZvcm1hbmNlIiwic2YiLCJ0ZiIsInVmIiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJkaWRUaW1lb3V0IiwiRGYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJFZiIsInBvc3RNZXNzYWdlIiwiSW5maW5pdHkiLCJHZiIsIkZmIiwiSGYiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsIklmIiwid2FzTXVsdGlwbGUiLCJKZiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJodG1sIiwibWF0aG1sIiwic3ZnIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJuYW1lc3BhY2VVUkkiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiU2YiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJUZiIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJmbGV4UG9zaXRpdmUiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93U3BhbiIsImdyaWRDb2x1bW5TcGFuIiwibGluZUNsYW1wIiwib3JwaGFucyIsIndpZG93cyIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJVZiIsIlZmIiwic2V0UHJvcGVydHkiLCJXZiIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJjcmVhdGVFbGVtZW50TlMiLCJiZyIsImNnIiwiX19odG1sIiwib25jbGljayIsImRnIiwiZWciLCJmZyIsIm5nIiwib2ciLCJzZXRJbml0aWFsUHJvcGVydGllcyIsImRpZmZQcm9wZXJ0aWVzIiwidXBkYXRlUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRUZXh0Iiwid2FybkZvclVubWF0Y2hlZFRleHQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwicGciLCJxZyIsInJnIiwiWCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsInNnIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsInRnIiwiX2ludGVybmFsUm9vdCIsInVnIiwidmciLCJhdXRvRm9jdXMiLCJ0aGVuIiwiY29tbWl0IiwidW5tb3VudCIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNyZWF0ZUJhdGNoIiwidGFnTmFtZSIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiaGlkZGVuIiwiZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UiLCJDZyIsIkVnIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsIkRnIiwiRmciLCJxZiIsIkdnIiwiY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiSGciLCJJZyIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI6IiwiUHVyZUNvbXBvbmVudCIsImNyZWF0ZUNvbnRleHQiLCJfZGVmYXVsdFZhbHVlIiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImZvcndhcmRSZWYiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJ1bnN0YWJsZV9Bc3luY01vZGUiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVB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Q0p0UyxJQUFBeVIsRUFBQTdSLEVBQUEsS0FFQSxpQkFBQTZSLFFBQUExUixFQUFBQyxFQUFBeVIsRUFBQSxNQU9BLElBQUFqRixHQUFlaW5CLEtBQUEsRUFFZnZrQixlQVBBQSxFQVFBdkIsZ0JBQUE5SixHQUVBakUsRUFBQSxHQUFBQSxDQUFBNlIsRUFBQWpGLEdBRUFpRixFQUFBaWlCLFNBQUEzekIsRUFBQUQsUUFBQTJSLEVBQUFpaUIsMEJDakJBM3pCLEVBQUFELFFBQUFGLEVBQUEsR0FBQUEsRUFBQSxJQUtBbU4sTUFBQWhOLEVBQUFDLEVBQUEsc0VBQTJGLHNCQ0ozRixJQUFBeVIsRUFBQTdSLEVBQUEsS0FFQSxpQkFBQTZSLFFBQUExUixFQUFBQyxFQUFBeVIsRUFBQSxNQU9BLElBQUFqRixHQUFlaW5CLEtBQUEsRUFFZnZrQixlQVBBQSxFQVFBdkIsZ0JBQUE5SixHQUVBakUsRUFBQSxHQUFBQSxDQUFBNlIsRUFBQWpGLEdBRUFpRixFQUFBaWlCLFNBQUEzekIsRUFBQUQsUUFBQTJSLEVBQUFpaUIiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMTcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIFN5bWJvbC5mb3IgJiZcbiAgICBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykpIHx8XG4gICAgMHhlYWM3O1xuXG4gIHZhciBpc1ZhbGlkRWxlbWVudCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgb2JqZWN0ICE9PSBudWxsICYmXG4gICAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKGlzVmFsaWRFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIik7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9zZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX3NldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldFByb3RvdHlwZU9mKTtcblxudmFyIF9jcmVhdGUgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlXCIpO1xuXG52YXIgX2NyZWF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGUpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzdXBlckNsYXNzKSkpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQgPyAoMCwgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0KShzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xuICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlO1xuICAgIHRhcmdldFtpXSA9IG9ialtpXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9hc3NpZ25cIik7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9hc3NpZ24yLmRlZmF1bHQgfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuNScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG5cbiAgZWFzZU91dEZ1bmN0aW9uOiAnY3ViaWMtYmV6aWVyKDAuMjMsIDEsIDAuMzIsIDEpJyxcbiAgZWFzZUluT3V0RnVuY3Rpb246ICdjdWJpYy1iZXppZXIoMC40NDUsIDAuMDUsIDAuNTUsIDAuOTUpJyxcblxuICBlYXNlT3V0OiBmdW5jdGlvbiBlYXNlT3V0KGR1cmF0aW9uLCBwcm9wZXJ0eSwgZGVsYXksIGVhc2VGdW5jdGlvbikge1xuICAgIGVhc2VGdW5jdGlvbiA9IGVhc2VGdW5jdGlvbiB8fCB0aGlzLmVhc2VPdXRGdW5jdGlvbjtcblxuICAgIGlmIChwcm9wZXJ0eSAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvcGVydHkpID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICB2YXIgdHJhbnNpdGlvbnMgPSAnJztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcGVydHkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRyYW5zaXRpb25zKSB0cmFuc2l0aW9ucyArPSAnLCc7XG4gICAgICAgIHRyYW5zaXRpb25zICs9IHRoaXMuY3JlYXRlKGR1cmF0aW9uLCBwcm9wZXJ0eVtpXSwgZGVsYXksIGVhc2VGdW5jdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cmFuc2l0aW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKGR1cmF0aW9uLCBwcm9wZXJ0eSwgZGVsYXksIGVhc2VGdW5jdGlvbik7XG4gICAgfVxuICB9LFxuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShkdXJhdGlvbiwgcHJvcGVydHksIGRlbGF5LCBlYXNlRnVuY3Rpb24pIHtcbiAgICBkdXJhdGlvbiA9IGR1cmF0aW9uIHx8ICc0NTBtcyc7XG4gICAgcHJvcGVydHkgPSBwcm9wZXJ0eSB8fCAnYWxsJztcbiAgICBkZWxheSA9IGRlbGF5IHx8ICcwbXMnO1xuICAgIGVhc2VGdW5jdGlvbiA9IGVhc2VGdW5jdGlvbiB8fCAnbGluZWFyJztcblxuICAgIHJldHVybiBwcm9wZXJ0eSArICcgJyArIGR1cmF0aW9uICsgJyAnICsgZWFzZUZ1bmN0aW9uICsgJyAnICsgZGVsYXk7XG4gIH1cbn07IiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGFkZExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbnZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxudmFyIGhhc0Jhc2VuYW1lID0gZXhwb3J0cy5oYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGV4cG9ydHMuc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxudmFyIHN0cmlwVHJhaWxpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbnZhciBwYXJzZVBhdGggPSBleHBvcnRzLnBhcnNlUGF0aCA9IGZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxudmFyIGNyZWF0ZVBhdGggPSBleHBvcnRzLmNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgaG9yaXpvbnRhbCA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydsZWZ0JywgJ21pZGRsZScsICdyaWdodCddKTtcbnZhciB2ZXJ0aWNhbCA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWyd0b3AnLCAnY2VudGVyJywgJ2JvdHRvbSddKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuXG4gIGNvcm5lcnM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydib3R0b20tbGVmdCcsICdib3R0b20tcmlnaHQnLCAndG9wLWxlZnQnLCAndG9wLXJpZ2h0J10pLFxuXG4gIGhvcml6b250YWw6IGhvcml6b250YWwsXG5cbiAgdmVydGljYWw6IHZlcnRpY2FsLFxuXG4gIG9yaWdpbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gICAgaG9yaXpvbnRhbDogaG9yaXpvbnRhbCxcbiAgICB2ZXJ0aWNhbDogdmVydGljYWxcbiAgfSksXG5cbiAgY29ybmVyc0FuZENlbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbJ2JvdHRvbS1jZW50ZXInLCAnYm90dG9tLWxlZnQnLCAnYm90dG9tLXJpZ2h0JywgJ3RvcC1jZW50ZXInLCAndG9wLWxlZnQnLCAndG9wLXJpZ2h0J10pLFxuXG4gIHN0cmluZ09yTnVtYmVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgekRlcHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFswLCAxLCAyLCAzLCA0LCA1XSlcblxufTsiLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnZmJqcy9saWIvc2hhbGxvd0VxdWFsJyk7XG5cbnZhciBfc2hhbGxvd0VxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoYWxsb3dFcXVhbCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9zaGFsbG93RXF1YWwyLmRlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRQcmVmaXhlZFZhbHVlO1xuZnVuY3Rpb24gZ2V0UHJlZml4ZWRWYWx1ZShwcmVmaXhlZFZhbHVlLCB2YWx1ZSwga2VlcFVucHJlZml4ZWQpIHtcbiAgaWYgKGtlZXBVbnByZWZpeGVkKSB7XG4gICAgcmV0dXJuIFtwcmVmaXhlZFZhbHVlLCB2YWx1ZV07XG4gIH1cbiAgcmV0dXJuIHByZWZpeGVkVmFsdWU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX1N2Z0ljb24gPSByZXF1aXJlKCcuL1N2Z0ljb24nKTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfU3ZnSWNvbjIuZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2hvdWxkVXBkYXRlID0gcmVxdWlyZSgnLi9zaG91bGRVcGRhdGUnKTtcblxudmFyIF9zaG91bGRVcGRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hvdWxkVXBkYXRlKTtcblxudmFyIF9zaGFsbG93RXF1YWwgPSByZXF1aXJlKCcuL3NoYWxsb3dFcXVhbCcpO1xuXG52YXIgX3NoYWxsb3dFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93RXF1YWwpO1xuXG52YXIgX3NldERpc3BsYXlOYW1lID0gcmVxdWlyZSgnLi9zZXREaXNwbGF5TmFtZScpO1xuXG52YXIgX3NldERpc3BsYXlOYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldERpc3BsYXlOYW1lKTtcblxudmFyIF93cmFwRGlzcGxheU5hbWUgPSByZXF1aXJlKCcuL3dyYXBEaXNwbGF5TmFtZScpO1xuXG52YXIgX3dyYXBEaXNwbGF5TmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93cmFwRGlzcGxheU5hbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHVyZSA9IGZ1bmN0aW9uIHB1cmUoQmFzZUNvbXBvbmVudCkge1xuICB2YXIgaG9jID0gKDAsIF9zaG91bGRVcGRhdGUyLmRlZmF1bHQpKGZ1bmN0aW9uIChwcm9wcywgbmV4dFByb3BzKSB7XG4gICAgcmV0dXJuICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkocHJvcHMsIG5leHRQcm9wcyk7XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuICgwLCBfc2V0RGlzcGxheU5hbWUyLmRlZmF1bHQpKCgwLCBfd3JhcERpc3BsYXlOYW1lMi5kZWZhdWx0KShCYXNlQ29tcG9uZW50LCAncHVyZScpKShob2MoQmFzZUNvbXBvbmVudCkpO1xuICB9XG5cbiAgcmV0dXJuIGhvYyhCYXNlQ29tcG9uZW50KTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHB1cmU7IiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNvbnZlcnRDb2xvclRvU3RyaW5nID0gY29udmVydENvbG9yVG9TdHJpbmc7XG5leHBvcnRzLmNvbnZlcnRIZXhUb1JHQiA9IGNvbnZlcnRIZXhUb1JHQjtcbmV4cG9ydHMuZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcjtcbmV4cG9ydHMuZ2V0Q29udHJhc3RSYXRpbyA9IGdldENvbnRyYXN0UmF0aW87XG5leHBvcnRzLmdldEx1bWluYW5jZSA9IGdldEx1bWluYW5jZTtcbmV4cG9ydHMuZW1waGFzaXplID0gZW1waGFzaXplO1xuZXhwb3J0cy5mYWRlID0gZmFkZTtcbmV4cG9ydHMuZGFya2VuID0gZGFya2VuO1xuZXhwb3J0cy5saWdodGVuID0gbGlnaHRlbjtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlLCBtaW4sIG1heCkge1xuICBpZiAodmFsdWUgPCBtaW4pIHtcbiAgICByZXR1cm4gbWluO1xuICB9XG4gIGlmICh2YWx1ZSA+IG1heCkge1xuICAgIHJldHVybiBtYXg7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mLCAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRDb2xvclRvU3RyaW5nKGNvbG9yKSB7XG4gIHZhciB0eXBlID0gY29sb3IudHlwZSxcbiAgICAgIHZhbHVlcyA9IGNvbG9yLnZhbHVlcztcblxuXG4gIGlmICh0eXBlLmluZGV4T2YoJ3JnYicpID4gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgIHZhbHVlc1tpXSA9IHBhcnNlSW50KHZhbHVlc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbG9yU3RyaW5nID0gdm9pZCAwO1xuXG4gIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpID4gLTEpIHtcbiAgICBjb2xvclN0cmluZyA9IGNvbG9yLnR5cGUgKyAnKCcgKyB2YWx1ZXNbMF0gKyAnLCAnICsgdmFsdWVzWzFdICsgJyUsICcgKyB2YWx1ZXNbMl0gKyAnJSc7XG4gIH0gZWxzZSB7XG4gICAgY29sb3JTdHJpbmcgPSBjb2xvci50eXBlICsgJygnICsgdmFsdWVzWzBdICsgJywgJyArIHZhbHVlc1sxXSArICcsICcgKyB2YWx1ZXNbMl07XG4gIH1cblxuICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gNCkge1xuICAgIGNvbG9yU3RyaW5nICs9ICcsICcgKyBjb2xvci52YWx1ZXNbM10gKyAnKSc7XG4gIH0gZWxzZSB7XG4gICAgY29sb3JTdHJpbmcgKz0gJyknO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9yU3RyaW5nO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgaGV4IGZvcm1hdCB0byBDU1MgcmdiIGZvcm1hdC5cbiAqXG4gKiAgQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gY29udmVydEhleFRvUkdCKGNvbG9yKSB7XG4gIGlmIChjb2xvci5sZW5ndGggPT09IDQpIHtcbiAgICB2YXIgZXh0ZW5kZWRDb2xvciA9ICcjJztcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGNvbG9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICBleHRlbmRlZENvbG9yICs9IGNvbG9yLmNoYXJBdChpKSArIGNvbG9yLmNoYXJBdChpKTtcbiAgICB9XG4gICAgY29sb3IgPSBleHRlbmRlZENvbG9yO1xuICB9XG5cbiAgdmFyIHZhbHVlcyA9IHtcbiAgICByOiBwYXJzZUludChjb2xvci5zdWJzdHIoMSwgMiksIDE2KSxcbiAgICBnOiBwYXJzZUludChjb2xvci5zdWJzdHIoMywgMiksIDE2KSxcbiAgICBiOiBwYXJzZUludChjb2xvci5zdWJzdHIoNSwgMiksIDE2KVxuICB9O1xuXG4gIHJldHVybiAncmdiKCcgKyB2YWx1ZXMuciArICcsICcgKyB2YWx1ZXMuZyArICcsICcgKyB2YWx1ZXMuYiArICcpJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvci5cbiAqXG4gKiBOb3RlOiBEb2VzIG5vdCBzdXBwb3J0IHJnYiAlIHZhbHVlcyBhbmQgY29sb3IgbmFtZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge3t0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119fSBBIE1VSSBjb2xvciBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGNvbnZlcnRIZXhUb1JHQihjb2xvcikpO1xuICB9XG5cbiAgdmFyIG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKG1hcmtlciAhPT0gLTEsICdNYXRlcmlhbC1VSTogVGhlICcgKyBjb2xvciArICcgY29sb3Igd2FzIG5vdCBwYXJzZWQgY29ycmVjdGx5LFxcbiAgYmVjYXVzZSBpdCBoYXMgYW4gdW5zdXBwb3J0ZWQgZm9ybWF0IChjb2xvciBuYW1lIG9yIFJHQiAlKS4gVGhpcyBtYXkgY2F1c2UgaXNzdWVzIGluIGNvbXBvbmVudCByZW5kZXJpbmcuJykgOiB2b2lkIDA7XG5cbiAgdmFyIHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKS5zcGxpdCgnLCcpO1xuICB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgdmFsdWVzOiB2YWx1ZXMgfTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cDovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyNjb250cmFzdC1yYXRpb2RlZlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEgd2l0aCAyIGRpZ2l0IHByZWNpc2lvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIHZhciBsdW1BID0gZ2V0THVtaW5hbmNlKGZvcmVncm91bmQpO1xuICB2YXIgbHVtQiA9IGdldEx1bWluYW5jZShiYWNrZ3JvdW5kKTtcbiAgdmFyIGNvbnRyYXN0UmF0aW8gPSAoTWF0aC5tYXgobHVtQSwgbHVtQikgKyAwLjA1KSAvIChNYXRoLm1pbihsdW1BLCBsdW1CKSArIDAuMDUpO1xuXG4gIHJldHVybiBOdW1iZXIoY29udHJhc3RSYXRpby50b0ZpeGVkKDIpKTsgLy8gVHJ1bmNhdGUgYXQgdHdvIGRpZ2l0c1xufVxuXG4vKipcbiAqIFRoZSByZWxhdGl2ZSBicmlnaHRuZXNzIG9mIGFueSBwb2ludCBpbiBhIGNvbG9yIHNwYWNlLFxuICogbm9ybWFsaXplZCB0byAwIGZvciBkYXJrZXN0IGJsYWNrIGFuZCAxIGZvciBsaWdodGVzdCB3aGl0ZS5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvV0FJL0dML3dpa2kvUmVsYXRpdmVfbHVtaW5hbmNlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgdGhlIGNvbG9yIGluIHRoZSByYW5nZSAwIC0gMVxuICovXG5mdW5jdGlvbiBnZXRMdW1pbmFuY2UoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgPiAtMSkge1xuICAgIHZhciByZ2IgPSBjb2xvci52YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHZhbCAvPSAyNTU7IC8vIG5vcm1hbGl6ZWRcbiAgICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogTWF0aC5wb3coKHZhbCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgIH0pO1xuICAgIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7IC8vIFRydW5jYXRlIGF0IDMgZGlnaXRzXG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSA+IC0xKSB7XG4gICAgcmV0dXJuIGNvbG9yLnZhbHVlc1syXSAvIDEwMDtcbiAgfVxufVxuXG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3VyLCBkZXBlbmRpbmcgb24gaXRzIGx1bWluYW5jZS5cbiAqIExpZ2h0IGNvbG9ycyBhcmUgZGFya2VuZWQsIGRhcmsgY29sb3JzIGFyZSBsaWdodGVuZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50PTAuMTUgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZnVuY3Rpb24gZW1waGFzaXplKGNvbG9yKSB7XG4gIHZhciBjb2VmZmljaWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMC4xNTtcblxuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufVxuXG4vKipcbiAqIFNldCB0aGUgYWJzb2x1dGUgdHJhbnNwYXJlbmN5IG9mIGEgY29sb3IuXG4gKiBBbnkgZXhpc3RpbmcgYWxwaGEgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB2YWx1ZSB0byBzZXQgdGhlIGFscGhhIGNoYW5uZWwgdG8gaW4gdGhlIHJhbmdlIDAgLTFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmZ1bmN0aW9uIGZhZGUoY29sb3IsIHZhbHVlKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wKHZhbHVlLCAwLCAxKTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcblxuICByZXR1cm4gY29udmVydENvbG9yVG9TdHJpbmcoY29sb3IpO1xufVxuXG4vKipcbiAqIERhcmtlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCwgMCwgMSk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgPiAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSA+IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBjb252ZXJ0Q29sb3JUb1N0cmluZyhjb2xvcik7XG59XG5cbi8qKlxuICogTGlnaHRlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQsIDAsIDEpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpID4gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKz0gKDEwMCAtIGNvbG9yLnZhbHVlc1syXSkgKiBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpID4gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgyNTUgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRDb2xvclRvU3RyaW5nKGNvbG9yKTtcbn0iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX0ljb25CdXR0b24gPSByZXF1aXJlKCcuL0ljb25CdXR0b24nKTtcblxudmFyIF9JY29uQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ljb25CdXR0b24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfSWNvbkJ1dHRvbjIuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgc2V0OiBmdW5jdGlvbiBzZXQoc3R5bGUsIGtleSwgdmFsdWUpIHtcbiAgICBzdHlsZVtrZXldID0gdmFsdWU7XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfZXZlbnRzID0gcmVxdWlyZSgnLi4vdXRpbHMvZXZlbnRzJyk7XG5cbnZhciBfZXZlbnRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V2ZW50cyk7XG5cbnZhciBfa2V5Y29kZSA9IHJlcXVpcmUoJ2tleWNvZGUnKTtcblxudmFyIF9rZXljb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleWNvZGUpO1xuXG52YXIgX0ZvY3VzUmlwcGxlID0gcmVxdWlyZSgnLi9Gb2N1c1JpcHBsZScpO1xuXG52YXIgX0ZvY3VzUmlwcGxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ZvY3VzUmlwcGxlKTtcblxudmFyIF9Ub3VjaFJpcHBsZSA9IHJlcXVpcmUoJy4vVG91Y2hSaXBwbGUnKTtcblxudmFyIF9Ub3VjaFJpcHBsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ub3VjaFJpcHBsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzdHlsZUluamVjdGVkID0gZmFsc2U7XG52YXIgbGlzdGVuaW5nID0gZmFsc2U7XG52YXIgdGFiUHJlc3NlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBpbmplY3RTdHlsZSgpIHtcbiAgaWYgKCFzdHlsZUluamVjdGVkKSB7XG4gICAgLy8gUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIGJvcmRlciBpbiBGaXJlZm94IDQrLlxuICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGUuaW5uZXJIVE1MID0gJ1xcbiAgICAgIGJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcXG4gICAgICBpbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XFxuICAgICAgICBib3JkZXI6IDA7XFxuICAgICAgICBwYWRkaW5nOiAwO1xcbiAgICAgIH1cXG4gICAgJztcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIHN0eWxlSW5qZWN0ZWQgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxpc3RlbkZvclRhYlByZXNzZXMoKSB7XG4gIGlmICghbGlzdGVuaW5nKSB7XG4gICAgX2V2ZW50czIuZGVmYXVsdC5vbih3aW5kb3csICdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB0YWJQcmVzc2VkID0gKDAsIF9rZXljb2RlMi5kZWZhdWx0KShldmVudCkgPT09ICd0YWInO1xuICAgIH0pO1xuICAgIGxpc3RlbmluZyA9IHRydWU7XG4gIH1cbn1cblxudmFyIEVuaGFuY2VkQnV0dG9uID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoRW5oYW5jZWRCdXR0b24sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEVuaGFuY2VkQnV0dG9uKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEVuaGFuY2VkQnV0dG9uKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IEVuaGFuY2VkQnV0dG9uLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShFbmhhbmNlZEJ1dHRvbikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IGZhbHNlXG4gICAgfSwgX3RoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiAhX3RoaXMucHJvcHMuZGlzYWJsZUtleWJvYXJkRm9jdXMpIHtcbiAgICAgICAgaWYgKCgwLCBfa2V5Y29kZTIuZGVmYXVsdCkoZXZlbnQpID09PSAnZW50ZXInICYmIF90aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICAgICAgX3RoaXMuaGFuZGxlQ2xpY2soZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgX2tleWNvZGUyLmRlZmF1bHQpKGV2ZW50KSA9PT0gJ2VzYycgJiYgX3RoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgICAgICBfdGhpcy5yZW1vdmVLZXlib2FyZEZvY3VzKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3RoaXMucHJvcHMub25LZXlEb3duKGV2ZW50KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVLZXlVcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCAmJiAhX3RoaXMucHJvcHMuZGlzYWJsZUtleWJvYXJkRm9jdXMpIHtcbiAgICAgICAgaWYgKCgwLCBfa2V5Y29kZTIuZGVmYXVsdCkoZXZlbnQpID09PSAnc3BhY2UnICYmIF90aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICAgICAgX3RoaXMuaGFuZGxlQ2xpY2soZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5wcm9wcy5vbktleVVwKGV2ZW50KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbHVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5jYW5jZWxGb2N1c1RpbWVvdXQoKTtcbiAgICAgIF90aGlzLnJlbW92ZUtleWJvYXJkRm9jdXMoZXZlbnQpO1xuICAgICAgX3RoaXMucHJvcHMub25CbHVyKGV2ZW50KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50KSBldmVudC5wZXJzaXN0KCk7XG4gICAgICBpZiAoIV90aGlzLnByb3BzLmRpc2FibGVkICYmICFfdGhpcy5wcm9wcy5kaXNhYmxlS2V5Ym9hcmRGb2N1cykge1xuICAgICAgICAvLyBzZXRUaW1lb3V0IGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBmb2N1cyBldmVudCBmaXJlcyBmaXJzdFxuICAgICAgICAvLyBXYWl0IHNvIHRoYXQgd2UgY2FuIGNhcHR1cmUgaWYgdGhpcyB3YXMgYSBrZXlib2FyZCBmb2N1c1xuICAgICAgICAvLyBvciB0b3VjaCBmb2N1c1xuICAgICAgICBfdGhpcy5mb2N1c1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodGFiUHJlc3NlZCkge1xuICAgICAgICAgICAgX3RoaXMuc2V0S2V5Ym9hcmRGb2N1cyhldmVudCk7XG4gICAgICAgICAgICB0YWJQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAxNTApO1xuXG4gICAgICAgIF90aGlzLnByb3BzLm9uRm9jdXMoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5jYW5jZWxGb2N1c1RpbWVvdXQoKTtcbiAgICAgIGlmICghX3RoaXMucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgdGFiUHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5yZW1vdmVLZXlib2FyZEZvY3VzKGV2ZW50KTtcbiAgICAgICAgX3RoaXMucHJvcHMub25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEVuaGFuY2VkQnV0dG9uLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGRpc2FibGVLZXlib2FyZEZvY3VzID0gX3Byb3BzLmRpc2FibGVLZXlib2FyZEZvY3VzLFxuICAgICAgICAgIGtleWJvYXJkRm9jdXNlZCA9IF9wcm9wcy5rZXlib2FyZEZvY3VzZWQ7XG5cbiAgICAgIGlmICghZGlzYWJsZWQgJiYga2V5Ym9hcmRGb2N1c2VkICYmICFkaXNhYmxlS2V5Ym9hcmRGb2N1cykge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNLZXlib2FyZEZvY3VzZWQ6IHRydWUgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGluamVjdFN0eWxlKCk7XG4gICAgICBsaXN0ZW5Gb3JUYWJQcmVzc2VzKCk7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5pc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgICB0aGlzLmJ1dHRvbi5mb2N1cygpO1xuICAgICAgICB0aGlzLnByb3BzLm9uS2V5Ym9hcmRGb2N1cyhudWxsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICgobmV4dFByb3BzLmRpc2FibGVkIHx8IG5leHRQcm9wcy5kaXNhYmxlS2V5Ym9hcmRGb2N1cykgJiYgdGhpcy5zdGF0ZS5pc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNLZXlib2FyZEZvY3VzZWQ6IGZhbHNlIH0pO1xuICAgICAgICBpZiAobmV4dFByb3BzLm9uS2V5Ym9hcmRGb2N1cykge1xuICAgICAgICAgIG5leHRQcm9wcy5vbktleWJvYXJkRm9jdXMobnVsbCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmZvY3VzVGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5mb2N1c1RpbWVvdXQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2lzS2V5Ym9hcmRGb2N1c2VkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNLZXlib2FyZEZvY3VzZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5pc0tleWJvYXJkRm9jdXNlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVLZXlib2FyZEZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlS2V5Ym9hcmRGb2N1cyhldmVudCkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzS2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSB9KTtcbiAgICAgICAgdGhpcy5wcm9wcy5vbktleWJvYXJkRm9jdXMoZXZlbnQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRLZXlib2FyZEZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0S2V5Ym9hcmRGb2N1cyhldmVudCkge1xuICAgICAgaWYgKCF0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0tleWJvYXJkRm9jdXNlZDogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5wcm9wcy5vbktleWJvYXJkRm9jdXMoZXZlbnQsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NhbmNlbEZvY3VzVGltZW91dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbEZvY3VzVGltZW91dCgpIHtcbiAgICAgIGlmICh0aGlzLmZvY3VzVGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5mb2N1c1RpbWVvdXQpO1xuICAgICAgICB0aGlzLmZvY3VzVGltZW91dCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlQnV0dG9uQ2hpbGRyZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVCdXR0b25DaGlsZHJlbigpIHtcbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjZW50ZXJSaXBwbGUgPSBfcHJvcHMyLmNlbnRlclJpcHBsZSxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczIuY2hpbGRyZW4sXG4gICAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IF9wcm9wczIuZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgICAgICAgIGRpc2FibGVLZXlib2FyZEZvY3VzID0gX3Byb3BzMi5kaXNhYmxlS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgICBkaXNhYmxlVG91Y2hSaXBwbGUgPSBfcHJvcHMyLmRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICAgICAgICBmb2N1c1JpcHBsZUNvbG9yID0gX3Byb3BzMi5mb2N1c1JpcHBsZUNvbG9yLFxuICAgICAgICAgIGZvY3VzUmlwcGxlT3BhY2l0eSA9IF9wcm9wczIuZm9jdXNSaXBwbGVPcGFjaXR5LFxuICAgICAgICAgIHRvdWNoUmlwcGxlQ29sb3IgPSBfcHJvcHMyLnRvdWNoUmlwcGxlQ29sb3IsXG4gICAgICAgICAgdG91Y2hSaXBwbGVPcGFjaXR5ID0gX3Byb3BzMi50b3VjaFJpcHBsZU9wYWNpdHk7XG4gICAgICB2YXIgaXNLZXlib2FyZEZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkO1xuXG4gICAgICAvLyBGb2N1cyBSaXBwbGVcblxuICAgICAgdmFyIGZvY3VzUmlwcGxlID0gaXNLZXlib2FyZEZvY3VzZWQgJiYgIWRpc2FibGVkICYmICFkaXNhYmxlRm9jdXNSaXBwbGUgJiYgIWRpc2FibGVLZXlib2FyZEZvY3VzID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ZvY3VzUmlwcGxlMi5kZWZhdWx0LCB7XG4gICAgICAgIGNvbG9yOiBmb2N1c1JpcHBsZUNvbG9yLFxuICAgICAgICBvcGFjaXR5OiBmb2N1c1JpcHBsZU9wYWNpdHksXG4gICAgICAgIHNob3c6IGlzS2V5Ym9hcmRGb2N1c2VkLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgICB9LFxuICAgICAgICBrZXk6ICdmb2N1c1JpcHBsZSdcbiAgICAgIH0pIDogdW5kZWZpbmVkO1xuXG4gICAgICAvLyBUb3VjaCBSaXBwbGVcbiAgICAgIHZhciB0b3VjaFJpcHBsZSA9ICFkaXNhYmxlZCAmJiAhZGlzYWJsZVRvdWNoUmlwcGxlID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9Ub3VjaFJpcHBsZTIuZGVmYXVsdCxcbiAgICAgICAge1xuICAgICAgICAgIGNlbnRlclJpcHBsZTogY2VudGVyUmlwcGxlLFxuICAgICAgICAgIGNvbG9yOiB0b3VjaFJpcHBsZUNvbG9yLFxuICAgICAgICAgIG9wYWNpdHk6IHRvdWNoUmlwcGxlT3BhY2l0eSxcbiAgICAgICAgICBrZXk6ICd0b3VjaFJpcHBsZSdcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICkgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHJldHVybiBbZm9jdXNSaXBwbGUsIHRvdWNoUmlwcGxlLCB0b3VjaFJpcHBsZSA/IHVuZGVmaW5lZCA6IGNoaWxkcmVuXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNlbnRlclJpcHBsZSA9IF9wcm9wczMuY2VudGVyUmlwcGxlLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzMy5jaGlsZHJlbixcbiAgICAgICAgICBjb250YWluZXJFbGVtZW50ID0gX3Byb3BzMy5jb250YWluZXJFbGVtZW50LFxuICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzMy5kaXNhYmxlZCxcbiAgICAgICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBfcHJvcHMzLmRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICAgICAgICBkaXNhYmxlS2V5Ym9hcmRGb2N1cyA9IF9wcm9wczMuZGlzYWJsZUtleWJvYXJkRm9jdXMsXG4gICAgICAgICAgZGlzYWJsZVRvdWNoUmlwcGxlID0gX3Byb3BzMy5kaXNhYmxlVG91Y2hSaXBwbGUsXG4gICAgICAgICAgZm9jdXNSaXBwbGVDb2xvciA9IF9wcm9wczMuZm9jdXNSaXBwbGVDb2xvcixcbiAgICAgICAgICBmb2N1c1JpcHBsZU9wYWNpdHkgPSBfcHJvcHMzLmZvY3VzUmlwcGxlT3BhY2l0eSxcbiAgICAgICAgICBocmVmID0gX3Byb3BzMy5ocmVmLFxuICAgICAgICAgIGtleWJvYXJkRm9jdXNlZCA9IF9wcm9wczMua2V5Ym9hcmRGb2N1c2VkLFxuICAgICAgICAgIHRvdWNoUmlwcGxlQ29sb3IgPSBfcHJvcHMzLnRvdWNoUmlwcGxlQ29sb3IsXG4gICAgICAgICAgdG91Y2hSaXBwbGVPcGFjaXR5ID0gX3Byb3BzMy50b3VjaFJpcHBsZU9wYWNpdHksXG4gICAgICAgICAgb25CbHVyID0gX3Byb3BzMy5vbkJsdXIsXG4gICAgICAgICAgb25DbGljayA9IF9wcm9wczMub25DbGljayxcbiAgICAgICAgICBvbkZvY3VzID0gX3Byb3BzMy5vbkZvY3VzLFxuICAgICAgICAgIG9uS2V5VXAgPSBfcHJvcHMzLm9uS2V5VXAsXG4gICAgICAgICAgb25LZXlEb3duID0gX3Byb3BzMy5vbktleURvd24sXG4gICAgICAgICAgb25LZXlib2FyZEZvY3VzID0gX3Byb3BzMy5vbktleWJvYXJkRm9jdXMsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMzLnN0eWxlLFxuICAgICAgICAgIHRhYkluZGV4ID0gX3Byb3BzMy50YWJJbmRleCxcbiAgICAgICAgICB0eXBlID0gX3Byb3BzMy50eXBlLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3Byb3BzMywgWydjZW50ZXJSaXBwbGUnLCAnY2hpbGRyZW4nLCAnY29udGFpbmVyRWxlbWVudCcsICdkaXNhYmxlZCcsICdkaXNhYmxlRm9jdXNSaXBwbGUnLCAnZGlzYWJsZUtleWJvYXJkRm9jdXMnLCAnZGlzYWJsZVRvdWNoUmlwcGxlJywgJ2ZvY3VzUmlwcGxlQ29sb3InLCAnZm9jdXNSaXBwbGVPcGFjaXR5JywgJ2hyZWYnLCAna2V5Ym9hcmRGb2N1c2VkJywgJ3RvdWNoUmlwcGxlQ29sb3InLCAndG91Y2hSaXBwbGVPcGFjaXR5JywgJ29uQmx1cicsICdvbkNsaWNrJywgJ29uRm9jdXMnLCAnb25LZXlVcCcsICdvbktleURvd24nLCAnb25LZXlib2FyZEZvY3VzJywgJ3N0eWxlJywgJ3RhYkluZGV4JywgJ3R5cGUnXSk7XG4gICAgICB2YXIgX2NvbnRleHQkbXVpVGhlbWUgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUsXG4gICAgICAgICAgcHJlcGFyZVN0eWxlcyA9IF9jb250ZXh0JG11aVRoZW1lLnByZXBhcmVTdHlsZXMsXG4gICAgICAgICAgZW5oYW5jZWRCdXR0b24gPSBfY29udGV4dCRtdWlUaGVtZS5lbmhhbmNlZEJ1dHRvbjtcblxuXG4gICAgICB2YXIgbWVyZ2VkU3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHtcbiAgICAgICAgYm9yZGVyOiAxMCxcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICBmb250RmFtaWx5OiB0aGlzLmNvbnRleHQubXVpVGhlbWUuYmFzZVRoZW1lLmZvbnRGYW1pbHksXG4gICAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiBlbmhhbmNlZEJ1dHRvbi50YXBIaWdobGlnaHRDb2xvciwgLy8gUmVtb3ZlIG1vYmlsZSBjb2xvciBmbGFzaGluZyAoZGVwcmVjYXRlZClcbiAgICAgICAgY3Vyc29yOiBkaXNhYmxlZCA/ICdkZWZhdWx0JyA6ICdwb2ludGVyJyxcbiAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCcsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdpbmhlcml0JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsIC8vIFRoaXMgaXMgbmVlZGVkIHNvIHRoYXQgcmlwcGxlcyBkbyBub3QgYmxlZWQgcGFzdCBib3JkZXIgcmFkaXVzLlxuICAgICAgICB2ZXJ0aWNhbEFsaWduOiBocmVmID8gJ21pZGRsZScgOiBudWxsXG4gICAgICB9LCBzdHlsZSk7XG5cbiAgICAgIC8vIFBhc3NpbmcgYm90aCBiYWNrZ3JvdW5kOm5vbmUgJiBiYWNrZ3JvdW5kQ29sb3IgY2FuIGJyZWFrIGR1ZSB0byBvYmplY3QgaXRlcmF0aW9uIG9yZGVyXG4gICAgICBpZiAoIW1lcmdlZFN0eWxlcy5iYWNrZ3JvdW5kQ29sb3IgJiYgIW1lcmdlZFN0eWxlcy5iYWNrZ3JvdW5kKSB7XG4gICAgICAgIG1lcmdlZFN0eWxlcy5iYWNrZ3JvdW5kID0gJ25vbmUnO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlzYWJsZWQgJiYgaHJlZikge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCB7XG4gICAgICAgICAgICBzdHlsZTogbWVyZ2VkU3R5bGVzXG4gICAgICAgICAgfSksXG4gICAgICAgICAgY2hpbGRyZW5cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJ1dHRvblByb3BzID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHtcbiAgICAgICAgc3R5bGU6IHByZXBhcmVTdHlsZXMobWVyZ2VkU3R5bGVzKSxcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuYnV0dG9uID0gbm9kZTtcbiAgICAgICAgfSxcbiAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1cixcbiAgICAgICAgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cyxcbiAgICAgICAgb25LZXlVcDogdGhpcy5oYW5kbGVLZXlVcCxcbiAgICAgICAgb25LZXlEb3duOiB0aGlzLmhhbmRsZUtleURvd24sXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICAgIHRhYkluZGV4OiBkaXNhYmxlZCB8fCBkaXNhYmxlS2V5Ym9hcmRGb2N1cyA/IC0xIDogdGFiSW5kZXhcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaHJlZikgYnV0dG9uUHJvcHMuaHJlZiA9IGhyZWY7XG5cbiAgICAgIHZhciBidXR0b25DaGlsZHJlbiA9IHRoaXMuY3JlYXRlQnV0dG9uQ2hpbGRyZW4oKTtcblxuICAgICAgaWYgKF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjb250YWluZXJFbGVtZW50KSkge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChjb250YWluZXJFbGVtZW50LCBidXR0b25Qcm9wcywgYnV0dG9uQ2hpbGRyZW4pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhyZWYgJiYgY29udGFpbmVyRWxlbWVudCA9PT0gJ2J1dHRvbicpIHtcbiAgICAgICAgYnV0dG9uUHJvcHMudHlwZSA9IHR5cGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChocmVmID8gJ2EnIDogY29udGFpbmVyRWxlbWVudCwgYnV0dG9uUHJvcHMsIGJ1dHRvbkNoaWxkcmVuKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEVuaGFuY2VkQnV0dG9uO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuRW5oYW5jZWRCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBjb250YWluZXJFbGVtZW50OiAnYnV0dG9uJyxcbiAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7fSxcbiAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHt9LFxuICBvbkZvY3VzOiBmdW5jdGlvbiBvbkZvY3VzKCkge30sXG4gIG9uS2V5RG93bjogZnVuY3Rpb24gb25LZXlEb3duKCkge30sXG4gIG9uS2V5VXA6IGZ1bmN0aW9uIG9uS2V5VXAoKSB7fSxcbiAgb25LZXlib2FyZEZvY3VzOiBmdW5jdGlvbiBvbktleWJvYXJkRm9jdXMoKSB7fSxcbiAgdGFiSW5kZXg6IDAsXG4gIHR5cGU6ICdidXR0b24nXG59O1xuRW5oYW5jZWRCdXR0b24uY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcbkVuaGFuY2VkQnV0dG9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgY2VudGVyUmlwcGxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIGNvbnRhaW5lckVsZW1lbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50XSksXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBkaXNhYmxlS2V5Ym9hcmRGb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBkaXNhYmxlVG91Y2hSaXBwbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgZm9jdXNSaXBwbGVDb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGZvY3VzUmlwcGxlT3BhY2l0eTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIGhyZWY6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBrZXlib2FyZEZvY3VzZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgb25CbHVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25Gb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvbktleURvd246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25LZXlVcDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvbktleWJvYXJkRm9jdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICB0YWJJbmRleDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIHRvdWNoUmlwcGxlQ29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICB0b3VjaFJpcHBsZU9wYWNpdHk6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICB0eXBlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gRW5oYW5jZWRCdXR0b247IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX1BhcGVyID0gcmVxdWlyZSgnLi9QYXBlcicpO1xuXG52YXIgX1BhcGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BhcGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX1BhcGVyMi5kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgb25jZTogZnVuY3Rpb24gb25jZShlbCwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgdHlwZUFycmF5ID0gdHlwZSA/IHR5cGUuc3BsaXQoJyAnKSA6IFtdO1xuICAgIHZhciByZWN1cnNpdmVGdW5jdGlvbiA9IGZ1bmN0aW9uIHJlY3Vyc2l2ZUZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBldmVudC50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudC50eXBlLCByZWN1cnNpdmVGdW5jdGlvbik7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZXZlbnQpO1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBpID0gdHlwZUFycmF5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB0aGlzLm9uKGVsLCB0eXBlQXJyYXlbaV0sIHJlY3Vyc2l2ZUZ1bmN0aW9uKTtcbiAgICB9XG4gIH0sXG4gIG9uOiBmdW5jdGlvbiBvbihlbCwgdHlwZSwgY2FsbGJhY2spIHtcbiAgICBpZiAoZWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElFOCsgU3VwcG9ydFxuICAgICAgZWwuYXR0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbChlbCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIG9mZjogZnVuY3Rpb24gb2ZmKGVsLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIGlmIChlbC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSUU4KyBTdXBwb3J0XG4gICAgICBlbC5kZXRhY2hFdmVudCgnb24nICsgdHlwZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcbiAgaXNLZXlib2FyZDogZnVuY3Rpb24gaXNLZXlib2FyZChldmVudCkge1xuICAgIHJldHVybiBbJ2tleWRvd24nLCAna2V5cHJlc3MnLCAna2V5dXAnXS5pbmRleE9mKGV2ZW50LnR5cGUpICE9PSAtMTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1ByZWZpeGVkVmFsdWU7XG52YXIgcmVnZXggPSAvLXdlYmtpdC18LW1vei18LW1zLS87XG5cbmZ1bmN0aW9uIGlzUHJlZml4ZWRWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiByZWdleC50ZXN0KHZhbHVlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FwaXRhbGl6ZVN0cmluZztcbmZ1bmN0aW9uIGNhcGl0YWxpemVTdHJpbmcoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciByZWQ1MCA9IGV4cG9ydHMucmVkNTAgPSAnI2ZmZWJlZSc7XG52YXIgcmVkMTAwID0gZXhwb3J0cy5yZWQxMDAgPSAnI2ZmY2RkMic7XG52YXIgcmVkMjAwID0gZXhwb3J0cy5yZWQyMDAgPSAnI2VmOWE5YSc7XG52YXIgcmVkMzAwID0gZXhwb3J0cy5yZWQzMDAgPSAnI2U1NzM3Myc7XG52YXIgcmVkNDAwID0gZXhwb3J0cy5yZWQ0MDAgPSAnI2VmNTM1MCc7XG52YXIgcmVkNTAwID0gZXhwb3J0cy5yZWQ1MDAgPSAnI2Y0NDMzNic7XG52YXIgcmVkNjAwID0gZXhwb3J0cy5yZWQ2MDAgPSAnI2U1MzkzNSc7XG52YXIgcmVkNzAwID0gZXhwb3J0cy5yZWQ3MDAgPSAnI2QzMmYyZic7XG52YXIgcmVkODAwID0gZXhwb3J0cy5yZWQ4MDAgPSAnI2M2MjgyOCc7XG52YXIgcmVkOTAwID0gZXhwb3J0cy5yZWQ5MDAgPSAnI2I3MWMxYyc7XG52YXIgcmVkQTEwMCA9IGV4cG9ydHMucmVkQTEwMCA9ICcjZmY4YTgwJztcbnZhciByZWRBMjAwID0gZXhwb3J0cy5yZWRBMjAwID0gJyNmZjUyNTInO1xudmFyIHJlZEE0MDAgPSBleHBvcnRzLnJlZEE0MDAgPSAnI2ZmMTc0NCc7XG52YXIgcmVkQTcwMCA9IGV4cG9ydHMucmVkQTcwMCA9ICcjZDUwMDAwJztcblxudmFyIHBpbms1MCA9IGV4cG9ydHMucGluazUwID0gJyNmY2U0ZWMnO1xudmFyIHBpbmsxMDAgPSBleHBvcnRzLnBpbmsxMDAgPSAnI2Y4YmJkMCc7XG52YXIgcGluazIwMCA9IGV4cG9ydHMucGluazIwMCA9ICcjZjQ4ZmIxJztcbnZhciBwaW5rMzAwID0gZXhwb3J0cy5waW5rMzAwID0gJyNmMDYyOTInO1xudmFyIHBpbms0MDAgPSBleHBvcnRzLnBpbms0MDAgPSAnI2VjNDA3YSc7XG52YXIgcGluazUwMCA9IGV4cG9ydHMucGluazUwMCA9ICcjZTkxZTYzJztcbnZhciBwaW5rNjAwID0gZXhwb3J0cy5waW5rNjAwID0gJyNkODFiNjAnO1xudmFyIHBpbms3MDAgPSBleHBvcnRzLnBpbms3MDAgPSAnI2MyMTg1Yic7XG52YXIgcGluazgwMCA9IGV4cG9ydHMucGluazgwMCA9ICcjYWQxNDU3JztcbnZhciBwaW5rOTAwID0gZXhwb3J0cy5waW5rOTAwID0gJyM4ODBlNGYnO1xudmFyIHBpbmtBMTAwID0gZXhwb3J0cy5waW5rQTEwMCA9ICcjZmY4MGFiJztcbnZhciBwaW5rQTIwMCA9IGV4cG9ydHMucGlua0EyMDAgPSAnI2ZmNDA4MSc7XG52YXIgcGlua0E0MDAgPSBleHBvcnRzLnBpbmtBNDAwID0gJyNmNTAwNTcnO1xudmFyIHBpbmtBNzAwID0gZXhwb3J0cy5waW5rQTcwMCA9ICcjYzUxMTYyJztcblxudmFyIHB1cnBsZTUwID0gZXhwb3J0cy5wdXJwbGU1MCA9ICcjZjNlNWY1JztcbnZhciBwdXJwbGUxMDAgPSBleHBvcnRzLnB1cnBsZTEwMCA9ICcjZTFiZWU3JztcbnZhciBwdXJwbGUyMDAgPSBleHBvcnRzLnB1cnBsZTIwMCA9ICcjY2U5M2Q4JztcbnZhciBwdXJwbGUzMDAgPSBleHBvcnRzLnB1cnBsZTMwMCA9ICcjYmE2OGM4JztcbnZhciBwdXJwbGU0MDAgPSBleHBvcnRzLnB1cnBsZTQwMCA9ICcjYWI0N2JjJztcbnZhciBwdXJwbGU1MDAgPSBleHBvcnRzLnB1cnBsZTUwMCA9ICcjOWMyN2IwJztcbnZhciBwdXJwbGU2MDAgPSBleHBvcnRzLnB1cnBsZTYwMCA9ICcjOGUyNGFhJztcbnZhciBwdXJwbGU3MDAgPSBleHBvcnRzLnB1cnBsZTcwMCA9ICcjN2IxZmEyJztcbnZhciBwdXJwbGU4MDAgPSBleHBvcnRzLnB1cnBsZTgwMCA9ICcjNmExYjlhJztcbnZhciBwdXJwbGU5MDAgPSBleHBvcnRzLnB1cnBsZTkwMCA9ICcjNGExNDhjJztcbnZhciBwdXJwbGVBMTAwID0gZXhwb3J0cy5wdXJwbGVBMTAwID0gJyNlYTgwZmMnO1xudmFyIHB1cnBsZUEyMDAgPSBleHBvcnRzLnB1cnBsZUEyMDAgPSAnI2UwNDBmYic7XG52YXIgcHVycGxlQTQwMCA9IGV4cG9ydHMucHVycGxlQTQwMCA9ICcjZDUwMGY5JztcbnZhciBwdXJwbGVBNzAwID0gZXhwb3J0cy5wdXJwbGVBNzAwID0gJyNhYTAwZmYnO1xuXG52YXIgZGVlcFB1cnBsZTUwID0gZXhwb3J0cy5kZWVwUHVycGxlNTAgPSAnI2VkZTdmNic7XG52YXIgZGVlcFB1cnBsZTEwMCA9IGV4cG9ydHMuZGVlcFB1cnBsZTEwMCA9ICcjZDFjNGU5JztcbnZhciBkZWVwUHVycGxlMjAwID0gZXhwb3J0cy5kZWVwUHVycGxlMjAwID0gJyNiMzlkZGInO1xudmFyIGRlZXBQdXJwbGUzMDAgPSBleHBvcnRzLmRlZXBQdXJwbGUzMDAgPSAnIzk1NzVjZCc7XG52YXIgZGVlcFB1cnBsZTQwMCA9IGV4cG9ydHMuZGVlcFB1cnBsZTQwMCA9ICcjN2U1N2MyJztcbnZhciBkZWVwUHVycGxlNTAwID0gZXhwb3J0cy5kZWVwUHVycGxlNTAwID0gJyM2NzNhYjcnO1xudmFyIGRlZXBQdXJwbGU2MDAgPSBleHBvcnRzLmRlZXBQdXJwbGU2MDAgPSAnIzVlMzViMSc7XG52YXIgZGVlcFB1cnBsZTcwMCA9IGV4cG9ydHMuZGVlcFB1cnBsZTcwMCA9ICcjNTEyZGE4JztcbnZhciBkZWVwUHVycGxlODAwID0gZXhwb3J0cy5kZWVwUHVycGxlODAwID0gJyM0NTI3YTAnO1xudmFyIGRlZXBQdXJwbGU5MDAgPSBleHBvcnRzLmRlZXBQdXJwbGU5MDAgPSAnIzMxMWI5Mic7XG52YXIgZGVlcFB1cnBsZUExMDAgPSBleHBvcnRzLmRlZXBQdXJwbGVBMTAwID0gJyNiMzg4ZmYnO1xudmFyIGRlZXBQdXJwbGVBMjAwID0gZXhwb3J0cy5kZWVwUHVycGxlQTIwMCA9ICcjN2M0ZGZmJztcbnZhciBkZWVwUHVycGxlQTQwMCA9IGV4cG9ydHMuZGVlcFB1cnBsZUE0MDAgPSAnIzY1MWZmZic7XG52YXIgZGVlcFB1cnBsZUE3MDAgPSBleHBvcnRzLmRlZXBQdXJwbGVBNzAwID0gJyM2MjAwZWEnO1xuXG52YXIgaW5kaWdvNTAgPSBleHBvcnRzLmluZGlnbzUwID0gJyNlOGVhZjYnO1xudmFyIGluZGlnbzEwMCA9IGV4cG9ydHMuaW5kaWdvMTAwID0gJyNjNWNhZTknO1xudmFyIGluZGlnbzIwMCA9IGV4cG9ydHMuaW5kaWdvMjAwID0gJyM5ZmE4ZGEnO1xudmFyIGluZGlnbzMwMCA9IGV4cG9ydHMuaW5kaWdvMzAwID0gJyM3OTg2Y2InO1xudmFyIGluZGlnbzQwMCA9IGV4cG9ydHMuaW5kaWdvNDAwID0gJyM1YzZiYzAnO1xudmFyIGluZGlnbzUwMCA9IGV4cG9ydHMuaW5kaWdvNTAwID0gJyMzZjUxYjUnO1xudmFyIGluZGlnbzYwMCA9IGV4cG9ydHMuaW5kaWdvNjAwID0gJyMzOTQ5YWInO1xudmFyIGluZGlnbzcwMCA9IGV4cG9ydHMuaW5kaWdvNzAwID0gJyMzMDNmOWYnO1xudmFyIGluZGlnbzgwMCA9IGV4cG9ydHMuaW5kaWdvODAwID0gJyMyODM1OTMnO1xudmFyIGluZGlnbzkwMCA9IGV4cG9ydHMuaW5kaWdvOTAwID0gJyMxYTIzN2UnO1xudmFyIGluZGlnb0ExMDAgPSBleHBvcnRzLmluZGlnb0ExMDAgPSAnIzhjOWVmZic7XG52YXIgaW5kaWdvQTIwMCA9IGV4cG9ydHMuaW5kaWdvQTIwMCA9ICcjNTM2ZGZlJztcbnZhciBpbmRpZ29BNDAwID0gZXhwb3J0cy5pbmRpZ29BNDAwID0gJyMzZDVhZmUnO1xudmFyIGluZGlnb0E3MDAgPSBleHBvcnRzLmluZGlnb0E3MDAgPSAnIzMwNGZmZSc7XG5cbnZhciBibHVlNTAgPSBleHBvcnRzLmJsdWU1MCA9ICcjZTNmMmZkJztcbnZhciBibHVlMTAwID0gZXhwb3J0cy5ibHVlMTAwID0gJyNiYmRlZmInO1xudmFyIGJsdWUyMDAgPSBleHBvcnRzLmJsdWUyMDAgPSAnIzkwY2FmOSc7XG52YXIgYmx1ZTMwMCA9IGV4cG9ydHMuYmx1ZTMwMCA9ICcjNjRiNWY2JztcbnZhciBibHVlNDAwID0gZXhwb3J0cy5ibHVlNDAwID0gJyM0MmE1ZjUnO1xudmFyIGJsdWU1MDAgPSBleHBvcnRzLmJsdWU1MDAgPSAnIzIxOTZmMyc7XG52YXIgYmx1ZTYwMCA9IGV4cG9ydHMuYmx1ZTYwMCA9ICcjMWU4OGU1JztcbnZhciBibHVlNzAwID0gZXhwb3J0cy5ibHVlNzAwID0gJyMxOTc2ZDInO1xudmFyIGJsdWU4MDAgPSBleHBvcnRzLmJsdWU4MDAgPSAnIzE1NjVjMCc7XG52YXIgYmx1ZTkwMCA9IGV4cG9ydHMuYmx1ZTkwMCA9ICcjMGQ0N2ExJztcbnZhciBibHVlQTEwMCA9IGV4cG9ydHMuYmx1ZUExMDAgPSAnIzgyYjFmZic7XG52YXIgYmx1ZUEyMDAgPSBleHBvcnRzLmJsdWVBMjAwID0gJyM0NDhhZmYnO1xudmFyIGJsdWVBNDAwID0gZXhwb3J0cy5ibHVlQTQwMCA9ICcjMjk3OWZmJztcbnZhciBibHVlQTcwMCA9IGV4cG9ydHMuYmx1ZUE3MDAgPSAnIzI5NjJmZic7XG5cbnZhciBsaWdodEJsdWU1MCA9IGV4cG9ydHMubGlnaHRCbHVlNTAgPSAnI2UxZjVmZSc7XG52YXIgbGlnaHRCbHVlMTAwID0gZXhwb3J0cy5saWdodEJsdWUxMDAgPSAnI2IzZTVmYyc7XG52YXIgbGlnaHRCbHVlMjAwID0gZXhwb3J0cy5saWdodEJsdWUyMDAgPSAnIzgxZDRmYSc7XG52YXIgbGlnaHRCbHVlMzAwID0gZXhwb3J0cy5saWdodEJsdWUzMDAgPSAnIzRmYzNmNyc7XG52YXIgbGlnaHRCbHVlNDAwID0gZXhwb3J0cy5saWdodEJsdWU0MDAgPSAnIzI5YjZmNic7XG52YXIgbGlnaHRCbHVlNTAwID0gZXhwb3J0cy5saWdodEJsdWU1MDAgPSAnIzAzYTlmNCc7XG52YXIgbGlnaHRCbHVlNjAwID0gZXhwb3J0cy5saWdodEJsdWU2MDAgPSAnIzAzOWJlNSc7XG52YXIgbGlnaHRCbHVlNzAwID0gZXhwb3J0cy5saWdodEJsdWU3MDAgPSAnIzAyODhkMSc7XG52YXIgbGlnaHRCbHVlODAwID0gZXhwb3J0cy5saWdodEJsdWU4MDAgPSAnIzAyNzdiZCc7XG52YXIgbGlnaHRCbHVlOTAwID0gZXhwb3J0cy5saWdodEJsdWU5MDAgPSAnIzAxNTc5Yic7XG52YXIgbGlnaHRCbHVlQTEwMCA9IGV4cG9ydHMubGlnaHRCbHVlQTEwMCA9ICcjODBkOGZmJztcbnZhciBsaWdodEJsdWVBMjAwID0gZXhwb3J0cy5saWdodEJsdWVBMjAwID0gJyM0MGM0ZmYnO1xudmFyIGxpZ2h0Qmx1ZUE0MDAgPSBleHBvcnRzLmxpZ2h0Qmx1ZUE0MDAgPSAnIzAwYjBmZic7XG52YXIgbGlnaHRCbHVlQTcwMCA9IGV4cG9ydHMubGlnaHRCbHVlQTcwMCA9ICcjMDA5MWVhJztcblxudmFyIGN5YW41MCA9IGV4cG9ydHMuY3lhbjUwID0gJyNlMGY3ZmEnO1xudmFyIGN5YW4xMDAgPSBleHBvcnRzLmN5YW4xMDAgPSAnI2IyZWJmMic7XG52YXIgY3lhbjIwMCA9IGV4cG9ydHMuY3lhbjIwMCA9ICcjODBkZWVhJztcbnZhciBjeWFuMzAwID0gZXhwb3J0cy5jeWFuMzAwID0gJyM0ZGQwZTEnO1xudmFyIGN5YW40MDAgPSBleHBvcnRzLmN5YW40MDAgPSAnIzI2YzZkYSc7XG52YXIgY3lhbjUwMCA9IGV4cG9ydHMuY3lhbjUwMCA9ICcjMDBiY2Q0JztcbnZhciBjeWFuNjAwID0gZXhwb3J0cy5jeWFuNjAwID0gJyMwMGFjYzEnO1xudmFyIGN5YW43MDAgPSBleHBvcnRzLmN5YW43MDAgPSAnIzAwOTdhNyc7XG52YXIgY3lhbjgwMCA9IGV4cG9ydHMuY3lhbjgwMCA9ICcjMDA4MzhmJztcbnZhciBjeWFuOTAwID0gZXhwb3J0cy5jeWFuOTAwID0gJyMwMDYwNjQnO1xudmFyIGN5YW5BMTAwID0gZXhwb3J0cy5jeWFuQTEwMCA9ICcjODRmZmZmJztcbnZhciBjeWFuQTIwMCA9IGV4cG9ydHMuY3lhbkEyMDAgPSAnIzE4ZmZmZic7XG52YXIgY3lhbkE0MDAgPSBleHBvcnRzLmN5YW5BNDAwID0gJyMwMGU1ZmYnO1xudmFyIGN5YW5BNzAwID0gZXhwb3J0cy5jeWFuQTcwMCA9ICcjMDBiOGQ0JztcblxudmFyIHRlYWw1MCA9IGV4cG9ydHMudGVhbDUwID0gJyNlMGYyZjEnO1xudmFyIHRlYWwxMDAgPSBleHBvcnRzLnRlYWwxMDAgPSAnI2IyZGZkYic7XG52YXIgdGVhbDIwMCA9IGV4cG9ydHMudGVhbDIwMCA9ICcjODBjYmM0JztcbnZhciB0ZWFsMzAwID0gZXhwb3J0cy50ZWFsMzAwID0gJyM0ZGI2YWMnO1xudmFyIHRlYWw0MDAgPSBleHBvcnRzLnRlYWw0MDAgPSAnIzI2YTY5YSc7XG52YXIgdGVhbDUwMCA9IGV4cG9ydHMudGVhbDUwMCA9ICcjMDA5Njg4JztcbnZhciB0ZWFsNjAwID0gZXhwb3J0cy50ZWFsNjAwID0gJyMwMDg5N2InO1xudmFyIHRlYWw3MDAgPSBleHBvcnRzLnRlYWw3MDAgPSAnIzAwNzk2Yic7XG52YXIgdGVhbDgwMCA9IGV4cG9ydHMudGVhbDgwMCA9ICcjMDA2OTVjJztcbnZhciB0ZWFsOTAwID0gZXhwb3J0cy50ZWFsOTAwID0gJyMwMDRkNDAnO1xudmFyIHRlYWxBMTAwID0gZXhwb3J0cy50ZWFsQTEwMCA9ICcjYTdmZmViJztcbnZhciB0ZWFsQTIwMCA9IGV4cG9ydHMudGVhbEEyMDAgPSAnIzY0ZmZkYSc7XG52YXIgdGVhbEE0MDAgPSBleHBvcnRzLnRlYWxBNDAwID0gJyMxZGU5YjYnO1xudmFyIHRlYWxBNzAwID0gZXhwb3J0cy50ZWFsQTcwMCA9ICcjMDBiZmE1JztcblxudmFyIGdyZWVuNTAgPSBleHBvcnRzLmdyZWVuNTAgPSAnI2U4ZjVlOSc7XG52YXIgZ3JlZW4xMDAgPSBleHBvcnRzLmdyZWVuMTAwID0gJyNjOGU2YzknO1xudmFyIGdyZWVuMjAwID0gZXhwb3J0cy5ncmVlbjIwMCA9ICcjYTVkNmE3JztcbnZhciBncmVlbjMwMCA9IGV4cG9ydHMuZ3JlZW4zMDAgPSAnIzgxYzc4NCc7XG52YXIgZ3JlZW40MDAgPSBleHBvcnRzLmdyZWVuNDAwID0gJyM2NmJiNmEnO1xudmFyIGdyZWVuNTAwID0gZXhwb3J0cy5ncmVlbjUwMCA9ICcjNGNhZjUwJztcbnZhciBncmVlbjYwMCA9IGV4cG9ydHMuZ3JlZW42MDAgPSAnIzQzYTA0Nyc7XG52YXIgZ3JlZW43MDAgPSBleHBvcnRzLmdyZWVuNzAwID0gJyMzODhlM2MnO1xudmFyIGdyZWVuODAwID0gZXhwb3J0cy5ncmVlbjgwMCA9ICcjMmU3ZDMyJztcbnZhciBncmVlbjkwMCA9IGV4cG9ydHMuZ3JlZW45MDAgPSAnIzFiNWUyMCc7XG52YXIgZ3JlZW5BMTAwID0gZXhwb3J0cy5ncmVlbkExMDAgPSAnI2I5ZjZjYSc7XG52YXIgZ3JlZW5BMjAwID0gZXhwb3J0cy5ncmVlbkEyMDAgPSAnIzY5ZjBhZSc7XG52YXIgZ3JlZW5BNDAwID0gZXhwb3J0cy5ncmVlbkE0MDAgPSAnIzAwZTY3Nic7XG52YXIgZ3JlZW5BNzAwID0gZXhwb3J0cy5ncmVlbkE3MDAgPSAnIzAwYzg1Myc7XG5cbnZhciBsaWdodEdyZWVuNTAgPSBleHBvcnRzLmxpZ2h0R3JlZW41MCA9ICcjZjFmOGU5JztcbnZhciBsaWdodEdyZWVuMTAwID0gZXhwb3J0cy5saWdodEdyZWVuMTAwID0gJyNkY2VkYzgnO1xudmFyIGxpZ2h0R3JlZW4yMDAgPSBleHBvcnRzLmxpZ2h0R3JlZW4yMDAgPSAnI2M1ZTFhNSc7XG52YXIgbGlnaHRHcmVlbjMwMCA9IGV4cG9ydHMubGlnaHRHcmVlbjMwMCA9ICcjYWVkNTgxJztcbnZhciBsaWdodEdyZWVuNDAwID0gZXhwb3J0cy5saWdodEdyZWVuNDAwID0gJyM5Y2NjNjUnO1xudmFyIGxpZ2h0R3JlZW41MDAgPSBleHBvcnRzLmxpZ2h0R3JlZW41MDAgPSAnIzhiYzM0YSc7XG52YXIgbGlnaHRHcmVlbjYwMCA9IGV4cG9ydHMubGlnaHRHcmVlbjYwMCA9ICcjN2NiMzQyJztcbnZhciBsaWdodEdyZWVuNzAwID0gZXhwb3J0cy5saWdodEdyZWVuNzAwID0gJyM2ODlmMzgnO1xudmFyIGxpZ2h0R3JlZW44MDAgPSBleHBvcnRzLmxpZ2h0R3JlZW44MDAgPSAnIzU1OGIyZic7XG52YXIgbGlnaHRHcmVlbjkwMCA9IGV4cG9ydHMubGlnaHRHcmVlbjkwMCA9ICcjMzM2OTFlJztcbnZhciBsaWdodEdyZWVuQTEwMCA9IGV4cG9ydHMubGlnaHRHcmVlbkExMDAgPSAnI2NjZmY5MCc7XG52YXIgbGlnaHRHcmVlbkEyMDAgPSBleHBvcnRzLmxpZ2h0R3JlZW5BMjAwID0gJyNiMmZmNTknO1xudmFyIGxpZ2h0R3JlZW5BNDAwID0gZXhwb3J0cy5saWdodEdyZWVuQTQwMCA9ICcjNzZmZjAzJztcbnZhciBsaWdodEdyZWVuQTcwMCA9IGV4cG9ydHMubGlnaHRHcmVlbkE3MDAgPSAnIzY0ZGQxNyc7XG5cbnZhciBsaW1lNTAgPSBleHBvcnRzLmxpbWU1MCA9ICcjZjlmYmU3JztcbnZhciBsaW1lMTAwID0gZXhwb3J0cy5saW1lMTAwID0gJyNmMGY0YzMnO1xudmFyIGxpbWUyMDAgPSBleHBvcnRzLmxpbWUyMDAgPSAnI2U2ZWU5Yyc7XG52YXIgbGltZTMwMCA9IGV4cG9ydHMubGltZTMwMCA9ICcjZGNlNzc1JztcbnZhciBsaW1lNDAwID0gZXhwb3J0cy5saW1lNDAwID0gJyNkNGUxNTcnO1xudmFyIGxpbWU1MDAgPSBleHBvcnRzLmxpbWU1MDAgPSAnI2NkZGMzOSc7XG52YXIgbGltZTYwMCA9IGV4cG9ydHMubGltZTYwMCA9ICcjYzBjYTMzJztcbnZhciBsaW1lNzAwID0gZXhwb3J0cy5saW1lNzAwID0gJyNhZmI0MmInO1xudmFyIGxpbWU4MDAgPSBleHBvcnRzLmxpbWU4MDAgPSAnIzllOWQyNCc7XG52YXIgbGltZTkwMCA9IGV4cG9ydHMubGltZTkwMCA9ICcjODI3NzE3JztcbnZhciBsaW1lQTEwMCA9IGV4cG9ydHMubGltZUExMDAgPSAnI2Y0ZmY4MSc7XG52YXIgbGltZUEyMDAgPSBleHBvcnRzLmxpbWVBMjAwID0gJyNlZWZmNDEnO1xudmFyIGxpbWVBNDAwID0gZXhwb3J0cy5saW1lQTQwMCA9ICcjYzZmZjAwJztcbnZhciBsaW1lQTcwMCA9IGV4cG9ydHMubGltZUE3MDAgPSAnI2FlZWEwMCc7XG5cbnZhciB5ZWxsb3c1MCA9IGV4cG9ydHMueWVsbG93NTAgPSAnI2ZmZmRlNyc7XG52YXIgeWVsbG93MTAwID0gZXhwb3J0cy55ZWxsb3cxMDAgPSAnI2ZmZjljNCc7XG52YXIgeWVsbG93MjAwID0gZXhwb3J0cy55ZWxsb3cyMDAgPSAnI2ZmZjU5ZCc7XG52YXIgeWVsbG93MzAwID0gZXhwb3J0cy55ZWxsb3czMDAgPSAnI2ZmZjE3Nic7XG52YXIgeWVsbG93NDAwID0gZXhwb3J0cy55ZWxsb3c0MDAgPSAnI2ZmZWU1OCc7XG52YXIgeWVsbG93NTAwID0gZXhwb3J0cy55ZWxsb3c1MDAgPSAnI2ZmZWIzYic7XG52YXIgeWVsbG93NjAwID0gZXhwb3J0cy55ZWxsb3c2MDAgPSAnI2ZkZDgzNSc7XG52YXIgeWVsbG93NzAwID0gZXhwb3J0cy55ZWxsb3c3MDAgPSAnI2ZiYzAyZCc7XG52YXIgeWVsbG93ODAwID0gZXhwb3J0cy55ZWxsb3c4MDAgPSAnI2Y5YTgyNSc7XG52YXIgeWVsbG93OTAwID0gZXhwb3J0cy55ZWxsb3c5MDAgPSAnI2Y1N2YxNyc7XG52YXIgeWVsbG93QTEwMCA9IGV4cG9ydHMueWVsbG93QTEwMCA9ICcjZmZmZjhkJztcbnZhciB5ZWxsb3dBMjAwID0gZXhwb3J0cy55ZWxsb3dBMjAwID0gJyNmZmZmMDAnO1xudmFyIHllbGxvd0E0MDAgPSBleHBvcnRzLnllbGxvd0E0MDAgPSAnI2ZmZWEwMCc7XG52YXIgeWVsbG93QTcwMCA9IGV4cG9ydHMueWVsbG93QTcwMCA9ICcjZmZkNjAwJztcblxudmFyIGFtYmVyNTAgPSBleHBvcnRzLmFtYmVyNTAgPSAnI2ZmZjhlMSc7XG52YXIgYW1iZXIxMDAgPSBleHBvcnRzLmFtYmVyMTAwID0gJyNmZmVjYjMnO1xudmFyIGFtYmVyMjAwID0gZXhwb3J0cy5hbWJlcjIwMCA9ICcjZmZlMDgyJztcbnZhciBhbWJlcjMwMCA9IGV4cG9ydHMuYW1iZXIzMDAgPSAnI2ZmZDU0Zic7XG52YXIgYW1iZXI0MDAgPSBleHBvcnRzLmFtYmVyNDAwID0gJyNmZmNhMjgnO1xudmFyIGFtYmVyNTAwID0gZXhwb3J0cy5hbWJlcjUwMCA9ICcjZmZjMTA3JztcbnZhciBhbWJlcjYwMCA9IGV4cG9ydHMuYW1iZXI2MDAgPSAnI2ZmYjMwMCc7XG52YXIgYW1iZXI3MDAgPSBleHBvcnRzLmFtYmVyNzAwID0gJyNmZmEwMDAnO1xudmFyIGFtYmVyODAwID0gZXhwb3J0cy5hbWJlcjgwMCA9ICcjZmY4ZjAwJztcbnZhciBhbWJlcjkwMCA9IGV4cG9ydHMuYW1iZXI5MDAgPSAnI2ZmNmYwMCc7XG52YXIgYW1iZXJBMTAwID0gZXhwb3J0cy5hbWJlckExMDAgPSAnI2ZmZTU3Zic7XG52YXIgYW1iZXJBMjAwID0gZXhwb3J0cy5hbWJlckEyMDAgPSAnI2ZmZDc0MCc7XG52YXIgYW1iZXJBNDAwID0gZXhwb3J0cy5hbWJlckE0MDAgPSAnI2ZmYzQwMCc7XG52YXIgYW1iZXJBNzAwID0gZXhwb3J0cy5hbWJlckE3MDAgPSAnI2ZmYWIwMCc7XG5cbnZhciBvcmFuZ2U1MCA9IGV4cG9ydHMub3JhbmdlNTAgPSAnI2ZmZjNlMCc7XG52YXIgb3JhbmdlMTAwID0gZXhwb3J0cy5vcmFuZ2UxMDAgPSAnI2ZmZTBiMic7XG52YXIgb3JhbmdlMjAwID0gZXhwb3J0cy5vcmFuZ2UyMDAgPSAnI2ZmY2M4MCc7XG52YXIgb3JhbmdlMzAwID0gZXhwb3J0cy5vcmFuZ2UzMDAgPSAnI2ZmYjc0ZCc7XG52YXIgb3JhbmdlNDAwID0gZXhwb3J0cy5vcmFuZ2U0MDAgPSAnI2ZmYTcyNic7XG52YXIgb3JhbmdlNTAwID0gZXhwb3J0cy5vcmFuZ2U1MDAgPSAnI2ZmOTgwMCc7XG52YXIgb3JhbmdlNjAwID0gZXhwb3J0cy5vcmFuZ2U2MDAgPSAnI2ZiOGMwMCc7XG52YXIgb3JhbmdlNzAwID0gZXhwb3J0cy5vcmFuZ2U3MDAgPSAnI2Y1N2MwMCc7XG52YXIgb3JhbmdlODAwID0gZXhwb3J0cy5vcmFuZ2U4MDAgPSAnI2VmNmMwMCc7XG52YXIgb3JhbmdlOTAwID0gZXhwb3J0cy5vcmFuZ2U5MDAgPSAnI2U2NTEwMCc7XG52YXIgb3JhbmdlQTEwMCA9IGV4cG9ydHMub3JhbmdlQTEwMCA9ICcjZmZkMTgwJztcbnZhciBvcmFuZ2VBMjAwID0gZXhwb3J0cy5vcmFuZ2VBMjAwID0gJyNmZmFiNDAnO1xudmFyIG9yYW5nZUE0MDAgPSBleHBvcnRzLm9yYW5nZUE0MDAgPSAnI2ZmOTEwMCc7XG52YXIgb3JhbmdlQTcwMCA9IGV4cG9ydHMub3JhbmdlQTcwMCA9ICcjZmY2ZDAwJztcblxudmFyIGRlZXBPcmFuZ2U1MCA9IGV4cG9ydHMuZGVlcE9yYW5nZTUwID0gJyNmYmU5ZTcnO1xudmFyIGRlZXBPcmFuZ2UxMDAgPSBleHBvcnRzLmRlZXBPcmFuZ2UxMDAgPSAnI2ZmY2NiYyc7XG52YXIgZGVlcE9yYW5nZTIwMCA9IGV4cG9ydHMuZGVlcE9yYW5nZTIwMCA9ICcjZmZhYjkxJztcbnZhciBkZWVwT3JhbmdlMzAwID0gZXhwb3J0cy5kZWVwT3JhbmdlMzAwID0gJyNmZjhhNjUnO1xudmFyIGRlZXBPcmFuZ2U0MDAgPSBleHBvcnRzLmRlZXBPcmFuZ2U0MDAgPSAnI2ZmNzA0Myc7XG52YXIgZGVlcE9yYW5nZTUwMCA9IGV4cG9ydHMuZGVlcE9yYW5nZTUwMCA9ICcjZmY1NzIyJztcbnZhciBkZWVwT3JhbmdlNjAwID0gZXhwb3J0cy5kZWVwT3JhbmdlNjAwID0gJyNmNDUxMWUnO1xudmFyIGRlZXBPcmFuZ2U3MDAgPSBleHBvcnRzLmRlZXBPcmFuZ2U3MDAgPSAnI2U2NGExOSc7XG52YXIgZGVlcE9yYW5nZTgwMCA9IGV4cG9ydHMuZGVlcE9yYW5nZTgwMCA9ICcjZDg0MzE1JztcbnZhciBkZWVwT3JhbmdlOTAwID0gZXhwb3J0cy5kZWVwT3JhbmdlOTAwID0gJyNiZjM2MGMnO1xudmFyIGRlZXBPcmFuZ2VBMTAwID0gZXhwb3J0cy5kZWVwT3JhbmdlQTEwMCA9ICcjZmY5ZTgwJztcbnZhciBkZWVwT3JhbmdlQTIwMCA9IGV4cG9ydHMuZGVlcE9yYW5nZUEyMDAgPSAnI2ZmNmU0MCc7XG52YXIgZGVlcE9yYW5nZUE0MDAgPSBleHBvcnRzLmRlZXBPcmFuZ2VBNDAwID0gJyNmZjNkMDAnO1xudmFyIGRlZXBPcmFuZ2VBNzAwID0gZXhwb3J0cy5kZWVwT3JhbmdlQTcwMCA9ICcjZGQyYzAwJztcblxudmFyIGJyb3duNTAgPSBleHBvcnRzLmJyb3duNTAgPSAnI2VmZWJlOSc7XG52YXIgYnJvd24xMDAgPSBleHBvcnRzLmJyb3duMTAwID0gJyNkN2NjYzgnO1xudmFyIGJyb3duMjAwID0gZXhwb3J0cy5icm93bjIwMCA9ICcjYmNhYWE0JztcbnZhciBicm93bjMwMCA9IGV4cG9ydHMuYnJvd24zMDAgPSAnI2ExODg3Zic7XG52YXIgYnJvd240MDAgPSBleHBvcnRzLmJyb3duNDAwID0gJyM4ZDZlNjMnO1xudmFyIGJyb3duNTAwID0gZXhwb3J0cy5icm93bjUwMCA9ICcjNzk1NTQ4JztcbnZhciBicm93bjYwMCA9IGV4cG9ydHMuYnJvd242MDAgPSAnIzZkNGM0MSc7XG52YXIgYnJvd243MDAgPSBleHBvcnRzLmJyb3duNzAwID0gJyM1ZDQwMzcnO1xudmFyIGJyb3duODAwID0gZXhwb3J0cy5icm93bjgwMCA9ICcjNGUzNDJlJztcbnZhciBicm93bjkwMCA9IGV4cG9ydHMuYnJvd245MDAgPSAnIzNlMjcyMyc7XG5cbnZhciBibHVlR3JleTUwID0gZXhwb3J0cy5ibHVlR3JleTUwID0gJyNlY2VmZjEnO1xudmFyIGJsdWVHcmV5MTAwID0gZXhwb3J0cy5ibHVlR3JleTEwMCA9ICcjY2ZkOGRjJztcbnZhciBibHVlR3JleTIwMCA9IGV4cG9ydHMuYmx1ZUdyZXkyMDAgPSAnI2IwYmVjNSc7XG52YXIgYmx1ZUdyZXkzMDAgPSBleHBvcnRzLmJsdWVHcmV5MzAwID0gJyM5MGE0YWUnO1xudmFyIGJsdWVHcmV5NDAwID0gZXhwb3J0cy5ibHVlR3JleTQwMCA9ICcjNzg5MDljJztcbnZhciBibHVlR3JleTUwMCA9IGV4cG9ydHMuYmx1ZUdyZXk1MDAgPSAnIzYwN2Q4Yic7XG52YXIgYmx1ZUdyZXk2MDAgPSBleHBvcnRzLmJsdWVHcmV5NjAwID0gJyM1NDZlN2EnO1xudmFyIGJsdWVHcmV5NzAwID0gZXhwb3J0cy5ibHVlR3JleTcwMCA9ICcjNDU1YTY0JztcbnZhciBibHVlR3JleTgwMCA9IGV4cG9ydHMuYmx1ZUdyZXk4MDAgPSAnIzM3NDc0Zic7XG52YXIgYmx1ZUdyZXk5MDAgPSBleHBvcnRzLmJsdWVHcmV5OTAwID0gJyMyNjMyMzgnO1xuXG52YXIgZ3JleTUwID0gZXhwb3J0cy5ncmV5NTAgPSAnI2ZhZmFmYSc7XG52YXIgZ3JleTEwMCA9IGV4cG9ydHMuZ3JleTEwMCA9ICcjZjVmNWY1JztcbnZhciBncmV5MjAwID0gZXhwb3J0cy5ncmV5MjAwID0gJyNlZWVlZWUnO1xudmFyIGdyZXkzMDAgPSBleHBvcnRzLmdyZXkzMDAgPSAnI2UwZTBlMCc7XG52YXIgZ3JleTQwMCA9IGV4cG9ydHMuZ3JleTQwMCA9ICcjYmRiZGJkJztcbnZhciBncmV5NTAwID0gZXhwb3J0cy5ncmV5NTAwID0gJyM5ZTllOWUnO1xudmFyIGdyZXk2MDAgPSBleHBvcnRzLmdyZXk2MDAgPSAnIzc1NzU3NSc7XG52YXIgZ3JleTcwMCA9IGV4cG9ydHMuZ3JleTcwMCA9ICcjNjE2MTYxJztcbnZhciBncmV5ODAwID0gZXhwb3J0cy5ncmV5ODAwID0gJyM0MjQyNDInO1xudmFyIGdyZXk5MDAgPSBleHBvcnRzLmdyZXk5MDAgPSAnIzIxMjEyMSc7XG5cbnZhciBibGFjayA9IGV4cG9ydHMuYmxhY2sgPSAnIzAwMDAwMCc7XG52YXIgd2hpdGUgPSBleHBvcnRzLndoaXRlID0gJyNmZmZmZmYnO1xuXG52YXIgdHJhbnNwYXJlbnQgPSBleHBvcnRzLnRyYW5zcGFyZW50ID0gJ3JnYmEoMCwgMCwgMCwgMCknO1xudmFyIGZ1bGxCbGFjayA9IGV4cG9ydHMuZnVsbEJsYWNrID0gJ3JnYmEoMCwgMCwgMCwgMSknO1xudmFyIGRhcmtCbGFjayA9IGV4cG9ydHMuZGFya0JsYWNrID0gJ3JnYmEoMCwgMCwgMCwgMC44NyknO1xudmFyIGxpZ2h0QmxhY2sgPSBleHBvcnRzLmxpZ2h0QmxhY2sgPSAncmdiYSgwLCAwLCAwLCAwLjU0KSc7XG52YXIgbWluQmxhY2sgPSBleHBvcnRzLm1pbkJsYWNrID0gJ3JnYmEoMCwgMCwgMCwgMC4yNiknO1xudmFyIGZhaW50QmxhY2sgPSBleHBvcnRzLmZhaW50QmxhY2sgPSAncmdiYSgwLCAwLCAwLCAwLjEyKSc7XG52YXIgZnVsbFdoaXRlID0gZXhwb3J0cy5mdWxsV2hpdGUgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKSc7XG52YXIgZGFya1doaXRlID0gZXhwb3J0cy5kYXJrV2hpdGUgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjg3KSc7XG52YXIgbGlnaHRXaGl0ZSA9IGV4cG9ydHMubGlnaHRXaGl0ZSA9ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNTQpJzsiLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKTtcblxudmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cbnZhciBfc3ltYm9sID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sXCIpO1xuXG52YXIgX3N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9pdGVyYXRvcjIuZGVmYXVsdCA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YoX2l0ZXJhdG9yMi5kZWZhdWx0KSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufTsiLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIHZhciBzZXRQcm9tcHQgPSBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7XG5cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICB2YXIgYXBwZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGV4cG9ydHMuY3JlYXRlTG9jYXRpb24gPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lID0gcmVxdWlyZSgncmVzb2x2ZS1wYXRobmFtZScpO1xuXG52YXIgX3Jlc29sdmVQYXRobmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXNvbHZlUGF0aG5hbWUpO1xuXG52YXIgX3ZhbHVlRXF1YWwgPSByZXF1aXJlKCd2YWx1ZS1lcXVhbCcpO1xuXG52YXIgX3ZhbHVlRXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsdWVFcXVhbCk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZUxvY2F0aW9uID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSAoMCwgX1BhdGhVdGlscy5wYXJzZVBhdGgpKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICgwLCBfcmVzb2x2ZVBhdGhuYW1lMi5kZWZhdWx0KShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxudmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiAoMCwgX3ZhbHVlRXF1YWwyLmRlZmF1bHQpKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoeCA9PT0geSkge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nIGZhbHNlXG4gKiB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIGFyZ3VtZW50cy5cbiAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHVyZSA9IHJlcXVpcmUoJ3JlY29tcG9zZS9wdXJlJyk7XG5cbnZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblxudmFyIF9TdmdJY29uID0gcmVxdWlyZSgnLi4vLi4vU3ZnSWNvbicpO1xuXG52YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBOYXZpZ2F0aW9uTW9yZVZlcnQgPSBmdW5jdGlvbiBOYXZpZ2F0aW9uTW9yZVZlcnQocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgIF9TdmdJY29uMi5kZWZhdWx0LFxuICAgIHByb3BzLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTEyIDhjMS4xIDAgMi0uOSAyLTJzLS45LTItMi0yLTIgLjktMiAyIC45IDIgMiAyem0wIDJjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0yem0wIDZjLTEuMSAwLTIgLjktMiAycy45IDIgMiAyIDItLjkgMi0yLS45LTItMi0yeicgfSlcbiAgKTtcbn07XG5OYXZpZ2F0aW9uTW9yZVZlcnQgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKE5hdmlnYXRpb25Nb3JlVmVydCk7XG5OYXZpZ2F0aW9uTW9yZVZlcnQuZGlzcGxheU5hbWUgPSAnTmF2aWdhdGlvbk1vcmVWZXJ0Jztcbk5hdmlnYXRpb25Nb3JlVmVydC5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBOYXZpZ2F0aW9uTW9yZVZlcnQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5NZW51SXRlbSA9IGV4cG9ydHMuSWNvbk1lbnUgPSB1bmRlZmluZWQ7XG5cbnZhciBfSWNvbk1lbnUyID0gcmVxdWlyZSgnLi9JY29uTWVudScpO1xuXG52YXIgX0ljb25NZW51MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ljb25NZW51Mik7XG5cbnZhciBfTWVudUl0ZW0yID0gcmVxdWlyZSgnLi4vTWVudUl0ZW0vTWVudUl0ZW0nKTtcblxudmFyIF9NZW51SXRlbTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZW51SXRlbTIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLkljb25NZW51ID0gX0ljb25NZW51My5kZWZhdWx0O1xuZXhwb3J0cy5NZW51SXRlbSA9IF9NZW51SXRlbTMuZGVmYXVsdDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9JY29uTWVudTMuZGVmYXVsdDsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsOyIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8pIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lOyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2hlYWRlci5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vaGVhZGVyLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vaGVhZGVyLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jaGFpbkZ1bmN0aW9uID0gcmVxdWlyZSgnY2hhaW4tZnVuY3Rpb24nKTtcblxudmFyIF9jaGFpbkZ1bmN0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NoYWluRnVuY3Rpb24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9DaGlsZE1hcHBpbmcgPSByZXF1aXJlKCcuL3V0aWxzL0NoaWxkTWFwcGluZycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBwcm9wVHlwZXMgPSB7XG4gIGNvbXBvbmVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIGNoaWxkRmFjdG9yeTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlXG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdzcGFuJyxcbiAgY2hpbGRGYWN0b3J5OiBmdW5jdGlvbiBjaGlsZEZhY3RvcnkoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH1cbn07XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uR3JvdXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVHJhbnNpdGlvbkdyb3VwKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMucGVyZm9ybUFwcGVhciA9IGZ1bmN0aW9uIChrZXksIGNvbXBvbmVudCkge1xuICAgICAgX3RoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSA9IHRydWU7XG5cbiAgICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50V2lsbEFwcGVhcikge1xuICAgICAgICBjb21wb25lbnQuY29tcG9uZW50V2lsbEFwcGVhcihfdGhpcy5faGFuZGxlRG9uZUFwcGVhcmluZy5iaW5kKF90aGlzLCBrZXksIGNvbXBvbmVudCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuX2hhbmRsZURvbmVBcHBlYXJpbmcoa2V5LCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5faGFuZGxlRG9uZUFwcGVhcmluZyA9IGZ1bmN0aW9uIChrZXksIGNvbXBvbmVudCkge1xuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRBcHBlYXIpIHtcbiAgICAgICAgY29tcG9uZW50LmNvbXBvbmVudERpZEFwcGVhcigpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgX3RoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XTtcblxuICAgICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSAoMCwgX0NoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcpKF90aGlzLnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgaWYgKCFjdXJyZW50Q2hpbGRNYXBwaW5nIHx8ICFjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgLy8gVGhpcyB3YXMgcmVtb3ZlZCBiZWZvcmUgaXQgaGFkIGZ1bGx5IGFwcGVhcmVkLiBSZW1vdmUgaXQuXG4gICAgICAgIF90aGlzLnBlcmZvcm1MZWF2ZShrZXksIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnBlcmZvcm1FbnRlciA9IGZ1bmN0aW9uIChrZXksIGNvbXBvbmVudCkge1xuICAgICAgX3RoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSA9IHRydWU7XG5cbiAgICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50V2lsbEVudGVyKSB7XG4gICAgICAgIGNvbXBvbmVudC5jb21wb25lbnRXaWxsRW50ZXIoX3RoaXMuX2hhbmRsZURvbmVFbnRlcmluZy5iaW5kKF90aGlzLCBrZXksIGNvbXBvbmVudCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuX2hhbmRsZURvbmVFbnRlcmluZyhrZXksIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLl9oYW5kbGVEb25lRW50ZXJpbmcgPSBmdW5jdGlvbiAoa2V5LCBjb21wb25lbnQpIHtcbiAgICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50RGlkRW50ZXIpIHtcbiAgICAgICAgY29tcG9uZW50LmNvbXBvbmVudERpZEVudGVyKCk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldO1xuXG4gICAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykoX3RoaXMucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAoIWN1cnJlbnRDaGlsZE1hcHBpbmcgfHwgIWN1cnJlbnRDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAvLyBUaGlzIHdhcyByZW1vdmVkIGJlZm9yZSBpdCBoYWQgZnVsbHkgZW50ZXJlZC4gUmVtb3ZlIGl0LlxuICAgICAgICBfdGhpcy5wZXJmb3JtTGVhdmUoa2V5LCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5wZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoa2V5LCBjb21wb25lbnQpIHtcbiAgICAgIF90aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0gPSB0cnVlO1xuXG4gICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudFdpbGxMZWF2ZSkge1xuICAgICAgICBjb21wb25lbnQuY29tcG9uZW50V2lsbExlYXZlKF90aGlzLl9oYW5kbGVEb25lTGVhdmluZy5iaW5kKF90aGlzLCBrZXksIGNvbXBvbmVudCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTm90ZSB0aGF0IHRoaXMgaXMgc29tZXdoYXQgZGFuZ2Vyb3VzIGIvYyBpdCBjYWxscyBzZXRTdGF0ZSgpXG4gICAgICAgIC8vIGFnYWluLCBlZmZlY3RpdmVseSBtdXRhdGluZyB0aGUgY29tcG9uZW50IGJlZm9yZSBhbGwgdGhlIHdvcmtcbiAgICAgICAgLy8gaXMgZG9uZS5cbiAgICAgICAgX3RoaXMuX2hhbmRsZURvbmVMZWF2aW5nKGtleSwgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX2hhbmRsZURvbmVMZWF2aW5nID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZExlYXZlKSB7XG4gICAgICAgIGNvbXBvbmVudC5jb21wb25lbnREaWRMZWF2ZSgpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgX3RoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XTtcblxuICAgICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSAoMCwgX0NoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcpKF90aGlzLnByb3BzLmNoaWxkcmVuKTtcblxuICAgICAgaWYgKGN1cnJlbnRDaGlsZE1hcHBpbmcgJiYgY3VycmVudENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIC8vIFRoaXMgZW50ZXJlZCBhZ2FpbiBiZWZvcmUgaXQgZnVsbHkgbGVmdC4gQWRkIGl0IGFnYWluLlxuICAgICAgICBfdGhpcy5rZXlzVG9FbnRlci5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICB2YXIgbmV3Q2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuICAgICAgICAgIGRlbGV0ZSBuZXdDaGlsZHJlbltrZXldO1xuICAgICAgICAgIHJldHVybiB7IGNoaWxkcmVuOiBuZXdDaGlsZHJlbiB9O1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuY2hpbGRSZWZzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY2hpbGRyZW46ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykocHJvcHMuY2hpbGRyZW4pXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzID0ge307XG4gICAgdGhpcy5rZXlzVG9FbnRlciA9IFtdO1xuICAgIHRoaXMua2V5c1RvTGVhdmUgPSBbXTtcbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdmFyIGluaXRpYWxDaGlsZE1hcHBpbmcgPSB0aGlzLnN0YXRlLmNoaWxkcmVuO1xuICAgIGZvciAodmFyIGtleSBpbiBpbml0aWFsQ2hpbGRNYXBwaW5nKSB7XG4gICAgICBpZiAoaW5pdGlhbENoaWxkTWFwcGluZ1trZXldKSB7XG4gICAgICAgIHRoaXMucGVyZm9ybUFwcGVhcihrZXksIHRoaXMuY2hpbGRSZWZzW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHZhciBuZXh0Q2hpbGRNYXBwaW5nID0gKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKShuZXh0UHJvcHMuY2hpbGRyZW4pO1xuICAgIHZhciBwcmV2Q2hpbGRNYXBwaW5nID0gdGhpcy5zdGF0ZS5jaGlsZHJlbjtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY2hpbGRyZW46ICgwLCBfQ2hpbGRNYXBwaW5nLm1lcmdlQ2hpbGRNYXBwaW5ncykocHJldkNoaWxkTWFwcGluZywgbmV4dENoaWxkTWFwcGluZylcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGtleSBpbiBuZXh0Q2hpbGRNYXBwaW5nKSB7XG4gICAgICB2YXIgaGFzUHJldiA9IHByZXZDaGlsZE1hcHBpbmcgJiYgcHJldkNoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgICAgaWYgKG5leHRDaGlsZE1hcHBpbmdba2V5XSAmJiAhaGFzUHJldiAmJiAhdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldKSB7XG4gICAgICAgIHRoaXMua2V5c1RvRW50ZXIucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rZXkgaW4gcHJldkNoaWxkTWFwcGluZykge1xuICAgICAgdmFyIGhhc05leHQgPSBuZXh0Q2hpbGRNYXBwaW5nICYmIG5leHRDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoX2tleSk7XG4gICAgICBpZiAocHJldkNoaWxkTWFwcGluZ1tfa2V5XSAmJiAhaGFzTmV4dCAmJiAhdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1tfa2V5XSkge1xuICAgICAgICB0aGlzLmtleXNUb0xlYXZlLnB1c2goX2tleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgd2Ugd2FudCB0byBzb21lZGF5IGNoZWNrIGZvciByZW9yZGVyaW5nLCB3ZSBjb3VsZCBkbyBpdCBoZXJlLlxuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGtleXNUb0VudGVyID0gdGhpcy5rZXlzVG9FbnRlcjtcbiAgICB0aGlzLmtleXNUb0VudGVyID0gW107XG4gICAga2V5c1RvRW50ZXIuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gX3RoaXMyLnBlcmZvcm1FbnRlcihrZXksIF90aGlzMi5jaGlsZFJlZnNba2V5XSk7XG4gICAgfSk7XG5cbiAgICB2YXIga2V5c1RvTGVhdmUgPSB0aGlzLmtleXNUb0xlYXZlO1xuICAgIHRoaXMua2V5c1RvTGVhdmUgPSBbXTtcbiAgICBrZXlzVG9MZWF2ZS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBfdGhpczIucGVyZm9ybUxlYXZlKGtleSwgX3RoaXMyLmNoaWxkUmVmc1trZXldKTtcbiAgICB9KTtcbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIC8vIFRPRE86IHdlIGNvdWxkIGdldCByaWQgb2YgdGhlIG5lZWQgZm9yIHRoZSB3cmFwcGVyIG5vZGVcbiAgICAvLyBieSBjbG9uaW5nIGEgc2luZ2xlIGNoaWxkXG4gICAgdmFyIGNoaWxkcmVuVG9SZW5kZXIgPSBbXTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGtleSkge1xuICAgICAgdmFyIGNoaWxkID0gX3RoaXMzLnN0YXRlLmNoaWxkcmVuW2tleV07XG4gICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgdmFyIGlzQ2FsbGJhY2tSZWYgPSB0eXBlb2YgY2hpbGQucmVmICE9PSAnc3RyaW5nJztcbiAgICAgICAgdmFyIGZhY3RvcnlDaGlsZCA9IF90aGlzMy5wcm9wcy5jaGlsZEZhY3RvcnkoY2hpbGQpO1xuICAgICAgICB2YXIgcmVmID0gZnVuY3Rpb24gcmVmKHIpIHtcbiAgICAgICAgICBfdGhpczMuY2hpbGRSZWZzW2tleV0gPSByO1xuICAgICAgICB9O1xuXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGlzQ2FsbGJhY2tSZWYsICdzdHJpbmcgcmVmcyBhcmUgbm90IHN1cHBvcnRlZCBvbiBjaGlsZHJlbiBvZiBUcmFuc2l0aW9uR3JvdXAgYW5kIHdpbGwgYmUgaWdub3JlZC4gJyArICdQbGVhc2UgdXNlIGEgY2FsbGJhY2sgcmVmIGluc3RlYWQ6IGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvcmVmcy1hbmQtdGhlLWRvbS5odG1sI3RoZS1yZWYtY2FsbGJhY2stYXR0cmlidXRlJykgOiB2b2lkIDA7XG5cbiAgICAgICAgLy8gQWx3YXlzIGNoYWluaW5nIHRoZSByZWZzIGxlYWRzIHRvIHByb2JsZW1zIHdoZW4gdGhlIGNoaWxkRmFjdG9yeVxuICAgICAgICAvLyB3cmFwcyB0aGUgY2hpbGQuIFRoZSBjaGlsZCByZWYgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgdHdpY2Ugd2l0aCB0aGVcbiAgICAgICAgLy8gd3JhcHBlciBhbmQgdGhlIGNoaWxkLiBTbyB3ZSBvbmx5IG5lZWQgdG8gY2hhaW4gdGhlIHJlZiBpZiB0aGVcbiAgICAgICAgLy8gZmFjdG9yeUNoaWxkIGlzIG5vdCBkaWZmZXJlbnQgZnJvbSBjaGlsZC5cbiAgICAgICAgaWYgKGZhY3RvcnlDaGlsZCA9PT0gY2hpbGQgJiYgaXNDYWxsYmFja1JlZikge1xuICAgICAgICAgIHJlZiA9ICgwLCBfY2hhaW5GdW5jdGlvbjIuZGVmYXVsdCkoY2hpbGQucmVmLCByZWYpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWW91IG1heSBuZWVkIHRvIGFwcGx5IHJlYWN0aXZlIHVwZGF0ZXMgdG8gYSBjaGlsZCBhcyBpdCBpcyBsZWF2aW5nLlxuICAgICAgICAvLyBUaGUgbm9ybWFsIFJlYWN0IHdheSB0byBkbyBpdCB3b24ndCB3b3JrIHNpbmNlIHRoZSBjaGlsZCB3aWxsIGhhdmVcbiAgICAgICAgLy8gYWxyZWFkeSBiZWVuIHJlbW92ZWQuIEluIGNhc2UgeW91IG5lZWQgdGhpcyBiZWhhdmlvciB5b3UgY2FuIHByb3ZpZGVcbiAgICAgICAgLy8gYSBjaGlsZEZhY3RvcnkgZnVuY3Rpb24gdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZVxuICAgICAgICAvLyBsZWF2aW5nLlxuICAgICAgICBjaGlsZHJlblRvUmVuZGVyLnB1c2goX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChmYWN0b3J5Q2hpbGQsIHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICByZWY6IHJlZlxuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnN0YXRlLmNoaWxkcmVuKSB7XG4gICAgICBfbG9vcChrZXkpO1xuICAgIH1cblxuICAgIC8vIERvIG5vdCBmb3J3YXJkIFRyYW5zaXRpb25Hcm91cCBwcm9wcyB0byBwcmltaXRpdmUgRE9NIG5vZGVzXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMpO1xuICAgIGRlbGV0ZSBwcm9wcy50cmFuc2l0aW9uTGVhdmU7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25OYW1lO1xuICAgIGRlbGV0ZSBwcm9wcy50cmFuc2l0aW9uQXBwZWFyO1xuICAgIGRlbGV0ZSBwcm9wcy50cmFuc2l0aW9uRW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmNoaWxkRmFjdG9yeTtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbkxlYXZlVGltZW91dDtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbkVudGVyVGltZW91dDtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbkFwcGVhclRpbWVvdXQ7XG4gICAgZGVsZXRlIHByb3BzLmNvbXBvbmVudDtcblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0aGlzLnByb3BzLmNvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuVG9SZW5kZXIpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uR3JvdXA7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAuZGlzcGxheU5hbWUgPSAnVHJhbnNpdGlvbkdyb3VwJztcblxuXG5UcmFuc2l0aW9uR3JvdXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUcmFuc2l0aW9uR3JvdXA7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZ2V0RGlzcGxheU5hbWUgPSByZXF1aXJlKCcuL2dldERpc3BsYXlOYW1lJyk7XG5cbnZhciBfZ2V0RGlzcGxheU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0RGlzcGxheU5hbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgd3JhcERpc3BsYXlOYW1lID0gZnVuY3Rpb24gd3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsIGhvY05hbWUpIHtcbiAgcmV0dXJuIGhvY05hbWUgKyAnKCcgKyAoMCwgX2dldERpc3BsYXlOYW1lMi5kZWZhdWx0KShCYXNlQ29tcG9uZW50KSArICcpJztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHdyYXBEaXNwbGF5TmFtZTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2V0U3RhdGljID0gcmVxdWlyZSgnLi9zZXRTdGF0aWMnKTtcblxudmFyIF9zZXRTdGF0aWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0U3RhdGljKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHNldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gc2V0RGlzcGxheU5hbWUoZGlzcGxheU5hbWUpIHtcbiAgcmV0dXJuICgwLCBfc2V0U3RhdGljMi5kZWZhdWx0KSgnZGlzcGxheU5hbWUnLCBkaXNwbGF5TmFtZSk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBzZXREaXNwbGF5TmFtZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9zaGFsbG93RXF1YWwgPSByZXF1aXJlKCdyZWNvbXBvc2Uvc2hhbGxvd0VxdWFsJyk7XG5cbnZhciBfc2hhbGxvd0VxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoYWxsb3dFcXVhbCk7XG5cbnZhciBfUG9wb3ZlciA9IHJlcXVpcmUoJy4uL1BvcG92ZXIvUG9wb3ZlcicpO1xuXG52YXIgX1BvcG92ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9wb3Zlcik7XG5cbnZhciBfY2hlY2sgPSByZXF1aXJlKCcuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9jaGVjaycpO1xuXG52YXIgX2NoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NoZWNrKTtcblxudmFyIF9MaXN0SXRlbSA9IHJlcXVpcmUoJy4uL0xpc3QvTGlzdEl0ZW0nKTtcblxudmFyIF9MaXN0SXRlbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaXN0SXRlbSk7XG5cbnZhciBfTWVudSA9IHJlcXVpcmUoJy4uL01lbnUvTWVudScpO1xuXG52YXIgX01lbnUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWVudSk7XG5cbnZhciBfcHJvcFR5cGVzMyA9IHJlcXVpcmUoJy4uL3V0aWxzL3Byb3BUeXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG5lc3RlZE1lbnVTdHlsZSA9IHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbn07XG5cbmZ1bmN0aW9uIGdldFN0eWxlcyhwcm9wcywgY29udGV4dCkge1xuICB2YXIgZGlzYWJsZWRDb2xvciA9IGNvbnRleHQubXVpVGhlbWUuYmFzZVRoZW1lLnBhbGV0dGUuZGlzYWJsZWRDb2xvcjtcbiAgdmFyIHRleHRDb2xvciA9IGNvbnRleHQubXVpVGhlbWUuYmFzZVRoZW1lLnBhbGV0dGUudGV4dENvbG9yO1xuICB2YXIgaW5kZW50ID0gcHJvcHMuZGVza3RvcCA/IDY0IDogNzI7XG4gIHZhciBzaWRlUGFkZGluZyA9IHByb3BzLmRlc2t0b3AgPyAyNCA6IDE2O1xuXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcm9vdDoge1xuICAgICAgY29sb3I6IHByb3BzLmRpc2FibGVkID8gZGlzYWJsZWRDb2xvciA6IHRleHRDb2xvcixcbiAgICAgIGN1cnNvcjogcHJvcHMuZGlzYWJsZWQgPyAnZGVmYXVsdCcgOiAncG9pbnRlcicsXG4gICAgICBtaW5IZWlnaHQ6IHByb3BzLmRlc2t0b3AgPyAnMzJweCcgOiAnNDhweCcsXG4gICAgICBsaW5lSGVpZ2h0OiBwcm9wcy5kZXNrdG9wID8gJzMycHgnIDogJzQ4cHgnLFxuICAgICAgZm9udFNpemU6IHByb3BzLmRlc2t0b3AgPyAxNSA6IDE2LFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgaW5uZXJEaXZTdHlsZToge1xuICAgICAgcGFkZGluZ0xlZnQ6IHByb3BzLmxlZnRJY29uIHx8IHByb3BzLmluc2V0Q2hpbGRyZW4gfHwgcHJvcHMuY2hlY2tlZCA/IGluZGVudCA6IHNpZGVQYWRkaW5nLFxuICAgICAgcGFkZGluZ1JpZ2h0OiBwcm9wcy5yaWdodEljb24gPyBpbmRlbnQgOiBzaWRlUGFkZGluZyxcbiAgICAgIHBhZGRpbmdCb3R0b206IDAsXG4gICAgICBwYWRkaW5nVG9wOiAwXG4gICAgfSxcblxuICAgIHNlY29uZGFyeVRleHQ6IHtcbiAgICAgIGZsb2F0OiAncmlnaHQnXG4gICAgfSxcblxuICAgIGxlZnRJY29uRGVza3RvcDoge1xuICAgICAgbWFyZ2luOiAwLFxuICAgICAgbGVmdDogMjQsXG4gICAgICB0b3A6IDRcbiAgICB9LFxuXG4gICAgcmlnaHRJY29uRGVza3RvcDoge1xuICAgICAgbWFyZ2luOiAwLFxuICAgICAgcmlnaHQ6IDI0LFxuICAgICAgdG9wOiA0LFxuICAgICAgZmlsbDogY29udGV4dC5tdWlUaGVtZS5tZW51SXRlbS5yaWdodEljb25EZXNrdG9wRmlsbFxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc3R5bGVzO1xufVxuXG52YXIgTWVudUl0ZW0gPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShNZW51SXRlbSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVudUl0ZW0oKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgTWVudUl0ZW0pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gTWVudUl0ZW0uX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKE1lbnVJdGVtKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBvcGVuOiBmYWxzZVxuICAgIH0sIF90aGlzLmNsb25lTWVudUl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoaXRlbSwge1xuICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKCFpdGVtLnByb3BzLm1lbnVJdGVtcykge1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlUmVxdWVzdENsb3NlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGl0ZW0ucHJvcHMub25DbGljaykge1xuICAgICAgICAgICAgaXRlbS5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG9wZW46IHRydWUsXG4gICAgICAgIGFuY2hvckVsOiBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoX3RoaXMpXG4gICAgICB9KTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25DbGljayhldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlUmVxdWVzdENsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiBmYWxzZSxcbiAgICAgICAgYW5jaG9yRWw6IG51bGxcbiAgICAgIH0pO1xuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShNZW51SXRlbSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5hcHBseUZvY3VzU3RhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLm9wZW4gJiYgbmV4dFByb3BzLmZvY3VzU3RhdGUgPT09ICdub25lJykge1xuICAgICAgICB0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgICAgIHJldHVybiAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpIHx8ICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5jb250ZXh0LCBuZXh0Q29udGV4dCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdGhpcy5hcHBseUZvY3VzU3RhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUub3Blbikge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBvcGVuOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhcHBseUZvY3VzU3RhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUZvY3VzU3RhdGUoKSB7XG4gICAgICB0aGlzLnJlZnMubGlzdEl0ZW0uYXBwbHlGb2N1c1N0YXRlKHRoaXMucHJvcHMuZm9jdXNTdGF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hlY2tlZCA9IF9wcm9wcy5jaGVja2VkLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGRlc2t0b3AgPSBfcHJvcHMuZGVza3RvcCxcbiAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBmb2N1c1N0YXRlID0gX3Byb3BzLmZvY3VzU3RhdGUsXG4gICAgICAgICAgaW5uZXJEaXZTdHlsZSA9IF9wcm9wcy5pbm5lckRpdlN0eWxlLFxuICAgICAgICAgIGluc2V0Q2hpbGRyZW4gPSBfcHJvcHMuaW5zZXRDaGlsZHJlbixcbiAgICAgICAgICBsZWZ0SWNvbiA9IF9wcm9wcy5sZWZ0SWNvbixcbiAgICAgICAgICBtZW51SXRlbXMgPSBfcHJvcHMubWVudUl0ZW1zLFxuICAgICAgICAgIHJpZ2h0SWNvbiA9IF9wcm9wcy5yaWdodEljb24sXG4gICAgICAgICAgc2Vjb25kYXJ5VGV4dCA9IF9wcm9wcy5zZWNvbmRhcnlUZXh0LFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIGFuaW1hdGlvbiA9IF9wcm9wcy5hbmltYXRpb24sXG4gICAgICAgICAgYW5jaG9yT3JpZ2luID0gX3Byb3BzLmFuY2hvck9yaWdpbixcbiAgICAgICAgICB0YXJnZXRPcmlnaW4gPSBfcHJvcHMudGFyZ2V0T3JpZ2luLFxuICAgICAgICAgIHZhbHVlID0gX3Byb3BzLnZhbHVlLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3Byb3BzLCBbJ2NoZWNrZWQnLCAnY2hpbGRyZW4nLCAnZGVza3RvcCcsICdkaXNhYmxlZCcsICdmb2N1c1N0YXRlJywgJ2lubmVyRGl2U3R5bGUnLCAnaW5zZXRDaGlsZHJlbicsICdsZWZ0SWNvbicsICdtZW51SXRlbXMnLCAncmlnaHRJY29uJywgJ3NlY29uZGFyeVRleHQnLCAnc3R5bGUnLCAnYW5pbWF0aW9uJywgJ2FuY2hvck9yaWdpbicsICd0YXJnZXRPcmlnaW4nLCAndmFsdWUnXSk7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG4gICAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCk7XG4gICAgICB2YXIgbWVyZ2VkUm9vdFN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpO1xuICAgICAgdmFyIG1lcmdlZElubmVyRGl2U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5pbm5lckRpdlN0eWxlLCBpbm5lckRpdlN0eWxlKTtcblxuICAgICAgLy8gTGVmdCBJY29uXG4gICAgICB2YXIgbGVmdEljb25FbGVtZW50ID0gbGVmdEljb24gPyBsZWZ0SWNvbiA6IGNoZWNrZWQgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2hlY2syLmRlZmF1bHQsIG51bGwpIDogbnVsbDtcbiAgICAgIGlmIChsZWZ0SWNvbkVsZW1lbnQpIHtcbiAgICAgICAgdmFyIG1lcmdlZExlZnRJY29uU3R5bGVzID0gZGVza3RvcCA/ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMubGVmdEljb25EZXNrdG9wLCBsZWZ0SWNvbkVsZW1lbnQucHJvcHMuc3R5bGUpIDogbGVmdEljb25FbGVtZW50LnByb3BzLnN0eWxlO1xuICAgICAgICBsZWZ0SWNvbkVsZW1lbnQgPSBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGxlZnRJY29uRWxlbWVudCwgeyBzdHlsZTogbWVyZ2VkTGVmdEljb25TdHlsZXMgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJpZ2h0IEljb25cbiAgICAgIHZhciByaWdodEljb25FbGVtZW50ID0gdm9pZCAwO1xuICAgICAgaWYgKHJpZ2h0SWNvbikge1xuICAgICAgICB2YXIgbWVyZ2VkUmlnaHRJY29uU3R5bGVzID0gZGVza3RvcCA/ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucmlnaHRJY29uRGVza3RvcCwgcmlnaHRJY29uLnByb3BzLnN0eWxlKSA6IHJpZ2h0SWNvbi5wcm9wcy5zdHlsZTtcbiAgICAgICAgcmlnaHRJY29uRWxlbWVudCA9IF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQocmlnaHRJY29uLCB7IHN0eWxlOiBtZXJnZWRSaWdodEljb25TdHlsZXMgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlY29uZGFyeSBUZXh0XG4gICAgICB2YXIgc2Vjb25kYXJ5VGV4dEVsZW1lbnQgPSB2b2lkIDA7XG4gICAgICBpZiAoc2Vjb25kYXJ5VGV4dCkge1xuICAgICAgICB2YXIgc2Vjb25kYXJ5VGV4dElzQW5FbGVtZW50ID0gX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KHNlY29uZGFyeVRleHQpO1xuICAgICAgICB2YXIgbWVyZ2VkU2Vjb25kYXJ5VGV4dFN0eWxlcyA9IHNlY29uZGFyeVRleHRJc0FuRWxlbWVudCA/ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMuc2Vjb25kYXJ5VGV4dCwgc2Vjb25kYXJ5VGV4dC5wcm9wcy5zdHlsZSkgOiBudWxsO1xuXG4gICAgICAgIHNlY29uZGFyeVRleHRFbGVtZW50ID0gc2Vjb25kYXJ5VGV4dElzQW5FbGVtZW50ID8gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChzZWNvbmRhcnlUZXh0LCB7IHN0eWxlOiBtZXJnZWRTZWNvbmRhcnlUZXh0U3R5bGVzIH0pIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogcHJlcGFyZVN0eWxlcyhzdHlsZXMuc2Vjb25kYXJ5VGV4dCkgfSxcbiAgICAgICAgICBzZWNvbmRhcnlUZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRNZW51UG9wb3ZlciA9IHZvaWQgMDtcbiAgICAgIGlmIChtZW51SXRlbXMpIHtcbiAgICAgICAgY2hpbGRNZW51UG9wb3ZlciA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIF9Qb3BvdmVyMi5kZWZhdWx0LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjogYW5pbWF0aW9uLFxuICAgICAgICAgICAgYW5jaG9yT3JpZ2luOiBhbmNob3JPcmlnaW4sXG4gICAgICAgICAgICBhbmNob3JFbDogdGhpcy5zdGF0ZS5hbmNob3JFbCxcbiAgICAgICAgICAgIG9wZW46IHRoaXMuc3RhdGUub3BlbixcbiAgICAgICAgICAgIHRhcmdldE9yaWdpbjogdGFyZ2V0T3JpZ2luLFxuICAgICAgICAgICAgdXNlTGF5ZXJGb3JDbGlja0F3YXk6IGZhbHNlLFxuICAgICAgICAgICAgb25SZXF1ZXN0Q2xvc2U6IHRoaXMuaGFuZGxlUmVxdWVzdENsb3NlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIF9NZW51Mi5kZWZhdWx0LFxuICAgICAgICAgICAgeyBkZXNrdG9wOiBkZXNrdG9wLCBkaXNhYmxlZDogZGlzYWJsZWQsIHN0eWxlOiBuZXN0ZWRNZW51U3R5bGUgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5tYXAobWVudUl0ZW1zLCB0aGlzLmNsb25lTWVudUl0ZW0pXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICBvdGhlci5vbkNsaWNrID0gdGhpcy5oYW5kbGVDbGljaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfTGlzdEl0ZW0yLmRlZmF1bHQsXG4gICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCB7XG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgIGhvdmVyQ29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5tZW51SXRlbS5ob3ZlckNvbG9yLFxuICAgICAgICAgIGlubmVyRGl2U3R5bGU6IG1lcmdlZElubmVyRGl2U3R5bGVzLFxuICAgICAgICAgIGluc2V0Q2hpbGRyZW46IGluc2V0Q2hpbGRyZW4sXG4gICAgICAgICAgbGVmdEljb246IGxlZnRJY29uRWxlbWVudCxcbiAgICAgICAgICByZWY6ICdsaXN0SXRlbScsXG4gICAgICAgICAgcmlnaHRJY29uOiByaWdodEljb25FbGVtZW50LFxuICAgICAgICAgIHJvbGU6ICdtZW51aXRlbScsXG4gICAgICAgICAgc3R5bGU6IG1lcmdlZFJvb3RTdHlsZXNcbiAgICAgICAgfSksXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBzZWNvbmRhcnlUZXh0RWxlbWVudCxcbiAgICAgICAgY2hpbGRNZW51UG9wb3ZlclxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE1lbnVJdGVtO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuTWVudUl0ZW0ubXVpTmFtZSA9ICdNZW51SXRlbSc7XG5NZW51SXRlbS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuY2hvck9yaWdpbjogeyBob3Jpem9udGFsOiAncmlnaHQnLCB2ZXJ0aWNhbDogJ3RvcCcgfSxcbiAgY2hlY2tlZDogZmFsc2UsXG4gIGRlc2t0b3A6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIGZvY3VzU3RhdGU6ICdub25lJyxcbiAgaW5zZXRDaGlsZHJlbjogZmFsc2UsXG4gIHRhcmdldE9yaWdpbjogeyBob3Jpem9udGFsOiAnbGVmdCcsIHZlcnRpY2FsOiAndG9wJyB9XG59O1xuTWVudUl0ZW0uY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcbk1lbnVJdGVtLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIExvY2F0aW9uIG9mIHRoZSBhbmNob3IgZm9yIHRoZSBwb3BvdmVyIG9mIG5lc3RlZCBgTWVudUl0ZW1gXG4gICAqIGVsZW1lbnRzLlxuICAgKiBPcHRpb25zOlxuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgbWlkZGxlLCByaWdodF1cbiAgICogdmVydGljYWw6IFt0b3AsIGNlbnRlciwgYm90dG9tXS5cbiAgICovXG4gIGFuY2hvck9yaWdpbjogX3Byb3BUeXBlczQuZGVmYXVsdC5vcmlnaW4sXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgZGVmYXVsdCBhbmltYXRpb24gY29tcG9uZW50IHVzZWQuXG4gICAqL1xuICBhbmltYXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIElmIHRydWUsIGEgbGVmdCBjaGVjayBtYXJrIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBjaGVja2VkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBFbGVtZW50cyBwYXNzZWQgYXMgY2hpbGRyZW4gdG8gdGhlIHVuZGVybHlpbmcgYExpc3RJdGVtYC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIElmIHRydWUsIHRoZSBtZW51IGl0ZW0gd2lsbCByZW5kZXIgd2l0aCBjb21wYWN0IGRlc2t0b3BcbiAgICogc3R5bGVzLlxuICAgKi9cbiAgZGVza3RvcDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIG1lbnUgaXRlbSB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBmb2N1cyBzdGF0ZSBvZiB0aGUgbWVudSBpdGVtLiBUaGlzIHByb3AgaXMgdXNlZCB0byBzZXQgdGhlIGZvY3VzXG4gICAqIHN0YXRlIG9mIHRoZSB1bmRlcmx5aW5nIGBMaXN0SXRlbWAuXG4gICAqL1xuICBmb2N1c1N0YXRlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsnbm9uZScsICdmb2N1c2VkJywgJ2tleWJvYXJkLWZvY3VzZWQnXSksXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgaW5uZXIgZGl2LlxuICAgKi9cbiAgaW5uZXJEaXZTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgY2hpbGRyZW4gd2lsbCBiZSBpbmRlbnRlZC5cbiAgICogVGhpcyBpcyBvbmx5IG5lZWRlZCB3aGVuIHRoZXJlIGlzIG5vIGBsZWZ0SWNvbmAuXG4gICAqL1xuICBpbnNldENoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgYFN2Z0ljb25gIG9yIGBGb250SWNvbmAgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSBsZWZ0IHNpZGUuXG4gICAqL1xuICBsZWZ0SWNvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogYE1lbnVJdGVtYCBlbGVtZW50cyB0byBuZXN0IHdpdGhpbiB0aGUgbWVudSBpdGVtLlxuICAgKi9cbiAgbWVudUl0ZW1zOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBtZW51IGl0ZW0gaXMgY2xpY2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IENsaWNrIGV2ZW50IHRhcmdldGluZyB0aGUgbWVudSBpdGVtLlxuICAgKi9cbiAgb25DbGljazogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FuIGJlIHVzZWQgdG8gcmVuZGVyIHByaW1hcnkgdGV4dCB3aXRoaW4gdGhlIG1lbnUgaXRlbS5cbiAgICovXG4gIHByaW1hcnlUZXh0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgYFN2Z0ljb25gIG9yIGBGb250SWNvbmAgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSByaWdodCBzaWRlLlxuICAgKi9cbiAgcmlnaHRJY29uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBDYW4gYmUgdXNlZCB0byByZW5kZXIgc2Vjb25kYXJ5IHRleHQgd2l0aGluIHRoZSBtZW51IGl0ZW0uXG4gICAqL1xuICBzZWNvbmRhcnlUZXh0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogTG9jYXRpb24gb24gdGhlIHBvcG92ZXIgb2YgbmVzdGVkIGBNZW51SXRlbWAgZWxlbWVudHMgdGhhdCB3aWxsIGF0dGFjaFxuICAgKiB0byB0aGUgYW5jaG9yJ3Mgb3JpZ2luLlxuICAgKiBPcHRpb25zOlxuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgbWlkZGxlLCByaWdodF1cbiAgICogdmVydGljYWw6IFt0b3AsIGNlbnRlciwgYm90dG9tXS5cbiAgICovXG4gIHRhcmdldE9yaWdpbjogX3Byb3BUeXBlczQuZGVmYXVsdC5vcmlnaW4sXG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIG1lbnUgaXRlbS5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueVxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gTWVudUl0ZW07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIGlzRGVzY2VuZGFudDogZnVuY3Rpb24gaXNEZXNjZW5kYW50KHBhcmVudCwgY2hpbGQpIHtcbiAgICB2YXIgbm9kZSA9IGNoaWxkLnBhcmVudE5vZGU7XG5cbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKG5vZGUgPT09IHBhcmVudCkgcmV0dXJuIHRydWU7XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgb2Zmc2V0OiBmdW5jdGlvbiBvZmZzZXQoZWwpIHtcbiAgICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IHJlY3QudG9wICsgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AsXG4gICAgICBsZWZ0OiByZWN0LmxlZnQgKyBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnRcbiAgICB9O1xuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3JlYWN0RXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoJ3JlYWN0LWV2ZW50LWxpc3RlbmVyJyk7XG5cbnZhciBfcmVhY3RFdmVudExpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RXZlbnRMaXN0ZW5lcik7XG5cbnZhciBfUmVuZGVyVG9MYXllciA9IHJlcXVpcmUoJy4uL2ludGVybmFsL1JlbmRlclRvTGF5ZXInKTtcblxudmFyIF9SZW5kZXJUb0xheWVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlbmRlclRvTGF5ZXIpO1xuXG52YXIgX3Byb3BUeXBlczMgPSByZXF1aXJlKCcuLi91dGlscy9wcm9wVHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMyk7XG5cbnZhciBfUGFwZXIgPSByZXF1aXJlKCcuLi9QYXBlcicpO1xuXG52YXIgX1BhcGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BhcGVyKTtcblxudmFyIF9sb2Rhc2ggPSByZXF1aXJlKCdsb2Rhc2gudGhyb3R0bGUnKTtcblxudmFyIF9sb2Rhc2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9kYXNoKTtcblxudmFyIF9Qb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCA9IHJlcXVpcmUoJy4vUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQnKTtcblxudmFyIF9Qb3BvdmVyQW5pbWF0aW9uRGVmYXVsdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzdHlsZXMgPSB7XG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnbm9uZSdcbiAgfVxufTtcblxudmFyIFBvcG92ZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShQb3BvdmVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3BvdmVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUG9wb3Zlcik7XG5cbiAgICB2YXIgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChQb3BvdmVyLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShQb3BvdmVyKSkuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMudGltZW91dCA9IG51bGw7XG5cbiAgICBfdGhpcy5yZW5kZXJMYXllciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGFuaW1hdGVkID0gX3RoaXMkcHJvcHMuYW5pbWF0ZWQsXG4gICAgICAgICAgYW5pbWF0aW9uID0gX3RoaXMkcHJvcHMuYW5pbWF0aW9uLFxuICAgICAgICAgIGFuY2hvckVsID0gX3RoaXMkcHJvcHMuYW5jaG9yRWwsXG4gICAgICAgICAgYW5jaG9yT3JpZ2luID0gX3RoaXMkcHJvcHMuYW5jaG9yT3JpZ2luLFxuICAgICAgICAgIGF1dG9DbG9zZVdoZW5PZmZTY3JlZW4gPSBfdGhpcyRwcm9wcy5hdXRvQ2xvc2VXaGVuT2ZmU2NyZWVuLFxuICAgICAgICAgIGNhbkF1dG9Qb3NpdGlvbiA9IF90aGlzJHByb3BzLmNhbkF1dG9Qb3NpdGlvbixcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIG9uUmVxdWVzdENsb3NlID0gX3RoaXMkcHJvcHMub25SZXF1ZXN0Q2xvc2UsXG4gICAgICAgICAgc3R5bGUgPSBfdGhpcyRwcm9wcy5zdHlsZSxcbiAgICAgICAgICB0YXJnZXRPcmlnaW4gPSBfdGhpcyRwcm9wcy50YXJnZXRPcmlnaW4sXG4gICAgICAgICAgdXNlTGF5ZXJGb3JDbGlja0F3YXkgPSBfdGhpcyRwcm9wcy51c2VMYXllckZvckNsaWNrQXdheSxcbiAgICAgICAgICBzY3JvbGxhYmxlQ29udGFpbmVyID0gX3RoaXMkcHJvcHMuc2Nyb2xsYWJsZUNvbnRhaW5lcixcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbJ2FuaW1hdGVkJywgJ2FuaW1hdGlvbicsICdhbmNob3JFbCcsICdhbmNob3JPcmlnaW4nLCAnYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbicsICdjYW5BdXRvUG9zaXRpb24nLCAnY2hpbGRyZW4nLCAnb25SZXF1ZXN0Q2xvc2UnLCAnc3R5bGUnLCAndGFyZ2V0T3JpZ2luJywgJ3VzZUxheWVyRm9yQ2xpY2tBd2F5JywgJ3Njcm9sbGFibGVDb250YWluZXInXSk7XG5cblxuICAgICAgdmFyIHN0eWxlUm9vdCA9IHN0eWxlO1xuXG4gICAgICBpZiAoIWFuaW1hdGVkKSB7XG4gICAgICAgIHN0eWxlUm9vdCA9IHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgICB6SW5kZXg6IF90aGlzLmNvbnRleHQubXVpVGhlbWUuekluZGV4LnBvcG92ZXJcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIV90aGlzLnN0YXRlLm9wZW4pIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfUGFwZXIyLmRlZmF1bHQsXG4gICAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7IHN0eWxlOiAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVSb290LCBzdHlsZSkgfSwgb3RoZXIpLFxuICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHZhciBBbmltYXRpb24gPSBhbmltYXRpb24gfHwgX1BvcG92ZXJBbmltYXRpb25EZWZhdWx0Mi5kZWZhdWx0O1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIEFuaW1hdGlvbixcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgICAgdGFyZ2V0T3JpZ2luOiB0YXJnZXRPcmlnaW4sXG4gICAgICAgICAgc3R5bGU6IHN0eWxlUm9vdFxuICAgICAgICB9LCBvdGhlciwge1xuICAgICAgICAgIG9wZW46IF90aGlzLnN0YXRlLm9wZW4gJiYgIV90aGlzLnN0YXRlLmNsb3NpbmdcbiAgICAgICAgfSksXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH07XG5cbiAgICBfdGhpcy5jb21wb25lbnRDbGlja0F3YXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5yZXF1ZXN0Q2xvc2UoJ2NsaWNrQXdheScpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRQbGFjZW1lbnQgPSBmdW5jdGlvbiAoc2Nyb2xsaW5nKSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLm9wZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV90aGlzLnBvcG92ZXJSZWZzLmxheWVyLmdldExheWVyKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFyZ2V0RWwgPSBfdGhpcy5wb3BvdmVyUmVmcy5sYXllci5nZXRMYXllcigpLmNoaWxkcmVuWzBdO1xuICAgICAgaWYgKCF0YXJnZXRFbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICB0YXJnZXRPcmlnaW4gPSBfdGhpcyRwcm9wczIudGFyZ2V0T3JpZ2luLFxuICAgICAgICAgIGFuY2hvck9yaWdpbiA9IF90aGlzJHByb3BzMi5hbmNob3JPcmlnaW47XG5cbiAgICAgIHZhciBhbmNob3JFbCA9IF90aGlzLnByb3BzLmFuY2hvckVsIHx8IF90aGlzLmFuY2hvckVsO1xuXG4gICAgICB2YXIgYW5jaG9yID0gX3RoaXMuZ2V0QW5jaG9yUG9zaXRpb24oYW5jaG9yRWwpO1xuICAgICAgdmFyIHRhcmdldCA9IF90aGlzLmdldFRhcmdldFBvc2l0aW9uKHRhcmdldEVsKTtcblxuICAgICAgdmFyIHRhcmdldFBvc2l0aW9uID0ge1xuICAgICAgICB0b3A6IGFuY2hvclthbmNob3JPcmlnaW4udmVydGljYWxdIC0gdGFyZ2V0W3RhcmdldE9yaWdpbi52ZXJ0aWNhbF0sXG4gICAgICAgIGxlZnQ6IGFuY2hvclthbmNob3JPcmlnaW4uaG9yaXpvbnRhbF0gLSB0YXJnZXRbdGFyZ2V0T3JpZ2luLmhvcml6b250YWxdXG4gICAgICB9O1xuXG4gICAgICBpZiAoc2Nyb2xsaW5nICYmIF90aGlzLnByb3BzLmF1dG9DbG9zZVdoZW5PZmZTY3JlZW4pIHtcbiAgICAgICAgX3RoaXMuYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbihhbmNob3IpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuY2FuQXV0b1Bvc2l0aW9uKSB7XG4gICAgICAgIHRhcmdldCA9IF90aGlzLmdldFRhcmdldFBvc2l0aW9uKHRhcmdldEVsKTsgLy8gdXBkYXRlIGFzIGhlaWdodCBtYXkgaGF2ZSBjaGFuZ2VkXG4gICAgICAgIHRhcmdldFBvc2l0aW9uID0gX3RoaXMuYXBwbHlBdXRvUG9zaXRpb25JZk5lZWRlZChhbmNob3IsIHRhcmdldCwgdGFyZ2V0T3JpZ2luLCBhbmNob3JPcmlnaW4sIHRhcmdldFBvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0RWwuc3R5bGUudG9wID0gdGFyZ2V0UG9zaXRpb24udG9wICsgJ3B4JztcbiAgICAgIHRhcmdldEVsLnN0eWxlLmxlZnQgPSB0YXJnZXRQb3NpdGlvbi5sZWZ0ICsgJ3B4JztcbiAgICAgIHRhcmdldEVsLnN0eWxlLm1heEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCArICdweCc7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlc2l6ZSA9ICgwLCBfbG9kYXNoMi5kZWZhdWx0KShfdGhpcy5zZXRQbGFjZW1lbnQsIDEwMCk7XG4gICAgX3RoaXMuaGFuZGxlU2Nyb2xsID0gKDAsIF9sb2Rhc2gyLmRlZmF1bHQpKF90aGlzLnNldFBsYWNlbWVudC5iaW5kKF90aGlzLCB0cnVlKSwgNTApO1xuXG4gICAgX3RoaXMucG9wb3ZlclJlZnMgPSB7fTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgb3BlbjogcHJvcHMub3BlbixcbiAgICAgIGNsb3Npbmc6IGZhbHNlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQb3BvdmVyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnBsYWNlbWVudFRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuc2V0UGxhY2VtZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAobmV4dFByb3BzLm9wZW4gPT09IHRoaXMucHJvcHMub3Blbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0UHJvcHMub3Blbikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5hbmNob3JFbCA9IG5leHRQcm9wcy5hbmNob3JFbCB8fCB0aGlzLnByb3BzLmFuY2hvckVsO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICAgIGNsb3Npbmc6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5hbmltYXRlZCkge1xuICAgICAgICAgIGlmICh0aGlzLnRpbWVvdXQgIT09IG51bGwpIHJldHVybjtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgY2xvc2luZzogdHJ1ZSB9KTtcbiAgICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIG9wZW46IGZhbHNlXG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF90aGlzMi50aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBvcGVuOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucGxhY2VtZW50VGltZW91dCk7XG4gICAgICB0aGlzLnBsYWNlbWVudFRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuc2V0UGxhY2VtZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5oYW5kbGVSZXNpemUuY2FuY2VsKCk7XG4gICAgICB0aGlzLmhhbmRsZVNjcm9sbC5jYW5jZWwoKTtcblxuICAgICAgaWYgKHRoaXMucGxhY2VtZW50VGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wbGFjZW1lbnRUaW1lb3V0KTtcbiAgICAgICAgdGhpcy5wbGFjZW1lbnRUaW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZXF1ZXN0Q2xvc2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0Q2xvc2UocmVhc29uKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vblJlcXVlc3RDbG9zZSkge1xuICAgICAgICB0aGlzLnByb3BzLm9uUmVxdWVzdENsb3NlKHJlYXNvbik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0QW5jaG9yUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbmNob3JQb3NpdGlvbihlbCkge1xuICAgICAgaWYgKCFlbCkge1xuICAgICAgICBlbCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBhID0ge1xuICAgICAgICB0b3A6IHJlY3QudG9wLFxuICAgICAgICBsZWZ0OiByZWN0LmxlZnQsXG4gICAgICAgIHdpZHRoOiBlbC5vZmZzZXRXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBlbC5vZmZzZXRIZWlnaHRcbiAgICAgIH07XG5cbiAgICAgIGEucmlnaHQgPSByZWN0LnJpZ2h0IHx8IGEubGVmdCArIGEud2lkdGg7XG4gICAgICBhLmJvdHRvbSA9IHJlY3QuYm90dG9tIHx8IGEudG9wICsgYS5oZWlnaHQ7XG4gICAgICBhLm1pZGRsZSA9IGEubGVmdCArIChhLnJpZ2h0IC0gYS5sZWZ0KSAvIDI7XG4gICAgICBhLmNlbnRlciA9IGEudG9wICsgKGEuYm90dG9tIC0gYS50b3ApIC8gMjtcblxuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VGFyZ2V0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUYXJnZXRQb3NpdGlvbih0YXJnZXRFbCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBjZW50ZXI6IHRhcmdldEVsLm9mZnNldEhlaWdodCAvIDIsXG4gICAgICAgIGJvdHRvbTogdGFyZ2V0RWwub2Zmc2V0SGVpZ2h0LFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBtaWRkbGU6IHRhcmdldEVsLm9mZnNldFdpZHRoIC8gMixcbiAgICAgICAgcmlnaHQ6IHRhcmdldEVsLm9mZnNldFdpZHRoXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2F1dG9DbG9zZVdoZW5PZmZTY3JlZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhdXRvQ2xvc2VXaGVuT2ZmU2NyZWVuKGFuY2hvclBvc2l0aW9uKSB7XG4gICAgICBpZiAoYW5jaG9yUG9zaXRpb24udG9wIDwgMCB8fCBhbmNob3JQb3NpdGlvbi50b3AgPiB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgYW5jaG9yUG9zaXRpb24ubGVmdCA8IDAgfHwgYW5jaG9yUG9zaXRpb24ubGVmdCA+IHdpbmRvdy5pbm5lcldpZHRoKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdENsb3NlKCdvZmZTY3JlZW4nKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRPdmVybGFwTW9kZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE92ZXJsYXBNb2RlKGFuY2hvciwgdGFyZ2V0LCBtZWRpYW4pIHtcbiAgICAgIGlmIChbYW5jaG9yLCB0YXJnZXRdLmluZGV4T2YobWVkaWFuKSA+PSAwKSByZXR1cm4gJ2F1dG8nO1xuICAgICAgaWYgKGFuY2hvciA9PT0gdGFyZ2V0KSByZXR1cm4gJ2luY2x1c2l2ZSc7XG4gICAgICByZXR1cm4gJ2V4Y2x1c2l2ZSc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0UG9zaXRpb25zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UG9zaXRpb25zKGFuY2hvciwgdGFyZ2V0KSB7XG4gICAgICB2YXIgYSA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIGFuY2hvcik7XG4gICAgICB2YXIgdCA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHRhcmdldCk7XG5cbiAgICAgIHZhciBwb3NpdGlvbnMgPSB7XG4gICAgICAgIHg6IFsnbGVmdCcsICdyaWdodCddLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICAgICAgICAgIHJldHVybiBwICE9PSB0Lmhvcml6b250YWw7XG4gICAgICAgIH0pLFxuICAgICAgICB5OiBbJ3RvcCcsICdib3R0b20nXS5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICByZXR1cm4gcCAhPT0gdC52ZXJ0aWNhbDtcbiAgICAgICAgfSlcbiAgICAgIH07XG5cbiAgICAgIHZhciBvdmVybGFwID0ge1xuICAgICAgICB4OiB0aGlzLmdldE92ZXJsYXBNb2RlKGEuaG9yaXpvbnRhbCwgdC5ob3Jpem9udGFsLCAnbWlkZGxlJyksXG4gICAgICAgIHk6IHRoaXMuZ2V0T3ZlcmxhcE1vZGUoYS52ZXJ0aWNhbCwgdC52ZXJ0aWNhbCwgJ2NlbnRlcicpXG4gICAgICB9O1xuXG4gICAgICBwb3NpdGlvbnMueC5zcGxpY2Uob3ZlcmxhcC54ID09PSAnYXV0bycgPyAwIDogMSwgMCwgJ21pZGRsZScpO1xuICAgICAgcG9zaXRpb25zLnkuc3BsaWNlKG92ZXJsYXAueSA9PT0gJ2F1dG8nID8gMCA6IDEsIDAsICdjZW50ZXInKTtcblxuICAgICAgaWYgKG92ZXJsYXAueSAhPT0gJ2F1dG8nKSB7XG4gICAgICAgIGEudmVydGljYWwgPSBhLnZlcnRpY2FsID09PSAndG9wJyA/ICdib3R0b20nIDogJ3RvcCc7XG4gICAgICAgIGlmIChvdmVybGFwLnkgPT09ICdpbmNsdXNpdmUnKSB7XG4gICAgICAgICAgdC52ZXJ0aWNhbCA9IHQudmVydGljYWw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG92ZXJsYXAueCAhPT0gJ2F1dG8nKSB7XG4gICAgICAgIGEuaG9yaXpvbnRhbCA9IGEuaG9yaXpvbnRhbCA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgaWYgKG92ZXJsYXAueSA9PT0gJ2luY2x1c2l2ZScpIHtcbiAgICAgICAgICB0Lmhvcml6b250YWwgPSB0Lmhvcml6b250YWw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9zaXRpb25zOiBwb3NpdGlvbnMsXG4gICAgICAgIGFuY2hvclBvczogYVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhcHBseUF1dG9Qb3NpdGlvbklmTmVlZGVkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlBdXRvUG9zaXRpb25JZk5lZWRlZChhbmNob3IsIHRhcmdldCwgdGFyZ2V0T3JpZ2luLCBhbmNob3JPcmlnaW4sIHRhcmdldFBvc2l0aW9uKSB7XG4gICAgICB2YXIgX2dldFBvc2l0aW9ucyA9IHRoaXMuZ2V0UG9zaXRpb25zKGFuY2hvck9yaWdpbiwgdGFyZ2V0T3JpZ2luKSxcbiAgICAgICAgICBwb3NpdGlvbnMgPSBfZ2V0UG9zaXRpb25zLnBvc2l0aW9ucyxcbiAgICAgICAgICBhbmNob3JQb3MgPSBfZ2V0UG9zaXRpb25zLmFuY2hvclBvcztcblxuICAgICAgaWYgKHRhcmdldFBvc2l0aW9uLnRvcCA8IDAgfHwgdGFyZ2V0UG9zaXRpb24udG9wICsgdGFyZ2V0LmJvdHRvbSA+IHdpbmRvdy5pbm5lckhlaWdodCkge1xuICAgICAgICB2YXIgbmV3VG9wID0gYW5jaG9yW2FuY2hvclBvcy52ZXJ0aWNhbF0gLSB0YXJnZXRbcG9zaXRpb25zLnlbMF1dO1xuICAgICAgICBpZiAobmV3VG9wICsgdGFyZ2V0LmJvdHRvbSA8PSB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbi50b3AgPSBNYXRoLm1heCgwLCBuZXdUb3ApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1RvcCA9IGFuY2hvclthbmNob3JQb3MudmVydGljYWxdIC0gdGFyZ2V0W3Bvc2l0aW9ucy55WzFdXTtcbiAgICAgICAgICBpZiAobmV3VG9wICsgdGFyZ2V0LmJvdHRvbSA8PSB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcbiAgICAgICAgICAgIHRhcmdldFBvc2l0aW9uLnRvcCA9IE1hdGgubWF4KDAsIG5ld1RvcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0YXJnZXRQb3NpdGlvbi5sZWZ0IDwgMCB8fCB0YXJnZXRQb3NpdGlvbi5sZWZ0ICsgdGFyZ2V0LnJpZ2h0ID4gd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgICAgdmFyIG5ld0xlZnQgPSBhbmNob3JbYW5jaG9yUG9zLmhvcml6b250YWxdIC0gdGFyZ2V0W3Bvc2l0aW9ucy54WzBdXTtcbiAgICAgICAgaWYgKG5ld0xlZnQgKyB0YXJnZXQucmlnaHQgPD0gd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbi5sZWZ0ID0gTWF0aC5tYXgoMCwgbmV3TGVmdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3TGVmdCA9IGFuY2hvclthbmNob3JQb3MuaG9yaXpvbnRhbF0gLSB0YXJnZXRbcG9zaXRpb25zLnhbMV1dO1xuICAgICAgICAgIGlmIChuZXdMZWZ0ICsgdGFyZ2V0LnJpZ2h0IDw9IHdpbmRvdy5pbm5lcldpZHRoKSB7XG4gICAgICAgICAgICB0YXJnZXRQb3NpdGlvbi5sZWZ0ID0gTWF0aC5tYXgoMCwgbmV3TGVmdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXRQb3NpdGlvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLnJvb3QgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0RXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCwge1xuICAgICAgICAgIHRhcmdldDogdGhpcy5wcm9wcy5zY3JvbGxhYmxlQ29udGFpbmVyLFxuICAgICAgICAgIG9uU2Nyb2xsOiB0aGlzLmhhbmRsZVNjcm9sbCxcbiAgICAgICAgICBvblJlc2l6ZTogdGhpcy5oYW5kbGVSZXNpemVcbiAgICAgICAgfSksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9SZW5kZXJUb0xheWVyMi5kZWZhdWx0LCB7XG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoX3JlZikge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5wb3BvdmVyUmVmcy5sYXllciA9IF9yZWY7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcGVuOiB0aGlzLnN0YXRlLm9wZW4sXG4gICAgICAgICAgY29tcG9uZW50Q2xpY2tBd2F5OiB0aGlzLmNvbXBvbmVudENsaWNrQXdheSxcbiAgICAgICAgICB1c2VMYXllckZvckNsaWNrQXdheTogdGhpcy5wcm9wcy51c2VMYXllckZvckNsaWNrQXdheSxcbiAgICAgICAgICByZW5kZXI6IHRoaXMucmVuZGVyTGF5ZXJcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBQb3BvdmVyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuUG9wb3Zlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuY2hvck9yaWdpbjoge1xuICAgIHZlcnRpY2FsOiAnYm90dG9tJyxcbiAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgfSxcbiAgYW5pbWF0ZWQ6IHRydWUsXG4gIGF1dG9DbG9zZVdoZW5PZmZTY3JlZW46IHRydWUsXG4gIGNhbkF1dG9Qb3NpdGlvbjogdHJ1ZSxcbiAgb25SZXF1ZXN0Q2xvc2U6IGZ1bmN0aW9uIG9uUmVxdWVzdENsb3NlKCkge30sXG4gIG9wZW46IGZhbHNlLFxuICBzY3JvbGxhYmxlQ29udGFpbmVyOiAnd2luZG93JyxcbiAgc3R5bGU6IHtcbiAgICBvdmVyZmxvd1k6ICdhdXRvJ1xuICB9LFxuICB0YXJnZXRPcmlnaW46IHtcbiAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gIH0sXG4gIHVzZUxheWVyRm9yQ2xpY2tBd2F5OiB0cnVlLFxuICB6RGVwdGg6IDFcbn07XG5Qb3BvdmVyLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5Qb3BvdmVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIERPTSBlbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlXG4gICAqIHBvcG92ZXIuXG4gICAqL1xuICBhbmNob3JFbDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgYW5jaG9yIHdoZXJlIHRoZSBwb3BvdmVyJ3NcbiAgICogYHRhcmdldE9yaWdpbmAgd2lsbCBhdHRhY2ggdG8uXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbV1cbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIG1pZGRsZSwgcmlnaHRdLlxuICAgKi9cbiAgYW5jaG9yT3JpZ2luOiBfcHJvcFR5cGVzNC5kZWZhdWx0Lm9yaWdpbixcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBwb3BvdmVyIHdpbGwgYXBwbHkgdHJhbnNpdGlvbnMgd2hlblxuICAgKiBpdCBpcyBhZGRlZCB0byB0aGUgRE9NLlxuICAgKi9cbiAgYW5pbWF0ZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IGFuaW1hdGlvbiBjb21wb25lbnQgdXNlZC5cbiAgICovXG4gIGFuaW1hdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIHBvcG92ZXIgd2lsbCBoaWRlIHdoZW4gdGhlIGFuY2hvciBpcyBzY3JvbGxlZCBvZmYgdGhlIHNjcmVlbi5cbiAgICovXG4gIGF1dG9DbG9zZVdoZW5PZmZTY3JlZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBwb3BvdmVyIChwb3RlbnRpYWxseSkgaWdub3JlcyBgdGFyZ2V0T3JpZ2luYFxuICAgKiBhbmQgYGFuY2hvck9yaWdpbmAgdG8gbWFrZSBpdHNlbGYgZml0IG9uIHNjcmVlbixcbiAgICogd2hpY2ggaXMgdXNlZnVsIGZvciBtb2JpbGUgZGV2aWNlcy5cbiAgICovXG4gIGNhbkF1dG9Qb3NpdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgcG9wb3ZlciBpcyByZXF1ZXN0ZWQgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIFRoZSByZWFzb24gZm9yIHRoZSBjbG9zZSByZXF1ZXN0LiBQb3NzaWJsZXMgdmFsdWVzXG4gICAqIGFyZSAnY2xpY2tBd2F5JyBhbmQgJ29mZlNjcmVlbicuXG4gICAqL1xuICBvblJlcXVlc3RDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIHBvcG92ZXIgaXMgdmlzaWJsZS5cbiAgICovXG4gIG9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgdGhlIHBhcmVudCBzY3JvbGxhYmxlIGNvbnRhaW5lci5cbiAgICogSXQgY2FuIGJlIGFuIGVsZW1lbnQgb3IgYSBzdHJpbmcgbGlrZSBgd2luZG93YC5cbiAgICovXG4gIHNjcm9sbGFibGVDb250YWluZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgcG9wb3ZlciB3aGljaCB3aWxsIGF0dGFjaCB0b1xuICAgKiB0aGUgYW5jaG9yJ3Mgb3JpZ2luLlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dXG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBtaWRkbGUsIHJpZ2h0XS5cbiAgICovXG4gIHRhcmdldE9yaWdpbjogX3Byb3BUeXBlczQuZGVmYXVsdC5vcmlnaW4sXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgcG9wb3ZlciB3aWxsIHJlbmRlciBvbiB0b3Agb2YgYW4gaW52aXNpYmxlXG4gICAqIGxheWVyLCB3aGljaCB3aWxsIHByZXZlbnQgY2xpY2tzIHRvIHRoZSB1bmRlcmx5aW5nXG4gICAqIGVsZW1lbnRzLCBhbmQgdHJpZ2dlciBhbiBgb25SZXF1ZXN0Q2xvc2UoJ2NsaWNrQXdheScpYCBjYWxsLlxuICAgKi9cbiAgdXNlTGF5ZXJGb3JDbGlja0F3YXk6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSB6RGVwdGggb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICB6RGVwdGg6IF9wcm9wVHlwZXM0LmRlZmF1bHQuekRlcHRoXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBQb3BvdmVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX1N1YmhlYWRlciA9IHJlcXVpcmUoJy4uL1N1YmhlYWRlcicpO1xuXG52YXIgX1N1YmhlYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdWJoZWFkZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTGlzdCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKExpc3QsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpc3QoKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgTGlzdCk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKExpc3QuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKExpc3QpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKExpc3QsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnY2hpbGRyZW4nLCAnc3R5bGUnXSk7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG5cbiAgICAgIHZhciBoYXNTdWJoZWFkZXIgPSBmYWxzZTtcblxuICAgICAgdmFyIGZpcnN0Q2hpbGQgPSBfcmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbilbMF07XG4gICAgICBpZiAoKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoZmlyc3RDaGlsZCkgJiYgZmlyc3RDaGlsZC50eXBlID09PSBfU3ViaGVhZGVyMi5kZWZhdWx0KSB7XG4gICAgICAgIGhhc1N1YmhlYWRlciA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICBwYWRkaW5nOiAoaGFzU3ViaGVhZGVyID8gMCA6IDgpICsgJ3B4IDBweCA4cHggMHB4J1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwgeyBzdHlsZTogcHJlcGFyZVN0eWxlcygoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnJvb3QsIHN0eWxlKSkgfSksXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTGlzdDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkxpc3QuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcbkxpc3QucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlc2UgYXJlIHVzdWFsbHkgYExpc3RJdGVtYHMgdGhhdCBhcmUgcGFzc2VkIHRvXG4gICAqIGJlIHBhcnQgb2YgdGhlIGxpc3QuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gTGlzdDsiLCIvLyBTb3VyY2U6IGh0dHA6Ly9qc2ZpZGRsZS5uZXQvdld4OFYvXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU2MDMxOTUvZnVsbC1saXN0LW9mLWphdmFzY3JpcHQta2V5Y29kZXNcblxuLyoqXG4gKiBDb25lbmllbmNlIG1ldGhvZCByZXR1cm5zIGNvcnJlc3BvbmRpbmcgdmFsdWUgZm9yIGdpdmVuIGtleU5hbWUgb3Iga2V5Q29kZS5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBrZXlDb2RlIHtOdW1iZXJ9IG9yIGtleU5hbWUge1N0cmluZ31cbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBrZXlDb2RlKHNlYXJjaElucHV0KSB7XG4gIC8vIEtleWJvYXJkIEV2ZW50c1xuICBpZiAoc2VhcmNoSW5wdXQgJiYgJ29iamVjdCcgPT09IHR5cGVvZiBzZWFyY2hJbnB1dCkge1xuICAgIHZhciBoYXNLZXlDb2RlID0gc2VhcmNoSW5wdXQud2hpY2ggfHwgc2VhcmNoSW5wdXQua2V5Q29kZSB8fCBzZWFyY2hJbnB1dC5jaGFyQ29kZVxuICAgIGlmIChoYXNLZXlDb2RlKSBzZWFyY2hJbnB1dCA9IGhhc0tleUNvZGVcbiAgfVxuXG4gIC8vIE51bWJlcnNcbiAgaWYgKCdudW1iZXInID09PSB0eXBlb2Ygc2VhcmNoSW5wdXQpIHJldHVybiBuYW1lc1tzZWFyY2hJbnB1dF1cblxuICAvLyBFdmVyeXRoaW5nIGVsc2UgKGNhc3QgdG8gc3RyaW5nKVxuICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaElucHV0KVxuXG4gIC8vIGNoZWNrIGNvZGVzXG4gIHZhciBmb3VuZE5hbWVkS2V5ID0gY29kZXNbc2VhcmNoLnRvTG93ZXJDYXNlKCldXG4gIGlmIChmb3VuZE5hbWVkS2V5KSByZXR1cm4gZm91bmROYW1lZEtleVxuXG4gIC8vIGNoZWNrIGFsaWFzZXNcbiAgdmFyIGZvdW5kTmFtZWRLZXkgPSBhbGlhc2VzW3NlYXJjaC50b0xvd2VyQ2FzZSgpXVxuICBpZiAoZm91bmROYW1lZEtleSkgcmV0dXJuIGZvdW5kTmFtZWRLZXlcblxuICAvLyB3ZWlyZCBjaGFyYWN0ZXI/XG4gIGlmIChzZWFyY2gubGVuZ3RoID09PSAxKSByZXR1cm4gc2VhcmNoLmNoYXJDb2RlQXQoMClcblxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbi8qKlxuICogQ29tcGFyZXMgYSBrZXlib2FyZCBldmVudCB3aXRoIGEgZ2l2ZW4ga2V5Q29kZSBvciBrZXlOYW1lLlxuICpcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IEtleWJvYXJkIGV2ZW50IHRoYXQgc2hvdWxkIGJlIHRlc3RlZFxuICogQHBhcmFtIHtNaXhlZH0ga2V5Q29kZSB7TnVtYmVyfSBvciBrZXlOYW1lIHtTdHJpbmd9XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xua2V5Q29kZS5pc0V2ZW50S2V5ID0gZnVuY3Rpb24gaXNFdmVudEtleShldmVudCwgbmFtZU9yQ29kZSkge1xuICBpZiAoZXZlbnQgJiYgJ29iamVjdCcgPT09IHR5cGVvZiBldmVudCkge1xuICAgIHZhciBrZXlDb2RlID0gZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZSB8fCBldmVudC5jaGFyQ29kZVxuICAgIGlmIChrZXlDb2RlID09PSBudWxsIHx8IGtleUNvZGUgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZiAodHlwZW9mIG5hbWVPckNvZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBjaGVjayBjb2Rlc1xuICAgICAgdmFyIGZvdW5kTmFtZWRLZXkgPSBjb2Rlc1tuYW1lT3JDb2RlLnRvTG93ZXJDYXNlKCldXG4gICAgICBpZiAoZm91bmROYW1lZEtleSkgeyByZXR1cm4gZm91bmROYW1lZEtleSA9PT0ga2V5Q29kZTsgfVxuICAgIFxuICAgICAgLy8gY2hlY2sgYWxpYXNlc1xuICAgICAgdmFyIGZvdW5kTmFtZWRLZXkgPSBhbGlhc2VzW25hbWVPckNvZGUudG9Mb3dlckNhc2UoKV1cbiAgICAgIGlmIChmb3VuZE5hbWVkS2V5KSB7IHJldHVybiBmb3VuZE5hbWVkS2V5ID09PSBrZXlDb2RlOyB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZU9yQ29kZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBuYW1lT3JDb2RlID09PSBrZXlDb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ga2V5Q29kZTtcblxuLyoqXG4gKiBHZXQgYnkgbmFtZVxuICpcbiAqICAgZXhwb3J0cy5jb2RlWydlbnRlciddIC8vID0+IDEzXG4gKi9cblxudmFyIGNvZGVzID0gZXhwb3J0cy5jb2RlID0gZXhwb3J0cy5jb2RlcyA9IHtcbiAgJ2JhY2tzcGFjZSc6IDgsXG4gICd0YWInOiA5LFxuICAnZW50ZXInOiAxMyxcbiAgJ3NoaWZ0JzogMTYsXG4gICdjdHJsJzogMTcsXG4gICdhbHQnOiAxOCxcbiAgJ3BhdXNlL2JyZWFrJzogMTksXG4gICdjYXBzIGxvY2snOiAyMCxcbiAgJ2VzYyc6IDI3LFxuICAnc3BhY2UnOiAzMixcbiAgJ3BhZ2UgdXAnOiAzMyxcbiAgJ3BhZ2UgZG93bic6IDM0LFxuICAnZW5kJzogMzUsXG4gICdob21lJzogMzYsXG4gICdsZWZ0JzogMzcsXG4gICd1cCc6IDM4LFxuICAncmlnaHQnOiAzOSxcbiAgJ2Rvd24nOiA0MCxcbiAgJ2luc2VydCc6IDQ1LFxuICAnZGVsZXRlJzogNDYsXG4gICdjb21tYW5kJzogOTEsXG4gICdsZWZ0IGNvbW1hbmQnOiA5MSxcbiAgJ3JpZ2h0IGNvbW1hbmQnOiA5MyxcbiAgJ251bXBhZCAqJzogMTA2LFxuICAnbnVtcGFkICsnOiAxMDcsXG4gICdudW1wYWQgLSc6IDEwOSxcbiAgJ251bXBhZCAuJzogMTEwLFxuICAnbnVtcGFkIC8nOiAxMTEsXG4gICdudW0gbG9jayc6IDE0NCxcbiAgJ3Njcm9sbCBsb2NrJzogMTQ1LFxuICAnbXkgY29tcHV0ZXInOiAxODIsXG4gICdteSBjYWxjdWxhdG9yJzogMTgzLFxuICAnOyc6IDE4NixcbiAgJz0nOiAxODcsXG4gICcsJzogMTg4LFxuICAnLSc6IDE4OSxcbiAgJy4nOiAxOTAsXG4gICcvJzogMTkxLFxuICAnYCc6IDE5MixcbiAgJ1snOiAyMTksXG4gICdcXFxcJzogMjIwLFxuICAnXSc6IDIyMSxcbiAgXCInXCI6IDIyMlxufVxuXG4vLyBIZWxwZXIgYWxpYXNlc1xuXG52YXIgYWxpYXNlcyA9IGV4cG9ydHMuYWxpYXNlcyA9IHtcbiAgJ3dpbmRvd3MnOiA5MSxcbiAgJ+KHpyc6IDE2LFxuICAn4oylJzogMTgsXG4gICfijIMnOiAxNyxcbiAgJ+KMmCc6IDkxLFxuICAnY3RsJzogMTcsXG4gICdjb250cm9sJzogMTcsXG4gICdvcHRpb24nOiAxOCxcbiAgJ3BhdXNlJzogMTksXG4gICdicmVhayc6IDE5LFxuICAnY2Fwcyc6IDIwLFxuICAncmV0dXJuJzogMTMsXG4gICdlc2NhcGUnOiAyNyxcbiAgJ3NwYyc6IDMyLFxuICAnc3BhY2ViYXInOiAzMixcbiAgJ3BndXAnOiAzMyxcbiAgJ3BnZG4nOiAzNCxcbiAgJ2lucyc6IDQ1LFxuICAnZGVsJzogNDYsXG4gICdjbWQnOiA5MVxufVxuXG4vKiFcbiAqIFByb2dyYW1hdGljYWxseSBhZGQgdGhlIGZvbGxvd2luZ1xuICovXG5cbi8vIGxvd2VyIGNhc2UgY2hhcnNcbmZvciAoaSA9IDk3OyBpIDwgMTIzOyBpKyspIGNvZGVzW1N0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaSAtIDMyXG5cbi8vIG51bWJlcnNcbmZvciAodmFyIGkgPSA0ODsgaSA8IDU4OyBpKyspIGNvZGVzW2kgLSA0OF0gPSBpXG5cbi8vIGZ1bmN0aW9uIGtleXNcbmZvciAoaSA9IDE7IGkgPCAxMzsgaSsrKSBjb2Rlc1snZicraV0gPSBpICsgMTExXG5cbi8vIG51bXBhZCBrZXlzXG5mb3IgKGkgPSAwOyBpIDwgMTA7IGkrKykgY29kZXNbJ251bXBhZCAnK2ldID0gaSArIDk2XG5cbi8qKlxuICogR2V0IGJ5IGNvZGVcbiAqXG4gKiAgIGV4cG9ydHMubmFtZVsxM10gLy8gPT4gJ0VudGVyJ1xuICovXG5cbnZhciBuYW1lcyA9IGV4cG9ydHMubmFtZXMgPSBleHBvcnRzLnRpdGxlID0ge30gLy8gdGl0bGUgZm9yIGJhY2t3YXJkIGNvbXBhdFxuXG4vLyBDcmVhdGUgcmV2ZXJzZSBtYXBwaW5nXG5mb3IgKGkgaW4gY29kZXMpIG5hbWVzW2NvZGVzW2ldXSA9IGlcblxuLy8gQWRkIGFsaWFzZXNcbmZvciAodmFyIGFsaWFzIGluIGFsaWFzZXMpIHtcbiAgY29kZXNbYWxpYXNdID0gYWxpYXNlc1thbGlhc11cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2Zyb20gPSByZXF1aXJlKFwiLi4vY29yZS1qcy9hcnJheS9mcm9tXCIpO1xuXG52YXIgX2Zyb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnJvbSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKSA/IGFyciA6ICgwLCBfZnJvbTIuZGVmYXVsdCkoYXJyKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX3RvQXJyYXkyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQXJyYXknKTtcblxudmFyIF90b0FycmF5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQXJyYXkyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJ3JlY29tcG9zZS9zaGFsbG93RXF1YWwnKTtcblxudmFyIF9zaGFsbG93RXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hhbGxvd0VxdWFsKTtcblxudmFyIF9DbGlja0F3YXlMaXN0ZW5lciA9IHJlcXVpcmUoJy4uL2ludGVybmFsL0NsaWNrQXdheUxpc3RlbmVyJyk7XG5cbnZhciBfQ2xpY2tBd2F5TGlzdGVuZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2xpY2tBd2F5TGlzdGVuZXIpO1xuXG52YXIgX2tleWNvZGUgPSByZXF1aXJlKCdrZXljb2RlJyk7XG5cbnZhciBfa2V5Y29kZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXljb2RlKTtcblxudmFyIF9wcm9wVHlwZXMzID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJvcFR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlczMpO1xuXG52YXIgX0xpc3QgPSByZXF1aXJlKCcuLi9MaXN0L0xpc3QnKTtcblxudmFyIF9MaXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xpc3QpO1xuXG52YXIgX21lbnVVdGlscyA9IHJlcXVpcmUoJy4vbWVudVV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldFN0eWxlcyhwcm9wcywgY29udGV4dCkge1xuICB2YXIgZGVza3RvcCA9IHByb3BzLmRlc2t0b3AsXG4gICAgICBtYXhIZWlnaHQgPSBwcm9wcy5tYXhIZWlnaHQsXG4gICAgICB3aWR0aCA9IHByb3BzLndpZHRoO1xuICB2YXIgbXVpVGhlbWUgPSBjb250ZXh0Lm11aVRoZW1lO1xuXG5cbiAgdmFyIHN0eWxlcyA9IHtcbiAgICByb290OiB7XG4gICAgICAvLyBOZXN0ZWQgZGl2IGJlY2F1c2UgdGhlIExpc3Qgc2NhbGVzIHggZmFzdGVyIHRoYW4gaXQgc2NhbGVzIHlcbiAgICAgIHpJbmRleDogbXVpVGhlbWUuekluZGV4Lm1lbnUsXG4gICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodCxcbiAgICAgIG92ZXJmbG93WTogbWF4SGVpZ2h0ID8gJ2F1dG8nIDogbnVsbFxuICAgIH0sXG4gICAgZGl2aWRlcjoge1xuICAgICAgbWFyZ2luVG9wOiA3LFxuICAgICAgbWFyZ2luQm90dG9tOiA4XG4gICAgfSxcbiAgICBsaXN0OiB7XG4gICAgICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gICAgICBwYWRkaW5nQm90dG9tOiBkZXNrdG9wID8gMTYgOiA4LFxuICAgICAgcGFkZGluZ1RvcDogZGVza3RvcCA/IDE2IDogOCxcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIHdpZHRoOiB3aWR0aFxuICAgIH0sXG4gICAgc2VsZWN0ZWRNZW51SXRlbToge1xuICAgICAgY29sb3I6IG11aVRoZW1lLm1lbnVJdGVtLnNlbGVjdGVkVGV4dENvbG9yXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbnZhciBNZW51ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoTWVudSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVudShwcm9wcywgY29udGV4dCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIE1lbnUpO1xuXG4gICAgdmFyIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoTWVudS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTWVudSkpLmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyk7XG5cbiAgICB2YXIgZmlsdGVyZWRDaGlsZHJlbiA9IF90aGlzLmdldEZpbHRlcmVkQ2hpbGRyZW4ocHJvcHMuY2hpbGRyZW4pO1xuICAgIHZhciBzZWxlY3RlZEluZGV4ID0gX3RoaXMuZ2V0TGFzdFNlbGVjdGVkSW5kZXgocHJvcHMsIGZpbHRlcmVkQ2hpbGRyZW4pO1xuXG4gICAgdmFyIG5ld0ZvY3VzSW5kZXggPSBwcm9wcy5kaXNhYmxlQXV0b0ZvY3VzID8gLTEgOiBzZWxlY3RlZEluZGV4ID49IDAgPyBzZWxlY3RlZEluZGV4IDogMDtcbiAgICBpZiAobmV3Rm9jdXNJbmRleCAhPT0gLTEgJiYgcHJvcHMub25NZW51SXRlbUZvY3VzQ2hhbmdlKSB7XG4gICAgICBwcm9wcy5vbk1lbnVJdGVtRm9jdXNDaGFuZ2UobnVsbCwgbmV3Rm9jdXNJbmRleCk7XG4gICAgfVxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgZm9jdXNJbmRleDogbmV3Rm9jdXNJbmRleCxcbiAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkOiBwcm9wcy5pbml0aWFsbHlLZXlib2FyZEZvY3VzZWQsXG4gICAgICBrZXlXaWR0aDogcHJvcHMuZGVza3RvcCA/IDY0IDogNTZcbiAgICB9O1xuXG4gICAgX3RoaXMuaG90S2V5SG9sZGVyID0gbmV3IF9tZW51VXRpbHMuSG90S2V5SG9sZGVyKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoTWVudSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuYXV0b1dpZHRoKSB7XG4gICAgICAgIHRoaXMuc2V0V2lkdGgoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0U2NvbGxQb3NpdGlvbigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSB2b2lkIDA7XG4gICAgICB2YXIgZmlsdGVyZWRDaGlsZHJlbiA9IHRoaXMuZ2V0RmlsdGVyZWRDaGlsZHJlbihuZXh0UHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5tdWx0aXBsZSAhPT0gdHJ1ZSkge1xuICAgICAgICBzZWxlY3RlZEluZGV4ID0gdGhpcy5nZXRMYXN0U2VsZWN0ZWRJbmRleChuZXh0UHJvcHMsIGZpbHRlcmVkQ2hpbGRyZW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRJbmRleCA9IHRoaXMuc3RhdGUuZm9jdXNJbmRleDtcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld0ZvY3VzSW5kZXggPSBuZXh0UHJvcHMuZGlzYWJsZUF1dG9Gb2N1cyA/IC0xIDogc2VsZWN0ZWRJbmRleCA+PSAwID8gc2VsZWN0ZWRJbmRleCA6IDA7XG4gICAgICBpZiAobmV3Rm9jdXNJbmRleCAhPT0gdGhpcy5zdGF0ZS5mb2N1c0luZGV4ICYmIHRoaXMucHJvcHMub25NZW51SXRlbUZvY3VzQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25NZW51SXRlbUZvY3VzQ2hhbmdlKG51bGwsIG5ld0ZvY3VzSW5kZXgpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzSW5kZXg6IG5ld0ZvY3VzSW5kZXgsXG4gICAgICAgIGtleVdpZHRoOiBuZXh0UHJvcHMuZGVza3RvcCA/IDY0IDogNTZcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgICAgIHJldHVybiAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpIHx8ICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5jb250ZXh0LCBuZXh0Q29udGV4dCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuYXV0b1dpZHRoKSB0aGlzLnNldFdpZHRoKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VmFsdWVMaW5rJyxcblxuXG4gICAgLy8gRG8gbm90IHVzZSBvdXRzaWRlIG9mIHRoaXMgY29tcG9uZW50LCBpdCB3aWxsIGJlIHJlbW92ZWQgb25jZSB2YWx1ZUxpbmsgaXMgZGVwcmVjYXRlZFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZUxpbmsocHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm9wcy52YWx1ZUxpbmsgfHwge1xuICAgICAgICB2YWx1ZTogcHJvcHMudmFsdWUsXG4gICAgICAgIHJlcXVlc3RDaGFuZ2U6IHByb3BzLm9uQ2hhbmdlXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldEtleWJvYXJkRm9jdXNlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEtleWJvYXJkRm9jdXNlZChrZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0tleWJvYXJkRm9jdXNlZDoga2V5Ym9hcmRGb2N1c2VkXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRGaWx0ZXJlZENoaWxkcmVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmlsdGVyZWRDaGlsZHJlbihjaGlsZHJlbikge1xuICAgICAgdmFyIGZpbHRlcmVkQ2hpbGRyZW4gPSBbXTtcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgZmlsdGVyZWRDaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmlsdGVyZWRDaGlsZHJlbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbG9uZU1lbnVJdGVtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmVNZW51SXRlbShjaGlsZCwgY2hpbGRJbmRleCwgc3R5bGVzLCBpbmRleCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBjaGlsZElzRGlzYWJsZWQgPSBjaGlsZC5wcm9wcy5kaXNhYmxlZDtcblxuICAgICAgdmFyIHNlbGVjdGVkQ2hpbGRTdHlsZXMgPSB7fTtcbiAgICAgIGlmICghY2hpbGRJc0Rpc2FibGVkKSB7XG4gICAgICAgIHZhciBzZWxlY3RlZCA9IHRoaXMuaXNDaGlsZFNlbGVjdGVkKGNoaWxkLCB0aGlzLnByb3BzKTtcblxuICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgICAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc2VsZWN0ZWRDaGlsZFN0eWxlcywgc3R5bGVzLnNlbGVjdGVkTWVudUl0ZW0sIHRoaXMucHJvcHMuc2VsZWN0ZWRNZW51SXRlbVN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG1lcmdlZENoaWxkU3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBjaGlsZC5wcm9wcy5zdHlsZSwgdGhpcy5wcm9wcy5tZW51SXRlbVN0eWxlLCBzZWxlY3RlZENoaWxkU3R5bGVzKTtcblxuICAgICAgdmFyIGV4dHJhUHJvcHMgPSB7XG4gICAgICAgIGRlc2t0b3A6IHRoaXMucHJvcHMuZGVza3RvcCxcbiAgICAgICAgc3R5bGU6IG1lcmdlZENoaWxkU3R5bGVzXG4gICAgICB9O1xuICAgICAgaWYgKCFjaGlsZElzRGlzYWJsZWQpIHtcbiAgICAgICAgdmFyIGlzRm9jdXNlZCA9IGNoaWxkSW5kZXggPT09IHRoaXMuc3RhdGUuZm9jdXNJbmRleDtcbiAgICAgICAgdmFyIGZvY3VzU3RhdGUgPSAnbm9uZSc7XG4gICAgICAgIGlmIChpc0ZvY3VzZWQpIHtcbiAgICAgICAgICBmb2N1c1N0YXRlID0gdGhpcy5zdGF0ZS5pc0tleWJvYXJkRm9jdXNlZCA/ICdrZXlib2FyZC1mb2N1c2VkJyA6ICdmb2N1c2VkJztcbiAgICAgICAgfVxuXG4gICAgICAgICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShleHRyYVByb3BzLCB7XG4gICAgICAgICAgZm9jdXNTdGF0ZTogZm9jdXNTdGF0ZSxcbiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgICAgICBfdGhpczIuaGFuZGxlTWVudUl0ZW1DbGljayhldmVudCwgY2hpbGQsIGluZGV4KTtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wcm9wcy5vbkNsaWNrKSBjaGlsZC5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlZjogaXNGb2N1c2VkID8gJ2ZvY3VzZWRNZW51SXRlbScgOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGV4dHJhUHJvcHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RlY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleChldmVudCkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5zdGF0ZS5mb2N1c0luZGV4O1xuXG4gICAgICBpbmRleC0tO1xuICAgICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSAwO1xuXG4gICAgICB0aGlzLnNldEZvY3VzSW5kZXgoZXZlbnQsIGluZGV4LCB0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRNZW51SXRlbUNvdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWVudUl0ZW1Db3VudChmaWx0ZXJlZENoaWxkcmVuKSB7XG4gICAgICB2YXIgbWVudUl0ZW1Db3VudCA9IDA7XG4gICAgICBmaWx0ZXJlZENoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBjaGlsZElzQURpdmlkZXIgPSBjaGlsZC50eXBlICYmIGNoaWxkLnR5cGUubXVpTmFtZSA9PT0gJ0RpdmlkZXInO1xuICAgICAgICB2YXIgY2hpbGRJc0Rpc2FibGVkID0gY2hpbGQucHJvcHMuZGlzYWJsZWQ7XG4gICAgICAgIGlmICghY2hpbGRJc0FEaXZpZGVyICYmICFjaGlsZElzRGlzYWJsZWQpIG1lbnVJdGVtQ291bnQrKztcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1lbnVJdGVtQ291bnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0TGFzdFNlbGVjdGVkSW5kZXgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXN0U2VsZWN0ZWRJbmRleChwcm9wcywgZmlsdGVyZWRDaGlsZHJlbikge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBzZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICB2YXIgbWVudUl0ZW1JbmRleCA9IDA7XG5cbiAgICAgIGZpbHRlcmVkQ2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgdmFyIGNoaWxkSXNBRGl2aWRlciA9IGNoaWxkLnR5cGUgJiYgY2hpbGQudHlwZS5tdWlOYW1lID09PSAnRGl2aWRlcic7XG5cbiAgICAgICAgaWYgKF90aGlzMy5pc0NoaWxkU2VsZWN0ZWQoY2hpbGQsIHByb3BzKSkgc2VsZWN0ZWRJbmRleCA9IG1lbnVJdGVtSW5kZXg7XG4gICAgICAgIGlmICghY2hpbGRJc0FEaXZpZGVyKSBtZW51SXRlbUluZGV4Kys7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHNlbGVjdGVkSW5kZXg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Rm9jdXNJbmRleFN0YXJ0c1dpdGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGb2N1c0luZGV4U3RhcnRzV2l0aChldmVudCwga2V5cywgZmlsdGVyZWRDaGlsZHJlbikge1xuICAgICAgdmFyIGZvdW5kSW5kZXggPSAtMTtcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGZpbHRlcmVkQ2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPj0gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJpbWFyeVRleHQgPSBjaGlsZC5wcm9wcy5wcmltYXJ5VGV4dDtcblxuICAgICAgICBpZiAodHlwZW9mIHByaW1hcnlUZXh0ID09PSAnc3RyaW5nJyAmJiBwcmltYXJ5VGV4dC5zdWJzdHIoMCwga2V5cy5sZW5ndGgpLnRvTG93ZXJDYXNlKCkgPT09IGtleXMudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgIGZvdW5kSW5kZXggPSBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoZm91bmRJbmRleCA+PSAwKSB7XG4gICAgICAgIHRoaXMuc2V0Rm9jdXNJbmRleChldmVudCwgZm91bmRJbmRleCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZU1lbnVJdGVtQ2xpY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVNZW51SXRlbUNsaWNrKGV2ZW50LCBpdGVtLCBpbmRleCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBtdWx0aXBsZSA9IHRoaXMucHJvcHMubXVsdGlwbGU7XG4gICAgICB2YXIgdmFsdWVMaW5rID0gdGhpcy5nZXRWYWx1ZUxpbmsodGhpcy5wcm9wcyk7XG4gICAgICB2YXIgbWVudVZhbHVlID0gdmFsdWVMaW5rLnZhbHVlO1xuICAgICAgdmFyIGl0ZW1WYWx1ZSA9IGl0ZW0ucHJvcHMudmFsdWU7XG4gICAgICB2YXIgZm9jdXNJbmRleCA9IF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyAwIDogY2hpbGRyZW4uaW5kZXhPZihpdGVtKTtcblxuICAgICAgdGhpcy5zZXRGb2N1c0luZGV4KGV2ZW50LCBmb2N1c0luZGV4LCBmYWxzZSk7XG5cbiAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICBtZW51VmFsdWUgPSBtZW51VmFsdWUgfHwgW107XG5cbiAgICAgICAgdmFyIGl0ZW1JbmRleCA9IG1lbnVWYWx1ZS5pbmRleE9mKGl0ZW1WYWx1ZSk7XG5cbiAgICAgICAgdmFyIF9tZW51VmFsdWUgPSBtZW51VmFsdWUsXG4gICAgICAgICAgICBfbWVudVZhbHVlMiA9ICgwLCBfdG9BcnJheTMuZGVmYXVsdCkoX21lbnVWYWx1ZSksXG4gICAgICAgICAgICBuZXdNZW51VmFsdWUgPSBfbWVudVZhbHVlMi5zbGljZSgwKTtcblxuICAgICAgICBpZiAoaXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgICAgIG5ld01lbnVWYWx1ZS5wdXNoKGl0ZW1WYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3TWVudVZhbHVlLnNwbGljZShpdGVtSW5kZXgsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWVMaW5rLnJlcXVlc3RDaGFuZ2UoZXZlbnQsIG5ld01lbnVWYWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKCFtdWx0aXBsZSAmJiBpdGVtVmFsdWUgIT09IG1lbnVWYWx1ZSkge1xuICAgICAgICB2YWx1ZUxpbmsucmVxdWVzdENoYW5nZShldmVudCwgaXRlbVZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9wcy5vbkl0ZW1DbGljayhldmVudCwgaXRlbSwgaW5kZXgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleChldmVudCwgZmlsdGVyZWRDaGlsZHJlbikge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5zdGF0ZS5mb2N1c0luZGV4O1xuICAgICAgdmFyIG1heEluZGV4ID0gdGhpcy5nZXRNZW51SXRlbUNvdW50KGZpbHRlcmVkQ2hpbGRyZW4pIC0gMTtcblxuICAgICAgaW5kZXgrKztcbiAgICAgIGlmIChpbmRleCA+IG1heEluZGV4KSBpbmRleCA9IG1heEluZGV4O1xuXG4gICAgICB0aGlzLnNldEZvY3VzSW5kZXgoZXZlbnQsIGluZGV4LCB0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpc0NoaWxkU2VsZWN0ZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0NoaWxkU2VsZWN0ZWQoY2hpbGQsIHByb3BzKSB7XG4gICAgICB2YXIgbWVudVZhbHVlID0gdGhpcy5nZXRWYWx1ZUxpbmsocHJvcHMpLnZhbHVlO1xuICAgICAgdmFyIGNoaWxkVmFsdWUgPSBjaGlsZC5wcm9wcy52YWx1ZTtcblxuICAgICAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG4gICAgICAgIHJldHVybiBtZW51VmFsdWUgJiYgbWVudVZhbHVlLmxlbmd0aCAmJiBtZW51VmFsdWUuaW5kZXhPZihjaGlsZFZhbHVlKSAhPT0gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2hpbGQucHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgJiYgbWVudVZhbHVlID09PSBjaGlsZFZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldEZvY3VzSW5kZXgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGb2N1c0luZGV4KGV2ZW50LCBuZXdJbmRleCwgaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uTWVudUl0ZW1Gb2N1c0NoYW5nZSkge1xuICAgICAgICAvLyBEbyB0aGlzIGV2ZW4gaWYgYG5ld0luZGV4ID09PSB0aGlzLnN0YXRlLmZvY3VzSW5kZXhgIHRvIGFsbG93IHVzZXJzXG4gICAgICAgIC8vIHRvIGRldGVjdCB1cC1hcnJvdyBvbiB0aGUgZmlyc3QgTWVudUl0ZW0gb3IgZG93bi1hcnJvdyBvbiB0aGUgbGFzdC5cbiAgICAgICAgdGhpcy5wcm9wcy5vbk1lbnVJdGVtRm9jdXNDaGFuZ2UoZXZlbnQsIG5ld0luZGV4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c0luZGV4OiBuZXdJbmRleCxcbiAgICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IGlzS2V5Ym9hcmRGb2N1c2VkXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRTY29sbFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2NvbGxQb3NpdGlvbigpIHtcbiAgICAgIHZhciBkZXNrdG9wID0gdGhpcy5wcm9wcy5kZXNrdG9wO1xuICAgICAgdmFyIGZvY3VzZWRNZW51SXRlbSA9IHRoaXMucmVmcy5mb2N1c2VkTWVudUl0ZW07XG4gICAgICB2YXIgbWVudUl0ZW1IZWlnaHQgPSBkZXNrdG9wID8gMzIgOiA0ODtcblxuICAgICAgaWYgKGZvY3VzZWRNZW51SXRlbSkge1xuICAgICAgICB2YXIgc2VsZWN0ZWRPZmZTZXQgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoZm9jdXNlZE1lbnVJdGVtKS5vZmZzZXRUb3A7XG5cbiAgICAgICAgLy8gTWFrZSB0aGUgZm9jdXNlZCBpdGVtIGJlIHRoZSAybmQgaXRlbSBpbiB0aGUgbGlzdCB0aGUgdXNlciBzZWVzXG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSBzZWxlY3RlZE9mZlNldCAtIG1lbnVJdGVtSGVpZ2h0O1xuICAgICAgICBpZiAoc2Nyb2xsVG9wIDwgbWVudUl0ZW1IZWlnaHQpIHNjcm9sbFRvcCA9IDA7XG5cbiAgICAgICAgX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5zY3JvbGxDb250YWluZXIpLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjYW5jZWxTY3JvbGxFdmVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbFNjcm9sbEV2ZW50KGV2ZW50KSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0V2lkdGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRXaWR0aCgpIHtcbiAgICAgIHZhciBlbCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICAgIHZhciBsaXN0RWwgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy5yZWZzLmxpc3QpO1xuICAgICAgdmFyIGVsV2lkdGggPSBlbC5vZmZzZXRXaWR0aDtcbiAgICAgIHZhciBrZXlXaWR0aCA9IHRoaXMuc3RhdGUua2V5V2lkdGg7XG4gICAgICB2YXIgbWluV2lkdGggPSBrZXlXaWR0aCAqIDEuNTtcbiAgICAgIHZhciBrZXlJbmNyZW1lbnRzID0gZWxXaWR0aCAvIGtleVdpZHRoO1xuICAgICAgdmFyIG5ld1dpZHRoID0gdm9pZCAwO1xuXG4gICAgICBrZXlJbmNyZW1lbnRzID0ga2V5SW5jcmVtZW50cyA8PSAxLjUgPyAxLjUgOiBNYXRoLmNlaWwoa2V5SW5jcmVtZW50cyk7XG4gICAgICBuZXdXaWR0aCA9IGtleUluY3JlbWVudHMgKiBrZXlXaWR0aDtcblxuICAgICAgaWYgKG5ld1dpZHRoIDwgbWluV2lkdGgpIG5ld1dpZHRoID0gbWluV2lkdGg7XG5cbiAgICAgIGVsLnN0eWxlLndpZHRoID0gbmV3V2lkdGggKyAncHgnO1xuICAgICAgbGlzdEVsLnN0eWxlLndpZHRoID0gbmV3V2lkdGggKyAncHgnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhdXRvV2lkdGggPSBfcHJvcHMuYXV0b1dpZHRoLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGRlc2t0b3AgPSBfcHJvcHMuZGVza3RvcCxcbiAgICAgICAgICBkaXNhYmxlQXV0b0ZvY3VzID0gX3Byb3BzLmRpc2FibGVBdXRvRm9jdXMsXG4gICAgICAgICAgaW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkID0gX3Byb3BzLmluaXRpYWxseUtleWJvYXJkRm9jdXNlZCxcbiAgICAgICAgICBsaXN0U3R5bGUgPSBfcHJvcHMubGlzdFN0eWxlLFxuICAgICAgICAgIG1heEhlaWdodCA9IF9wcm9wcy5tYXhIZWlnaHQsXG4gICAgICAgICAgbXVsdGlwbGUgPSBfcHJvcHMubXVsdGlwbGUsXG4gICAgICAgICAgb25JdGVtQ2xpY2sgPSBfcHJvcHMub25JdGVtQ2xpY2ssXG4gICAgICAgICAgb25Fc2NLZXlEb3duID0gX3Byb3BzLm9uRXNjS2V5RG93bixcbiAgICAgICAgICBvbk1lbnVJdGVtRm9jdXNDaGFuZ2UgPSBfcHJvcHMub25NZW51SXRlbUZvY3VzQ2hhbmdlLFxuICAgICAgICAgIHNlbGVjdGVkTWVudUl0ZW1TdHlsZSA9IF9wcm9wcy5zZWxlY3RlZE1lbnVJdGVtU3R5bGUsXG4gICAgICAgICAgbWVudUl0ZW1TdHlsZSA9IF9wcm9wcy5tZW51SXRlbVN0eWxlLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHZhbHVlID0gX3Byb3BzLnZhbHVlLFxuICAgICAgICAgIHZhbHVlTGluayA9IF9wcm9wcy52YWx1ZUxpbmssXG4gICAgICAgICAgd2lkdGggPSBfcHJvcHMud2lkdGgsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnYXV0b1dpZHRoJywgJ2NoaWxkcmVuJywgJ2Rlc2t0b3AnLCAnZGlzYWJsZUF1dG9Gb2N1cycsICdpbml0aWFsbHlLZXlib2FyZEZvY3VzZWQnLCAnbGlzdFN0eWxlJywgJ21heEhlaWdodCcsICdtdWx0aXBsZScsICdvbkl0ZW1DbGljaycsICdvbkVzY0tleURvd24nLCAnb25NZW51SXRlbUZvY3VzQ2hhbmdlJywgJ3NlbGVjdGVkTWVudUl0ZW1TdHlsZScsICdtZW51SXRlbVN0eWxlJywgJ3N0eWxlJywgJ3ZhbHVlJywgJ3ZhbHVlTGluaycsICd3aWR0aCddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXModGhpcy5wcm9wcywgdGhpcy5jb250ZXh0KTtcblxuICAgICAgdmFyIG1lcmdlZFJvb3RTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnJvb3QsIHN0eWxlKTtcbiAgICAgIHZhciBtZXJnZWRMaXN0U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5saXN0LCBsaXN0U3R5bGUpO1xuXG4gICAgICB2YXIgZmlsdGVyZWRDaGlsZHJlbiA9IHRoaXMuZ2V0RmlsdGVyZWRDaGlsZHJlbihjaGlsZHJlbik7XG5cbiAgICAgIHZhciBtZW51SXRlbUluZGV4ID0gMDtcbiAgICAgIHZhciBuZXdDaGlsZHJlbiA9IF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5tYXAoZmlsdGVyZWRDaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgICB2YXIgY2hpbGRJc0Rpc2FibGVkID0gY2hpbGQucHJvcHMuZGlzYWJsZWQ7XG4gICAgICAgIHZhciBjaGlsZE5hbWUgPSBjaGlsZC50eXBlID8gY2hpbGQudHlwZS5tdWlOYW1lIDogJyc7XG4gICAgICAgIHZhciBuZXdDaGlsZCA9IGNoaWxkO1xuXG4gICAgICAgIHN3aXRjaCAoY2hpbGROYW1lKSB7XG4gICAgICAgICAgY2FzZSAnTWVudUl0ZW0nOlxuICAgICAgICAgICAgbmV3Q2hpbGQgPSBfdGhpczQuY2xvbmVNZW51SXRlbShjaGlsZCwgbWVudUl0ZW1JbmRleCwgc3R5bGVzLCBpbmRleCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ0RpdmlkZXInOlxuICAgICAgICAgICAgbmV3Q2hpbGQgPSBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgICAgIHN0eWxlOiAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5kaXZpZGVyLCBjaGlsZC5wcm9wcy5zdHlsZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnTWVudUl0ZW0nICYmICFjaGlsZElzRGlzYWJsZWQpIHtcbiAgICAgICAgICBtZW51SXRlbUluZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3Q2hpbGQ7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfQ2xpY2tBd2F5TGlzdGVuZXIyLmRlZmF1bHQsXG4gICAgICAgIHsgb25DbGlja0F3YXk6IHRoaXMuaGFuZGxlQ2xpY2tBd2F5IH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuICAgICAgICAgICAgb25XaGVlbDogdGhpcy5oYW5kbGVPbldoZWVsLFxuICAgICAgICAgICAgc3R5bGU6IHByZXBhcmVTdHlsZXMobWVyZ2VkUm9vdFN0eWxlcyksXG4gICAgICAgICAgICByZWY6ICdzY3JvbGxDb250YWluZXInLFxuICAgICAgICAgICAgcm9sZTogJ3ByZXNlbnRhdGlvbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX0xpc3QyLmRlZmF1bHQsXG4gICAgICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwge1xuICAgICAgICAgICAgICByZWY6ICdsaXN0JyxcbiAgICAgICAgICAgICAgc3R5bGU6IG1lcmdlZExpc3RTdHlsZXMsXG4gICAgICAgICAgICAgIHJvbGU6ICdtZW51J1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXdDaGlsZHJlblxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE1lbnU7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5NZW51LmRlZmF1bHRQcm9wcyA9IHtcbiAgYXV0b1dpZHRoOiB0cnVlLFxuICBkZXNrdG9wOiBmYWxzZSxcbiAgZGlzYWJsZUF1dG9Gb2N1czogZmFsc2UsXG4gIGluaXRpYWxseUtleWJvYXJkRm9jdXNlZDogZmFsc2UsXG4gIG1heEhlaWdodDogbnVsbCxcbiAgbXVsdGlwbGU6IGZhbHNlLFxuICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoKSB7fSxcbiAgb25Fc2NLZXlEb3duOiBmdW5jdGlvbiBvbkVzY0tleURvd24oKSB7fSxcbiAgb25JdGVtQ2xpY2s6IGZ1bmN0aW9uIG9uSXRlbUNsaWNrKCkge30sXG4gIG9uS2V5RG93bjogZnVuY3Rpb24gb25LZXlEb3duKCkge31cbn07XG5NZW51LmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cbnZhciBfaW5pdGlhbGlzZVByb3BzID0gZnVuY3Rpb24gX2luaXRpYWxpc2VQcm9wcygpIHtcbiAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgdGhpcy5oYW5kbGVDbGlja0F3YXkgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBmb2N1c0luZGV4ID0gX3RoaXM1LnN0YXRlLmZvY3VzSW5kZXg7XG5cbiAgICBpZiAoZm9jdXNJbmRleCA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZmlsdGVyZWRDaGlsZHJlbiA9IF90aGlzNS5nZXRGaWx0ZXJlZENoaWxkcmVuKF90aGlzNS5wcm9wcy5jaGlsZHJlbik7XG4gICAgdmFyIGZvY3VzZWRJdGVtID0gZmlsdGVyZWRDaGlsZHJlbltmb2N1c0luZGV4XTtcbiAgICBpZiAoISFmb2N1c2VkSXRlbSAmJiBmb2N1c2VkSXRlbS5wcm9wcy5tZW51SXRlbXMgJiYgZm9jdXNlZEl0ZW0ucHJvcHMubWVudUl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfdGhpczUuc2V0Rm9jdXNJbmRleChldmVudCwgLTEsIGZhbHNlKTtcbiAgfTtcblxuICB0aGlzLmhhbmRsZUtleURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgZmlsdGVyZWRDaGlsZHJlbiA9IF90aGlzNS5nZXRGaWx0ZXJlZENoaWxkcmVuKF90aGlzNS5wcm9wcy5jaGlsZHJlbik7XG4gICAgdmFyIGtleSA9ICgwLCBfa2V5Y29kZTIuZGVmYXVsdCkoZXZlbnQpO1xuICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXM1LmluY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleChldmVudCwgZmlsdGVyZWRDaGlsZHJlbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZXNjJzpcbiAgICAgICAgX3RoaXM1LnByb3BzLm9uRXNjS2V5RG93bihldmVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGFiJzpcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgX3RoaXM1LmRlY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleChldmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXM1LmluY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleChldmVudCwgZmlsdGVyZWRDaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1cCc6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzNS5kZWNyZW1lbnRLZXlib2FyZEZvY3VzSW5kZXgoZXZlbnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChrZXkgJiYga2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHZhciBob3RLZXlzID0gX3RoaXM1LmhvdEtleUhvbGRlci5hcHBlbmQoa2V5KTtcbiAgICAgICAgICBpZiAoX3RoaXM1LnNldEZvY3VzSW5kZXhTdGFydHNXaXRoKGV2ZW50LCBob3RLZXlzLCBmaWx0ZXJlZENoaWxkcmVuKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3RoaXM1LnByb3BzLm9uS2V5RG93bihldmVudCk7XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVPbldoZWVsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHNjcm9sbENvbnRhaW5lciA9IF90aGlzNS5yZWZzLnNjcm9sbENvbnRhaW5lcjtcbiAgICAvLyBPbmx5IHNjcm9sbCBsb2NrIGlmIHRoZSB0aGUgTWVudSBpcyBzY3JvbGxhYmxlLlxuICAgIGlmIChzY3JvbGxDb250YWluZXIuc2Nyb2xsSGVpZ2h0IDw9IHNjcm9sbENvbnRhaW5lci5jbGllbnRIZWlnaHQpIHJldHVybjtcblxuICAgIHZhciBzY3JvbGxUb3AgPSBzY3JvbGxDb250YWluZXIuc2Nyb2xsVG9wLFxuICAgICAgICBzY3JvbGxIZWlnaHQgPSBzY3JvbGxDb250YWluZXIuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICBjbGllbnRIZWlnaHQgPSBzY3JvbGxDb250YWluZXIuY2xpZW50SGVpZ2h0O1xuXG4gICAgdmFyIHdoZWVsRGVsdGEgPSBldmVudC5kZWx0YVk7XG4gICAgdmFyIGlzRGVsdGFQb3NpdGl2ZSA9IHdoZWVsRGVsdGEgPiAwO1xuXG4gICAgaWYgKGlzRGVsdGFQb3NpdGl2ZSAmJiB3aGVlbERlbHRhID4gc2Nyb2xsSGVpZ2h0IC0gY2xpZW50SGVpZ2h0IC0gc2Nyb2xsVG9wKSB7XG4gICAgICBzY3JvbGxDb250YWluZXIuc2Nyb2xsVG9wID0gc2Nyb2xsSGVpZ2h0O1xuICAgICAgcmV0dXJuIF90aGlzNS5jYW5jZWxTY3JvbGxFdmVudChldmVudCk7XG4gICAgfSBlbHNlIGlmICghaXNEZWx0YVBvc2l0aXZlICYmIC13aGVlbERlbHRhID4gc2Nyb2xsVG9wKSB7XG4gICAgICBzY3JvbGxDb250YWluZXIuc2Nyb2xsVG9wID0gMDtcbiAgICAgIHJldHVybiBfdGhpczUuY2FuY2VsU2Nyb2xsRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgfTtcbn07XG5cbk1lbnUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIHdpZHRoIG9mIHRoZSBtZW51IHdpbGwgYmUgc2V0IGF1dG9tYXRpY2FsbHlcbiAgICogYWNjb3JkaW5nIHRvIHRoZSB3aWR0aHMgb2YgaXRzIGNoaWxkcmVuLFxuICAgKiB1c2luZyBwcm9wZXIga2V5bGluZSBpbmNyZW1lbnRzICg2NHB4IGZvciBkZXNrdG9wLFxuICAgKiA1NnB4IG90aGVyd2lzZSkuXG4gICAqL1xuICBhdXRvV2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBtZW51LiBUaGlzIGlzIHVzdWFsbHkgdXNlZCB0byBwYXNzIGBNZW51SXRlbWBcbiAgICogZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIG1lbnUgaXRlbSB3aWxsIHJlbmRlciB3aXRoIGNvbXBhY3QgZGVza3RvcCBzdHlsZXMuXG4gICAqL1xuICBkZXNrdG9wOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgbWVudSB3aWxsIG5vdCBiZSBhdXRvLWZvY3VzZWQuXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgbWVudSB3aWxsIGJlIGtleWJvYXJkLWZvY3VzZWQgaW5pdGlhbGx5LlxuICAgKi9cbiAgaW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgdW5kZXJseWluZyBgTGlzdGAgZWxlbWVudC5cbiAgICovXG4gIGxpc3RTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBoZWlnaHQgb2YgdGhlIG1lbnUgaW4gcGl4ZWxzLiBJZiBzcGVjaWZpZWQsXG4gICAqIHRoZSBtZW51IHdpbGwgYmUgc2Nyb2xsYWJsZSBpZiBpdCBpcyB0YWxsZXIgdGhhbiB0aGUgcHJvdmlkZWRcbiAgICogaGVpZ2h0LlxuICAgKi9cbiAgbWF4SGVpZ2h0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIG1lbnUgaXRlbXMuXG4gICAqL1xuICBtZW51SXRlbVN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIElmIHRydWUsIGB2YWx1ZWAgbXVzdCBiZSBhbiBhcnJheSBhbmQgdGhlIG1lbnUgd2lsbCBzdXBwb3J0XG4gICAqIG11bHRpcGxlIHNlbGVjdGlvbnMuXG4gICAqL1xuICBtdWx0aXBsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSB3aXRoIGB2YWx1ZWAgbm90XG4gICAqIGVxdWFsIHRvIHRoZSBjdXJyZW50IGB2YWx1ZWAgb2YgdGhlIG1lbnUgaXMgY2xpY2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IENsaWNrIGV2ZW50IHRhcmdldGluZyB0aGUgbWVudSBpdGVtLlxuICAgKiBAcGFyYW0ge2FueX0gIHZhbHVlIElmIGBtdWx0aXBsZWAgaXMgdHJ1ZSwgdGhlIG1lbnUncyBgdmFsdWVgXG4gICAqIGFycmF5IHdpdGggZWl0aGVyIHRoZSBtZW51IGl0ZW0ncyBgdmFsdWVgIGFkZGVkIChpZlxuICAgKiBpdCB3YXNuJ3QgYWxyZWFkeSBzZWxlY3RlZCkgb3Igb21pdHRlZCAoaWYgaXQgd2FzIGFscmVhZHkgc2VsZWN0ZWQpLlxuICAgKiBPdGhlcndpc2UsIHRoZSBgdmFsdWVgIG9mIHRoZSBtZW51IGl0ZW0uXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgbWVudSBpcyBmb2N1c2VkIGFuZCB0aGUgKkVzYyoga2V5XG4gICAqIGlzIHByZXNzZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBga2V5ZG93bmAgZXZlbnQgdGFyZ2V0aW5nIHRoZSBtZW51LlxuICAgKi9cbiAgb25Fc2NLZXlEb3duOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIGNsaWNrZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBDbGljayBldmVudCB0YXJnZXRpbmcgdGhlIG1lbnUgaXRlbS5cbiAgICogQHBhcmFtIHtvYmplY3R9IG1lbnVJdGVtIFRoZSBtZW51IGl0ZW0uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIG1lbnUgaXRlbS5cbiAgICovXG4gIG9uSXRlbUNsaWNrOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uS2V5RG93bjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgZm9jdXMgb24gYSBgTWVudUl0ZW1gIGlzIGNoYW5nZWQuXG4gICAqIFRoZXJlIHdpbGwgYmUgc29tZSBcImR1cGxpY2F0ZVwiIGNoYW5nZXMgcmVwb3J0ZWQgaWYgdHdvIGRpZmZlcmVudFxuICAgKiBmb2N1c2luZyBldmVudCBoYXBwZW4sIGZvciBleGFtcGxlIGlmIGEgYE1lbnVJdGVtYCBpcyBmb2N1c2VkIHZpYVxuICAgKiB0aGUga2V5Ym9hcmQgYW5kIHRoZW4gaXQgaXMgY2xpY2tlZCBvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgZm9jdXMgY2hhbmdlLlxuICAgKiBUaGUgZXZlbnQgY2FuIGJlIG51bGwgc2luY2UgdGhlIGZvY3VzIGNhbiBiZSBjaGFuZ2VkIGZvciBub24tZXZlbnRcbiAgICogcmVhc29ucyBzdWNoIGFzIHByb3AgY2hhbmdlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG5ld0ZvY3VzSW5kZXggVGhlIGluZGV4IG9mIHRoZSBuZXdseSBmb2N1c2VkXG4gICAqIGBNZW51SXRlbWAgb3IgYC0xYCBpZiBmb2N1cyB3YXMgbG9zdC5cbiAgICovXG4gIG9uTWVudUl0ZW1Gb2N1c0NoYW5nZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2Ygc2VsZWN0ZWQgbWVudSBpdGVtcy5cbiAgICovXG4gIHNlbGVjdGVkTWVudUl0ZW1TdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogSWYgYG11bHRpcGxlYCBpcyB0cnVlLCBhbiBhcnJheSBvZiB0aGUgYHZhbHVlYHMgb2YgdGhlIHNlbGVjdGVkXG4gICAqIG1lbnUgaXRlbXMuIE90aGVyd2lzZSwgdGhlIGB2YWx1ZWAgb2YgdGhlIHNlbGVjdGVkIG1lbnUgaXRlbS5cbiAgICogSWYgcHJvdmlkZWQsIHRoZSBtZW51IHdpbGwgYmUgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICogVGhpcyBjb21wb25lbnQgYWxzbyBzdXBwb3J0cyB2YWx1ZUxpbmsuXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIC8qKlxuICAgKiBWYWx1ZUxpbmsgZm9yIHRoZSBtZW51J3MgYHZhbHVlYC5cbiAgICovXG4gIHZhbHVlTGluazogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIG1lbnUuIElmIG5vdCBzcGVjaWZpZWQsIHRoZSBtZW51J3Mgd2lkdGhcbiAgICogd2lsbCBiZSBzZXQgYWNjb3JkaW5nIHRvIHRoZSB3aWR0aHMgb2YgaXRzIGNoaWxkcmVuLCB1c2luZ1xuICAgKiBwcm9wZXIga2V5bGluZSBpbmNyZW1lbnRzICg2NHB4IGZvciBkZXNrdG9wLCA1NnB4IG90aGVyd2lzZSkuXG4gICAqL1xuICB3aWR0aDogX3Byb3BUeXBlczQuZGVmYXVsdC5zdHJpbmdPck51bWJlclxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gTWVudTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnblwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3BhZ2VzLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9wYWdlcy5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3BhZ2VzLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5c1wiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZVByb3BlcnR5O1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZSA9IHJlcXVpcmUoJ2h5cGhlbmF0ZS1zdHlsZS1uYW1lJyk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGVOYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h5cGhlbmF0ZVN0eWxlTmFtZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVByb3BlcnR5KHByb3BlcnR5KSB7XG4gIHJldHVybiAoMCwgX2h5cGhlbmF0ZVN0eWxlTmFtZTIuZGVmYXVsdCkocHJvcGVydHkpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc09iamVjdDtcbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkTmV3VmFsdWVzT25seTtcbmZ1bmN0aW9uIGFkZElmTmV3KGxpc3QsIHZhbHVlKSB7XG4gIGlmIChsaXN0LmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgIGxpc3QucHVzaCh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkTmV3VmFsdWVzT25seShsaXN0LCB2YWx1ZXMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGFkZElmTmV3KGxpc3QsIHZhbHVlc1tpXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFkZElmTmV3KGxpc3QsIHZhbHVlcyk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwcmVmaXhWYWx1ZTtcbmZ1bmN0aW9uIHByZWZpeFZhbHVlKHBsdWdpbnMsIHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIG1ldGFEYXRhKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwbHVnaW5zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gcGx1Z2luc1tpXShwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBtZXRhRGF0YSk7XG5cbiAgICAvLyB3ZSBjYW4gc3RvcCBwcm9jZXNzaW5nIGlmIGEgdmFsdWUgaXMgcmV0dXJuZWRcbiAgICAvLyBhcyBhbGwgcGx1Z2luIGNyaXRlcmlhIGFyZSB1bmlxdWVcbiAgICBpZiAocHJvY2Vzc2VkVmFsdWUpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgICB9XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9hcnJheS9mcm9tXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZnJvbSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL2FycmF5L2Zyb21cIik7XG5cbnZhciBfZnJvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mcm9tKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyMltpXSA9IGFycltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKDAsIF9mcm9tMi5kZWZhdWx0KShhcnIpO1xuICB9XG59OyIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgY2FuVXNlRE9NID0gZXhwb3J0cy5jYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG52YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBleHBvcnRzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbnZhciBnZXRDb25maXJtYXRpb24gPSBleHBvcnRzLmdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG52YXIgc3VwcG9ydHNIaXN0b3J5ID0gZXhwb3J0cy5zdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xudmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBleHBvcnRzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG52YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBleHBvcnRzLnN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG52YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGV4cG9ydHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7IiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9NZW51SXRlbSA9IHJlcXVpcmUoJy4vTWVudUl0ZW0nKTtcblxudmFyIF9NZW51SXRlbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZW51SXRlbSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9NZW51SXRlbTIuZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfZ2V0TXVpVGhlbWUgPSByZXF1aXJlKCcuL2dldE11aVRoZW1lJyk7XG5cbnZhciBfZ2V0TXVpVGhlbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0TXVpVGhlbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTXVpVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKE11aVRoZW1lUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE11aVRoZW1lUHJvdmlkZXIoKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgTXVpVGhlbWVQcm92aWRlcik7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKE11aVRoZW1lUHJvdmlkZXIuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKE11aVRoZW1lUHJvdmlkZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKE11aVRoZW1lUHJvdmlkZXIsIFt7XG4gICAga2V5OiAnZ2V0Q2hpbGRDb250ZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbXVpVGhlbWU6IHRoaXMucHJvcHMubXVpVGhlbWUgfHwgKDAsIF9nZXRNdWlUaGVtZTIuZGVmYXVsdCkoKVxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE11aVRoZW1lUHJvdmlkZXI7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5NdWlUaGVtZVByb3ZpZGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcbk11aVRoZW1lUHJvdmlkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IE11aVRoZW1lUHJvdmlkZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLmhvaXN0Tm9uUmVhY3RTdGF0aWNzID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgXG4gICAgdmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgICAgICBtaXhpbnM6IHRydWUsXG4gICAgICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICAgICAgdHlwZTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgIGxlbmd0aDogdHJ1ZSxcbiAgICAgICAgcHJvdG90eXBlOiB0cnVlLFxuICAgICAgICBjYWxsZXI6IHRydWUsXG4gICAgICAgIGNhbGxlZTogdHJ1ZSxcbiAgICAgICAgYXJndW1lbnRzOiB0cnVlLFxuICAgICAgICBhcml0eTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gICAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgdmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9O1xufSkpKTtcbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikoZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBfUGF0aFV0aWxzLmNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuXG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgKDAsIF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gpKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLnN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2gpKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmICgwLCBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbCkocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKSh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gWygwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUhhc2hIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbnZhciBfRE9NVXRpbHMgPSByZXF1aXJlKCcuL0RPTVV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSAoMCwgX0RPTVV0aWxzLnN1cHBvcnRzSGlzdG9yeSkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gISgwLCBfRE9NVXRpbHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSkoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gKDAsIF9QYXRoVXRpbHMuc3RyaXBUcmFpbGluZ1NsYXNoKSgoMCwgX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gpKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGtleSk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmICgoMCwgX0RPTVV0aWxzLmlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQpKGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6ICcvJyxcbiAgICAgIHVybDogJy8nLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSAnLydcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBoaXN0b3J5ID0gX3Byb3BzLmhpc3Rvcnk7XG5cblxuICAgIGludmFyaWFudChjaGlsZHJlbiA9PSBudWxsIHx8IFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMSwgJ0EgPFJvdXRlcj4gbWF5IGhhdmUgb25seSBvbmUgY2hpbGQgZWxlbWVudCcpO1xuXG4gICAgLy8gRG8gdGhpcyBoZXJlIHNvIHdlIGNhbiBzZXRTdGF0ZSB3aGVuIGEgPFJlZGlyZWN0PiBjaGFuZ2VzIHRoZVxuICAgIC8vIGxvY2F0aW9uIGluIGNvbXBvbmVudFdpbGxNb3VudC4gVGhpcyBoYXBwZW5zIGUuZy4gd2hlbiBkb2luZ1xuICAgIC8vIHNlcnZlciByZW5kZXJpbmcgdXNpbmcgYSA8U3RhdGljUm91dGVyPi5cbiAgICB0aGlzLnVubGlzdGVuID0gaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgbWF0Y2g6IF90aGlzMi5jb21wdXRlTWF0Y2goaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyh0aGlzLnByb3BzLmhpc3RvcnkgPT09IG5leHRQcm9wcy5oaXN0b3J5LCAnWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PicpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHJldHVybiBjaGlsZHJlbiA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZXIucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblJvdXRlci5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuXG52YXIgQnJvd3NlclJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhCcm93c2VyUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBCcm93c2VyUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnJvd3NlclJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVIYXNoSGlzdG9yeSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEhhc2hSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPEhhc2hSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5IYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnaGFzaGJhbmcnLCAnbm9zbGFzaCcsICdzbGFzaCddKSxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IEhhc2hSb3V0ZXI7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG52YXIgaXNNb2RpZmllZEV2ZW50ID0gZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cbnZhciBMaW5rID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKExpbmssIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpbmsoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMaW5rKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2xpY2spIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuXG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgLy8gb25DbGljayBwcmV2ZW50ZWQgZGVmYXVsdFxuICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSByaWdodCBjbGlja3NcbiAgICAgICFfdGhpcy5wcm9wcy50YXJnZXQgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgdmFyIGhpc3RvcnkgPSBfdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgICAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgICByZXBsYWNlID0gX3RoaXMkcHJvcHMucmVwbGFjZSxcbiAgICAgICAgICAgICAgdG8gPSBfdGhpcyRwcm9wcy50bztcblxuXG4gICAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBMaW5rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHJlcGxhY2UgPSBfcHJvcHMucmVwbGFjZSxcbiAgICAgICAgdG8gPSBfcHJvcHMudG8sXG4gICAgICAgIGlubmVyUmVmID0gX3Byb3BzLmlubmVyUmVmLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsncmVwbGFjZScsICd0bycsICdpbm5lclJlZiddKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgdmFyIGhyZWYgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuY3JlYXRlSHJlZih0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8geyBwYXRobmFtZTogdG8gfSA6IHRvKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCdhJywgX2V4dGVuZHMoe30sIHByb3BzLCB7IG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIGhyZWY6IGhyZWYsIHJlZjogaW5uZXJSZWYgfSkpO1xuICB9O1xuXG4gIHJldHVybiBMaW5rO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5MaW5rLnByb3BUeXBlcyA9IHtcbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZCxcbiAgaW5uZXJSZWY6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jXSlcbn07XG5MaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVwbGFjZTogZmFsc2Vcbn07XG5MaW5rLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBwdXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgcmVwbGFjZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGNyZWF0ZUhyZWY6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTGluazsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlSGlzdG9yeSBmcm9tICdoaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnknO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW1vcnlSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9ICcnICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgY2FjaGUgPSBwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldIHx8IChwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldID0ge30pO1xuXG4gIGlmIChjYWNoZVtwYXR0ZXJuXSkgcmV0dXJuIGNhY2hlW3BhdHRlcm5dO1xuXG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZSA9IHBhdGhUb1JlZ2V4cChwYXR0ZXJuLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIGNvbXBpbGVkUGF0dGVybiA9IHsgcmU6IHJlLCBrZXlzOiBrZXlzIH07XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0dGVybl0gPSBjb21waWxlZFBhdHRlcm47XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBpbGVkUGF0dGVybjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoIHBhdHRlcm4uXG4gKi9cbnZhciBtYXRjaFBhdGggPSBmdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIG9wdGlvbnMgPSB7IHBhdGg6IG9wdGlvbnMgfTtcblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBwYXRoID0gX29wdGlvbnMkcGF0aCA9PT0gdW5kZWZpbmVkID8gJy8nIDogX29wdGlvbnMkcGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09ICcvJyAmJiB1cmwgPT09ICcnID8gJy8nIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJy4vbWF0Y2hQYXRoJztcblxudmFyIGlzRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cbnZhciBSb3V0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLCBfdGhpcy5jb250ZXh0LnJvdXRlcilcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKF9yZWYsIHJvdXRlcikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICAgIHBhdGggPSBfcmVmLnBhdGgsXG4gICAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHJldHVybiBjb21wdXRlZE1hdGNoOyAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcblxuICAgIGludmFyaWFudChyb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvciB3aXRoUm91dGVyKCkgb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgocGF0aG5hbWUsIHsgcGF0aDogcGF0aCwgc3RyaWN0OiBzdHJpY3QsIGV4YWN0OiBleGFjdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSkgOiByb3V0ZS5tYXRjaDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWQnKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCAnWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCcpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMucmVuZGVyICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJyk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1hdGNoOiB0aGlzLmNvbXB1dGVNYXRjaChuZXh0UHJvcHMsIG5leHRDb250ZXh0LnJvdXRlcilcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMuc3RhdGUubWF0Y2g7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICByZW5kZXIgPSBfcHJvcHMucmVuZGVyO1xuICAgIHZhciBfY29udGV4dCRyb3V0ZXIgPSB0aGlzLmNvbnRleHQucm91dGVyLFxuICAgICAgICBoaXN0b3J5ID0gX2NvbnRleHQkcm91dGVyLmhpc3RvcnksXG4gICAgICAgIHJvdXRlID0gX2NvbnRleHQkcm91dGVyLnJvdXRlLFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gX2NvbnRleHQkcm91dGVyLnN0YXRpY0NvbnRleHQ7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuICAgIHZhciBwcm9wcyA9IHsgbWF0Y2g6IG1hdGNoLCBsb2NhdGlvbjogbG9jYXRpb24sIGhpc3Rvcnk6IGhpc3RvcnksIHN0YXRpY0NvbnRleHQ6IHN0YXRpY0NvbnRleHQgfTtcblxuICAgIHJldHVybiBjb21wb25lbnQgPyAvLyBjb21wb25lbnQgcHJvcCBnZXRzIGZpcnN0IHByaW9yaXR5LCBvbmx5IGNhbGxlZCBpZiB0aGVyZSdzIGEgbWF0Y2hcbiAgICBtYXRjaCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiBudWxsIDogcmVuZGVyID8gLy8gcmVuZGVyIHByb3AgaXMgbmV4dCwgb25seSBjYWxsZWQgaWYgdGhlcmUncyBhIG1hdGNoXG4gICAgbWF0Y2ggPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IGNoaWxkcmVuID8gLy8gY2hpbGRyZW4gY29tZSBsYXN0LCBhbHdheXMgY2FsbGVkXG4gICAgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4ocHJvcHMpIDogIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikgPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGwgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGUucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSlcbn07XG5Sb3V0ZS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZSBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvUm91dGUnO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi9Sb3V0ZSc7XG5pbXBvcnQgTGluayBmcm9tICcuL0xpbmsnO1xuXG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG52YXIgTmF2TGluayA9IGZ1bmN0aW9uIE5hdkxpbmsoX3JlZikge1xuICB2YXIgdG8gPSBfcmVmLnRvLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgZ2V0SXNBY3RpdmUgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmLmFyaWFDdXJyZW50LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ3RvJywgJ2V4YWN0JywgJ3N0cmljdCcsICdsb2NhdGlvbicsICdhY3RpdmVDbGFzc05hbWUnLCAnY2xhc3NOYW1lJywgJ2FjdGl2ZVN0eWxlJywgJ3N0eWxlJywgJ2lzQWN0aXZlJywgJ2FyaWFDdXJyZW50J10pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgcGF0aDogKHR5cGVvZiB0byA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodG8pKSA9PT0gJ29iamVjdCcgPyB0by5wYXRobmFtZSA6IHRvLFxuICAgIGV4YWN0OiBleGFjdCxcbiAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKF9yZWYyKSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfcmVmMi5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaCA9IF9yZWYyLm1hdGNoO1xuXG4gICAgICB2YXIgaXNBY3RpdmUgPSAhIShnZXRJc0FjdGl2ZSA/IGdldElzQWN0aXZlKG1hdGNoLCBsb2NhdGlvbikgOiBtYXRjaCk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHtcbiAgICAgICAgdG86IHRvLFxuICAgICAgICBjbGFzc05hbWU6IGlzQWN0aXZlID8gW2NsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lXS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkuam9pbignICcpIDogY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGUsIGFjdGl2ZVN0eWxlKSA6IHN0eWxlLFxuICAgICAgICAnYXJpYS1jdXJyZW50JzogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnRcbiAgICAgIH0sIHJlc3QpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gIHRvOiBMaW5rLnByb3BUeXBlcy50byxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICBhcmlhQ3VycmVudDogUHJvcFR5cGVzLm9uZU9mKFsncGFnZScsICdzdGVwJywgJ2xvY2F0aW9uJywgJ3RydWUnXSlcbn07XG5cbk5hdkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnLFxuICBhcmlhQ3VycmVudDogJ3RydWUnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXZMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5XG4gKiBmcm9tIGEgc2NyZWVuIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFByb21wdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQcm9tcHQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb21wdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvbXB0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnVuYmxvY2spIHRoaXMudW5ibG9jaygpO1xuXG4gICAgdGhpcy51bmJsb2NrID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5LmJsb2NrKG1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykge1xuICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICB0aGlzLnVuYmxvY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIGlmICh0aGlzLnByb3BzLndoZW4pIHRoaXMuZW5hYmxlKHRoaXMucHJvcHMubWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLndoZW4pIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy53aGVuIHx8IHRoaXMucHJvcHMubWVzc2FnZSAhPT0gbmV4dFByb3BzLm1lc3NhZ2UpIHRoaXMuZW5hYmxlKG5leHRQcm9wcy5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmRpc2FibGUoKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUHJvbXB0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qcm9tcHQucHJvcFR5cGVzID0ge1xuICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgbWVzc2FnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKS5pc1JlcXVpcmVkXG59O1xuUHJvbXB0LmRlZmF1bHRQcm9wcyA9IHtcbiAgd2hlbjogdHJ1ZVxufTtcblByb21wdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgYmxvY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgeyBwYXJzZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5cbmV4cG9ydCB2YXIgY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxuZXhwb3J0IHZhciBsb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCJleHBvcnQgdmFyIGFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgaGFzQmFzZW5hbWUgPSBmdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHBhcnNlUGF0aCA9IGZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxuZXhwb3J0IHZhciBjcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07IiwiZXhwb3J0IHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnQgdmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyID8gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciBnZXRDb25maXJtYXRpb24gPSBmdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcbn07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuZXhwb3J0IHZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzSGlzdG9yeSwgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSwgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG52YXIgY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuXG4gIHZhciBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuXG4gICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKTtcblxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUhhc2hIaXN0b3J5OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcblxuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSAnaGlzdG9yeSc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHVwZGF0aW5nIHRoZSBsb2NhdGlvbiBwcm9ncmFtbWF0aWNhbGx5XG4gKiB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbnZhciBSZWRpcmVjdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWRpcmVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVkaXJlY3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZGlyZWN0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmlzU3RhdGljID0gZnVuY3Rpb24gaXNTdGF0aWMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5yb3V0ZXIgJiYgdGhpcy5jb250ZXh0LnJvdXRlci5zdGF0aWNDb250ZXh0O1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIGlmICh0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICghdGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBwcmV2VG8gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuICAgIHZhciBuZXh0VG8gPSBjcmVhdGVMb2NhdGlvbih0aGlzLnByb3BzLnRvKTtcblxuICAgIGlmIChsb2NhdGlvbnNBcmVFcXVhbChwcmV2VG8sIG5leHRUbykpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdZb3UgdHJpZWQgdG8gcmVkaXJlY3QgdG8gdGhlIHNhbWUgcm91dGUgeW91XFwncmUgY3VycmVudGx5IG9uOiAnICsgKCdcIicgKyBuZXh0VG8ucGF0aG5hbWUgKyBuZXh0VG8uc2VhcmNoICsgJ1wiJykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5wZXJmb3JtID0gZnVuY3Rpb24gcGVyZm9ybSgpIHtcbiAgICB2YXIgaGlzdG9yeSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcHVzaCA9IF9wcm9wcy5wdXNoLFxuICAgICAgICB0byA9IF9wcm9wcy50bztcblxuXG4gICAgaWYgKHB1c2gpIHtcbiAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgfVxuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJlZGlyZWN0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5SZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbn07XG5SZWRpcmVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHB1c2g6IGZhbHNlXG59O1xuUmVkaXJlY3QuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIGNyZWF0ZVBhdGgsIHBhcnNlUGF0aCB9IGZyb20gJ2hpc3RvcnkvUGF0aFV0aWxzJztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG52YXIgbm9ybWFsaXplTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVMb2NhdGlvbihvYmplY3QpIHtcbiAgdmFyIF9vYmplY3QkcGF0aG5hbWUgPSBvYmplY3QucGF0aG5hbWUsXG4gICAgICBwYXRobmFtZSA9IF9vYmplY3QkcGF0aG5hbWUgPT09IHVuZGVmaW5lZCA/ICcvJyA6IF9vYmplY3QkcGF0aG5hbWUsXG4gICAgICBfb2JqZWN0JHNlYXJjaCA9IG9iamVjdC5zZWFyY2gsXG4gICAgICBzZWFyY2ggPSBfb2JqZWN0JHNlYXJjaCA9PT0gdW5kZWZpbmVkID8gJycgOiBfb2JqZWN0JHNlYXJjaCxcbiAgICAgIF9vYmplY3QkaGFzaCA9IG9iamVjdC5oYXNoLFxuICAgICAgaGFzaCA9IF9vYmplY3QkaGFzaCA9PT0gdW5kZWZpbmVkID8gJycgOiBfb2JqZWN0JGhhc2g7XG5cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG52YXIgYWRkQmFzZW5hbWUgPSBmdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufTtcblxudmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgdmFyIGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuXG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufTtcblxudmFyIGNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24obG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgobG9jYXRpb24pIDogbm9ybWFsaXplTG9jYXRpb24obG9jYXRpb24pO1xufTtcblxudmFyIGNyZWF0ZVVSTCA9IGZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJyA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59O1xuXG52YXIgc3RhdGljSGFuZGxlciA9IGZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGludmFyaWFudChmYWxzZSwgJ1lvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPicsIG1ldGhvZE5hbWUpO1xuICB9O1xufTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG52YXIgU3RhdGljUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGljUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jcmVhdGVIcmVmID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goX3RoaXMucHJvcHMuYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgIH0sIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gJ1BVU0gnO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmVwbGFjZSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyLmJhc2VuYW1lLFxuICAgICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjoge1xuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLmNvbnRleHRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYmFzZW5hbWUgPSBfcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGNvbnRleHQgPSBfcHJvcHMuY29udGV4dCxcbiAgICAgICAgbG9jYXRpb24gPSBfcHJvcHMubG9jYXRpb24sXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydiYXNlbmFtZScsICdjb250ZXh0JywgJ2xvY2F0aW9uJ10pO1xuXG4gICAgdmFyIGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiB0aGlzLmNyZWF0ZUhyZWYsXG4gICAgICBhY3Rpb246ICdQT1AnLFxuICAgICAgbG9jYXRpb246IHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSksXG4gICAgICBwdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICByZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBnbzogc3RhdGljSGFuZGxlcignZ28nKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcignZ29CYWNrJyksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoJ2dvRm9yd2FyZCcpLFxuICAgICAgbGlzdGVuOiB0aGlzLmhhbmRsZUxpc3RlbixcbiAgICAgIGJsb2NrOiB0aGlzLmhhbmRsZUJsb2NrXG4gICAgfTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHByb3BzLCB7IGhpc3Rvcnk6IGhpc3RvcnkgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbn07XG5TdGF0aWNSb3V0ZXIuZGVmYXVsdFByb3BzID0ge1xuICBiYXNlbmFtZTogJycsXG4gIGxvY2F0aW9uOiAnLydcbn07XG5TdGF0aWNSb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJy4vbWF0Y2hQYXRoJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTd2l0Y2gpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciByb3V0ZSA9IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGU7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG5cbiAgICB2YXIgbWF0Y2ggPSB2b2lkIDAsXG4gICAgICAgIGNoaWxkID0gdm9pZCAwO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSByZXR1cm47XG5cbiAgICAgIHZhciBfZWxlbWVudCRwcm9wcyA9IGVsZW1lbnQucHJvcHMsXG4gICAgICAgICAgcGF0aFByb3AgPSBfZWxlbWVudCRwcm9wcy5wYXRoLFxuICAgICAgICAgIGV4YWN0ID0gX2VsZW1lbnQkcHJvcHMuZXhhY3QsXG4gICAgICAgICAgc3RyaWN0ID0gX2VsZW1lbnQkcHJvcHMuc3RyaWN0LFxuICAgICAgICAgIHNlbnNpdGl2ZSA9IF9lbGVtZW50JHByb3BzLnNlbnNpdGl2ZSxcbiAgICAgICAgICBmcm9tID0gX2VsZW1lbnQkcHJvcHMuZnJvbTtcblxuICAgICAgdmFyIHBhdGggPSBwYXRoUHJvcCB8fCBmcm9tO1xuXG4gICAgICBpZiAobWF0Y2ggPT0gbnVsbCkge1xuICAgICAgICBjaGlsZCA9IGVsZW1lbnQ7XG4gICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBleGFjdDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSA6IHJvdXRlLm1hdGNoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7IGxvY2F0aW9uOiBsb2NhdGlvbiwgY29tcHV0ZWRNYXRjaDogbWF0Y2ggfSkgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN3aXRjaC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5Td2l0Y2gucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi9Sb3V0ZSc7XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cbnZhciB3aXRoUm91dGVyID0gZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgWyd3cmFwcGVkQ29tcG9uZW50UmVmJ10pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHsgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIocm91dGVDb21wb25lbnRQcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgcm91dGVDb21wb25lbnRQcm9wcywgeyByZWY6IHdyYXBwZWRDb21wb25lbnRSZWYgfSkpO1xuICAgICAgfSB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gJ3dpdGhSb3V0ZXIoJyArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgJyknO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG4gIEMucHJvcFR5cGVzID0ge1xuICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5mdW5jXG4gIH07XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBSYWlzZWRCdXR0b24gZnJvbSAnbWF0ZXJpYWwtdWkvUmFpc2VkQnV0dG9uJztcbmltcG9ydCBNZW51SXRlbSBmcm9tICdtYXRlcmlhbC11aS9NZW51SXRlbSc7XG5cbmltcG9ydCB7IGxpbmsgfSBmcm9tICcuLi9zdHlsZXMvaGVhZGVyLmNzcyc7XG5cbnZhciBwYWdlcyA9XG5bXG4gICAge2FkZHJlc3M6IFwiL2NhbGVuZGFyc1wiLCBuYW1lOiBcIkNhbGVuZGFyc1wifSxcbiAgICB7YWRkcmVzczogXCIvb3VyLXNjaG9vbHNcIiwgbmFtZTogXCJPdXIgU2Nob29sc1wifSxcbiAgICB7YWRkcmVzczogXCIvc2Nob29sLWJvYXJkXCIsIG5hbWU6IFwiU2Nob29sIEJvYXJkXCJ9LFxuICAgIHthZGRyZXNzOiBcIi9zdHVkZW50LXBhcmVudC1yZXNvdXJjZXNcIiwgbmFtZTogXCJTdHVkZW50L1BhcmVudCBSZXNvdXJjZXNcIn0sXG4gICAge2FkZHJlc3M6IFwiL3N0YWZmLXJlc291cmNlc1wiLCBuYW1lOiBcIlN0YWZmIFJlc291cmNlc1wifSxcbiAgICB7YWRkcmVzczogXCIvZW1wbG95bWVudFwiLCBuYW1lOiBcIkVtcGxveW1lbnRcIn0sXG4gICAge2FkZHJlc3M6IFwiL1wiLCBuYW1lOiBcIkhvbWVwYWdlXCJ9XG5dO1xuXG4vL0NyZWF0ZSBhIHJhaXNlZCBidXR0b24gdGhhdCBsaW5rcyB0byBlYWNoIHBhZ2VcbmV4cG9ydCB2YXIgbGlua3MgPSBbXTtcbmZvciAodmFyIGkgPSAwOyBpIDwgcGFnZXMubGVuZ3RoOyBpKyspe1xuICBsaW5rcy5wdXNoKFxuICAgIDxMaW5rIGNsYXNzTmFtZSA9IFwibGluayBcIiB0bz17cGFnZXNbaV0uYWRkcmVzc30+XG4gICAgICA8TWVudUl0ZW0gcHJpbWFyeVRleHQgPSB7cGFnZXNbaV0ubmFtZX0gLz5cbiAgICA8L0xpbms+XG4gICk7XG59XG5cbi8vb2ggZ29kLi4uIGxvb2sgYXdheVxuZXhwb3J0IHZhciBidXR0b25zID0gW107XG5idXR0b25zLnB1c2goXG4gIDxkaXY+XG4gIDxkaXY+XG4gICAgPExpbmsgdG89e3BhZ2VzWzBdLmFkZHJlc3N9PlxuICAgICAgPGRpdiBjbGFzc05hbWUgPSBcImJ1dHRvblwiPntwYWdlc1swXS5uYW1lfTwvZGl2PlxuICAgIDwvTGluaz5cbiAgICA8TGluayB0bz17cGFnZXNbMV0uYWRkcmVzc30+XG4gICAgICA8ZGl2IGNsYXNzTmFtZSA9IFwiYnV0dG9uXCI+e3BhZ2VzWzFdLm5hbWV9PC9kaXY+XG4gICAgPC9MaW5rPlxuICAgIDxMaW5rIHRvPXtwYWdlc1syXS5hZGRyZXNzfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJidXR0b25cIj57cGFnZXNbMl0ubmFtZX08L2Rpdj5cbiAgICA8L0xpbms+XG4gICAgPGJyIC8+XG4gICAgPGhyIC8+XG4gIDwvZGl2PlxuICA8ZGl2PlxuICAgIDxMaW5rIHRvPXtwYWdlc1szXS5hZGRyZXNzfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJidXR0b25cIj57cGFnZXNbM10ubmFtZX08L2Rpdj5cbiAgICA8L0xpbms+XG4gICAgPExpbmsgdG89e3BhZ2VzWzRdLmFkZHJlc3N9PlxuICAgICAgPGRpdiBjbGFzc05hbWUgPSBcImJ1dHRvblwiPntwYWdlc1s0XS5uYW1lfTwvZGl2PlxuICAgIDwvTGluaz5cbiAgICA8TGluayB0bz17cGFnZXNbNV0uYWRkcmVzc30+XG4gICAgICA8ZGl2IGNsYXNzTmFtZSA9IFwiYnV0dG9uXCI+e3BhZ2VzWzVdLm5hbWV9PC9kaXY+XG4gICAgPC9MaW5rPlxuICAgIDxMaW5rIHRvPXtwYWdlc1s2XS5hZGRyZXNzfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJidXR0b25cIj57cGFnZXNbNl0ubmFtZX08L2Rpdj5cbiAgICA8L0xpbms+XG4gICAgPGhyIC8+XG4gIDwvZGl2PlxuICA8L2Rpdj5cbik7XG4iLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJY29uTWVudSBmcm9tICdtYXRlcmlhbC11aS9JY29uTWVudSc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdtYXRlcmlhbC11aS9JY29uQnV0dG9uJztcbmltcG9ydCBNb3JlVmVydEljb24gZnJvbSAnbWF0ZXJpYWwtdWkvc3ZnLWljb25zL25hdmlnYXRpb24vbW9yZS12ZXJ0JztcblxuaW1wb3J0ICcuLi9zdHlsZXMvaGVhZGVyLmNzcyc7XG5pbXBvcnQge2xpbmtzLCBidXR0b25zfSBmcm9tICcuL2xpbmtzLmpzeCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhZGVyIGV4dGVuZHMgQ29tcG9uZW50e1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhlYWRlck1vYmlsZTogJ2hlYWRlci1tb2JpbGUnLFxuICAgICAgaGVhZGVyTGFuZHNjYXBlOiAnaGVhZGVyLWxhbmRzY2FwZScsXG4gICAgfTtcbiAgfVxuXG4gIG1vYmlsZVJlbmRlcigpe1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZSA9IHt0aGlzLnByb3BzLmhlYWRlck1vYmlsZX0+XG4gICAgICAgIDxpbWcgc3JjID0gXCJodHRwczovL3M5LnBvc3RpbWcuY2MvYmZra3g2bWhiL2xvZ28ucG5nXCIgY2xhc3NOYW1lID0gXCJpbWFnZVwiLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWUgPSBcImhlYWRlci10aXRsZVwiPk1TQUQgNTg8L2Rpdj5cbiAgICAgICAgPEljb25NZW51XG4gICAgICAgICAgY2xhc3NOYW1lID0gXCJpY29uXCJcbiAgICAgICAgICBpY29uQnV0dG9uRWxlbWVudD17PEljb25CdXR0b24+PE1vcmVWZXJ0SWNvbiAvPjwvSWNvbkJ1dHRvbj59XG4gICAgICAgID5cbiAgICAgICAgICB7bGlua3N9XG4gICAgICAgIDwvSWNvbk1lbnU+XG4gICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG4gIGNvbXB1dGVyUmVuZGVyKCl7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lID0ge3RoaXMuc3RhdGUuaGVhZGVyTGFuZHNjYXBlfT5cbiAgICAgICAge2J1dHRvbnN9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cblxuICByZW5kZXIoKXtcbiAgICBpZiAoIHRoaXMucHJvcHMuc2hvd01vYmlsZSApIHtcbiAgICAgIHJldHVybiB0aGlzLm1vYmlsZVJlbmRlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21wdXRlclJlbmRlcigpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJY29uTWVudSBmcm9tICdtYXRlcmlhbC11aS9JY29uTWVudSc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdtYXRlcmlhbC11aS9JY29uQnV0dG9uJztcbmltcG9ydCBNb3JlVmVydEljb24gZnJvbSAnbWF0ZXJpYWwtdWkvc3ZnLWljb25zL25hdmlnYXRpb24vbW9yZS12ZXJ0JztcblxuaW1wb3J0IHtmb290ZXJ9IGZyb20gJy4uL3N0eWxlcy9mb290ZXIuY3NzJztcblxuY29uc3QgRm9vdGVyID0gKCkgPT4gKFxuICAgIDxkaXYgY2xhc3NOYW1lID0gXCJmb290ZXJcIj5cbiAgICAgIMKpIDIwMTggLVxuICAgIDwvZGl2PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgRm9vdGVyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtiYWNrZ3JvdW5kfSBmcm9tICcuLi9zdHlsZXMvYmFja2dyb3VuZC5jc3MnO1xuXG5jb25zdCBCYWNrZ3JvdW5kID0gKCkgPT4gKFxuICAgIDxkaXYgY2xhc3NOYW1lID0gXCJiYWNrZ3JvdW5kXCI+XG4gICAgICBcbiAgICA8L2Rpdj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IEJhY2tncm91bmQ7XG4iLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vc3R5bGVzL3BhZ2VzLmNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIHJldHVybihcbiAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJwYWdlXCI+XG4gICAgICAgIENhbGVuZGFycyA8YnIvPlxuICAgICAgQ2FsZW5kYXJzIDxici8+XG4gICAgQ2FsZW5kYXJzIDxici8+XG4gIENhbGVuZGFycyA8YnIvPlxuQ2FsZW5kYXJzIDxici8+XG5DYWxlbmRhcnMgPGJyLz5cbkNhbGVuZGFycyA8YnIvPlxuQ2FsZW5kYXJzIDxici8+XG5DYWxlbmRhcnMgPGJyLz5cbkNhbGVuZGFycyA8YnIvPlxuQ2FsZW5kYXJzIDxici8+XG5DYWxlbmRhcnMgPGJyLz5cbkNhbGVuZGFycyA8YnIvPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbn1cbiIsImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcGFnZSB9IGZyb20gXCIuLi8uLi8uLi9zdHlsZXMvcGFnZXMuY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRlbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCl7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBjbGFzc05hbWUgPSBcInBhZ2VcIj5TVFVGRjwvZGl2PlxuICAgIClcbiAgfVxuXG59XG4iLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vc3R5bGVzL3BhZ2VzLmNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIHJldHVybihcbiAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJwYWdlXCI+U1RVRkY8L2Rpdj5cbiAgICApXG4gIH1cblxufVxuIiwiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwYWdlIH0gZnJvbSBcIi4uLy4uLy4uL3N0eWxlcy9wYWdlcy5jc3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKXtcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2IGNsYXNzTmFtZSA9IFwicGFnZVwiPlNUVUZGPC9kaXY+XG4gICAgKVxuICB9XG5cbn1cbiIsImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcGFnZSB9IGZyb20gXCIuLi8uLi8uLi9zdHlsZXMvcGFnZXMuY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRlbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCl7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdiBjbGFzc05hbWUgPSBcInBhZ2VcIj5TVFVGRjwvZGl2PlxuICAgIClcbiAgfVxuXG59XG4iLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vc3R5bGVzL3BhZ2VzLmNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbXBsb3ltZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIHJldHVybihcbiAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJwYWdlXCI+XG4gICAgICAgIDEgPGJyIC8+XG4gICAgICAyIDxiciAvPlxuICAgIDMgPGJyIC8+XG4gIDQgPGJyIC8+XG41IDxiciAvPlxuNiA8YnIgLz5cbjcgPGJyIC8+XG5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG59XG4iLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vc3R5bGVzL3BhZ2VzLmNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIHJldHVybihcbiAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJwYWdlXCI+XG4gICAgICAgIFRISVMgPGJyIC8+XG4gICAgICBJUyA8YnIgLz5cbiAgICBUSEUgPGJyIC8+XG4gIEhPTUVQQUdFIDxiciAvPlxuICBUSElTIDxiciAvPlxuSVMgPGJyIC8+XG5USEUgPGJyIC8+XG5IT01FUEFHRSA8YnIgLz5cblRISVMgPGJyIC8+XG48aHIgLz5cbklTIDxiciAvPlxuVEhFIDxiciAvPlxuSE9NRVBBR0UgPGJyIC8+XG5USElTIDxiciAvPlxuSVMgPGJyIC8+XG5USEUgPGJyIC8+XG5IT01FUEFHRSA8YnIgLz5cblRISVMgPGJyIC8+XG5JUyA8YnIgLz5cblRIRSA8YnIgLz5cbkhPTUVQQUdFIDxiciAvPlxuVEhJUyA8YnIgLz5cbklTIDxiciAvPlxuVEhFIDxiciAvPlxuSE9NRVBBR0UgPGJyIC8+XG5USElTIDxiciAvPlxuSVMgPGJyIC8+XG5USEUgPGJyIC8+XG5IT01FUEFHRSA8YnIgLz5cblRISVMgPGJyIC8+XG5JUyA8YnIgLz5cblRIRSA8YnIgLz5cbkhPTUVQQUdFIDxiciAvPlxuVEhJUyA8YnIgLz5cbklTIDxiciAvPlxuVEhFIDxiciAvPlxuSE9NRVBBR0UgPGJyIC8+XG5USElTIDxiciAvPlxuSVMgPGJyIC8+XG5USEUgPGJyIC8+XG5IT01FUEFHRSA8YnIgLz5cblxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7dGl0bGVJbWFnZX0gZnJvbSAnLi4vc3R5bGVzL3RpdGxlLmNzcydcblxuY29uc3QgVGl0bGUgPSAoKSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lID0gJ3RpdGxlLWNvbnRhaW5lcic+XG4gICAgPGltZyBjbGFzc05hbWUgPSAndGl0bGUtaW1hZ2UnIHNyYyA9XG4gICAgJ2h0dHBzOi8vczkucG9zdGltZy5jYy9iZmtreDZtaGIvbG9nby5wbmcnIC8+PGJyIC8+XG4gIDxpPkVtcG93ZXJpbmcgbGVhcm5lcnMgdG8gaW52ZW50IHRoZWlyIGZ1dHVyZTwvaT5cbiAgPC9kaXY+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBUaXRsZTtcbiIsImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IENhbGVuZGFycyBmcm9tIFwiLi9wYWdlcy9DYWxlbmRhcnMvQ2FsZW5kYXJzLmpzeFwiO1xuaW1wb3J0IE91clNjaG9vbHMgZnJvbSBcIi4vcGFnZXMvT3VyLVNjaG9vbHMvT3VyLVNjaG9vbHMuanN4XCI7XG5pbXBvcnQgU2Nob29sQm9hcmQgZnJvbSBcIi4vcGFnZXMvU2Nob29sLUJvYXJkL1NjaG9vbC1Cb2FyZC5qc3hcIjtcbmltcG9ydCBTdHVkZW50UGFyZW50UmVzb3VyY2VzIGZyb20gXCIuL3BhZ2VzL1N0dWRlbnQtUGFyZW50LVJlc291cmNlcy9TdHVkZW50LVBhcmVudC1SZXNvdXJjZXMuanN4XCI7XG5pbXBvcnQgU3RhZmZSZXNvdXJjZXMgZnJvbSBcIi4vcGFnZXMvU3RhZmYtUmVzb3VyY2VzL1N0YWZmLVJlc291cmNlcy5qc3hcIjtcbmltcG9ydCBFbXBsb3ltZW50IGZyb20gXCIuL3BhZ2VzL0VtcGxveW1lbnQvRW1wbG95bWVudC5qc3hcIjtcbmltcG9ydCBIb21lcGFnZSBmcm9tIFwiLi9wYWdlcy9Ib21lcGFnZS9Ib21lcGFnZS5qc3hcIjtcblxuaW1wb3J0IFRpdGxlIGZyb20gJy4vVGl0bGUuanN4JztcbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4uL2hlYWRlci9IZWFkZXIuanN4XCJcblxuXG5pbXBvcnQgeyBwYWdlIH0gZnJvbSBcIi4uL3N0eWxlcy9wYWdlcy5jc3NcIjtcbmltcG9ydCB7IGJvZHkgfSBmcm9tIFwiLi4vc3R5bGVzL2JvZHkuY3NzXCI7XG5cbnZhciBzY3JvbGwgPSAwO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb2R5IGV4dGVuZHMgQ29tcG9uZW50e1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuYm9keVJlZiA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgIHRoaXMuaGFuZGxlUmVzaXplID0gdGhpcy5oYW5kbGVSZXNpemUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZVNjcm9sbCA9IHRoaXMuaGFuZGxlU2Nyb2xsLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNob3dNb2JpbGU6IGZhbHNlLFxuICAgICAgZml4SGVhZGVyOiBmYWxzZSxcbiAgICAgIGhlYWRlck1vYmlsZTogJ2hlYWRlci1tb2JpbGUnLFxuICAgICAgaGVhZGVyTGFuZHNjYXBlOiAnaGVhZGVyLWxhbmRzY2FwZScsXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcbiAgICB0aGlzLmJvZHlSZWYuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbCk7XG4gICAgaWYoIHdpbmRvdy5pbm5lcldpZHRoIDwgNzAwICkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7c2hvd01vYmlsZTogdHJ1ZX0pO1xuICAgIH1cbiAgfVxuXG4gIC8vTG9naWMgc28gdGhhdCBzdGF0ZSBpcyBub3QgY2hhbmdlZCBldmVyeSBzY3JvbGxcbiAgLy9UaGlzIGlzIGRvbmUgdG8gcHJldmVudCBjb25zdGFudGx5IHJlLXJlbmRlcmluZ1xuICBoYW5kbGVTY3JvbGwoKXtcbiAgICBzY3JvbGwgPSB0aGlzLmJvZHlSZWYuY3VycmVudC5zY3JvbGxUb3BcblxuICAgIGlmKCAhdGhpcy5zdGF0ZS5maXhIZWFkZXIgJiYgc2Nyb2xsID49IDM1NiApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmaXhIZWFkZXI6IHRydWUsXG4gICAgICAgIGhlYWRlck1vYmlsZTogJ2hlYWRlci1tb2JpbGUtZml4ZWQnLFxuICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIHRoaXMuc3RhdGUuZml4SGVhZGVyICYmIHNjcm9sbCA8IDM1NiApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmaXhIZWFkZXI6IGZhbHNlLFxuICAgICAgICBoZWFkZXJNb2JpbGU6ICdoZWFkZXItbW9iaWxlJyxcbiAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvL0xvZ2ljIHNvIHRoYXQgc3RhdGUgaXMgbm90IGNoYW5nZWQgZXZlcnkgc2Nyb2xsXG4gIC8vVGhpcyBpcyBkb25lIHRvIHByZXZlbnQgY29uc3RhbnRseSByZS1yZW5kZXJpbmdcbiAgaGFuZGxlUmVzaXplKCl7XG4gICAgaWYgKCAhdGhpcy5zdGF0ZS5zaG93TW9iaWxlICYmIHdpbmRvdy5pbm5lcldpZHRoIDwgNzAwICkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7c2hvd01vYmlsZTogdHJ1ZX0pO1xuICAgIH1cbiAgICBpZiAoIHRoaXMuc3RhdGUuc2hvd01vYmlsZSAmJiB3aW5kb3cuaW5uZXJXaWR0aCA+IDcwMCApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3Nob3dNb2JpbGU6IGZhbHNlfSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCl7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJib2R5XCIgcmVmPXt0aGlzLmJvZHlSZWZ9ID5cbiAgICAgICAgICA8VGl0bGUgLz5cbiAgICAgICAgICA8SGVhZGVyXG4gICAgICAgICAgICBzaG93TW9iaWxlID0ge3RoaXMuc3RhdGUuc2hvd01vYmlsZX1cbiAgICAgICAgICAgIGhlYWRlck1vYmlsZSA9IHt0aGlzLnN0YXRlLmhlYWRlck1vYmlsZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPFJvdXRlIGV4YWN0ID0ge3RydWV9IHBhdGg9XCIvXCIgY29tcG9uZW50PXtIb21lcGFnZX0gLz5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9jYWxlbmRhcnNcIiBjb21wb25lbnQ9e0NhbGVuZGFyc30gLz5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9vdXItc2Nob29sc1wiIGNvbXBvbmVudD17T3VyU2Nob29sc30gLz5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9zY2hvb2wtYm9hcmRcIiBjb21wb25lbnQ9e1NjaG9vbEJvYXJkfSAvPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3N0dWRlbnQtcGFyZW50LXJlc291cmNlc1wiIGNvbXBvbmVudD17U3R1ZGVudFBhcmVudFJlc291cmNlc30gLz5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9zdGFmZi1yZXNvdXJjZXNcIiBjb21wb25lbnQ9e1N0YWZmUmVzb3VyY2VzfSAvPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2VtcGxveW1lbnRcIiBjb21wb25lbnQ9e0VtcGxveW1lbnR9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8gUm91dGVyPlxuICAgICk7XG4gIH1cblxufVxuIiwiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGV9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgTXVpVGhlbWVQcm92aWRlciBmcm9tICdtYXRlcmlhbC11aS9zdHlsZXMvTXVpVGhlbWVQcm92aWRlcic7XG5cbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4vY29tcG9uZW50cy9oZWFkZXIvSGVhZGVyLmpzeFwiO1xuaW1wb3J0IEZvb3RlciBmcm9tIFwiLi9jb21wb25lbnRzL2Zvb3Rlci9Gb290ZXIuanN4XCI7XG5pbXBvcnQgQmFja2dyb3VuZCBmcm9tIFwiLi9jb21wb25lbnRzL2JhY2tncm91bmQvQmFja2dyb3VuZC5qc3hcIjtcbmltcG9ydCBCb2R5IGZyb20gXCIuL2NvbXBvbmVudHMvYm9keS9Cb2R5LmpzeFwiO1xuXG5pbXBvcnQgeyBwYWdlIH0gZnJvbSBcIi4vY29tcG9uZW50cy9zdHlsZXMvcGFnZXMuY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIHJldHVybiAoXG4gICAgICA8TXVpVGhlbWVQcm92aWRlcj5cbiAgICAgICAgPFJvdXRlcj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPEJhY2tncm91bmQgLz5cbiAgICAgICAgICAgIDxCb2R5IC8+XG4gICAgICAgICAgICA8Rm9vdGVyIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvUm91dGVyPlxuICAgICAgPC9NdWlUaGVtZVByb3ZpZGVyPlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG5cbmltcG9ydCBBcHAgZnJvbSAnLi9zcmMvQXBwLmpzeCc7XG5cbmNvbnN0IFJvb3QgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEFwcCAvPlxuICApO1xufVxuXG5SZWFjdERPTS5yZW5kZXIoPFJvb3QgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9T3N3YWxkKTtcIiwgXCJcIl0pO1xuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi50aXRsZS1pbWFnZSB7XFxuICB0b3A6IDBweDtcXG4gIGxlZnQ6IDBweDtcXG4gIGhlaWdodDogMjYwcHg7XFxuICB3aWR0aDogMjgwcHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBtYXJnaW46IDVweDtcXG59XFxuXFxuLnRpdGxlLWNvbnRhaW5lcntcXG4gIGZvbnQtZmFtaWx5OiAnT3N3YWxkJywgc2Fucy1zZXJpZjtcXG4gIGNvbG9yOiAjMDQzMjdjO1xcbiAgZm9udC1zaXplOiA0MHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgaGVpZ2h0OiAzMzBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgdG9wOiAwcHg7XFxuICBsZWZ0OiAwcHg7XFxuICBtYXJnaW46IDEwcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi90aXRsZS5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vdGl0bGUuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi90aXRsZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Pc3dhbGQpO1wiLCBcIlwiXSk7XG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmZvb3RlciB7XFxuICBiYWNrZ3JvdW5kOiByYWRpYWwtZ3JhZGllbnQoZmFydGhlc3QtY29ybmVyIGF0IDEwJSAyJSwgI2ZmZmZiMywgI2ZmZmY2Nik7XFxuICBjb2xvcjogYmxhY2s7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICBsZWZ0OiAwcHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvdHRvbTogMCU7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Zvb3Rlci5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vZm9vdGVyLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vZm9vdGVyLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBfdHJhbnNpdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNpdGlvbnMpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKCcuLi91dGlscy9jb2xvck1hbmlwdWxhdG9yJyk7XG5cbnZhciBfRW5oYW5jZWRCdXR0b24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9FbmhhbmNlZEJ1dHRvbicpO1xuXG52YXIgX0VuaGFuY2VkQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VuaGFuY2VkQnV0dG9uKTtcblxudmFyIF9QYXBlciA9IHJlcXVpcmUoJy4uL1BhcGVyJyk7XG5cbnZhciBfUGFwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFwZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUxhYmVsKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghcHJvcHMuY2hpbGRyZW4gJiYgcHJvcHMubGFiZWwgIT09IDAgJiYgIXByb3BzLmxhYmVsICYmICFwcm9wcy5pY29uKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdSZXF1aXJlZCBwcm9wIGxhYmVsIG9yIGNoaWxkcmVuIG9yIGljb24gd2FzIG5vdCBzcGVjaWZpZWQgaW4gJyArIGNvbXBvbmVudE5hbWUgKyAnLicpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTdHlsZXMocHJvcHMsIGNvbnRleHQsIHN0YXRlKSB7XG4gIHZhciBfY29udGV4dCRtdWlUaGVtZSA9IGNvbnRleHQubXVpVGhlbWUsXG4gICAgICBiYXNlVGhlbWUgPSBfY29udGV4dCRtdWlUaGVtZS5iYXNlVGhlbWUsXG4gICAgICBidXR0b24gPSBfY29udGV4dCRtdWlUaGVtZS5idXR0b24sXG4gICAgICByYWlzZWRCdXR0b24gPSBfY29udGV4dCRtdWlUaGVtZS5yYWlzZWRCdXR0b24sXG4gICAgICBib3JkZXJSYWRpdXMgPSBfY29udGV4dCRtdWlUaGVtZS5ib3JkZXJSYWRpdXM7XG4gIHZhciBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWRCYWNrZ3JvdW5kQ29sb3IgPSBwcm9wcy5kaXNhYmxlZEJhY2tncm91bmRDb2xvcixcbiAgICAgIGRpc2FibGVkTGFiZWxDb2xvciA9IHByb3BzLmRpc2FibGVkTGFiZWxDb2xvcixcbiAgICAgIGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIGxhYmVsUG9zaXRpb24gPSBwcm9wcy5sYWJlbFBvc2l0aW9uLFxuICAgICAgcHJpbWFyeSA9IHByb3BzLnByaW1hcnksXG4gICAgICBzZWNvbmRhcnkgPSBwcm9wcy5zZWNvbmRhcnksXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlO1xuXG5cbiAgdmFyIGFtb3VudCA9IHByaW1hcnkgfHwgc2Vjb25kYXJ5ID8gMC40IDogMC4wODtcblxuICB2YXIgYmFja2dyb3VuZENvbG9yID0gcmFpc2VkQnV0dG9uLmNvbG9yO1xuICB2YXIgbGFiZWxDb2xvciA9IHJhaXNlZEJ1dHRvbi50ZXh0Q29sb3I7XG5cbiAgaWYgKGRpc2FibGVkKSB7XG4gICAgYmFja2dyb3VuZENvbG9yID0gZGlzYWJsZWRCYWNrZ3JvdW5kQ29sb3IgfHwgcmFpc2VkQnV0dG9uLmRpc2FibGVkQ29sb3I7XG4gICAgbGFiZWxDb2xvciA9IGRpc2FibGVkTGFiZWxDb2xvciB8fCByYWlzZWRCdXR0b24uZGlzYWJsZWRUZXh0Q29sb3I7XG4gIH0gZWxzZSBpZiAocHJpbWFyeSkge1xuICAgIGJhY2tncm91bmRDb2xvciA9IHJhaXNlZEJ1dHRvbi5wcmltYXJ5Q29sb3I7XG4gICAgbGFiZWxDb2xvciA9IHJhaXNlZEJ1dHRvbi5wcmltYXJ5VGV4dENvbG9yO1xuICB9IGVsc2UgaWYgKHNlY29uZGFyeSkge1xuICAgIGJhY2tncm91bmRDb2xvciA9IHJhaXNlZEJ1dHRvbi5zZWNvbmRhcnlDb2xvcjtcbiAgICBsYWJlbENvbG9yID0gcmFpc2VkQnV0dG9uLnNlY29uZGFyeVRleHRDb2xvcjtcbiAgfSBlbHNlIHtcbiAgICBpZiAocHJvcHMuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBwcm9wcy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgfVxuICAgIGlmIChwcm9wcy5sYWJlbENvbG9yKSB7XG4gICAgICBsYWJlbENvbG9yID0gcHJvcHMubGFiZWxDb2xvcjtcbiAgICB9XG4gIH1cblxuICB2YXIgYnV0dG9uSGVpZ2h0ID0gc3R5bGUgJiYgc3R5bGUuaGVpZ2h0IHx8IGJ1dHRvbi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCksXG4gICAgICBtaW5XaWR0aDogZnVsbFdpZHRoID8gJzEwMCUnIDogYnV0dG9uLm1pbldpZHRoXG4gICAgfSxcbiAgICBidXR0b246IHtcbiAgICAgIGhlaWdodDogYnV0dG9uSGVpZ2h0LFxuICAgICAgbGluZUhlaWdodDogYnV0dG9uSGVpZ2h0ICsgJ3B4JyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgYm9yZGVyUmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgpLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAvLyBUaGF0J3MgdGhlIGRlZmF1bHQgdmFsdWUgZm9yIGEgYnV0dG9uIGJ1dCBub3QgYSBsaW5rXG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfSxcbiAgICBsYWJlbDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgZm9udFNpemU6IHJhaXNlZEJ1dHRvbi5mb250U2l6ZSxcbiAgICAgIGxldHRlclNwYWNpbmc6IDAsXG4gICAgICB0ZXh0VHJhbnNmb3JtOiByYWlzZWRCdXR0b24udGV4dFRyYW5zZm9ybSB8fCBidXR0b24udGV4dFRyYW5zZm9ybSB8fCAndXBwZXJjYXNlJyxcbiAgICAgIGZvbnRXZWlnaHQ6IHJhaXNlZEJ1dHRvbi5mb250V2VpZ2h0LFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgcGFkZGluZ0xlZnQ6IGljb24gJiYgbGFiZWxQb3NpdGlvbiAhPT0gJ2JlZm9yZScgPyA4IDogYmFzZVRoZW1lLnNwYWNpbmcuZGVza3RvcEd1dHRlckxlc3MsXG4gICAgICBwYWRkaW5nUmlnaHQ6IGljb24gJiYgbGFiZWxQb3NpdGlvbiA9PT0gJ2JlZm9yZScgPyA4IDogYmFzZVRoZW1lLnNwYWNpbmcuZGVza3RvcEd1dHRlckxlc3MsXG4gICAgICBjb2xvcjogbGFiZWxDb2xvclxuICAgIH0sXG4gICAgaWNvbjoge1xuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICBtYXJnaW5MZWZ0OiBsYWJlbCAmJiBsYWJlbFBvc2l0aW9uICE9PSAnYmVmb3JlJyA/IDEyIDogMCxcbiAgICAgIG1hcmdpblJpZ2h0OiBsYWJlbCAmJiBsYWJlbFBvc2l0aW9uID09PSAnYmVmb3JlJyA/IDEyIDogMFxuICAgIH0sXG4gICAgb3ZlcmxheToge1xuICAgICAgaGVpZ2h0OiBidXR0b25IZWlnaHQsXG4gICAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHN0YXRlLmtleWJvYXJkRm9jdXNlZCB8fCBzdGF0ZS5ob3ZlcmVkKSAmJiAhZGlzYWJsZWQgJiYgKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKGxhYmVsQ29sb3IsIGFtb3VudCksXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgpLFxuICAgICAgdG9wOiAwXG4gICAgfSxcbiAgICByaXBwbGU6IHtcbiAgICAgIGNvbG9yOiBsYWJlbENvbG9yLFxuICAgICAgb3BhY2l0eTogIShwcmltYXJ5IHx8IHNlY29uZGFyeSkgPyAwLjEgOiAwLjE2XG4gICAgfVxuICB9O1xufVxuXG52YXIgUmFpc2VkQnV0dG9uID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoUmFpc2VkQnV0dG9uLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSYWlzZWRCdXR0b24oKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUmFpc2VkQnV0dG9uKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IFJhaXNlZEJ1dHRvbi5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUmFpc2VkQnV0dG9uKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBob3ZlcmVkOiBmYWxzZSxcbiAgICAgIGtleWJvYXJkRm9jdXNlZDogZmFsc2UsXG4gICAgICB0b3VjaGVkOiBmYWxzZSxcbiAgICAgIGluaXRpYWxaRGVwdGg6IDAsXG4gICAgICB6RGVwdGg6IDBcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIG9ubHkgbGlzdGVuIHRvIGxlZnQgY2xpY2tzXG4gICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAwKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB6RGVwdGg6IF90aGlzLnN0YXRlLmluaXRpYWxaRGVwdGggKyAxXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uTW91c2VEb3duKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VEb3duKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHpEZXB0aDogX3RoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aFxuICAgICAgfSk7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Nb3VzZVVwKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VVcChldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5rZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHpEZXB0aDogX3RoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCxcbiAgICAgICAgICBob3ZlcmVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZUVudGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLmtleWJvYXJkRm9jdXNlZCAmJiAhX3RoaXMuc3RhdGUudG91Y2hlZCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaG92ZXJlZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Nb3VzZUVudGVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHRvdWNoZWQ6IHRydWUsXG4gICAgICAgIHpEZXB0aDogX3RoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCArIDFcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Ub3VjaFN0YXJ0KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uVG91Y2hTdGFydChldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlVG91Y2hFbmQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdG91Y2hlZDogdHJ1ZSxcbiAgICAgICAgekRlcHRoOiBfdGhpcy5zdGF0ZS5pbml0aWFsWkRlcHRoXG4gICAgICB9KTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uVG91Y2hFbmQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Ub3VjaEVuZChldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlS2V5Ym9hcmRGb2N1cyA9IGZ1bmN0aW9uIChldmVudCwga2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICB2YXIgekRlcHRoID0ga2V5Ym9hcmRGb2N1c2VkICYmICFfdGhpcy5wcm9wcy5kaXNhYmxlZCA/IF90aGlzLnN0YXRlLmluaXRpYWxaRGVwdGggKyAxIDogX3RoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB6RGVwdGg6IHpEZXB0aCxcbiAgICAgICAga2V5Ym9hcmRGb2N1c2VkOiBrZXlib2FyZEZvY3VzZWRcbiAgICAgIH0pO1xuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSYWlzZWRCdXR0b24sIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgdmFyIHpEZXB0aCA9IHRoaXMucHJvcHMuZGlzYWJsZWQgPyAwIDogMTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICB6RGVwdGg6IHpEZXB0aCxcbiAgICAgICAgaW5pdGlhbFpEZXB0aDogekRlcHRoXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciB6RGVwdGggPSBuZXh0UHJvcHMuZGlzYWJsZWQgPyAwIDogMTtcbiAgICAgIHZhciBuZXh0U3RhdGUgPSB7XG4gICAgICAgIHpEZXB0aDogekRlcHRoLFxuICAgICAgICBpbml0aWFsWkRlcHRoOiB6RGVwdGhcbiAgICAgIH07XG5cbiAgICAgIGlmIChuZXh0UHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgbmV4dFN0YXRlLmhvdmVyZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvciA9IF9wcm9wcy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgYnV0dG9uU3R5bGUgPSBfcHJvcHMuYnV0dG9uU3R5bGUsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBkaXNhYmxlZEJhY2tncm91bmRDb2xvciA9IF9wcm9wcy5kaXNhYmxlZEJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICBkaXNhYmxlZExhYmVsQ29sb3IgPSBfcHJvcHMuZGlzYWJsZWRMYWJlbENvbG9yLFxuICAgICAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcy5mdWxsV2lkdGgsXG4gICAgICAgICAgaWNvbiA9IF9wcm9wcy5pY29uLFxuICAgICAgICAgIGxhYmVsID0gX3Byb3BzLmxhYmVsLFxuICAgICAgICAgIGxhYmVsQ29sb3IgPSBfcHJvcHMubGFiZWxDb2xvcixcbiAgICAgICAgICBsYWJlbFBvc2l0aW9uID0gX3Byb3BzLmxhYmVsUG9zaXRpb24sXG4gICAgICAgICAgbGFiZWxTdHlsZSA9IF9wcm9wcy5sYWJlbFN0eWxlLFxuICAgICAgICAgIG92ZXJsYXlTdHlsZSA9IF9wcm9wcy5vdmVybGF5U3R5bGUsXG4gICAgICAgICAgcHJpbWFyeSA9IF9wcm9wcy5wcmltYXJ5LFxuICAgICAgICAgIHJpcHBsZVN0eWxlID0gX3Byb3BzLnJpcHBsZVN0eWxlLFxuICAgICAgICAgIHNlY29uZGFyeSA9IF9wcm9wcy5zZWNvbmRhcnksXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnYmFja2dyb3VuZENvbG9yJywgJ2J1dHRvblN0eWxlJywgJ2NoaWxkcmVuJywgJ2NsYXNzTmFtZScsICdkaXNhYmxlZCcsICdkaXNhYmxlZEJhY2tncm91bmRDb2xvcicsICdkaXNhYmxlZExhYmVsQ29sb3InLCAnZnVsbFdpZHRoJywgJ2ljb24nLCAnbGFiZWwnLCAnbGFiZWxDb2xvcicsICdsYWJlbFBvc2l0aW9uJywgJ2xhYmVsU3R5bGUnLCAnb3ZlcmxheVN0eWxlJywgJ3ByaW1hcnknLCAncmlwcGxlU3R5bGUnLCAnc2Vjb25kYXJ5JywgJ3N0eWxlJ10pO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuICAgICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQsIHRoaXMuc3RhdGUpO1xuICAgICAgdmFyIG1lcmdlZFJpcHBsZVN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLnJpcHBsZSwgcmlwcGxlU3R5bGUpO1xuXG4gICAgICB2YXIgYnV0dG9uRXZlbnRIYW5kbGVycyA9IGRpc2FibGVkID8ge30gOiB7XG4gICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bixcbiAgICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZU1vdXNlVXAsXG4gICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG4gICAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsXG4gICAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5oYW5kbGVLZXlib2FyZEZvY3VzXG4gICAgICB9O1xuXG4gICAgICB2YXIgbGFiZWxFbGVtZW50ID0gbGFiZWwgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBzdHlsZTogcHJlcGFyZVN0eWxlcygoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLmxhYmVsLCBsYWJlbFN0eWxlKSksIGtleTogJ2xhYmVsRWxlbWVudCcgfSxcbiAgICAgICAgbGFiZWxcbiAgICAgICk7XG5cbiAgICAgIHZhciBpY29uQ2xvbmVkID0gaWNvbiAmJiAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoaWNvbiwge1xuICAgICAgICBjb2xvcjogaWNvbi5wcm9wcy5jb2xvciB8fCBzdHlsZXMubGFiZWwuY29sb3IsXG4gICAgICAgIHN0eWxlOiAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLmljb24sIGljb24ucHJvcHMuc3R5bGUpLFxuICAgICAgICBrZXk6ICdpY29uQ2xvbmVkJ1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFBsYWNlIGxhYmVsIGJlZm9yZSBvciBhZnRlciBjaGlsZHJlbi5cbiAgICAgIHZhciBlbmhhbmNlZEJ1dHRvbkNoaWxkcmVuID0gbGFiZWxQb3NpdGlvbiA9PT0gJ2JlZm9yZScgPyBbbGFiZWxFbGVtZW50LCBpY29uQ2xvbmVkLCBjaGlsZHJlbl0gOiBbY2hpbGRyZW4sIGljb25DbG9uZWQsIGxhYmVsRWxlbWVudF07XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgX1BhcGVyMi5kZWZhdWx0LFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICAgc3R5bGU6ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpLFxuICAgICAgICAgIHpEZXB0aDogdGhpcy5zdGF0ZS56RGVwdGhcbiAgICAgICAgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX0VuaGFuY2VkQnV0dG9uMi5kZWZhdWx0LFxuICAgICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCBidXR0b25FdmVudEhhbmRsZXJzLCB7XG4gICAgICAgICAgICByZWY6ICdjb250YWluZXInLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgICAgc3R5bGU6ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMuYnV0dG9uLCBidXR0b25TdHlsZSksXG4gICAgICAgICAgICBmb2N1c1JpcHBsZUNvbG9yOiBtZXJnZWRSaXBwbGVTdHlsZXMuY29sb3IsXG4gICAgICAgICAgICB0b3VjaFJpcHBsZUNvbG9yOiBtZXJnZWRSaXBwbGVTdHlsZXMuY29sb3IsXG4gICAgICAgICAgICBmb2N1c1JpcHBsZU9wYWNpdHk6IG1lcmdlZFJpcHBsZVN0eWxlcy5vcGFjaXR5LFxuICAgICAgICAgICAgdG91Y2hSaXBwbGVPcGFjaXR5OiBtZXJnZWRSaXBwbGVTdHlsZXMub3BhY2l0eVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJlZjogJ292ZXJsYXknLFxuICAgICAgICAgICAgICBzdHlsZTogcHJlcGFyZVN0eWxlcygoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLm92ZXJsYXksIG92ZXJsYXlTdHlsZSkpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5oYW5jZWRCdXR0b25DaGlsZHJlblxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFJhaXNlZEJ1dHRvbjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblJhaXNlZEJ1dHRvbi5tdWlOYW1lID0gJ1JhaXNlZEJ1dHRvbic7XG5SYWlzZWRCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlZDogZmFsc2UsXG4gIGxhYmVsUG9zaXRpb246ICdhZnRlcicsXG4gIGZ1bGxXaWR0aDogZmFsc2UsXG4gIHByaW1hcnk6IGZhbHNlLFxuICBzZWNvbmRhcnk6IGZhbHNlXG59O1xuUmFpc2VkQnV0dG9uLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5SYWlzZWRCdXR0b24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgYmFja2dyb3VuZCBjb2xvciBmb3IgdGhlIGJ1dHRvbixcbiAgICogYnV0IG5vdCB0aGUgZGVmYXVsdCBkaXNhYmxlZCBiYWNrZ3JvdW5kIGNvbG9yXG4gICAqICh1c2UgYGRpc2FibGVkQmFja2dyb3VuZENvbG9yYCBmb3IgdGhpcykuXG4gICAqL1xuICBiYWNrZ3JvdW5kQ29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIGJ1dHRvbiBlbGVtZW50LlxuICAgKi9cbiAgYnV0dG9uU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGJ1dHRvbi5cbiAgICogSWYgYSBsYWJlbCBpcyBwcm92aWRlZCB2aWEgdGhlIGBsYWJlbGAgcHJvcCwgdGhlIHRleHQgd2l0aGluIHRoZSBsYWJlbFxuICAgKiB3aWxsIGJlIGRpc3BsYXllZCBpbiBhZGRpdGlvbiB0byB0aGUgY29udGVudCBwcm92aWRlZCBoZXJlLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAgKiBUaGUgZWxlbWVudCB0byB1c2UgYXMgdGhlIGNvbnRhaW5lciBmb3IgdGhlIFJhaXNlZEJ1dHRvbi4gRWl0aGVyIGEgc3RyaW5nIHRvXG4gICAgKiB1c2UgYSBET00gZWxlbWVudCBvciBhIFJlYWN0RWxlbWVudC4gVGhpcyBpcyB1c2VmdWwgZm9yIHdyYXBwaW5nIHRoZVxuICAgICogUmFpc2VkQnV0dG9uIGluIGEgY3VzdG9tIExpbmsgY29tcG9uZW50LiBJZiBhIFJlYWN0RWxlbWVudCBpcyBnaXZlbiwgZW5zdXJlXG4gICAgKiB0aGF0IGl0IHBhc3NlcyBhbGwgb2YgaXRzIGdpdmVuIHByb3BzIHRocm91Z2ggdG8gdGhlIHVuZGVybHlpbmcgRE9NXG4gICAgKiBlbGVtZW50IGFuZCByZW5kZXJzIGl0cyBjaGlsZHJlbiBwcm9wIGZvciBwcm9wZXIgaW50ZWdyYXRpb24uXG4gICAgKi9cbiAgY29udGFpbmVyRWxlbWVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnRdKSxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBlbGVtZW50J3MgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVRvdWNoUmlwcGxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgYmFja2dyb3VuZCBjb2xvciBmb3IgdGhlIGJ1dHRvblxuICAgKiB3aGVuIGl0IGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWRCYWNrZ3JvdW5kQ29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBidXR0b24ncyBsYWJlbCB3aGVuIHRoZSBidXR0b24gaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZExhYmVsQ29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGJ1dHRvbiB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIFVSTCB0byBsaW5rIHRvIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgKi9cbiAgaHJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBBbiBpY29uIHRvIGJlIGRpc3BsYXllZCB3aXRoaW4gdGhlIGJ1dHRvbi5cbiAgICovXG4gIGljb246IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCB0byBiZSBkaXNwbGF5ZWQgd2l0aGluIHRoZSBidXR0b24uXG4gICAqIElmIGNvbnRlbnQgaXMgcHJvdmlkZWQgdmlhIHRoZSBgY2hpbGRyZW5gIHByb3AsIHRoYXQgY29udGVudCB3aWxsIGJlXG4gICAqIGRpc3BsYXllZCBpbiBhZGRpdGlvbiB0byB0aGUgbGFiZWwgcHJvdmlkZWQgaGVyZS5cbiAgICovXG4gIGxhYmVsOiB2YWxpZGF0ZUxhYmVsLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBidXR0b24ncyBsYWJlbC5cbiAgICovXG4gIGxhYmVsQ29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uIG9mIHRoZSBidXR0b24ncyBsYWJlbCByZWxhdGl2ZSB0byB0aGUgYnV0dG9uJ3MgYGNoaWxkcmVuYC5cbiAgICovXG4gIGxhYmVsUG9zaXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydiZWZvcmUnLCAnYWZ0ZXInXSksXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgYnV0dG9uJ3MgbGFiZWwgZWxlbWVudC5cbiAgICovXG4gIGxhYmVsU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBDbGljayBldmVudCB0YXJnZXRpbmcgdGhlIGJ1dHRvbi5cbiAgICovXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Nb3VzZURvd246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Nb3VzZUVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VMZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvbk1vdXNlVXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Ub3VjaEVuZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvblRvdWNoU3RhcnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUgc3R5bGUgb2YgdGhlIGJ1dHRvbiBvdmVybGF5LlxuICAgKi9cbiAgb3ZlcmxheVN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBidXR0b24gd2lsbCB1c2UgdGhlIHRoZW1lJ3MgcHJpbWFyeSBjb2xvci5cbiAgICovXG4gIHByaW1hcnk6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUgc3R5bGUgb2YgdGhlIHJpcHBsZSBlbGVtZW50LlxuICAgKi9cbiAgcmlwcGxlU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGJ1dHRvbiB3aWxsIHVzZSB0aGUgdGhlbWUncyBzZWNvbmRhcnkgY29sb3IuXG4gICAqIElmIGJvdGggYHNlY29uZGFyeWAgYW5kIGBwcmltYXJ5YCBhcmUgdHJ1ZSwgdGhlIGJ1dHRvbiB3aWxsIHVzZVxuICAgKiB0aGUgdGhlbWUncyBwcmltYXJ5IGNvbG9yLlxuICAgKi9cbiAgc2Vjb25kYXJ5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBSYWlzZWRCdXR0b247IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX1JhaXNlZEJ1dHRvbiA9IHJlcXVpcmUoJy4vUmFpc2VkQnV0dG9uJyk7XG5cbnZhciBfUmFpc2VkQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JhaXNlZEJ1dHRvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9SYWlzZWRCdXR0b24yLmRlZmF1bHQ7IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9T3N3YWxkKTtcIiwgXCJcIl0pO1xuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5oZWFkZXItdGl0bGUge1xcbiAgZm9udC1mYW1pbHk6ICdPc3dhbGQnLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiA0MHB4O1xcbiAgY29sb3I6IGJsYWNrO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xcbn1cXG5cXG4uaGVhZGVyLW1vYmlsZS1maXhlZCB7XFxuICB0b3A6IDBweDtcXG4gIGxlZnQ6IDBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAzLjhlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgb3BhY2l0eTogMC43NTtcXG59XFxuXFxuLmhlYWRlci1tb2JpbGUge1xcbiAgdG9wOiAwcHg7XFxuICBsZWZ0OiAwcHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMy44ZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmhlYWRlci1sYW5kc2NhcGUge1xcbiAgdG9wOiAwcHg7XFxuICBsZWZ0OiAwcHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMy44ZW07XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLmxpbmsge1xcbiAgbWFyZ2luOiAxNXB4O1xcbiAgcGFkZGluZzogMTVweCAxNXB4IDE1cHggMTVweDtcXG59XFxuXFxuLmljb24ge1xcbiAgdG9wOiAwcHg7XFxuICBmbG9hdDogcmlnaHQ7XFxufVxcblxcbi5pbWFnZSB7XFxuICBtYXgtd2lkdGg6IDEwMCU7XFxuICBtYXgtaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4uYnV0dG9ue1xcbiAgZm9udC1mYW1pbHk6ICdPc3dhbGQnLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbiAgcGFkZGluZzogNHB4O1xcbiAgYm9yZGVyOiAzcHggc29saWQgIzAwMDI5MztcXG4gIGJhY2tncm91bmQ6ICMwMDAyOTM7XFxuICBiYWNrZ3JvdW5kLWltYWdlOlxcbiAgcmFkaWFsLWdyYWRpZW50KFxcbiAgICAjMzY3N2UyLFxcbiAgICAjMDAyZDc3XFxuICApO1xcbiAgY29sb3I6ICNkMWNkMDI7XFxuICB0cmFuc2l0aW9uOiBhbGwgLjJzIGVhc2UtaW4tb3V0O1xcbiAgbWFyZ2luOiA1cHg7XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgd2lkdGg6ICAxNTBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuLmJ1dHRvbjpob3ZlciB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xcbiAgY29sb3I6ICNkMWNkMDI7XFxuICBib3JkZXItcmFkaXVzOiAzMHB4O1xcbiAgY3Vyc29yOiAgcG9pbnRlcjtcXG59XFxuXFxuaHIge1xcbiAgd2lkdGg6IDYwJTtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfTGlzdCA9IHJlcXVpcmUoJy4vTGlzdCcpO1xuXG52YXIgX0xpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGlzdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBOZXN0ZWRMaXN0ID0gZnVuY3Rpb24gTmVzdGVkTGlzdChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgbmVzdGVkTGV2ZWwgPSBwcm9wcy5uZXN0ZWRMZXZlbCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGU7XG5cblxuICBpZiAoIW9wZW4pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfTGlzdDIuZGVmYXVsdCxcbiAgICB7IHN0eWxlOiBzdHlsZSB9LFxuICAgIF9yZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuICgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKGNoaWxkKSA/ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgICBuZXN0ZWRMZXZlbDogbmVzdGVkTGV2ZWwgKyAxXG4gICAgICB9KSA6IGNoaWxkO1xuICAgIH0pXG4gICk7XG59O1xuXG5OZXN0ZWRMaXN0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgbmVzdGVkTGV2ZWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLmlzUmVxdWlyZWQsXG4gIG9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBOZXN0ZWRMaXN0OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSByZXF1aXJlKCdyZWNvbXBvc2UvcHVyZScpO1xuXG52YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cbnZhciBfU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL1N2Z0ljb24nKTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTmF2aWdhdGlvbkV4cGFuZE1vcmUgPSBmdW5jdGlvbiBOYXZpZ2F0aW9uRXhwYW5kTW9yZShwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTYuNTkgOC41OUwxMiAxMy4xNyA3LjQxIDguNTkgNiAxMGw2IDYgNi02eicgfSlcbiAgKTtcbn07XG5OYXZpZ2F0aW9uRXhwYW5kTW9yZSA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoTmF2aWdhdGlvbkV4cGFuZE1vcmUpO1xuTmF2aWdhdGlvbkV4cGFuZE1vcmUuZGlzcGxheU5hbWUgPSAnTmF2aWdhdGlvbkV4cGFuZE1vcmUnO1xuTmF2aWdhdGlvbkV4cGFuZE1vcmUubXVpTmFtZSA9ICdTdmdJY29uJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gTmF2aWdhdGlvbkV4cGFuZE1vcmU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHVyZSA9IHJlcXVpcmUoJ3JlY29tcG9zZS9wdXJlJyk7XG5cbnZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblxudmFyIF9TdmdJY29uID0gcmVxdWlyZSgnLi4vLi4vU3ZnSWNvbicpO1xuXG52YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBOYXZpZ2F0aW9uRXhwYW5kTGVzcyA9IGZ1bmN0aW9uIE5hdmlnYXRpb25FeHBhbmRMZXNzKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcbiAgICBwcm9wcyxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00xMiA4bC02IDYgMS40MSAxLjQxTDEyIDEwLjgzbDQuNTkgNC41OEwxOCAxNHonIH0pXG4gICk7XG59O1xuTmF2aWdhdGlvbkV4cGFuZExlc3MgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKE5hdmlnYXRpb25FeHBhbmRMZXNzKTtcbk5hdmlnYXRpb25FeHBhbmRMZXNzLmRpc3BsYXlOYW1lID0gJ05hdmlnYXRpb25FeHBhbmRMZXNzJztcbk5hdmlnYXRpb25FeHBhbmRMZXNzLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5hdmlnYXRpb25FeHBhbmRMZXNzOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZXh0ZW5kQ2hpbGRyZW4gPSBleHRlbmRDaGlsZHJlbjtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBleHRlbmRDaGlsZHJlbihjaGlsZHJlbiwgZXh0ZW5kZWRQcm9wcywgZXh0ZW5kZWRDaGlsZHJlbikge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKCFfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfVxuXG4gICAgdmFyIG5ld1Byb3BzID0gdHlwZW9mIGV4dGVuZGVkUHJvcHMgPT09ICdmdW5jdGlvbicgPyBleHRlbmRlZFByb3BzKGNoaWxkKSA6IGV4dGVuZGVkUHJvcHM7XG5cbiAgICB2YXIgbmV3Q2hpbGRyZW4gPSB0eXBlb2YgZXh0ZW5kZWRDaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGV4dGVuZGVkQ2hpbGRyZW4oY2hpbGQpIDogZXh0ZW5kZWRDaGlsZHJlbiA/IGV4dGVuZGVkQ2hpbGRyZW4gOiBjaGlsZC5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCBuZXdQcm9wcywgbmV3Q2hpbGRyZW4pO1xuICB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF90cmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4uL3N0eWxlcy90cmFuc2l0aW9ucycpO1xuXG52YXIgX3RyYW5zaXRpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb25zKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0U3R5bGVzKHByb3BzLCBjb250ZXh0LCBzdGF0ZSkge1xuICB2YXIgdmVydGljYWxQb3NpdGlvbiA9IHByb3BzLnZlcnRpY2FsUG9zaXRpb247XG4gIHZhciBob3Jpem9udGFsUG9zaXRpb24gPSBwcm9wcy5ob3Jpem9udGFsUG9zaXRpb247XG4gIHZhciB0b3VjaE1hcmdpbk9mZnNldCA9IHByb3BzLnRvdWNoID8gMTAgOiAwO1xuICB2YXIgdG91Y2hPZmZzZXRUb3AgPSBwcm9wcy50b3VjaCA/IC0yMCA6IC0xMDtcbiAgdmFyIG9mZnNldCA9IHZlcnRpY2FsUG9zaXRpb24gPT09ICdib3R0b20nID8gMTQgKyB0b3VjaE1hcmdpbk9mZnNldCA6IC0xNCAtIHRvdWNoTWFyZ2luT2Zmc2V0O1xuXG4gIHZhciBfY29udGV4dCRtdWlUaGVtZSA9IGNvbnRleHQubXVpVGhlbWUsXG4gICAgICBiYXNlVGhlbWUgPSBfY29udGV4dCRtdWlUaGVtZS5iYXNlVGhlbWUsXG4gICAgICB6SW5kZXggPSBfY29udGV4dCRtdWlUaGVtZS56SW5kZXgsXG4gICAgICB0b29sdGlwID0gX2NvbnRleHQkbXVpVGhlbWUudG9vbHRpcCxcbiAgICAgIGJvcmRlclJhZGl1cyA9IF9jb250ZXh0JG11aVRoZW1lLmJvcmRlclJhZGl1cztcblxuXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBmb250RmFtaWx5OiBiYXNlVGhlbWUuZm9udEZhbWlseSxcbiAgICAgIGZvbnRTaXplOiAnMTBweCcsXG4gICAgICBsaW5lSGVpZ2h0OiAnMjJweCcsXG4gICAgICBwYWRkaW5nOiAnMCA4cHgnLFxuICAgICAgekluZGV4OiB6SW5kZXgudG9vbHRpcCxcbiAgICAgIGNvbG9yOiB0b29sdGlwLmNvbG9yLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgdG9wOiAtMTAwMDAsXG4gICAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICByaWdodDogaG9yaXpvbnRhbFBvc2l0aW9uID09PSAnbGVmdCcgPyAxMiA6IG51bGwsXG4gICAgICBsZWZ0OiBob3Jpem9udGFsUG9zaXRpb24gPT09ICdjZW50ZXInID8gKHN0YXRlLm9mZnNldFdpZHRoIC0gNDgpIC8gMiAqIC0xIDogaG9yaXpvbnRhbFBvc2l0aW9uID09PSAncmlnaHQnID8gMTIgOiBudWxsLFxuICAgICAgdHJhbnNpdGlvbjogX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoJzBtcycsICd0b3AnLCAnNDUwbXMnKSArICcsICcgKyBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnNDUwbXMnLCAndHJhbnNmb3JtJywgJzBtcycpICsgJywgJyArIF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCc0NTBtcycsICdvcGFjaXR5JywgJzBtcycpXG4gICAgfSxcbiAgICBsYWJlbDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgIH0sXG4gICAgcmlwcGxlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IGhvcml6b250YWxQb3NpdGlvbiA9PT0gJ2NlbnRlcicgPyAnNTAlJyA6IGhvcml6b250YWxQb3NpdGlvbiA9PT0gJ2xlZnQnID8gJzEwMCUnIDogJzAlJyxcbiAgICAgIHRvcDogdmVydGljYWxQb3NpdGlvbiA9PT0gJ2JvdHRvbScgPyAwIDogJzEwMCUnLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJyxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnMG1zJywgJ3dpZHRoJywgJzQ1MG1zJykgKyAnLCAnICsgX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoJzBtcycsICdoZWlnaHQnLCAnNDUwbXMnKSArICcsICcgKyBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnNDUwbXMnLCAnYmFja2dyb3VuZENvbG9yJywgJzBtcycpXG4gICAgfSxcbiAgICByb290V2hlblNob3duOiB7XG4gICAgICB0b3A6IHZlcnRpY2FsUG9zaXRpb24gPT09ICd0b3AnID8gdG91Y2hPZmZzZXRUb3AgOiAzNixcbiAgICAgIG9wYWNpdHk6IHRvb2x0aXAub3BhY2l0eSxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwcHgsICcgKyBvZmZzZXQgKyAncHgpJyxcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCcwbXMnLCAndG9wJywgJzBtcycpICsgJywgJyArIF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCc0NTBtcycsICd0cmFuc2Zvcm0nLCAnMG1zJykgKyAnLCAnICsgX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoJzQ1MG1zJywgJ29wYWNpdHknLCAnMG1zJylcbiAgICB9LFxuICAgIHJvb3RXaGVuVG91Y2hlZDoge1xuICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgIGxpbmVIZWlnaHQ6ICczMnB4JyxcbiAgICAgIHBhZGRpbmc6ICcwIDE2cHgnXG4gICAgfSxcbiAgICByaXBwbGVXaGVuU2hvd246IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdG9vbHRpcC5yaXBwbGVCYWNrZ3JvdW5kQ29sb3IsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnNDUwbXMnLCAnd2lkdGgnLCAnMG1zJykgKyAnLCAnICsgX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoJzQ1MG1zJywgJ2hlaWdodCcsICcwbXMnKSArICcsICcgKyBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnNDUwbXMnLCAnYmFja2dyb3VuZENvbG9yJywgJzBtcycpXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbnZhciBUb29sdGlwID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoVG9vbHRpcCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVG9vbHRpcCgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBUb29sdGlwKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IFRvb2x0aXAuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFRvb2x0aXApKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG9mZnNldFdpZHRoOiBudWxsXG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFRvb2x0aXAsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc2V0UmlwcGxlU2l6ZSgpO1xuICAgICAgdGhpcy5zZXRUb29sdGlwUG9zaXRpb24oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpIHtcbiAgICAgIHRoaXMuc2V0VG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdGhpcy5zZXRSaXBwbGVTaXplKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UmlwcGxlU2l6ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFJpcHBsZVNpemUoKSB7XG4gICAgICB2YXIgcmlwcGxlID0gdGhpcy5yZWZzLnJpcHBsZTtcbiAgICAgIHZhciB0b29sdGlwID0gdGhpcy5yZWZzLnRvb2x0aXA7XG4gICAgICB2YXIgdG9vbHRpcFdpZHRoID0gcGFyc2VJbnQodG9vbHRpcC5vZmZzZXRXaWR0aCwgMTApIC8gKHRoaXMucHJvcHMuaG9yaXpvbnRhbFBvc2l0aW9uID09PSAnY2VudGVyJyA/IDIgOiAxKTtcbiAgICAgIHZhciB0b29sdGlwSGVpZ2h0ID0gcGFyc2VJbnQodG9vbHRpcC5vZmZzZXRIZWlnaHQsIDEwKTtcblxuICAgICAgdmFyIHJpcHBsZURpYW1ldGVyID0gTWF0aC5jZWlsKE1hdGguc3FydChNYXRoLnBvdyh0b29sdGlwSGVpZ2h0LCAyKSArIE1hdGgucG93KHRvb2x0aXBXaWR0aCwgMikpICogMik7XG4gICAgICBpZiAodGhpcy5wcm9wcy5zaG93KSB7XG4gICAgICAgIHJpcHBsZS5zdHlsZS5oZWlnaHQgPSByaXBwbGVEaWFtZXRlciArICdweCc7XG4gICAgICAgIHJpcHBsZS5zdHlsZS53aWR0aCA9IHJpcHBsZURpYW1ldGVyICsgJ3B4JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJpcHBsZS5zdHlsZS53aWR0aCA9ICcwcHgnO1xuICAgICAgICByaXBwbGUuc3R5bGUuaGVpZ2h0ID0gJzBweCc7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0VG9vbHRpcFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VG9vbHRpcFBvc2l0aW9uKCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9mZnNldFdpZHRoOiB0aGlzLnJlZnMudG9vbHRpcC5vZmZzZXRXaWR0aCB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBob3Jpem9udGFsUG9zaXRpb24gPSBfcHJvcHMuaG9yaXpvbnRhbFBvc2l0aW9uLFxuICAgICAgICAgIGxhYmVsID0gX3Byb3BzLmxhYmVsLFxuICAgICAgICAgIHNob3cgPSBfcHJvcHMuc2hvdyxcbiAgICAgICAgICB0b3VjaCA9IF9wcm9wcy50b3VjaCxcbiAgICAgICAgICB2ZXJ0aWNhbFBvc2l0aW9uID0gX3Byb3BzLnZlcnRpY2FsUG9zaXRpb24sXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnaG9yaXpvbnRhbFBvc2l0aW9uJywgJ2xhYmVsJywgJ3Nob3cnLCAndG91Y2gnLCAndmVydGljYWxQb3NpdGlvbiddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXModGhpcy5wcm9wcywgdGhpcy5jb250ZXh0LCB0aGlzLnN0YXRlKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHtcbiAgICAgICAgICByZWY6ICd0b29sdGlwJyxcbiAgICAgICAgICBzdHlsZTogcHJlcGFyZVN0eWxlcygoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnJvb3QsIHRoaXMucHJvcHMuc2hvdyAmJiBzdHlsZXMucm9vdFdoZW5TaG93biwgdGhpcy5wcm9wcy50b3VjaCAmJiBzdHlsZXMucm9vdFdoZW5Ub3VjaGVkLCB0aGlzLnByb3BzLnN0eWxlKSlcbiAgICAgICAgfSksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgICAgcmVmOiAncmlwcGxlJyxcbiAgICAgICAgICBzdHlsZTogcHJlcGFyZVN0eWxlcygoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnJpcHBsZSwgdGhpcy5wcm9wcy5zaG93ICYmIHN0eWxlcy5yaXBwbGVXaGVuU2hvd24pKVxuICAgICAgICB9KSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ3NwYW4nLFxuICAgICAgICAgIHsgc3R5bGU6IHByZXBhcmVTdHlsZXMoc3R5bGVzLmxhYmVsKSB9LFxuICAgICAgICAgIGxhYmVsXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUb29sdGlwO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuVG9vbHRpcC5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuVG9vbHRpcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY3NzIGNsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGhvcml6b250YWxQb3NpdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbJ2xlZnQnLCAncmlnaHQnLCAnY2VudGVyJ10pLFxuICBsYWJlbDogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLmlzUmVxdWlyZWQsXG4gIHNob3c6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIHRvdWNoOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHZlcnRpY2FsUG9zaXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWyd0b3AnLCAnYm90dG9tJ10pXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBUb29sdGlwOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBfdHJhbnNpdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNpdGlvbnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRTdHlsZXMocHJvcHMsIGNvbnRleHQsIHN0YXRlKSB7XG4gIHZhciBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgaG92ZXJDb2xvciA9IHByb3BzLmhvdmVyQ29sb3I7XG4gIHZhciBiYXNlVGhlbWUgPSBjb250ZXh0Lm11aVRoZW1lLmJhc2VUaGVtZTtcblxuICB2YXIgb2ZmQ29sb3IgPSBjb2xvciB8fCBiYXNlVGhlbWUucGFsZXR0ZS50ZXh0Q29sb3I7XG4gIHZhciBvbkNvbG9yID0gaG92ZXJDb2xvciB8fCBvZmZDb2xvcjtcblxuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGNvbG9yOiBzdGF0ZS5ob3ZlcmVkID8gb25Db2xvciA6IG9mZkNvbG9yLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBmb250U2l6ZTogYmFzZVRoZW1lLnNwYWNpbmcuaWNvblNpemUsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KClcbiAgICB9XG4gIH07XG59XG5cbnZhciBGb250SWNvbiA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKEZvbnRJY29uLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGb250SWNvbigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBGb250SWNvbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBGb250SWNvbi5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRm9udEljb24pKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhvdmVyZWQ6IGZhbHNlXG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gaG92ZXIgaXMgbmVlZGVkIG9ubHkgd2hlbiBhIGhvdmVyQ29sb3IgaXMgZGVmaW5lZFxuICAgICAgaWYgKF90aGlzLnByb3BzLmhvdmVyQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uTW91c2VMZWF2ZSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlRW50ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIGhvdmVyIGlzIG5lZWRlZCBvbmx5IHdoZW4gYSBob3ZlckNvbG9yIGlzIGRlZmluZWRcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5ob3ZlckNvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uTW91c2VFbnRlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShGb250SWNvbiwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBob3ZlckNvbG9yID0gX3Byb3BzLmhvdmVyQ29sb3IsXG4gICAgICAgICAgb25Nb3VzZUxlYXZlID0gX3Byb3BzLm9uTW91c2VMZWF2ZSxcbiAgICAgICAgICBvbk1vdXNlRW50ZXIgPSBfcHJvcHMub25Nb3VzZUVudGVyLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3Byb3BzLCBbJ2hvdmVyQ29sb3InLCAnb25Nb3VzZUxlYXZlJywgJ29uTW91c2VFbnRlcicsICdzdHlsZSddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXModGhpcy5wcm9wcywgdGhpcy5jb250ZXh0LCB0aGlzLnN0YXRlKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdzcGFuJywgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHtcbiAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLmhhbmRsZU1vdXNlTGVhdmUsXG4gICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5oYW5kbGVNb3VzZUVudGVyLFxuICAgICAgICBzdHlsZTogcHJlcGFyZVN0eWxlcygoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnJvb3QsIHN0eWxlKSlcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEZvbnRJY29uO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuRm9udEljb24ubXVpTmFtZSA9ICdGb250SWNvbic7XG5Gb250SWNvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIG9uTW91c2VFbnRlcjogZnVuY3Rpb24gb25Nb3VzZUVudGVyKCkge30sXG4gIG9uTW91c2VMZWF2ZTogZnVuY3Rpb24gb25Nb3VzZUxlYXZlKCkge31cbn07XG5Gb250SWNvbi5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuRm9udEljb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhpcyBpcyB0aGUgZm9udCBjb2xvciBvZiB0aGUgZm9udCBpY29uLiBJZiBub3Qgc3BlY2lmaWVkLFxuICAgKiB0aGlzIGNvbXBvbmVudCB3aWxsIGRlZmF1bHQgdG8gbXVpVGhlbWUucGFsZXR0ZS50ZXh0Q29sb3IuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBpY29uIGNvbG9yIHdoZW4gdGhlIG1vdXNlIGhvdmVycyBvdmVyIHRoZSBpY29uLlxuICAgKi9cbiAgaG92ZXJDb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VFbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvbk1vdXNlTGVhdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IEZvbnRJY29uOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9Gb250SWNvbiA9IHJlcXVpcmUoJy4vRm9udEljb24nKTtcblxudmFyIF9Gb250SWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Gb250SWNvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9Gb250SWNvbjIuZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF90cmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4uL3N0eWxlcy90cmFuc2l0aW9ucycpO1xuXG52YXIgX3RyYW5zaXRpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb25zKTtcblxudmFyIF9wcm9wVHlwZXMzID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJvcFR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlczMpO1xuXG52YXIgX0VuaGFuY2VkQnV0dG9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvRW5oYW5jZWRCdXR0b24nKTtcblxudmFyIF9FbmhhbmNlZEJ1dHRvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FbmhhbmNlZEJ1dHRvbik7XG5cbnZhciBfRm9udEljb24gPSByZXF1aXJlKCcuLi9Gb250SWNvbicpO1xuXG52YXIgX0ZvbnRJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ZvbnRJY29uKTtcblxudmFyIF9Ub29sdGlwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvVG9vbHRpcCcpO1xuXG52YXIgX1Rvb2x0aXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVG9vbHRpcCk7XG5cbnZhciBfY2hpbGRVdGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NoaWxkVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0U3R5bGVzKHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBiYXNlVGhlbWUgPSBjb250ZXh0Lm11aVRoZW1lLmJhc2VUaGVtZTtcblxuXG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgdHJhbnNpdGlvbjogX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoKSxcbiAgICAgIHBhZGRpbmc6IGJhc2VUaGVtZS5zcGFjaW5nLmljb25TaXplIC8gMixcbiAgICAgIHdpZHRoOiBiYXNlVGhlbWUuc3BhY2luZy5pY29uU2l6ZSAqIDIsXG4gICAgICBoZWlnaHQ6IGJhc2VUaGVtZS5zcGFjaW5nLmljb25TaXplICogMixcbiAgICAgIGZvbnRTaXplOiAwXG4gICAgfSxcbiAgICB0b29sdGlwOiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94J1xuICAgIH0sXG4gICAgZGlzYWJsZWQ6IHtcbiAgICAgIGNvbG9yOiBiYXNlVGhlbWUucGFsZXR0ZS5kaXNhYmxlZENvbG9yLFxuICAgICAgZmlsbDogYmFzZVRoZW1lLnBhbGV0dGUuZGlzYWJsZWRDb2xvcixcbiAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgfVxuICB9O1xufVxuXG52YXIgSWNvbkJ1dHRvbiA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKEljb25CdXR0b24sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEljb25CdXR0b24oKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSWNvbkJ1dHRvbik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBJY29uQnV0dG9uLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShJY29uQnV0dG9uKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBob3ZlcmVkOiBmYWxzZSxcbiAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIC8vIE5vdCB0byBiZSBjb25mb25kZWQgd2l0aCB0aGUgdG91Y2ggcHJvcGVydHkuXG4gICAgICAvLyBUaGlzIHN0YXRlIGlzIHRvIGRldGVybWluZWQgaWYgaXQncyBhIG1vYmlsZSBkZXZpY2UuXG4gICAgICB0b3VjaDogZmFsc2UsXG4gICAgICB0b29sdGlwU2hvd246IGZhbHNlXG4gICAgfSwgX3RoaXMuaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuaGlkZVRvb2x0aXAoKTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkJsdXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25CbHVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc2hvd1Rvb2x0aXAoKTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkZvY3VzKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRm9jdXMoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghX3RoaXMuYnV0dG9uLmlzS2V5Ym9hcmRGb2N1c2VkKCkpIHtcbiAgICAgICAgX3RoaXMuaGlkZVRvb2x0aXAoKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Nb3VzZUxlYXZlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VPdXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5kaXNhYmxlZCkgX3RoaXMuaGlkZVRvb2x0aXAoKTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlT3V0KSBfdGhpcy5wcm9wcy5vbk1vdXNlT3V0KGV2ZW50KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZUVudGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zaG93VG9vbHRpcCgpO1xuXG4gICAgICAvLyBDYW5jZWwgaG92ZXIgc3R5bGVzIGZvciB0b3VjaCBkZXZpY2VzXG4gICAgICBpZiAoIV90aGlzLnN0YXRlLnRvdWNoKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Nb3VzZUVudGVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IHRvdWNoOiB0cnVlIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Ub3VjaFN0YXJ0KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uVG91Y2hTdGFydChldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlS2V5Ym9hcmRGb2N1cyA9IGZ1bmN0aW9uIChldmVudCwgaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgb25Gb2N1cyA9IF90aGlzJHByb3BzLm9uRm9jdXMsXG4gICAgICAgICAgb25CbHVyID0gX3RoaXMkcHJvcHMub25CbHVyLFxuICAgICAgICAgIG9uS2V5Ym9hcmRGb2N1cyA9IF90aGlzJHByb3BzLm9uS2V5Ym9hcmRGb2N1cztcblxuICAgICAgaWYgKGlzS2V5Ym9hcmRGb2N1c2VkICYmICFkaXNhYmxlZCkge1xuICAgICAgICBfdGhpcy5zaG93VG9vbHRpcCgpO1xuICAgICAgICBpZiAob25Gb2N1cykge1xuICAgICAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5oaWRlVG9vbHRpcCgpO1xuICAgICAgICBpZiAob25CbHVyKSB7XG4gICAgICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzS2V5Ym9hcmRGb2N1c2VkOiBpc0tleWJvYXJkRm9jdXNlZCB9KTtcbiAgICAgIGlmIChvbktleWJvYXJkRm9jdXMpIHtcbiAgICAgICAgb25LZXlib2FyZEZvY3VzKGV2ZW50LCBpc0tleWJvYXJkRm9jdXNlZCk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEljb25CdXR0b24sIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAobmV4dFByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiBmYWxzZSB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRLZXlib2FyZEZvY3VzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0S2V5Ym9hcmRGb2N1cygpIHtcbiAgICAgIHRoaXMuYnV0dG9uLnNldEtleWJvYXJkRm9jdXMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzaG93VG9vbHRpcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dUb29sdGlwKCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMudG9vbHRpcCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdG9vbHRpcFNob3duOiB0cnVlIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hpZGVUb29sdGlwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGlkZVRvb2x0aXAoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy50b29sdGlwKSB0aGlzLnNldFN0YXRlKHsgdG9vbHRpcFNob3duOiBmYWxzZSB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgaG92ZXJlZFN0eWxlID0gX3Byb3BzLmhvdmVyZWRTdHlsZSxcbiAgICAgICAgICBkaXNhYmxlVG91Y2hSaXBwbGUgPSBfcHJvcHMuZGlzYWJsZVRvdWNoUmlwcGxlLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGljb25DbGFzc05hbWUgPSBfcHJvcHMuaWNvbkNsYXNzTmFtZSxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgICB0b29sdGlwID0gX3Byb3BzLnRvb2x0aXAsXG4gICAgICAgICAgdG9vbHRpcFBvc2l0aW9uUHJvcCA9IF9wcm9wcy50b29sdGlwUG9zaXRpb24sXG4gICAgICAgICAgdG9vbHRpcFN0eWxlcyA9IF9wcm9wcy50b29sdGlwU3R5bGVzLFxuICAgICAgICAgIHRvdWNoID0gX3Byb3BzLnRvdWNoLFxuICAgICAgICAgIGljb25TdHlsZSA9IF9wcm9wcy5pY29uU3R5bGUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnZGlzYWJsZWQnLCAnaG92ZXJlZFN0eWxlJywgJ2Rpc2FibGVUb3VjaFJpcHBsZScsICdjaGlsZHJlbicsICdpY29uQ2xhc3NOYW1lJywgJ3N0eWxlJywgJ3Rvb2x0aXAnLCAndG9vbHRpcFBvc2l0aW9uJywgJ3Rvb2x0aXBTdHlsZXMnLCAndG91Y2gnLCAnaWNvblN0eWxlJ10pO1xuXG4gICAgICB2YXIgZm9udGljb24gPSB2b2lkIDA7XG5cbiAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXModGhpcy5wcm9wcywgdGhpcy5jb250ZXh0KTtcbiAgICAgIHZhciB0b29sdGlwUG9zaXRpb24gPSB0b29sdGlwUG9zaXRpb25Qcm9wLnNwbGl0KCctJyk7XG5cbiAgICAgIHZhciBob3ZlcmVkID0gKHRoaXMuc3RhdGUuaG92ZXJlZCB8fCB0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkKSAmJiAhZGlzYWJsZWQ7XG5cbiAgICAgIHZhciBtZXJnZWRSb290U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5yb290LCBzdHlsZSwgaG92ZXJlZCA/IGhvdmVyZWRTdHlsZSA6IHt9KTtcblxuICAgICAgdmFyIHRvb2x0aXBFbGVtZW50ID0gdG9vbHRpcCA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Ub29sdGlwMi5kZWZhdWx0LCB7XG4gICAgICAgIGxhYmVsOiB0b29sdGlwLFxuICAgICAgICBzaG93OiB0aGlzLnN0YXRlLnRvb2x0aXBTaG93bixcbiAgICAgICAgdG91Y2g6IHRvdWNoLFxuICAgICAgICBzdHlsZTogKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy50b29sdGlwLCB0b29sdGlwU3R5bGVzKSxcbiAgICAgICAgdmVydGljYWxQb3NpdGlvbjogdG9vbHRpcFBvc2l0aW9uWzBdLFxuICAgICAgICBob3Jpem9udGFsUG9zaXRpb246IHRvb2x0aXBQb3NpdGlvblsxXVxuICAgICAgfSkgOiBudWxsO1xuXG4gICAgICBpZiAoaWNvbkNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgaWNvbkhvdmVyQ29sb3IgPSBpY29uU3R5bGUuaWNvbkhvdmVyQ29sb3IsXG4gICAgICAgICAgICBpY29uU3R5bGVGb250SWNvbiA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKGljb25TdHlsZSwgWydpY29uSG92ZXJDb2xvciddKTtcblxuXG4gICAgICAgIGZvbnRpY29uID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX0ZvbnRJY29uMi5kZWZhdWx0LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogaWNvbkNsYXNzTmFtZSxcbiAgICAgICAgICAgIGhvdmVyQ29sb3I6IGRpc2FibGVkID8gbnVsbCA6IGljb25Ib3ZlckNvbG9yLFxuICAgICAgICAgICAgc3R5bGU6ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgZGlzYWJsZWQgJiYgc3R5bGVzLmRpc2FibGVkLCBpY29uU3R5bGVGb250SWNvbiksXG4gICAgICAgICAgICBjb2xvcjogdGhpcy5jb250ZXh0Lm11aVRoZW1lLmJhc2VUaGVtZS5wYWxldHRlLnRleHRDb2xvclxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2hpbGRyZW5cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkcmVuU3R5bGUgPSBkaXNhYmxlZCA/ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgaWNvblN0eWxlLCBzdHlsZXMuZGlzYWJsZWQpIDogaWNvblN0eWxlO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9FbmhhbmNlZEJ1dHRvbjIuZGVmYXVsdCxcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoX3JlZjIpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIuYnV0dG9uID0gX3JlZjI7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBvdGhlciwge1xuICAgICAgICAgIGNlbnRlclJpcHBsZTogdHJ1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG4gICAgICAgICAgc3R5bGU6IG1lcmdlZFJvb3RTdHlsZXMsXG4gICAgICAgICAgZGlzYWJsZVRvdWNoUmlwcGxlOiBkaXNhYmxlVG91Y2hSaXBwbGUsXG4gICAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXIsXG4gICAgICAgICAgb25Gb2N1czogdGhpcy5oYW5kbGVGb2N1cyxcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlT3V0OiB0aGlzLmhhbmRsZU1vdXNlT3V0LFxuICAgICAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5oYW5kbGVLZXlib2FyZEZvY3VzXG4gICAgICAgIH0pLFxuICAgICAgICB0b29sdGlwRWxlbWVudCxcbiAgICAgICAgZm9udGljb24sXG4gICAgICAgICgwLCBfY2hpbGRVdGlscy5leHRlbmRDaGlsZHJlbikoY2hpbGRyZW4sIHtcbiAgICAgICAgICBzdHlsZTogY2hpbGRyZW5TdHlsZVxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEljb25CdXR0b247XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5JY29uQnV0dG9uLm11aU5hbWUgPSAnSWNvbkJ1dHRvbic7XG5JY29uQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBkaXNhYmxlVG91Y2hSaXBwbGU6IGZhbHNlLFxuICBpY29uU3R5bGU6IHt9LFxuICB0b29sdGlwUG9zaXRpb246ICdib3R0b20tY2VudGVyJyxcbiAgdG91Y2g6IGZhbHNlXG59O1xuSWNvbkJ1dHRvbi5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuSWNvbkJ1dHRvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBDYW4gYmUgdXNlZCB0byBwYXNzIGEgYEZvbnRJY29uYCBlbGVtZW50IGFzIHRoZSBpY29uIGZvciB0aGUgYnV0dG9uLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBlbGVtZW50J3MgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVRvdWNoUmlwcGxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgZWxlbWVudCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGhvdmVyZWQuXG4gICAqL1xuICBob3ZlcmVkU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogVGhlIFVSTCB0byBsaW5rIHRvIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgKi9cbiAgaHJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIGljb24uIFVzZWQgZm9yIHNldHRpbmcgdGhlIGljb24gd2l0aCBhIHN0eWxlc2hlZXQuXG4gICAqL1xuICBpY29uQ2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSBpY29uIGVsZW1lbnQuXG4gICAqIE5vdGU6IHlvdSBjYW4gc3BlY2lmeSBpY29uSG92ZXJDb2xvciBhcyBhIFN0cmluZyBpbnNpZGUgdGhpcyBvYmplY3QuXG4gICAqL1xuICBpY29uU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKiogQGlnbm9yZSAqL1xuICBvbkJsdXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQ2xpY2sgZXZlbnQgdGFyZ2V0aW5nIHRoZSBidXR0b24uXG4gICAqL1xuICBvbkNsaWNrOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uRm9jdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIGVsZW1lbnQgaXMgZm9jdXNlZCBvciBibHVycmVkIGJ5IHRoZSBrZXlib2FyZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IGBmb2N1c2Agb3IgYGJsdXJgIGV2ZW50IHRhcmdldGluZyB0aGUgZWxlbWVudC5cbiAgICogQHBhcmFtIHtib29sZWFufSBrZXlib2FyZEZvY3VzZWQgSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGVsZW1lbnQgaXMgZm9jdXNlZC5cbiAgICovXG4gIG9uS2V5Ym9hcmRGb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvbk1vdXNlRW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Nb3VzZUxlYXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VPdXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Ub3VjaFN0YXJ0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHRleHQgdG8gc3VwcGx5IHRvIHRoZSBlbGVtZW50J3MgdG9vbHRpcC5cbiAgICovXG4gIHRvb2x0aXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbCBwb3NpdGlvbnMsIHJlc3BlY3RpdmVseSwgb2YgdGhlIGVsZW1lbnQncyB0b29sdGlwLlxuICAgKiBQb3NzaWJsZSB2YWx1ZXMgYXJlOiBcImJvdHRvbS1jZW50ZXJcIiwgXCJ0b3AtY2VudGVyXCIsIFwiYm90dG9tLXJpZ2h0XCIsIFwidG9wLXJpZ2h0XCIsXG4gICAqIFwiYm90dG9tLWxlZnRcIiwgYW5kIFwidG9wLWxlZnRcIi5cbiAgICovXG4gIHRvb2x0aXBQb3NpdGlvbjogX3Byb3BUeXBlczQuZGVmYXVsdC5jb3JuZXJzQW5kQ2VudGVyLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHRvb2x0aXAgZWxlbWVudC5cbiAgICovXG4gIHRvb2x0aXBTdHlsZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogSWYgdHJ1ZSwgaW5jcmVhc2UgdGhlIHRvb2x0aXAgZWxlbWVudCdzIHNpemUuIFVzZWZ1bCBmb3IgaW5jcmVhc2luZyB0b29sdGlwXG4gICAqIHJlYWRhYmlsaXR5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKi9cbiAgdG91Y2g6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gSWNvbkJ1dHRvbjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9zaGFsbG93RXF1YWwgPSByZXF1aXJlKCdyZWNvbXBvc2Uvc2hhbGxvd0VxdWFsJyk7XG5cbnZhciBfc2hhbGxvd0VxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoYWxsb3dFcXVhbCk7XG5cbnZhciBfYXV0b1ByZWZpeCA9IHJlcXVpcmUoJy4uL3V0aWxzL2F1dG9QcmVmaXgnKTtcblxudmFyIF9hdXRvUHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F1dG9QcmVmaXgpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBfdHJhbnNpdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNpdGlvbnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQ2lyY2xlUmlwcGxlID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoQ2lyY2xlUmlwcGxlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDaXJjbGVSaXBwbGUoKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQ2lyY2xlUmlwcGxlKTtcbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoQ2lyY2xlUmlwcGxlLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShDaXJjbGVSaXBwbGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKENpcmNsZVJpcHBsZSwgW3tcbiAgICBrZXk6ICdzaG91bGRDb21wb25lbnRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgICByZXR1cm4gISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5lbnRlclRpbWVyKTtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmxlYXZlVGltZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxBcHBlYXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsQXBwZWFyKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVBbmltYXRpb24oY2FsbGJhY2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxFbnRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxFbnRlcihjYWxsYmFjaykge1xuICAgICAgdGhpcy5pbml0aWFsaXplQW5pbWF0aW9uKGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRBcHBlYXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRBcHBlYXIoKSB7XG4gICAgICB0aGlzLmFuaW1hdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRFbnRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZEVudGVyKCkge1xuICAgICAgdGhpcy5hbmltYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbExlYXZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbExlYXZlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgc3R5bGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcykuc3R5bGU7XG4gICAgICBzdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgIC8vIElmIHRoZSBhbmltYXRpb24gaXMgYWJvcnRlZCwgcmVtb3ZlIGZyb20gdGhlIERPTSBpbW1lZGlhdGVseVxuICAgICAgdmFyIHJlbW92ZUFmdGVyID0gdGhpcy5wcm9wcy5hYm9ydGVkID8gMCA6IDIwMDA7XG4gICAgICB0aGlzLmVudGVyVGltZXIgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCByZW1vdmVBZnRlcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYW5pbWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgICB2YXIgc3R5bGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcykuc3R5bGU7XG4gICAgICB2YXIgdHJhbnNpdGlvblZhbHVlID0gX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoJzJzJywgJ29wYWNpdHknKSArICcsICcgKyBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnMXMnLCAndHJhbnNmb3JtJyk7XG4gICAgICBfYXV0b1ByZWZpeDIuZGVmYXVsdC5zZXQoc3R5bGUsICd0cmFuc2l0aW9uJywgdHJhbnNpdGlvblZhbHVlKTtcbiAgICAgIF9hdXRvUHJlZml4Mi5kZWZhdWx0LnNldChzdHlsZSwgJ3RyYW5zZm9ybScsICdzY2FsZSgxKScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luaXRpYWxpemVBbmltYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplQW5pbWF0aW9uKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgc3R5bGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcykuc3R5bGU7XG4gICAgICBzdHlsZS5vcGFjaXR5ID0gdGhpcy5wcm9wcy5vcGFjaXR5O1xuICAgICAgX2F1dG9QcmVmaXgyLmRlZmF1bHQuc2V0KHN0eWxlLCAndHJhbnNmb3JtJywgJ3NjYWxlKDApJyk7XG4gICAgICB0aGlzLmxlYXZlVGltZXIgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhYm9ydGVkID0gX3Byb3BzLmFib3J0ZWQsXG4gICAgICAgICAgY29sb3IgPSBfcHJvcHMuY29sb3IsXG4gICAgICAgICAgb3BhY2l0eSA9IF9wcm9wcy5vcGFjaXR5LFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHRvdWNoR2VuZXJhdGVkID0gX3Byb3BzLnRvdWNoR2VuZXJhdGVkLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3Byb3BzLCBbJ2Fib3J0ZWQnLCAnY29sb3InLCAnb3BhY2l0eScsICdzdHlsZScsICd0b3VjaEdlbmVyYXRlZCddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cblxuICAgICAgdmFyIG1lcmdlZFN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yXG4gICAgICB9LCBzdHlsZSk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHsgc3R5bGU6IHByZXBhcmVTdHlsZXMobWVyZ2VkU3R5bGVzKSB9KSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBDaXJjbGVSaXBwbGU7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5DaXJjbGVSaXBwbGUuZGVmYXVsdFByb3BzID0ge1xuICBvcGFjaXR5OiAwLjEsXG4gIGFib3J0ZWQ6IGZhbHNlXG59O1xuQ2lyY2xlUmlwcGxlLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5DaXJjbGVSaXBwbGUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBhYm9ydGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgb3BhY2l0eTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgdG91Y2hHZW5lcmF0ZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gQ2lyY2xlUmlwcGxlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXknKTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0NvbnN1bWFibGVBcnJheTIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF90b0FycmF5MiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90b0FycmF5Jyk7XG5cbnZhciBfdG9BcnJheTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0FycmF5Mik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX1RyYW5zaXRpb25Hcm91cCA9IHJlcXVpcmUoJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbkdyb3VwJyk7XG5cbnZhciBfVHJhbnNpdGlvbkdyb3VwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RyYW5zaXRpb25Hcm91cCk7XG5cbnZhciBfZG9tID0gcmVxdWlyZSgnLi4vdXRpbHMvZG9tJyk7XG5cbnZhciBfZG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvbSk7XG5cbnZhciBfQ2lyY2xlUmlwcGxlID0gcmVxdWlyZSgnLi9DaXJjbGVSaXBwbGUnKTtcblxudmFyIF9DaXJjbGVSaXBwbGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2lyY2xlUmlwcGxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gUmVtb3ZlIHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBhcnJheVxudmFyIHNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoX3JlZikge1xuICB2YXIgX3JlZjIgPSAoMCwgX3RvQXJyYXkzLmRlZmF1bHQpKF9yZWYpLFxuICAgICAgbmV3QXJyYXkgPSBfcmVmMi5zbGljZSgxKTtcblxuICByZXR1cm4gbmV3QXJyYXk7XG59O1xuXG52YXIgVG91Y2hSaXBwbGUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShUb3VjaFJpcHBsZSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVG91Y2hSaXBwbGUocHJvcHMsIGNvbnRleHQpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBUb3VjaFJpcHBsZSk7XG5cbiAgICAvLyBUb3VjaCBzdGFydCBwcm9kdWNlcyBhIG1vdXNlIGRvd24gZXZlbnQgZm9yIGNvbXBhdCByZWFzb25zLiBUbyBhdm9pZFxuICAgIC8vIHNob3dpbmcgcmlwcGxlcyB0d2ljZSB3ZSBza2lwIHNob3dpbmcgYSByaXBwbGUgZm9yIHRoZSBmaXJzdCBtb3VzZSBkb3duXG4gICAgLy8gYWZ0ZXIgYSB0b3VjaCBzdGFydC4gTm90ZSB3ZSBkb24ndCBzdG9yZSBpZ25vcmVOZXh0TW91c2VEb3duIGluIHRoaXMuc3RhdGVcbiAgICAvLyB0byBhdm9pZCByZS1yZW5kZXJpbmcgd2hlbiB3ZSBjaGFuZ2UgaXQuXG4gICAgdmFyIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoVG91Y2hSaXBwbGUuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFRvdWNoUmlwcGxlKSkuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBvbmx5IGxpc3RlbiB0byBsZWZ0IGNsaWNrc1xuICAgICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICBfdGhpcy5zdGFydChldmVudCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuZW5kKCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5lbmQoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlVG91Y2hTdGFydCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAvLyBJZiB0aGUgdXNlciBpcyBzd2lwaW5nIChub3QganVzdCB0YXBwaW5nKSwgc2F2ZSB0aGUgcG9zaXRpb24gc28gd2UgY2FuXG4gICAgICAvLyBhYm9ydCByaXBwbGVzIGlmIHRoZSB1c2VyIGFwcGVhcnMgdG8gYmUgc2Nyb2xsaW5nLlxuICAgICAgaWYgKF90aGlzLnByb3BzLmFib3J0T25TY3JvbGwgJiYgZXZlbnQudG91Y2hlcykge1xuICAgICAgICBfdGhpcy5zdGFydExpc3RlbmluZ0ZvclNjcm9sbEFib3J0KGV2ZW50KTtcbiAgICAgICAgX3RoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLnN0YXJ0KGV2ZW50LCB0cnVlKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlVG91Y2hFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5lbmQoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlVG91Y2hNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBTdG9wIHRyeWluZyB0byBhYm9ydCBpZiB3ZSdyZSBhbHJlYWR5IDMwMG1zIGludG8gdGhlIGFuaW1hdGlvblxuICAgICAgdmFyIHRpbWVTaW5jZVN0YXJ0ID0gTWF0aC5hYnMoRGF0ZS5ub3coKSAtIF90aGlzLnN0YXJ0VGltZSk7XG4gICAgICBpZiAodGltZVNpbmNlU3RhcnQgPiAzMDApIHtcbiAgICAgICAgX3RoaXMuc3RvcExpc3RlbmluZ0ZvclNjcm9sbEFib3J0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIHVzZXIgaXMgc2Nyb2xsaW5nLi4uXG4gICAgICB2YXIgZGVsdGFZID0gTWF0aC5hYnMoZXZlbnQudG91Y2hlc1swXS5jbGllbnRZIC0gX3RoaXMuZmlyc3RUb3VjaFkpO1xuICAgICAgdmFyIGRlbHRhWCA9IE1hdGguYWJzKGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WCAtIF90aGlzLmZpcnN0VG91Y2hYKTtcbiAgICAgIC8vIENhbGwgaXQgYSBzY3JvbGwgYWZ0ZXIgYW4gYXJiaXRyYXJ5IDZweCAoZmVlbHMgcmVhc29uYWJsZSBpbiB0ZXN0aW5nKVxuICAgICAgaWYgKGRlbHRhWSA+IDYgfHwgZGVsdGFYID4gNikge1xuICAgICAgICB2YXIgY3VycmVudFJpcHBsZXMgPSBfdGhpcy5zdGF0ZS5yaXBwbGVzO1xuICAgICAgICB2YXIgcmlwcGxlID0gY3VycmVudFJpcHBsZXNbMF07XG4gICAgICAgIC8vIFRoaXMgY2xvbmUgd2lsbCByZXBsYWNlIHRoZSByaXBwbGUgaW4gUmVhY3RUcmFuc2l0aW9uR3JvdXAgd2l0aCBhXG4gICAgICAgIC8vIHZlcnNpb24gdGhhdCB3aWxsIGRpc2FwcGVhciBpbW1lZGlhdGVseSB3aGVuIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gICAgICAgIHZhciBhYm9ydGVkUmlwcGxlID0gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChyaXBwbGUsIHsgYWJvcnRlZDogdHJ1ZSB9KTtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBvbGQgcmlwcGxlIGFuZCByZXBsYWNlIGl0IHdpdGggdGhlIG5ldyB1cGRhdGVkIG9uZVxuICAgICAgICBjdXJyZW50UmlwcGxlcyA9IHNoaWZ0KGN1cnJlbnRSaXBwbGVzKTtcbiAgICAgICAgY3VycmVudFJpcHBsZXMgPSBbXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTMuZGVmYXVsdCkoY3VycmVudFJpcHBsZXMpLCBbYWJvcnRlZFJpcHBsZV0pO1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IHJpcHBsZXM6IGN1cnJlbnRSaXBwbGVzIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBDYWxsIGVuZCBhZnRlciB3ZSd2ZSBzZXQgdGhlIHJpcHBsZSB0byBhYm9ydCBvdGhlcndpc2UgdGhlIHNldFN0YXRlXG4gICAgICAgICAgLy8gaW4gZW5kKCkgbWVyZ2VzIHdpdGggdGhpcyBhbmQgdGhlIHJpcHBsZSBhYm9ydCBmYWlsc1xuICAgICAgICAgIF90aGlzLmVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaWdub3JlTmV4dE1vdXNlRG93biA9IGZhbHNlO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAvLyBUaGlzIHByb3AgYWxsb3dzIHVzIHRvIG9ubHkgcmVuZGVyIHRoZSBSZWFjdFRyYW5zaXRpb25Hcm91cFxuICAgICAgLy8gb24gdGhlIGZpcnN0IGNsaWNrIG9mIHRoZSBjb21wb25lbnQsIG1ha2luZyB0aGUgaW5pdGFsIHJlbmRlciBmYXN0ZXIuXG4gICAgICBoYXNSaXBwbGVzOiBmYWxzZSxcbiAgICAgIG5leHRLZXk6IDAsXG4gICAgICByaXBwbGVzOiBbXVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoVG91Y2hSaXBwbGUsIFt7XG4gICAga2V5OiAnc3RhcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydChldmVudCwgaXNSaXBwbGVUb3VjaEdlbmVyYXRlZCkge1xuICAgICAgdmFyIHRoZW1lID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnJpcHBsZTtcblxuICAgICAgaWYgKHRoaXMuaWdub3JlTmV4dE1vdXNlRG93biAmJiAhaXNSaXBwbGVUb3VjaEdlbmVyYXRlZCkge1xuICAgICAgICB0aGlzLmlnbm9yZU5leHRNb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmlwcGxlcyA9IHRoaXMuc3RhdGUucmlwcGxlcztcblxuICAgICAgLy8gQWRkIGEgcmlwcGxlIHRvIHRoZSByaXBwbGVzIGFycmF5XG4gICAgICByaXBwbGVzID0gW10uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkzLmRlZmF1bHQpKHJpcHBsZXMpLCBbX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0NpcmNsZVJpcHBsZTIuZGVmYXVsdCwge1xuICAgICAgICBrZXk6IHRoaXMuc3RhdGUubmV4dEtleSxcbiAgICAgICAgc3R5bGU6ICF0aGlzLnByb3BzLmNlbnRlclJpcHBsZSA/IHRoaXMuZ2V0UmlwcGxlU3R5bGUoZXZlbnQpIDoge30sXG4gICAgICAgIGNvbG9yOiB0aGlzLnByb3BzLmNvbG9yIHx8IHRoZW1lLmNvbG9yLFxuICAgICAgICBvcGFjaXR5OiB0aGlzLnByb3BzLm9wYWNpdHksXG4gICAgICAgIHRvdWNoR2VuZXJhdGVkOiBpc1JpcHBsZVRvdWNoR2VuZXJhdGVkXG4gICAgICB9KV0pO1xuXG4gICAgICB0aGlzLmlnbm9yZU5leHRNb3VzZURvd24gPSBpc1JpcHBsZVRvdWNoR2VuZXJhdGVkO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGhhc1JpcHBsZXM6IHRydWUsXG4gICAgICAgIG5leHRLZXk6IHRoaXMuc3RhdGUubmV4dEtleSArIDEsXG4gICAgICAgIHJpcHBsZXM6IHJpcHBsZXNcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2VuZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuZCgpIHtcbiAgICAgIHZhciBjdXJyZW50UmlwcGxlcyA9IHRoaXMuc3RhdGUucmlwcGxlcztcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICByaXBwbGVzOiBzaGlmdChjdXJyZW50UmlwcGxlcylcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMucHJvcHMuYWJvcnRPblNjcm9sbCkge1xuICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmdGb3JTY3JvbGxBYm9ydCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHRoZSB1c2VyIHNlZW1zIHRvIGJlIHNjcm9sbGluZyBhbmQgYWJvcnQgdGhlIGFuaW1hdGlvbiBpZiBzb1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzdGFydExpc3RlbmluZ0ZvclNjcm9sbEFib3J0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRMaXN0ZW5pbmdGb3JTY3JvbGxBYm9ydChldmVudCkge1xuICAgICAgdGhpcy5maXJzdFRvdWNoWSA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WTtcbiAgICAgIHRoaXMuZmlyc3RUb3VjaFggPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICAvLyBOb3RlIHRoYXQgd2hlbiBzY29sbGluZyBDaHJvbWUgdGhyb3R0bGVzIHRoaXMgZXZlbnQgdG8gZXZlcnkgMjAwbXNcbiAgICAgIC8vIEFsc28gbm90ZSB3ZSBkb24ndCBsaXN0ZW4gZm9yIHNjcm9sbCBldmVudHMgZGlyZWN0bHkgYXMgdGhlcmUncyBubyBnZW5lcmFsXG4gICAgICAvLyB3YXkgdG8gY292ZXIgY2FzZXMgbGlrZSBzY3JvbGxpbmcgd2l0aGluIGNvbnRhaW5lcnMgb24gdGhlIHBhZ2VcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVUb3VjaE1vdmUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3N0b3BMaXN0ZW5pbmdGb3JTY3JvbGxBYm9ydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3BMaXN0ZW5pbmdGb3JTY3JvbGxBYm9ydCgpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5oYW5kbGVUb3VjaE1vdmUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFJpcHBsZVN0eWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmlwcGxlU3R5bGUoZXZlbnQpIHtcbiAgICAgIHZhciBlbCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICAgIHZhciBlbEhlaWdodCA9IGVsLm9mZnNldEhlaWdodDtcbiAgICAgIHZhciBlbFdpZHRoID0gZWwub2Zmc2V0V2lkdGg7XG4gICAgICB2YXIgb2Zmc2V0ID0gX2RvbTIuZGVmYXVsdC5vZmZzZXQoZWwpO1xuICAgICAgdmFyIGlzVG91Y2hFdmVudCA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGg7XG4gICAgICB2YXIgcGFnZVggPSBpc1RvdWNoRXZlbnQgPyBldmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQucGFnZVg7XG4gICAgICB2YXIgcGFnZVkgPSBpc1RvdWNoRXZlbnQgPyBldmVudC50b3VjaGVzWzBdLnBhZ2VZIDogZXZlbnQucGFnZVk7XG4gICAgICB2YXIgcG9pbnRlclggPSBwYWdlWCAtIG9mZnNldC5sZWZ0O1xuICAgICAgdmFyIHBvaW50ZXJZID0gcGFnZVkgLSBvZmZzZXQudG9wO1xuICAgICAgdmFyIHRvcExlZnREaWFnID0gdGhpcy5jYWxjRGlhZyhwb2ludGVyWCwgcG9pbnRlclkpO1xuICAgICAgdmFyIHRvcFJpZ2h0RGlhZyA9IHRoaXMuY2FsY0RpYWcoZWxXaWR0aCAtIHBvaW50ZXJYLCBwb2ludGVyWSk7XG4gICAgICB2YXIgYm90UmlnaHREaWFnID0gdGhpcy5jYWxjRGlhZyhlbFdpZHRoIC0gcG9pbnRlclgsIGVsSGVpZ2h0IC0gcG9pbnRlclkpO1xuICAgICAgdmFyIGJvdExlZnREaWFnID0gdGhpcy5jYWxjRGlhZyhwb2ludGVyWCwgZWxIZWlnaHQgLSBwb2ludGVyWSk7XG4gICAgICB2YXIgcmlwcGxlUmFkaXVzID0gTWF0aC5tYXgodG9wTGVmdERpYWcsIHRvcFJpZ2h0RGlhZywgYm90UmlnaHREaWFnLCBib3RMZWZ0RGlhZyk7XG4gICAgICB2YXIgcmlwcGxlU2l6ZSA9IHJpcHBsZVJhZGl1cyAqIDI7XG4gICAgICB2YXIgbGVmdCA9IHBvaW50ZXJYIC0gcmlwcGxlUmFkaXVzO1xuICAgICAgdmFyIHRvcCA9IHBvaW50ZXJZIC0gcmlwcGxlUmFkaXVzO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXJlY3Rpb25JbnZhcmlhbnQ6IHRydWUsXG4gICAgICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICAgICAgd2lkdGg6IHJpcHBsZVNpemUsXG4gICAgICAgIHRvcDogdG9wLFxuICAgICAgICBsZWZ0OiBsZWZ0XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NhbGNEaWFnJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FsY0RpYWcoYSwgYikge1xuICAgICAgcmV0dXJuIE1hdGguc3FydChhICogYSArIGIgKiBiKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcbiAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIGhhc1JpcHBsZXMgPSBfc3RhdGUuaGFzUmlwcGxlcyxcbiAgICAgICAgICByaXBwbGVzID0gX3N0YXRlLnJpcHBsZXM7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG5cbiAgICAgIHZhciByaXBwbGVHcm91cCA9IHZvaWQgMDtcblxuICAgICAgaWYgKGhhc1JpcHBsZXMpIHtcbiAgICAgICAgdmFyIG1lcmdlZFN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7XG4gICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgICAgIHpJbmRleDogMSAvLyBUaGlzIGlzIGFsc28gbmVlZGVkIHNvIHRoYXQgcmlwcGxlcyBkbyBub3QgYmxlZWQgcGFzdCBhIHBhcmVudCBib3JkZXIgcmFkaXVzLlxuICAgICAgICB9LCBzdHlsZSk7XG5cbiAgICAgICAgcmlwcGxlR3JvdXAgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfVHJhbnNpdGlvbkdyb3VwMi5kZWZhdWx0LFxuICAgICAgICAgIHsgc3R5bGU6IHByZXBhcmVTdHlsZXMobWVyZ2VkU3R5bGVzKSB9LFxuICAgICAgICAgIHJpcHBsZXNcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIG9uTW91c2VVcDogdGhpcy5oYW5kbGVNb3VzZVVwLFxuICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bixcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcbiAgICAgICAgICBvblRvdWNoRW5kOiB0aGlzLmhhbmRsZVRvdWNoRW5kXG4gICAgICAgIH0sXG4gICAgICAgIHJpcHBsZUdyb3VwLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRvdWNoUmlwcGxlO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuVG91Y2hSaXBwbGUuZGVmYXVsdFByb3BzID0ge1xuICBhYm9ydE9uU2Nyb2xsOiB0cnVlXG59O1xuVG91Y2hSaXBwbGUuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblRvdWNoUmlwcGxlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgYWJvcnRPblNjcm9sbDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBjZW50ZXJSaXBwbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBvcGFjaXR5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBUb3VjaFJpcHBsZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9hdXRvUHJlZml4ID0gcmVxdWlyZSgnLi4vdXRpbHMvYXV0b1ByZWZpeCcpO1xuXG52YXIgX2F1dG9QcmVmaXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXV0b1ByZWZpeCk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcblxudmFyIF90cmFuc2l0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTY2FsZUluQ2hpbGQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShTY2FsZUluQ2hpbGQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNjYWxlSW5DaGlsZCgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTY2FsZUluQ2hpbGQpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChTY2FsZUluQ2hpbGQuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFNjYWxlSW5DaGlsZCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU2NhbGVJbkNoaWxkLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5lbnRlclRpbWVyKTtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmxlYXZlVGltZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxBcHBlYXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsQXBwZWFyKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVBbmltYXRpb24oY2FsbGJhY2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxFbnRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxFbnRlcihjYWxsYmFjaykge1xuICAgICAgdGhpcy5pbml0aWFsaXplQW5pbWF0aW9uKGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRBcHBlYXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRBcHBlYXIoKSB7XG4gICAgICB0aGlzLmFuaW1hdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRFbnRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZEVudGVyKCkge1xuICAgICAgdGhpcy5hbmltYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbExlYXZlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbExlYXZlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgc3R5bGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcykuc3R5bGU7XG5cbiAgICAgIHN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgICBfYXV0b1ByZWZpeDIuZGVmYXVsdC5zZXQoc3R5bGUsICd0cmFuc2Zvcm0nLCAnc2NhbGUoJyArIHRoaXMucHJvcHMubWluU2NhbGUgKyAnKScpO1xuXG4gICAgICB0aGlzLmxlYXZlVGltZXIgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCA0NTApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FuaW1hdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgICAgdmFyIHN0eWxlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpLnN0eWxlO1xuXG4gICAgICBzdHlsZS5vcGFjaXR5ID0gJzEnO1xuICAgICAgX2F1dG9QcmVmaXgyLmRlZmF1bHQuc2V0KHN0eWxlLCAndHJhbnNmb3JtJywgJ3NjYWxlKCcgKyB0aGlzLnByb3BzLm1heFNjYWxlICsgJyknKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpbml0aWFsaXplQW5pbWF0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdGlhbGl6ZUFuaW1hdGlvbihjYWxsYmFjaykge1xuICAgICAgdmFyIHN0eWxlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpLnN0eWxlO1xuXG4gICAgICBzdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgICAgX2F1dG9QcmVmaXgyLmRlZmF1bHQuc2V0KHN0eWxlLCAndHJhbnNmb3JtJywgJ3NjYWxlKDApJyk7XG5cbiAgICAgIHRoaXMuZW50ZXJUaW1lciA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIHRoaXMucHJvcHMuZW50ZXJEZWxheSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgZW50ZXJEZWxheSA9IF9wcm9wcy5lbnRlckRlbGF5LFxuICAgICAgICAgIG1heFNjYWxlID0gX3Byb3BzLm1heFNjYWxlLFxuICAgICAgICAgIG1pblNjYWxlID0gX3Byb3BzLm1pblNjYWxlLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3Byb3BzLCBbJ2NoaWxkcmVuJywgJ2VudGVyRGVsYXknLCAnbWF4U2NhbGUnLCAnbWluU2NhbGUnLCAnc3R5bGUnXSk7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG5cbiAgICAgIHZhciBtZXJnZWRSb290U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dChudWxsLCBbJ3RyYW5zZm9ybScsICdvcGFjaXR5J10pXG4gICAgICB9LCBzdHlsZSk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKG1lcmdlZFJvb3RTdHlsZXMpIH0pLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFNjYWxlSW5DaGlsZDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblNjYWxlSW5DaGlsZC5kZWZhdWx0UHJvcHMgPSB7XG4gIGVudGVyRGVsYXk6IDAsXG4gIG1heFNjYWxlOiAxLFxuICBtaW5TY2FsZTogMFxufTtcblNjYWxlSW5DaGlsZC5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuU2NhbGVJbkNoaWxkLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgZW50ZXJEZWxheTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIG1heFNjYWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgbWluU2NhbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNjYWxlSW5DaGlsZDsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmdldENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZztcbmV4cG9ydHMubWVyZ2VDaGlsZE1hcHBpbmdzID0gbWVyZ2VDaGlsZE1hcHBpbmdzO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuKSB7XG4gIGlmICghY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBfcmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBjaGlsZDtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXYsIG5leHQpIHtcbiAgcHJldiA9IHByZXYgfHwge307XG4gIG5leHQgPSBuZXh0IHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldFZhbHVlRm9yS2V5KGtleSkge1xuICAgIGlmIChuZXh0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBuZXh0W2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZXZba2V5XTtcbiAgfVxuXG4gIC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAvLyB0aGUgY29tYmluZWQgbGlzdFxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0ge307XG5cbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChuZXh0Lmhhc093blByb3BlcnR5KHByZXZLZXkpKSB7XG4gICAgICBpZiAocGVuZGluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgIG5leHRLZXlzUGVuZGluZ1twcmV2S2V5XSA9IHBlbmRpbmdLZXlzO1xuICAgICAgICBwZW5kaW5nS2V5cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nS2V5cy5wdXNoKHByZXZLZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpID0gdm9pZCAwO1xuICB2YXIgY2hpbGRNYXBwaW5nID0ge307XG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmcuaGFzT3duUHJvcGVydHkobmV4dEtleSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gIH1cblxuICAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcbiAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2hpbGRNYXBwaW5nW3BlbmRpbmdLZXlzW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdLZXlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZE1hcHBpbmc7XG59IiwiXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2hhaW4oKXtcclxuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aFxyXG4gIHZhciBhcmdzID0gW107XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspXHJcbiAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldXHJcblxyXG4gIGFyZ3MgPSBhcmdzLmZpbHRlcihmdW5jdGlvbihmbil7IHJldHVybiBmbiAhPSBudWxsIH0pXHJcblxyXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZFxyXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIGFyZ3NbMF1cclxuXHJcbiAgcmV0dXJuIGFyZ3MucmVkdWNlKGZ1bmN0aW9uKGN1cnJlbnQsIG5leHQpe1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcclxuICAgICAgY3VycmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICBuZXh0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG4gIH0pXHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfVHJhbnNpdGlvbkdyb3VwID0gcmVxdWlyZSgncmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uR3JvdXAnKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJhbnNpdGlvbkdyb3VwKTtcblxudmFyIF9TY2FsZUluQ2hpbGQgPSByZXF1aXJlKCcuL1NjYWxlSW5DaGlsZCcpO1xuXG52YXIgX1NjYWxlSW5DaGlsZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TY2FsZUluQ2hpbGQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU2NhbGVJbiA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFNjYWxlSW4sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNjYWxlSW4oKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgU2NhbGVJbik7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFNjYWxlSW4uX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFNjYWxlSW4pKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFNjYWxlSW4sIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2hpbGRTdHlsZSA9IF9wcm9wcy5jaGlsZFN0eWxlLFxuICAgICAgICAgIGVudGVyRGVsYXkgPSBfcHJvcHMuZW50ZXJEZWxheSxcbiAgICAgICAgICBtYXhTY2FsZSA9IF9wcm9wcy5tYXhTY2FsZSxcbiAgICAgICAgICBtaW5TY2FsZSA9IF9wcm9wcy5taW5TY2FsZSxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wcywgWydjaGlsZHJlbicsICdjaGlsZFN0eWxlJywgJ2VudGVyRGVsYXknLCAnbWF4U2NhbGUnLCAnbWluU2NhbGUnLCAnc3R5bGUnXSk7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG5cbiAgICAgIHZhciBtZXJnZWRSb290U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCB7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgICAgfSwgc3R5bGUpO1xuXG4gICAgICB2YXIgbmV3Q2hpbGRyZW4gPSBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIF9TY2FsZUluQ2hpbGQyLmRlZmF1bHQsXG4gICAgICAgICAge1xuICAgICAgICAgICAga2V5OiBjaGlsZC5rZXksXG4gICAgICAgICAgICBlbnRlckRlbGF5OiBlbnRlckRlbGF5LFxuICAgICAgICAgICAgbWF4U2NhbGU6IG1heFNjYWxlLFxuICAgICAgICAgICAgbWluU2NhbGU6IG1pblNjYWxlLFxuICAgICAgICAgICAgc3R5bGU6IGNoaWxkU3R5bGVcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNoaWxkXG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfVHJhbnNpdGlvbkdyb3VwMi5kZWZhdWx0LFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwge1xuICAgICAgICAgIHN0eWxlOiBwcmVwYXJlU3R5bGVzKG1lcmdlZFJvb3RTdHlsZXMpLFxuICAgICAgICAgIGNvbXBvbmVudDogJ2RpdidcbiAgICAgICAgfSksXG4gICAgICAgIG5ld0NoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU2NhbGVJbjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblNjYWxlSW4uZGVmYXVsdFByb3BzID0ge1xuICBlbnRlckRlbGF5OiAwXG59O1xuU2NhbGVJbi5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuU2NhbGVJbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGNoaWxkU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICBlbnRlckRlbGF5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgbWF4U2NhbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBtaW5TY2FsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBTY2FsZUluOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJ3JlY29tcG9zZS9zaGFsbG93RXF1YWwnKTtcblxudmFyIF9zaGFsbG93RXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hhbGxvd0VxdWFsKTtcblxudmFyIF9hdXRvUHJlZml4ID0gcmVxdWlyZSgnLi4vdXRpbHMvYXV0b1ByZWZpeCcpO1xuXG52YXIgX2F1dG9QcmVmaXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXV0b1ByZWZpeCk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcblxudmFyIF90cmFuc2l0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9ucyk7XG5cbnZhciBfU2NhbGVJbiA9IHJlcXVpcmUoJy4vU2NhbGVJbicpO1xuXG52YXIgX1NjYWxlSW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2NhbGVJbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBwdWxzYXRlRHVyYXRpb24gPSA3NTA7XG5cbnZhciBGb2N1c1JpcHBsZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKEZvY3VzUmlwcGxlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBGb2N1c1JpcHBsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBGb2N1c1JpcHBsZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBGb2N1c1JpcHBsZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRm9jdXNSaXBwbGUpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5wdWxzYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlubmVyQ2lyY2xlID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKF90aGlzLnJlZnMuaW5uZXJDaXJjbGUpO1xuICAgICAgaWYgKCFpbm5lckNpcmNsZSkgcmV0dXJuO1xuXG4gICAgICB2YXIgc3RhcnRTY2FsZSA9ICdzY2FsZSgxKSc7XG4gICAgICB2YXIgZW5kU2NhbGUgPSAnc2NhbGUoMC44NSknO1xuICAgICAgdmFyIGN1cnJlbnRTY2FsZSA9IGlubmVyQ2lyY2xlLnN0eWxlLnRyYW5zZm9ybSB8fCBzdGFydFNjYWxlO1xuICAgICAgdmFyIG5leHRTY2FsZSA9IGN1cnJlbnRTY2FsZSA9PT0gc3RhcnRTY2FsZSA/IGVuZFNjYWxlIDogc3RhcnRTY2FsZTtcblxuICAgICAgX2F1dG9QcmVmaXgyLmRlZmF1bHQuc2V0KGlubmVyQ2lyY2xlLnN0eWxlLCAndHJhbnNmb3JtJywgbmV4dFNjYWxlKTtcbiAgICAgIF90aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KF90aGlzLnB1bHNhdGUsIHB1bHNhdGVEdXJhdGlvbik7XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEZvY3VzUmlwcGxlLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5zaG93KSB7XG4gICAgICAgIHRoaXMuc2V0UmlwcGxlU2l6ZSgpO1xuICAgICAgICB0aGlzLnB1bHNhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzaG91bGRDb21wb25lbnRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgIHJldHVybiAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgICAgdGhpcy5zZXRSaXBwbGVTaXplKCk7XG4gICAgICAgIHRoaXMucHVsc2F0ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMudGltZW91dCkgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFJpcHBsZUVsZW1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSaXBwbGVFbGVtZW50KHByb3BzKSB7XG4gICAgICB2YXIgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgICAgICBpbm5lclN0eWxlID0gcHJvcHMuaW5uZXJTdHlsZSxcbiAgICAgICAgICBvcGFjaXR5ID0gcHJvcHMub3BhY2l0eTtcbiAgICAgIHZhciBfY29udGV4dCRtdWlUaGVtZSA9IHRoaXMuY29udGV4dC5tdWlUaGVtZSxcbiAgICAgICAgICBwcmVwYXJlU3R5bGVzID0gX2NvbnRleHQkbXVpVGhlbWUucHJlcGFyZVN0eWxlcyxcbiAgICAgICAgICByaXBwbGUgPSBfY29udGV4dCRtdWlUaGVtZS5yaXBwbGU7XG5cblxuICAgICAgdmFyIGlubmVyU3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgICBvcGFjaXR5OiBvcGFjaXR5ID8gb3BhY2l0eSA6IDAuMTYsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IgfHwgcmlwcGxlLmNvbG9yLFxuICAgICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dChwdWxzYXRlRHVyYXRpb24gKyAnbXMnLCAndHJhbnNmb3JtJywgbnVsbCwgX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VJbk91dEZ1bmN0aW9uKVxuICAgICAgfSwgaW5uZXJTdHlsZSk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyByZWY6ICdpbm5lckNpcmNsZScsIHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgaW5uZXJTdHlsZXMpKSB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRSaXBwbGVTaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UmlwcGxlU2l6ZSgpIHtcbiAgICAgIHZhciBlbCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMuaW5uZXJDaXJjbGUpO1xuICAgICAgdmFyIGhlaWdodCA9IGVsLm9mZnNldEhlaWdodDtcbiAgICAgIHZhciB3aWR0aCA9IGVsLm9mZnNldFdpZHRoO1xuICAgICAgdmFyIHNpemUgPSBNYXRoLm1heChoZWlnaHQsIHdpZHRoKTtcblxuICAgICAgdmFyIG9sZFRvcCA9IDA7XG4gICAgICAvLyBGb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IGVuZHNXaXRoKClcbiAgICAgIGlmIChlbC5zdHlsZS50b3AuaW5kZXhPZigncHgnLCBlbC5zdHlsZS50b3AubGVuZ3RoIC0gMikgIT09IC0xKSB7XG4gICAgICAgIG9sZFRvcCA9IHBhcnNlSW50KGVsLnN0eWxlLnRvcCk7XG4gICAgICB9XG4gICAgICBlbC5zdHlsZS5oZWlnaHQgPSBzaXplICsgJ3B4JztcbiAgICAgIGVsLnN0eWxlLnRvcCA9IGhlaWdodCAvIDIgLSBzaXplIC8gMiArIG9sZFRvcCArICdweCc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgc2hvdyA9IF9wcm9wcy5zaG93LFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuXG5cbiAgICAgIHZhciBtZXJnZWRSb290U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHtcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDBcbiAgICAgIH0sIHN0eWxlKTtcblxuICAgICAgdmFyIHJpcHBsZSA9IHNob3cgPyB0aGlzLmdldFJpcHBsZUVsZW1lbnQodGhpcy5wcm9wcykgOiBudWxsO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9TY2FsZUluMi5kZWZhdWx0LFxuICAgICAgICB7XG4gICAgICAgICAgbWF4U2NhbGU6IDAuODUsXG4gICAgICAgICAgc3R5bGU6IG1lcmdlZFJvb3RTdHlsZXNcbiAgICAgICAgfSxcbiAgICAgICAgcmlwcGxlXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRm9jdXNSaXBwbGU7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Gb2N1c1JpcHBsZS5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuRm9jdXNSaXBwbGUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGlubmVyU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICBvcGFjaXR5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgc2hvdzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IEZvY3VzUmlwcGxlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJ3JlY29tcG9zZS9zaGFsbG93RXF1YWwnKTtcblxudmFyIF9zaGFsbG93RXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hhbGxvd0VxdWFsKTtcblxudmFyIF9jb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZSgnLi4vdXRpbHMvY29sb3JNYW5pcHVsYXRvcicpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBfdHJhbnNpdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNpdGlvbnMpO1xuXG52YXIgX0VuaGFuY2VkQnV0dG9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvRW5oYW5jZWRCdXR0b24nKTtcblxudmFyIF9FbmhhbmNlZEJ1dHRvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FbmhhbmNlZEJ1dHRvbik7XG5cbnZhciBfSWNvbkJ1dHRvbiA9IHJlcXVpcmUoJy4uL0ljb25CdXR0b24nKTtcblxudmFyIF9JY29uQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ljb25CdXR0b24pO1xuXG52YXIgX2V4cGFuZExlc3MgPSByZXF1aXJlKCcuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9leHBhbmQtbGVzcycpO1xuXG52YXIgX2V4cGFuZExlc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhwYW5kTGVzcyk7XG5cbnZhciBfZXhwYW5kTW9yZSA9IHJlcXVpcmUoJy4uL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2V4cGFuZC1tb3JlJyk7XG5cbnZhciBfZXhwYW5kTW9yZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHBhbmRNb3JlKTtcblxudmFyIF9OZXN0ZWRMaXN0ID0gcmVxdWlyZSgnLi9OZXN0ZWRMaXN0Jyk7XG5cbnZhciBfTmVzdGVkTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9OZXN0ZWRMaXN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0U3R5bGVzKHByb3BzLCBjb250ZXh0LCBzdGF0ZSkge1xuICB2YXIgYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yID0gcHJvcHMuYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yLFxuICAgICAgaW5zZXRDaGlsZHJlbiA9IHByb3BzLmluc2V0Q2hpbGRyZW4sXG4gICAgICBsZWZ0QXZhdGFyID0gcHJvcHMubGVmdEF2YXRhcixcbiAgICAgIGxlZnRDaGVja2JveCA9IHByb3BzLmxlZnRDaGVja2JveCxcbiAgICAgIGxlZnRJY29uID0gcHJvcHMubGVmdEljb24sXG4gICAgICBuZXN0ZWRJdGVtcyA9IHByb3BzLm5lc3RlZEl0ZW1zLFxuICAgICAgbmVzdGVkTGV2ZWwgPSBwcm9wcy5uZXN0ZWRMZXZlbCxcbiAgICAgIHJpZ2h0QXZhdGFyID0gcHJvcHMucmlnaHRBdmF0YXIsXG4gICAgICByaWdodEljb24gPSBwcm9wcy5yaWdodEljb24sXG4gICAgICByaWdodEljb25CdXR0b24gPSBwcm9wcy5yaWdodEljb25CdXR0b24sXG4gICAgICByaWdodFRvZ2dsZSA9IHByb3BzLnJpZ2h0VG9nZ2xlLFxuICAgICAgc2Vjb25kYXJ5VGV4dCA9IHByb3BzLnNlY29uZGFyeVRleHQsXG4gICAgICBzZWNvbmRhcnlUZXh0TGluZXMgPSBwcm9wcy5zZWNvbmRhcnlUZXh0TGluZXM7XG4gIHZhciBtdWlUaGVtZSA9IGNvbnRleHQubXVpVGhlbWU7XG4gIHZhciBsaXN0SXRlbSA9IG11aVRoZW1lLmxpc3RJdGVtO1xuXG5cbiAgdmFyIHRleHRDb2xvciA9IG11aVRoZW1lLmJhc2VUaGVtZS5wYWxldHRlLnRleHRDb2xvcjtcbiAgdmFyIGhvdmVyQ29sb3IgPSBwcm9wcy5ob3ZlckNvbG9yIHx8ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0ZXh0Q29sb3IsIDAuMSk7XG4gIHZhciBzaW5nbGVBdmF0YXIgPSAhc2Vjb25kYXJ5VGV4dCAmJiAobGVmdEF2YXRhciB8fCByaWdodEF2YXRhcik7XG4gIHZhciBzaW5nbGVOb0F2YXRhciA9ICFzZWNvbmRhcnlUZXh0ICYmICEobGVmdEF2YXRhciB8fCByaWdodEF2YXRhcik7XG4gIHZhciB0d29MaW5lID0gc2Vjb25kYXJ5VGV4dCAmJiBzZWNvbmRhcnlUZXh0TGluZXMgPT09IDE7XG4gIHZhciB0aHJlZUxpbmUgPSBzZWNvbmRhcnlUZXh0ICYmIHNlY29uZGFyeVRleHRMaW5lcyA+IDE7XG5cbiAgdmFyIGlzS2V5Ym9hcmRGb2N1c2VkID0gKHByb3BzLmlzS2V5Ym9hcmRGb2N1c2VkICE9PSB1bmRlZmluZWQgPyBwcm9wcyA6IHN0YXRlKS5pc0tleWJvYXJkRm9jdXNlZDtcblxuICB2YXIgc3R5bGVzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKGlzS2V5Ym9hcmRGb2N1c2VkIHx8IHN0YXRlLmhvdmVyZWQpICYmICFzdGF0ZS5yaWdodEljb25CdXR0b25Ib3ZlcmVkICYmICFzdGF0ZS5yaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzZWQgPyBob3ZlckNvbG9yIDogbnVsbCxcbiAgICAgIGNvbG9yOiB0ZXh0Q29sb3IsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgbGluZUhlaWdodDogJzE2cHgnLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgpXG4gICAgfSxcblxuICAgIC8vIFRoaXMgaW5uZXIgZGl2IGlzIG5lZWRlZCBzbyB0aGF0IHJpcHBsZXMgd2lsbCBzcGFuIHRoZSBlbnRpcmUgY29udGFpbmVyXG4gICAgaW5uZXJEaXY6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IG5lc3RlZExldmVsICogbGlzdEl0ZW0ubmVzdGVkTGV2ZWxEZXB0aCxcbiAgICAgIHBhZGRpbmdMZWZ0OiBsZWZ0SWNvbiB8fCBsZWZ0QXZhdGFyIHx8IGxlZnRDaGVja2JveCB8fCBpbnNldENoaWxkcmVuID8gNzIgOiAxNixcbiAgICAgIHBhZGRpbmdSaWdodDogcmlnaHRJY29uIHx8IHJpZ2h0QXZhdGFyIHx8IHJpZ2h0SWNvbkJ1dHRvbiB8fCBuZXN0ZWRJdGVtcy5sZW5ndGggJiYgYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yID8gNTYgOiByaWdodFRvZ2dsZSA/IDcyIDogMTYsXG4gICAgICBwYWRkaW5nQm90dG9tOiBzaW5nbGVBdmF0YXIgPyAyMCA6IDE2LFxuICAgICAgcGFkZGluZ1RvcDogc2luZ2xlTm9BdmF0YXIgfHwgdGhyZWVMaW5lID8gMTYgOiAyMCxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgfSxcblxuICAgIGljb25zOiB7XG4gICAgICBoZWlnaHQ6IDI0LFxuICAgICAgd2lkdGg6IDI0LFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiB0d29MaW5lID8gMTIgOiBzaW5nbGVBdmF0YXIgPyA0IDogMCxcbiAgICAgIG1hcmdpbjogMTJcbiAgICB9LFxuXG4gICAgbGVmdEljb246IHtcbiAgICAgIGxlZnQ6IDRcbiAgICB9LFxuXG4gICAgcmlnaHRJY29uOiB7XG4gICAgICByaWdodDogNFxuICAgIH0sXG5cbiAgICBhdmF0YXJzOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogc2luZ2xlQXZhdGFyID8gOCA6IDE2XG4gICAgfSxcblxuICAgIGxhYmVsOiB7XG4gICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgIH0sXG5cbiAgICBsZWZ0QXZhdGFyOiB7XG4gICAgICBsZWZ0OiAxNlxuICAgIH0sXG5cbiAgICByaWdodEF2YXRhcjoge1xuICAgICAgcmlnaHQ6IDE2XG4gICAgfSxcblxuICAgIGxlZnRDaGVja2JveDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6IDI0LFxuICAgICAgdG9wOiB0d29MaW5lID8gMjQgOiBzaW5nbGVBdmF0YXIgPyAxNiA6IDEyLFxuICAgICAgbGVmdDogMTZcbiAgICB9LFxuXG4gICAgcHJpbWFyeVRleHQ6IHt9LFxuXG4gICAgcmlnaHRJY29uQnV0dG9uOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB0b3A6IHR3b0xpbmUgPyAxMiA6IHNpbmdsZUF2YXRhciA/IDQgOiAwLFxuICAgICAgcmlnaHQ6IDRcbiAgICB9LFxuXG4gICAgcmlnaHRUb2dnbGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiA1NCxcbiAgICAgIHRvcDogdHdvTGluZSA/IDI1IDogc2luZ2xlQXZhdGFyID8gMTcgOiAxMyxcbiAgICAgIHJpZ2h0OiA4XG4gICAgfSxcblxuICAgIHNlY29uZGFyeVRleHQ6IHtcbiAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgIGxpbmVIZWlnaHQ6IHRocmVlTGluZSA/ICcxOHB4JyA6ICcxNnB4JyxcbiAgICAgIGhlaWdodDogdGhyZWVMaW5lID8gMzYgOiAxNixcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIG1hcmdpblRvcDogNCxcbiAgICAgIGNvbG9yOiBsaXN0SXRlbS5zZWNvbmRhcnlUZXh0Q29sb3IsXG5cbiAgICAgIC8vIG5lZWRlZCBmb3IgMiBhbmQgMyBsaW5lIGVsbGlwc2lzXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICB3aGl0ZVNwYWNlOiB0aHJlZUxpbmUgPyBudWxsIDogJ25vd3JhcCcsXG4gICAgICBkaXNwbGF5OiB0aHJlZUxpbmUgPyAnLXdlYmtpdC1ib3gnIDogbnVsbCxcbiAgICAgIFdlYmtpdExpbmVDbGFtcDogdGhyZWVMaW5lID8gMiA6IG51bGwsXG4gICAgICBXZWJraXRCb3hPcmllbnQ6IHRocmVlTGluZSA/ICd2ZXJ0aWNhbCcgOiBudWxsXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbnZhciBMaXN0SXRlbSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKExpc3RJdGVtLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaXN0SXRlbSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBMaXN0SXRlbSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBMaXN0SXRlbS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTGlzdEl0ZW0pKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhvdmVyZWQ6IGZhbHNlLFxuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IGZhbHNlLFxuICAgICAgb3BlbjogZmFsc2UsXG4gICAgICByaWdodEljb25CdXR0b25Ib3ZlcmVkOiBmYWxzZSxcbiAgICAgIHJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXNlZDogZmFsc2UsXG4gICAgICB0b3VjaDogZmFsc2VcbiAgICB9LCBfdGhpcy5oYW5kbGVLZXlib2FyZEZvY3VzID0gZnVuY3Rpb24gKGV2ZW50LCBpc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBpc0tleWJvYXJkRm9jdXNlZDogaXNLZXlib2FyZEZvY3VzZWQgfSk7XG4gICAgICBfdGhpcy5wcm9wcy5vbktleWJvYXJkRm9jdXMoZXZlbnQsIGlzS2V5Ym9hcmRGb2N1c2VkKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZUVudGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLnRvdWNoKSBfdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IHRydWUgfSk7XG4gICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DbGljaykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLnByaW1hcnlUb2dnbGVzTmVzdGVkTGlzdCkge1xuICAgICAgICBfdGhpcy5oYW5kbGVOZXN0ZWRMaXN0VG9nZ2xlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVOZXN0ZWRMaXN0VG9nZ2xlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMubGVmdENoZWNrYm94KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9wZW4gPT09IG51bGwpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBvcGVuOiAhX3RoaXMuc3RhdGUub3BlbiB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25OZXN0ZWRMaXN0VG9nZ2xlKF90aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFeHBvc2luZyBgdGhpc2AgaW4gdGhlIGNhbGxiYWNrIGlzIHF1aXRlIGEgYmFkIEFQSS5cbiAgICAgICAgLy8gSSdtIGRvaW5nIGEgb25lIGxldmVsIGRlZXAgY2xvbmUgdG8gZXhwb3NlIGEgZmFrZSBzdGF0ZS5vcGVuLlxuICAgICAgICBfdGhpcy5wcm9wcy5vbk5lc3RlZExpc3RUb2dnbGUoKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgX3RoaXMsIHtcbiAgICAgICAgICBzdGF0ZToge1xuICAgICAgICAgICAgb3BlbjogIV90aGlzLnN0YXRlLm9wZW5cbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVSaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzID0gZnVuY3Rpb24gKGV2ZW50LCBpc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgaWYgKGlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc0tleWJvYXJkRm9jdXNlZDogZmFsc2UsXG4gICAgICAgICAgcmlnaHRJY29uQnV0dG9uS2V5Ym9hcmRGb2N1c2VkOiBpc0tleWJvYXJkRm9jdXNlZFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGljb25CdXR0b24gPSBfdGhpcy5wcm9wcy5yaWdodEljb25CdXR0b247XG5cbiAgICAgIGlmIChpY29uQnV0dG9uICYmIGljb25CdXR0b24ucHJvcHMub25LZXlib2FyZEZvY3VzKSBpY29uQnV0dG9uLnByb3BzLm9uS2V5Ym9hcmRGb2N1cyhldmVudCwgaXNLZXlib2FyZEZvY3VzZWQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBpY29uQnV0dG9uID0gX3RoaXMucHJvcHMucmlnaHRJY29uQnV0dG9uO1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyByaWdodEljb25CdXR0b25Ib3ZlcmVkOiBmYWxzZSB9KTtcbiAgICAgIGlmIChpY29uQnV0dG9uICYmIGljb25CdXR0b24ucHJvcHMub25Nb3VzZUxlYXZlKSBpY29uQnV0dG9uLnByb3BzLm9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VFbnRlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGljb25CdXR0b24gPSBfdGhpcy5wcm9wcy5yaWdodEljb25CdXR0b247XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IHJpZ2h0SWNvbkJ1dHRvbkhvdmVyZWQ6IHRydWUgfSk7XG4gICAgICBpZiAoaWNvbkJ1dHRvbiAmJiBpY29uQnV0dG9uLnByb3BzLm9uTW91c2VFbnRlcikgaWNvbkJ1dHRvbi5wcm9wcy5vbk1vdXNlRW50ZXIoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlVXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBpY29uQnV0dG9uID0gX3RoaXMucHJvcHMucmlnaHRJY29uQnV0dG9uO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBpZiAoaWNvbkJ1dHRvbiAmJiBpY29uQnV0dG9uLnByb3BzLm9uTW91c2VVcCkgaWNvbkJ1dHRvbi5wcm9wcy5vbk1vdXNlVXAoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgaWNvbkJ1dHRvbiA9IF90aGlzLnByb3BzLnJpZ2h0SWNvbkJ1dHRvbjtcblxuICAgICAgLy8gU3RvcCB0aGUgZXZlbnQgZnJvbSBidWJibGluZyB1cCB0byB0aGUgbGlzdC1pdGVtXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChpY29uQnV0dG9uICYmIGljb25CdXR0b24ucHJvcHMub25DbGljaykgaWNvbkJ1dHRvbi5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IHRvdWNoOiB0cnVlIH0pO1xuICAgICAgX3RoaXMucHJvcHMub25Ub3VjaFN0YXJ0KGV2ZW50KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVUb3VjaEVuZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyB0b3VjaDogdHJ1ZSB9KTtcbiAgICAgIF90aGlzLnByb3BzLm9uVG91Y2hFbmQoZXZlbnQpO1xuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShMaXN0SXRlbSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgb3BlbjogdGhpcy5wcm9wcy5vcGVuID09PSBudWxsID8gdGhpcy5wcm9wcy5pbml0aWFsbHlPcGVuID09PSB0cnVlIDogdGhpcy5wcm9wcy5vcGVuXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIC8vIHVwZGF0ZSB0aGUgc3RhdGUgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNvbnRyb2xsZWQuXG4gICAgICBpZiAobmV4dFByb3BzLm9wZW4gIT09IG51bGwpIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiBuZXh0UHJvcHMub3BlbiB9KTtcbiAgICAgIGlmIChuZXh0UHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5zdGF0ZS5ob3ZlcmVkKSB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCkge1xuICAgICAgcmV0dXJuICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSkgfHwgISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLmNvbnRleHQsIG5leHRDb250ZXh0KTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIG1ldGhvZCBpcyBuZWVkZWQgYnkgdGhlIGBNZW51SXRlbWAgY29tcG9uZW50LlxuXG4gIH0sIHtcbiAgICBrZXk6ICdhcHBseUZvY3VzU3RhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUZvY3VzU3RhdGUoZm9jdXNTdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuYnV0dG9uKSB7XG4gICAgICAgIHZhciBidXR0b25FbCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLmJ1dHRvbik7XG5cbiAgICAgICAgc3dpdGNoIChmb2N1c1N0YXRlKSB7XG4gICAgICAgICAgY2FzZSAnbm9uZSc6XG4gICAgICAgICAgICBidXR0b25FbC5ibHVyKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdmb2N1c2VkJzpcbiAgICAgICAgICAgIGJ1dHRvbkVsLmZvY3VzKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdrZXlib2FyZC1mb2N1c2VkJzpcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uLnNldEtleWJvYXJkRm9jdXMoKTtcbiAgICAgICAgICAgIGJ1dHRvbkVsLmZvY3VzKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZURpc2FibGVkRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkRWxlbWVudChzdHlsZXMsIGNvbnRlbnRDaGlsZHJlbiwgYWRkaXRpb25hbFByb3BzKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpbm5lckRpdlN0eWxlID0gX3Byb3BzLmlubmVyRGl2U3R5bGUsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cblxuICAgICAgdmFyIG1lcmdlZERpdlN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLnJvb3QsIHN0eWxlcy5pbm5lckRpdiwgaW5uZXJEaXZTdHlsZSwgc3R5bGUpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBhZGRpdGlvbmFsUHJvcHMsIHtcbiAgICAgICAgICBzdHlsZTogdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXMobWVyZ2VkRGl2U3R5bGVzKVxuICAgICAgICB9KSxcbiAgICAgICAgY29udGVudENoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZUxhYmVsRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUxhYmVsRWxlbWVudChzdHlsZXMsIGNvbnRlbnRDaGlsZHJlbiwgYWRkaXRpb25hbFByb3BzKSB7XG4gICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaW5uZXJEaXZTdHlsZSA9IF9wcm9wczIuaW5uZXJEaXZTdHlsZSxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wczIuc3R5bGU7XG5cblxuICAgICAgdmFyIG1lcmdlZExhYmVsU3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMucm9vdCwgc3R5bGVzLmlubmVyRGl2LCBpbm5lckRpdlN0eWxlLCBzdHlsZXMubGFiZWwsIHN0eWxlKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnbGFiZWwnLFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBhZGRpdGlvbmFsUHJvcHMsIHtcbiAgICAgICAgICBzdHlsZTogdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXMobWVyZ2VkTGFiZWxTdHlsZXMpXG4gICAgICAgIH0pLFxuICAgICAgICBjb250ZW50Q2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlVGV4dEVsZW1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVUZXh0RWxlbWVudChzdHlsZXMsIGRhdGEsIGtleSkge1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuICAgICAgaWYgKF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChkYXRhKSkge1xuICAgICAgICB2YXIgc3R5bGUgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcywgZGF0YS5wcm9wcy5zdHlsZSk7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YS50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vIGlmIGVsZW1lbnQgaXMgYSBuYXRpdmUgZG9tIG5vZGVcbiAgICAgICAgICBzdHlsZSA9IHByZXBhcmVTdHlsZXMoc3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGRhdGEsIHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsga2V5OiBrZXksIHN0eWxlOiBwcmVwYXJlU3R5bGVzKHN0eWxlcykgfSxcbiAgICAgICAgZGF0YVxuICAgICAgKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwdXNoRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2hFbGVtZW50KGNoaWxkcmVuLCBlbGVtZW50LCBiYXNlU3R5bGVzLCBhZGRpdGlvbmFsUHJvcHMpIHtcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBzdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIGJhc2VTdHlsZXMsIGVsZW1lbnQucHJvcHMuc3R5bGUpO1xuICAgICAgICBjaGlsZHJlbi5wdXNoKF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgICAga2V5OiBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgICAgc3R5bGU6IHN0eWxlc1xuICAgICAgICB9LCBhZGRpdGlvbmFsUHJvcHMpKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3IgPSBfcHJvcHMzLmF1dG9HZW5lcmF0ZU5lc3RlZEluZGljYXRvcixcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczMuY2hpbGRyZW4sXG4gICAgICAgICAgY29udGFpbmVyRWxlbWVudCA9IF9wcm9wczMuY29udGFpbmVyRWxlbWVudCxcbiAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wczMuZGlzYWJsZWQsXG4gICAgICAgICAgZGlzYWJsZUtleWJvYXJkRm9jdXMgPSBfcHJvcHMzLmRpc2FibGVLZXlib2FyZEZvY3VzLFxuICAgICAgICAgIGhvdmVyQ29sb3IgPSBfcHJvcHMzLmhvdmVyQ29sb3IsXG4gICAgICAgICAgaW5pdGlhbGx5T3BlbiA9IF9wcm9wczMuaW5pdGlhbGx5T3BlbixcbiAgICAgICAgICBpbm5lckRpdlN0eWxlID0gX3Byb3BzMy5pbm5lckRpdlN0eWxlLFxuICAgICAgICAgIGluc2V0Q2hpbGRyZW4gPSBfcHJvcHMzLmluc2V0Q2hpbGRyZW4sXG4gICAgICAgICAgbGVmdEF2YXRhciA9IF9wcm9wczMubGVmdEF2YXRhcixcbiAgICAgICAgICBsZWZ0Q2hlY2tib3ggPSBfcHJvcHMzLmxlZnRDaGVja2JveCxcbiAgICAgICAgICBsZWZ0SWNvbiA9IF9wcm9wczMubGVmdEljb24sXG4gICAgICAgICAgbmVzdGVkSXRlbXMgPSBfcHJvcHMzLm5lc3RlZEl0ZW1zLFxuICAgICAgICAgIG5lc3RlZExldmVsID0gX3Byb3BzMy5uZXN0ZWRMZXZlbCxcbiAgICAgICAgICBuZXN0ZWRMaXN0U3R5bGUgPSBfcHJvcHMzLm5lc3RlZExpc3RTdHlsZSxcbiAgICAgICAgICBvbktleWJvYXJkRm9jdXMgPSBfcHJvcHMzLm9uS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgICBpc0tleWJvYXJkRm9jdXNlZCA9IF9wcm9wczMuaXNLZXlib2FyZEZvY3VzZWQsXG4gICAgICAgICAgb25Nb3VzZUVudGVyID0gX3Byb3BzMy5vbk1vdXNlRW50ZXIsXG4gICAgICAgICAgb25Nb3VzZUxlYXZlID0gX3Byb3BzMy5vbk1vdXNlTGVhdmUsXG4gICAgICAgICAgb25OZXN0ZWRMaXN0VG9nZ2xlID0gX3Byb3BzMy5vbk5lc3RlZExpc3RUb2dnbGUsXG4gICAgICAgICAgb25Ub3VjaFN0YXJ0ID0gX3Byb3BzMy5vblRvdWNoU3RhcnQsXG4gICAgICAgICAgb25DbGljayA9IF9wcm9wczMub25DbGljayxcbiAgICAgICAgICByaWdodEF2YXRhciA9IF9wcm9wczMucmlnaHRBdmF0YXIsXG4gICAgICAgICAgcmlnaHRJY29uID0gX3Byb3BzMy5yaWdodEljb24sXG4gICAgICAgICAgcmlnaHRJY29uQnV0dG9uID0gX3Byb3BzMy5yaWdodEljb25CdXR0b24sXG4gICAgICAgICAgcmlnaHRUb2dnbGUgPSBfcHJvcHMzLnJpZ2h0VG9nZ2xlLFxuICAgICAgICAgIHByaW1hcnlUZXh0ID0gX3Byb3BzMy5wcmltYXJ5VGV4dCxcbiAgICAgICAgICBwcmltYXJ5VG9nZ2xlc05lc3RlZExpc3QgPSBfcHJvcHMzLnByaW1hcnlUb2dnbGVzTmVzdGVkTGlzdCxcbiAgICAgICAgICBzZWNvbmRhcnlUZXh0ID0gX3Byb3BzMy5zZWNvbmRhcnlUZXh0LFxuICAgICAgICAgIHNlY29uZGFyeVRleHRMaW5lcyA9IF9wcm9wczMuc2Vjb25kYXJ5VGV4dExpbmVzLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzMy5zdHlsZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wczMsIFsnYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yJywgJ2NoaWxkcmVuJywgJ2NvbnRhaW5lckVsZW1lbnQnLCAnZGlzYWJsZWQnLCAnZGlzYWJsZUtleWJvYXJkRm9jdXMnLCAnaG92ZXJDb2xvcicsICdpbml0aWFsbHlPcGVuJywgJ2lubmVyRGl2U3R5bGUnLCAnaW5zZXRDaGlsZHJlbicsICdsZWZ0QXZhdGFyJywgJ2xlZnRDaGVja2JveCcsICdsZWZ0SWNvbicsICduZXN0ZWRJdGVtcycsICduZXN0ZWRMZXZlbCcsICduZXN0ZWRMaXN0U3R5bGUnLCAnb25LZXlib2FyZEZvY3VzJywgJ2lzS2V5Ym9hcmRGb2N1c2VkJywgJ29uTW91c2VFbnRlcicsICdvbk1vdXNlTGVhdmUnLCAnb25OZXN0ZWRMaXN0VG9nZ2xlJywgJ29uVG91Y2hTdGFydCcsICdvbkNsaWNrJywgJ3JpZ2h0QXZhdGFyJywgJ3JpZ2h0SWNvbicsICdyaWdodEljb25CdXR0b24nLCAncmlnaHRUb2dnbGUnLCAncHJpbWFyeVRleHQnLCAncHJpbWFyeVRvZ2dsZXNOZXN0ZWRMaXN0JywgJ3NlY29uZGFyeVRleHQnLCAnc2Vjb25kYXJ5VGV4dExpbmVzJywgJ3N0eWxlJ10pO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuICAgICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQsIHRoaXMuc3RhdGUpO1xuICAgICAgdmFyIGNvbnRlbnRDaGlsZHJlbiA9IFtjaGlsZHJlbl07XG5cbiAgICAgIGlmIChsZWZ0SWNvbikge1xuICAgICAgICB2YXIgYWRkaXRpb25hbFByb3BzID0ge1xuICAgICAgICAgIGNvbG9yOiBsZWZ0SWNvbi5wcm9wcy5jb2xvciB8fCB0aGlzLmNvbnRleHQubXVpVGhlbWUubGlzdEl0ZW0ubGVmdEljb25Db2xvclxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnB1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgbGVmdEljb24sICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmljb25zLCBzdHlsZXMubGVmdEljb24pLCBhZGRpdGlvbmFsUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmlnaHRJY29uKSB7XG4gICAgICAgIHZhciBfYWRkaXRpb25hbFByb3BzID0ge1xuICAgICAgICAgIGNvbG9yOiByaWdodEljb24ucHJvcHMuY29sb3IgfHwgdGhpcy5jb250ZXh0Lm11aVRoZW1lLmxpc3RJdGVtLnJpZ2h0SWNvbkNvbG9yXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCByaWdodEljb24sICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmljb25zLCBzdHlsZXMucmlnaHRJY29uKSwgX2FkZGl0aW9uYWxQcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsZWZ0QXZhdGFyKSB7XG4gICAgICAgIHRoaXMucHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCBsZWZ0QXZhdGFyLCAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5hdmF0YXJzLCBzdHlsZXMubGVmdEF2YXRhcikpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmlnaHRBdmF0YXIpIHtcbiAgICAgICAgdGhpcy5wdXNoRWxlbWVudChjb250ZW50Q2hpbGRyZW4sIHJpZ2h0QXZhdGFyLCAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5hdmF0YXJzLCBzdHlsZXMucmlnaHRBdmF0YXIpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxlZnRDaGVja2JveCkge1xuICAgICAgICB0aGlzLnB1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgbGVmdENoZWNrYm94LCAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5sZWZ0Q2hlY2tib3gpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmlnaHRJY29uQnV0dG9uRWxlbWVudFxuICAgICAgdmFyIGhhc05lc3RMaXN0SXRlbXMgPSBuZXN0ZWRJdGVtcy5sZW5ndGg7XG4gICAgICB2YXIgaGFzUmlnaHRFbGVtZW50ID0gcmlnaHRBdmF0YXIgfHwgcmlnaHRJY29uIHx8IHJpZ2h0SWNvbkJ1dHRvbiB8fCByaWdodFRvZ2dsZTtcbiAgICAgIHZhciBuZWVkc05lc3RlZEluZGljYXRvciA9IGhhc05lc3RMaXN0SXRlbXMgJiYgYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yICYmICFoYXNSaWdodEVsZW1lbnQ7XG5cbiAgICAgIGlmIChyaWdodEljb25CdXR0b24gfHwgbmVlZHNOZXN0ZWRJbmRpY2F0b3IpIHtcbiAgICAgICAgdmFyIHJpZ2h0SWNvbkJ1dHRvbkVsZW1lbnQgPSByaWdodEljb25CdXR0b247XG4gICAgICAgIHZhciByaWdodEljb25CdXR0b25IYW5kbGVycyA9IHtcbiAgICAgICAgICBvbktleWJvYXJkRm9jdXM6IHRoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VMZWF2ZSxcbiAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvbkNsaWNrLFxuICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlVXAsXG4gICAgICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlVXBcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBDcmVhdGUgYSBuZXN0ZWQgbGlzdCBpbmRpY2F0b3IgaWNvbiBpZiB3ZSBkb24ndCBoYXZlIGFuIGljb24gb24gdGhlIHJpZ2h0XG4gICAgICAgIGlmIChuZWVkc05lc3RlZEluZGljYXRvcikge1xuICAgICAgICAgIHJpZ2h0SWNvbkJ1dHRvbkVsZW1lbnQgPSB0aGlzLnN0YXRlLm9wZW4gPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIF9JY29uQnV0dG9uMi5kZWZhdWx0LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9leHBhbmRMZXNzMi5kZWZhdWx0LCBudWxsKVxuICAgICAgICAgICkgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIF9JY29uQnV0dG9uMi5kZWZhdWx0LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9leHBhbmRNb3JlMi5kZWZhdWx0LCBudWxsKVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmlnaHRJY29uQnV0dG9uSGFuZGxlcnMub25DbGljayA9IHRoaXMuaGFuZGxlTmVzdGVkTGlzdFRvZ2dsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCByaWdodEljb25CdXR0b25FbGVtZW50LCAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5yaWdodEljb25CdXR0b24pLCByaWdodEljb25CdXR0b25IYW5kbGVycyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyaWdodFRvZ2dsZSkge1xuICAgICAgICB0aGlzLnB1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgcmlnaHRUb2dnbGUsICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLnJpZ2h0VG9nZ2xlKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmltYXJ5VGV4dCkge1xuICAgICAgICB2YXIgcHJpbWFyeVRleHRFbGVtZW50ID0gdGhpcy5jcmVhdGVUZXh0RWxlbWVudChzdHlsZXMucHJpbWFyeVRleHQsIHByaW1hcnlUZXh0LCAncHJpbWFyeVRleHQnKTtcbiAgICAgICAgY29udGVudENoaWxkcmVuLnB1c2gocHJpbWFyeVRleHRFbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlY29uZGFyeVRleHQpIHtcbiAgICAgICAgdmFyIHNlY29uZGFyeVRleHRFbGVtZW50ID0gdGhpcy5jcmVhdGVUZXh0RWxlbWVudChzdHlsZXMuc2Vjb25kYXJ5VGV4dCwgc2Vjb25kYXJ5VGV4dCwgJ3NlY29uZGFyeVRleHQnKTtcbiAgICAgICAgY29udGVudENoaWxkcmVuLnB1c2goc2Vjb25kYXJ5VGV4dEVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmVzdGVkTGlzdCA9IG5lc3RlZEl0ZW1zLmxlbmd0aCA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfTmVzdGVkTGlzdDIuZGVmYXVsdCxcbiAgICAgICAgeyBuZXN0ZWRMZXZlbDogbmVzdGVkTGV2ZWwsIG9wZW46IHRoaXMuc3RhdGUub3Blbiwgc3R5bGU6IG5lc3RlZExpc3RTdHlsZSB9LFxuICAgICAgICBuZXN0ZWRJdGVtc1xuICAgICAgKSA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIHNpbXBsZUxhYmVsID0gIXByaW1hcnlUb2dnbGVzTmVzdGVkTGlzdCAmJiAobGVmdENoZWNrYm94IHx8IHJpZ2h0VG9nZ2xlKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgc2ltcGxlTGFiZWwgPyB0aGlzLmNyZWF0ZUxhYmVsRWxlbWVudChzdHlsZXMsIGNvbnRlbnRDaGlsZHJlbiwgb3RoZXIpIDogZGlzYWJsZWQgPyB0aGlzLmNyZWF0ZURpc2FibGVkRWxlbWVudChzdHlsZXMsIGNvbnRlbnRDaGlsZHJlbiwgb3RoZXIpIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX0VuaGFuY2VkQnV0dG9uMi5kZWZhdWx0LFxuICAgICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe1xuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudDogY29udGFpbmVyRWxlbWVudFxuICAgICAgICAgIH0sIG90aGVyLCB7XG4gICAgICAgICAgICBkaXNhYmxlS2V5Ym9hcmRGb2N1czogZGlzYWJsZUtleWJvYXJkRm9jdXMgfHwgdGhpcy5zdGF0ZS5yaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzZWQsXG4gICAgICAgICAgICBvbktleWJvYXJkRm9jdXM6IHRoaXMuaGFuZGxlS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLmhhbmRsZU1vdXNlRW50ZXIsXG4gICAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcbiAgICAgICAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsXG4gICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmJ1dHRvbiA9IG5vZGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3R5bGU6ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLnJvb3QsIHN0eWxlKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMuaW5uZXJEaXYsIGlubmVyRGl2U3R5bGUpKSB9LFxuICAgICAgICAgICAgY29udGVudENoaWxkcmVuXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBuZXN0ZWRMaXN0XG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTGlzdEl0ZW07XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5MaXN0SXRlbS5tdWlOYW1lID0gJ0xpc3RJdGVtJztcbkxpc3RJdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yOiB0cnVlLFxuICBjb250YWluZXJFbGVtZW50OiAnc3BhbicsXG4gIGRpc2FibGVLZXlib2FyZEZvY3VzOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBpbml0aWFsbHlPcGVuOiBmYWxzZSxcbiAgaW5zZXRDaGlsZHJlbjogZmFsc2UsXG4gIG5lc3RlZEl0ZW1zOiBbXSxcbiAgbmVzdGVkTGV2ZWw6IDAsXG4gIG9uS2V5Ym9hcmRGb2N1czogZnVuY3Rpb24gb25LZXlib2FyZEZvY3VzKCkge30sXG4gIG9uTW91c2VFbnRlcjogZnVuY3Rpb24gb25Nb3VzZUVudGVyKCkge30sXG4gIG9uTW91c2VMZWF2ZTogZnVuY3Rpb24gb25Nb3VzZUxlYXZlKCkge30sXG4gIG9uTmVzdGVkTGlzdFRvZ2dsZTogZnVuY3Rpb24gb25OZXN0ZWRMaXN0VG9nZ2xlKCkge30sXG4gIG9uVG91Y2hFbmQ6IGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7fSxcbiAgb25Ub3VjaFN0YXJ0OiBmdW5jdGlvbiBvblRvdWNoU3RhcnQoKSB7fSxcbiAgb3BlbjogbnVsbCxcbiAgcHJpbWFyeVRvZ2dsZXNOZXN0ZWRMaXN0OiBmYWxzZSxcbiAgc2Vjb25kYXJ5VGV4dExpbmVzOiAxXG59O1xuTGlzdEl0ZW0uY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcbkxpc3RJdGVtLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIElmIHRydWUsIGdlbmVyYXRlIGEgbmVzdGVkLWxpc3QtaW5kaWNhdG9yIGljb24gd2hlbiBuZXN0ZWQgbGlzdFxuICAgKiBpdGVtcyBhcmUgZGV0ZWN0ZWQuIE5vdGUgdGhhdCBhbiBpbmRpY2F0b3Igd2lsbCBub3QgYmUgY3JlYXRlZFxuICAgKiBpZiBhIGByaWdodEljb25gIG9yIGByaWdodEljb25CdXR0b25gIGhhcyBiZWVuIHByb3ZpZGVkIHRvXG4gICAqIHRoZSBlbGVtZW50LlxuICAgKi9cbiAgYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBDaGlsZHJlbiBwYXNzZWQgaW50byB0aGUgYExpc3RJdGVtYC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgZWxlbWVudCB0byB1c2UgYXMgdGhlIGNvbnRhaW5lciBmb3IgdGhlIExpc3RJdGVtLiBFaXRoZXIgYSBzdHJpbmcgdG9cbiAgICogdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBSZWFjdEVsZW1lbnQuIFRoaXMgaXMgdXNlZnVsIGZvciB3cmFwcGluZyB0aGVcbiAgICogTGlzdEl0ZW0gaW4gYSBjdXN0b20gTGluayBjb21wb25lbnQuIElmIGEgUmVhY3RFbGVtZW50IGlzIGdpdmVuLCBlbnN1cmVcbiAgICogdGhhdCBpdCBwYXNzZXMgYWxsIG9mIGl0cyBnaXZlbiBwcm9wcyB0aHJvdWdoIHRvIHRoZSB1bmRlcmx5aW5nIERPTVxuICAgKiBlbGVtZW50IGFuZCByZW5kZXJzIGl0cyBjaGlsZHJlbiBwcm9wIGZvciBwcm9wZXIgaW50ZWdyYXRpb24uXG4gICAqL1xuICBjb250YWluZXJFbGVtZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudF0pLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGVsZW1lbnQgd2lsbCBub3QgYmUgYWJsZSB0byBiZSBmb2N1c2VkIGJ5IHRoZSBrZXlib2FyZC5cbiAgICovXG4gIGRpc2FibGVLZXlib2FyZEZvY3VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgZWxlbWVudCB3aWxsIG5vdCBiZSBjbGlja2FibGVcbiAgICogYW5kIHdpbGwgbm90IGRpc3BsYXkgaG92ZXIgZWZmZWN0cy5cbiAgICogVGhpcyBpcyBhdXRvbWF0aWNhbGx5IGRpc2FibGVkIGlmIGVpdGhlciBgbGVmdENoZWNrYm94YFxuICAgKiBvciBgcmlnaHRUb2dnbGVgIGlzIHNldC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAqIE92ZXJyaWRlIHRoZSBob3ZlciBiYWNrZ3JvdW5kIGNvbG9yLlxuICAqL1xuICBob3ZlckNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBuZXN0ZWQgYExpc3RJdGVtYHMgYXJlIGluaXRpYWxseSBkaXNwbGF5ZWQuXG4gICAqL1xuICBpbml0aWFsbHlPcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgaW5uZXIgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBpbm5lckRpdlN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBjaGlsZHJlbiB3aWxsIGJlIGluZGVudGVkIGJ5IDcycHguXG4gICAqIFRoaXMgaXMgdXNlZnVsIGlmIHRoZXJlIGlzIG5vIGxlZnQgYXZhdGFyIG9yIGxlZnQgaWNvbi5cbiAgICovXG4gIGluc2V0Q2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFVzZSB0byBjb250cm9sIGlmIHRoZSBsaXN0IGl0ZW0gc2hvdWxkIHJlbmRlciBhcyBrZXlib2FyZCBmb2N1c2VkLiAgSWZcbiAgICogdW5kZWZpbmVkIChkZWZhdWx0KSwgdGhpcyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgbWFuYWdlZC4gIElmIHByb3ZpZGVkLFxuICAgKiBpdCB3aWxsIGNoYW5nZSB0aGUgY29tcG9uZW50cyBzdHlsZS4gIE5vdGUgdGhhdCB0aGlzIHdpbGwgbm90IGNoYW5nZSB0aGVcbiAgICogYWN0dWFsIGZvY3VzIC0gYW5kIHNob3VsZCBvbmx5IGJlIHVzZWQgd2hlbiB5b3Ugd2FudCB0byBzaW11bGF0ZVxuICAgKiBrZXlib2FyZCBmb2N1cyAoZWcuIGluIGEgcmljaCB0ZXh0IGlucHV0IGF1dG9jb21wbGV0ZSkuXG4gICAqL1xuICBpc0tleWJvYXJkRm9jdXNlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYEF2YXRhcmAgZWxlbWVudCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIGxlZnQgc2lkZS5cbiAgICovXG4gIGxlZnRBdmF0YXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGBDaGVja2JveGAgZWxlbWVudCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIGxlZnQgc2lkZS5cbiAgICovXG4gIGxlZnRDaGVja2JveDogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYFN2Z0ljb25gIG9yIGBGb250SWNvbmAgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSBsZWZ0IHNpZGUuXG4gICAqL1xuICBsZWZ0SWNvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgYExpc3RJdGVtYHMgdG8gbmVzdCB1bmRlcm5lYXRoIHRoZSBjdXJyZW50IGBMaXN0SXRlbWAuXG4gICAqL1xuICBuZXN0ZWRJdGVtczogX3Byb3BUeXBlczIuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCksXG4gIC8qKlxuICAgKiBDb250cm9scyBob3cgZGVlcCBhIGBMaXN0SXRlbWAgYXBwZWFycy5cbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBhdXRvbWF0aWNhbGx5IG1hbmFnZWQsIHNvIG1vZGlmeSBhdCB5b3VyIG93biByaXNrLlxuICAgKi9cbiAgbmVzdGVkTGV2ZWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIG5lc3RlZCBpdGVtcycgYE5lc3RlZExpc3RgLlxuICAgKi9cbiAgbmVzdGVkTGlzdFN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIGxpc3QgaXRlbSBpcyBjbGlja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQ2xpY2sgZXZlbnQgdGFyZ2V0aW5nIHRoZSBsaXN0IGl0ZW0uXG4gICAqL1xuICBvbkNsaWNrOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBgTGlzdEl0ZW1gIGlzIGZvY3VzZWQgb3IgYmx1cnJlZCBieSB0aGUga2V5Ym9hcmQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBgZm9jdXNgIG9yIGBibHVyYCBldmVudCB0YXJnZXRpbmcgdGhlIGBMaXN0SXRlbWAuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNLZXlib2FyZEZvY3VzZWQgSWYgdHJ1ZSwgdGhlIGBMaXN0SXRlbWAgaXMgZm9jdXNlZC5cbiAgICovXG4gIG9uS2V5Ym9hcmRGb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvbk1vdXNlRW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Nb3VzZUxlYXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBgTGlzdEl0ZW1gIHRvZ2dsZXMgaXRzIG5lc3RlZCBsaXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbGlzdEl0ZW0gVGhlIGBMaXN0SXRlbWAuXG4gICAqL1xuICBvbk5lc3RlZExpc3RUb2dnbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Ub3VjaEVuZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvblRvdWNoU3RhcnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENvbnRyb2wgdG9nZ2xlIHN0YXRlIG9mIG5lc3RlZCBsaXN0LlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYmxvY2sgZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSBwcmltYXJ5IHRleHQuXG4gICAqIElmIGEgc3RyaW5nIGlzIHBhc3NlZCBpbiwgYSBkaXYgdGFnIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBwcmltYXJ5VGV4dDogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgY2xpY2tpbmcgb3IgdGFwcGluZyB0aGUgcHJpbWFyeSB0ZXh0IG9mIHRoZSBgTGlzdEl0ZW1gXG4gICAqIHRvZ2dsZXMgdGhlIG5lc3RlZCBsaXN0LlxuICAgKi9cbiAgcHJpbWFyeVRvZ2dsZXNOZXN0ZWRMaXN0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBgQXZhdGFyYCBlbGVtZW50IHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgcmlnaHQgc2lkZS5cbiAgICovXG4gIHJpZ2h0QXZhdGFyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBgU3ZnSWNvbmAgb3IgYEZvbnRJY29uYCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIHJpZ2h0IHNpZGUuXG4gICAqL1xuICByaWdodEljb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGBJY29uQnV0dG9uYCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIHJpZ2h0IHNpZGUuXG4gICAqIEhvdmVyaW5nIG92ZXIgdGhpcyBidXR0b24gd2lsbCByZW1vdmUgdGhlIGBMaXN0SXRlbWAgaG92ZXIuXG4gICAqIEFsc28sIGNsaWNraW5nIG9uIHRoaXMgYnV0dG9uIHdpbGwgbm90IHRyaWdnZXIgYVxuICAgKiByaXBwbGUgb24gdGhlIGBMaXN0SXRlbWA7IHRoZSBldmVudCB3aWxsIGJlIHN0b3BwZWQgYW5kIHByZXZlbnRlZFxuICAgKiBmcm9tIGJ1YmJsaW5nIHVwIHRvIGNhdXNlIGEgYExpc3RJdGVtYCBjbGljay5cbiAgICovXG4gIHJpZ2h0SWNvbkJ1dHRvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYFRvZ2dsZWAgZWxlbWVudCB0byBkaXNwbGF5IG9uIHRoZSByaWdodCBzaWRlLlxuICAgKi9cbiAgcmlnaHRUb2dnbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGJsb2NrIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgc2Vjb25kYXJ5IHRleHQuXG4gICAqIElmIGEgc3RyaW5nIGlzIHBhc3NlZCBpbiwgYSBkaXYgdGFnIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBzZWNvbmRhcnlUZXh0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBDYW4gYmUgMSBvciAyLiBUaGlzIGlzIHRoZSBudW1iZXIgb2Ygc2Vjb25kYXJ5XG4gICAqIHRleHQgbGluZXMgYmVmb3JlIGVsbGlwc2lzIHdpbGwgc2hvdy5cbiAgICovXG4gIHNlY29uZGFyeVRleHRMaW5lczogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbMSwgMl0pLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gTGlzdEl0ZW07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcblxudmFyIF90cmFuc2l0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTdmdJY29uID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoU3ZnSWNvbiwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3ZnSWNvbigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTdmdJY29uKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IFN2Z0ljb24uX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFN2Z0ljb24pKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhvdmVyZWQ6IGZhbHNlXG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiBmYWxzZSB9KTtcbiAgICAgIF90aGlzLnByb3BzLm9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VFbnRlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pO1xuICAgICAgX3RoaXMucHJvcHMub25Nb3VzZUVudGVyKGV2ZW50KTtcbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3ZnSWNvbiwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb2xvciA9IF9wcm9wcy5jb2xvcixcbiAgICAgICAgICBob3ZlckNvbG9yID0gX3Byb3BzLmhvdmVyQ29sb3IsXG4gICAgICAgICAgb25Nb3VzZUVudGVyID0gX3Byb3BzLm9uTW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlTGVhdmUgPSBfcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHZpZXdCb3ggPSBfcHJvcHMudmlld0JveCxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wcywgWydjaGlsZHJlbicsICdjb2xvcicsICdob3ZlckNvbG9yJywgJ29uTW91c2VFbnRlcicsICdvbk1vdXNlTGVhdmUnLCAnc3R5bGUnLCAndmlld0JveCddKTtcbiAgICAgIHZhciBfY29udGV4dCRtdWlUaGVtZSA9IHRoaXMuY29udGV4dC5tdWlUaGVtZSxcbiAgICAgICAgICBzdmdJY29uID0gX2NvbnRleHQkbXVpVGhlbWUuc3ZnSWNvbixcbiAgICAgICAgICBwcmVwYXJlU3R5bGVzID0gX2NvbnRleHQkbXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuXG4gICAgICB2YXIgb2ZmQ29sb3IgPSBjb2xvciA/IGNvbG9yIDogJ2N1cnJlbnRDb2xvcic7XG4gICAgICB2YXIgb25Db2xvciA9IGhvdmVyQ29sb3IgPyBob3ZlckNvbG9yIDogb2ZmQ29sb3I7XG5cbiAgICAgIHZhciBtZXJnZWRTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe1xuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgY29sb3I6IHN2Z0ljb24uY29sb3IsXG4gICAgICAgIGZpbGw6IHRoaXMuc3RhdGUuaG92ZXJlZCA/IG9uQ29sb3IgOiBvZmZDb2xvcixcbiAgICAgICAgaGVpZ2h0OiAyNCxcbiAgICAgICAgd2lkdGg6IDI0LFxuICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KClcbiAgICAgIH0sIHN0eWxlKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnc3ZnJyxcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHtcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgICBzdHlsZTogcHJlcGFyZVN0eWxlcyhtZXJnZWRTdHlsZXMpLFxuICAgICAgICAgIHZpZXdCb3g6IHZpZXdCb3hcbiAgICAgICAgfSksXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU3ZnSWNvbjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblN2Z0ljb24ubXVpTmFtZSA9ICdTdmdJY29uJztcblN2Z0ljb24uZGVmYXVsdFByb3BzID0ge1xuICBvbk1vdXNlRW50ZXI6IGZ1bmN0aW9uIG9uTW91c2VFbnRlcigpIHt9LFxuICBvbk1vdXNlTGVhdmU6IGZ1bmN0aW9uIG9uTW91c2VMZWF2ZSgpIHt9LFxuICB2aWV3Qm94OiAnMCAwIDI0IDI0J1xufTtcblN2Z0ljb24uY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblN2Z0ljb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogRWxlbWVudHMgcGFzc2VkIGludG8gdGhlIFNWRyBJY29uLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGZpbGwgY29sb3Igb2YgdGhlIHN2ZyBpY29uLlxuICAgKiBJZiBub3Qgc3BlY2lmaWVkLCB0aGlzIGNvbXBvbmVudCB3aWxsIGRlZmF1bHRcbiAgICogdG8gbXVpVGhlbWUucGFsZXR0ZS50ZXh0Q29sb3IuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBpY29uIGNvbG9yIHdoZW4gdGhlIG1vdXNlIGhvdmVycyBvdmVyIHRoZSBpY29uLlxuICAgKi9cbiAgaG92ZXJDb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VFbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvbk1vdXNlTGVhdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIHJlZGVmaW5lIHdoYXQgdGhlIGNvb3JkaW5hdGVzXG4gICAqIHdpdGhvdXQgdW5pdHMgbWVhbiBpbnNpZGUgYW4gc3ZnIGVsZW1lbnQuIEZvciBleGFtcGxlLFxuICAgKiBpZiB0aGUgU1ZHIGVsZW1lbnQgaXMgNTAwICh3aWR0aCkgYnkgMjAwIChoZWlnaHQpLCBhbmQgeW91XG4gICAqIHBhc3Mgdmlld0JveD1cIjAgMCA1MCAyMFwiLCB0aGlzIG1lYW5zIHRoYXQgdGhlIGNvb3JkaW5hdGVzIGluc2lkZVxuICAgKiB0aGUgc3ZnIHdpbGwgZ28gZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyICgwLDApIHRvIGJvdHRvbSByaWdodCAoNTAsMjApXG4gICAqIGFuZCBlYWNoIHVuaXQgd2lsbCBiZSB3b3J0aCAxMHB4LlxuICAgKi9cbiAgdmlld0JveDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IFN2Z0ljb247IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGdldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSB7XG4gIGlmICh0eXBlb2YgQ29tcG9uZW50ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBDb21wb25lbnQ7XG4gIH1cblxuICBpZiAoIUNvbXBvbmVudCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0RGlzcGxheU5hbWU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgc2V0U3RhdGljID0gZnVuY3Rpb24gc2V0U3RhdGljKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICBCYXNlQ29tcG9uZW50W2tleV0gPSB2YWx1ZTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgcmV0dXJuIEJhc2VDb21wb25lbnQ7XG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBzZXRTdGF0aWM7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9zZXREaXNwbGF5TmFtZSA9IHJlcXVpcmUoJy4vc2V0RGlzcGxheU5hbWUnKTtcblxudmFyIF9zZXREaXNwbGF5TmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXREaXNwbGF5TmFtZSk7XG5cbnZhciBfd3JhcERpc3BsYXlOYW1lID0gcmVxdWlyZSgnLi93cmFwRGlzcGxheU5hbWUnKTtcblxudmFyIF93cmFwRGlzcGxheU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd3JhcERpc3BsYXlOYW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgc2hvdWxkVXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkVXBkYXRlKHRlc3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSAoMCwgX3JlYWN0LmNyZWF0ZUZhY3RvcnkpKEJhc2VDb21wb25lbnQpO1xuXG4gICAgdmFyIFNob3VsZFVwZGF0ZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHMoU2hvdWxkVXBkYXRlLCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gU2hvdWxkVXBkYXRlKCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2hvdWxkVXBkYXRlKTtcblxuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgU2hvdWxkVXBkYXRlLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgICAgIHJldHVybiB0ZXN0KHRoaXMucHJvcHMsIG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBTaG91bGRVcGRhdGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkodGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gU2hvdWxkVXBkYXRlO1xuICAgIH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuICgwLCBfc2V0RGlzcGxheU5hbWUyLmRlZmF1bHQpKCgwLCBfd3JhcERpc3BsYXlOYW1lMi5kZWZhdWx0KShCYXNlQ29tcG9uZW50LCAnc2hvdWxkVXBkYXRlJykpKFNob3VsZFVwZGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBTaG91bGRVcGRhdGU7XG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBzaG91bGRVcGRhdGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHVyZSA9IHJlcXVpcmUoJ3JlY29tcG9zZS9wdXJlJyk7XG5cbnZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblxudmFyIF9TdmdJY29uID0gcmVxdWlyZSgnLi4vLi4vU3ZnSWNvbicpO1xuXG52YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBOYXZpZ2F0aW9uQ2hlY2sgPSBmdW5jdGlvbiBOYXZpZ2F0aW9uQ2hlY2socHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgIF9TdmdJY29uMi5kZWZhdWx0LFxuICAgIHByb3BzLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTkgMTYuMTdMNC44MyAxMmwtMS40MiAxLjQxTDkgMTkgMjEgN2wtMS40MS0xLjQxeicgfSlcbiAgKTtcbn07XG5OYXZpZ2F0aW9uQ2hlY2sgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKE5hdmlnYXRpb25DaGVjayk7XG5OYXZpZ2F0aW9uQ2hlY2suZGlzcGxheU5hbWUgPSAnTmF2aWdhdGlvbkNoZWNrJztcbk5hdmlnYXRpb25DaGVjay5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBOYXZpZ2F0aW9uQ2hlY2s7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcblxudmFyIF90cmFuc2l0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9ucyk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcHJvcFR5cGVzMyA9IHJlcXVpcmUoJy4uL3V0aWxzL3Byb3BUeXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMzKTtcblxudmFyIF9QYXBlciA9IHJlcXVpcmUoJy4uL1BhcGVyJyk7XG5cbnZhciBfUGFwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFwZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRTdHlsZXMocHJvcHMsIGNvbnRleHQsIHN0YXRlKSB7XG4gIHZhciB0YXJnZXRPcmlnaW4gPSBwcm9wcy50YXJnZXRPcmlnaW47XG4gIHZhciBvcGVuID0gc3RhdGUub3BlbjtcbiAgdmFyIG11aVRoZW1lID0gY29udGV4dC5tdWlUaGVtZTtcblxuICB2YXIgaG9yaXpvbnRhbCA9IHRhcmdldE9yaWdpbi5ob3Jpem9udGFsLnJlcGxhY2UoJ21pZGRsZScsICd2ZXJ0aWNhbCcpO1xuXG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB6SW5kZXg6IG11aVRoZW1lLnpJbmRleC5wb3BvdmVyLFxuICAgICAgb3BhY2l0eTogb3BlbiA/IDEgOiAwLFxuICAgICAgdHJhbnNmb3JtOiBvcGVuID8gJ3NjYWxlKDEsIDEpJyA6ICdzY2FsZSgwLCAwKScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46IGhvcml6b250YWwgKyAnICcgKyB0YXJnZXRPcmlnaW4udmVydGljYWwsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnMjUwbXMnLCBbJ3RyYW5zZm9ybScsICdvcGFjaXR5J10pLFxuICAgICAgbWF4SGVpZ2h0OiAnMTAwJSdcbiAgICB9LFxuICAgIGhvcml6b250YWw6IHtcbiAgICAgIG1heEhlaWdodDogJzEwMCUnLFxuICAgICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgICB0cmFuc2Zvcm06IG9wZW4gPyAnc2NhbGVYKDEpJyA6ICdzY2FsZVgoMCknLFxuICAgICAgb3BhY2l0eTogb3BlbiA/IDEgOiAwLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiBob3Jpem9udGFsICsgJyAnICsgdGFyZ2V0T3JpZ2luLnZlcnRpY2FsLFxuICAgICAgdHJhbnNpdGlvbjogX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoJzI1MG1zJywgWyd0cmFuc2Zvcm0nLCAnb3BhY2l0eSddKVxuICAgIH0sXG4gICAgdmVydGljYWw6IHtcbiAgICAgIG9wYWNpdHk6IG9wZW4gPyAxIDogMCxcbiAgICAgIHRyYW5zZm9ybTogb3BlbiA/ICdzY2FsZVkoMSknIDogJ3NjYWxlWSgwKScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46IGhvcml6b250YWwgKyAnICcgKyB0YXJnZXRPcmlnaW4udmVydGljYWwsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnNTAwbXMnLCBbJ3RyYW5zZm9ybScsICdvcGFjaXR5J10pXG4gICAgfVxuICB9O1xufVxuXG52YXIgUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFBvcG92ZXJBbmltYXRpb25EZWZhdWx0KSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBvcGVuOiBmYWxzZVxuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvbm8tZGlkLW1vdW50LXNldC1zdGF0ZVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG9wZW46IG5leHRQcm9wcy5vcGVuXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHpEZXB0aCA9IF9wcm9wcy56RGVwdGg7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG4gICAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCwgdGhpcy5zdGF0ZSk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgX1BhcGVyMi5kZWZhdWx0LFxuICAgICAgICB7XG4gICAgICAgICAgc3R5bGU6ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpLFxuICAgICAgICAgIHpEZXB0aDogekRlcHRoLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgIH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHByZXBhcmVTdHlsZXMoc3R5bGVzLmhvcml6b250YWwpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHByZXBhcmVTdHlsZXMoc3R5bGVzLnZlcnRpY2FsKSB9LFxuICAgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFBvcG92ZXJBbmltYXRpb25EZWZhdWx0O1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQuZGVmYXVsdFByb3BzID0ge1xuICBzdHlsZToge30sXG4gIHpEZXB0aDogMVxufTtcblBvcG92ZXJBbmltYXRpb25EZWZhdWx0LmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5Qb3BvdmVyQW5pbWF0aW9uRGVmYXVsdC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY3NzIGNsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIG9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgdGFyZ2V0T3JpZ2luOiBfcHJvcFR5cGVzNC5kZWZhdWx0Lm9yaWdpbi5pc1JlcXVpcmVkLFxuICB6RGVwdGg6IF9wcm9wVHlwZXM0LmRlZmF1bHQuekRlcHRoXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdDsiLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHJlc3VsdCA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmcgPyBuYXRpdmVNaW4ocmVzdWx0LCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gKlxuICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG4gIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICB9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGhyb3R0bGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9wcm9wVHlwZXMzID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJvcFR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlczMpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBfdHJhbnNpdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNpdGlvbnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRTdHlsZXMocHJvcHMsIGNvbnRleHQpIHtcbiAgdmFyIHJvdW5kZWQgPSBwcm9wcy5yb3VuZGVkLFxuICAgICAgY2lyY2xlID0gcHJvcHMuY2lyY2xlLFxuICAgICAgdHJhbnNpdGlvbkVuYWJsZWQgPSBwcm9wcy50cmFuc2l0aW9uRW5hYmxlZCxcbiAgICAgIHpEZXB0aCA9IHByb3BzLnpEZXB0aDtcbiAgdmFyIF9jb250ZXh0JG11aVRoZW1lID0gY29udGV4dC5tdWlUaGVtZSxcbiAgICAgIGJhc2VUaGVtZSA9IF9jb250ZXh0JG11aVRoZW1lLmJhc2VUaGVtZSxcbiAgICAgIHBhcGVyID0gX2NvbnRleHQkbXVpVGhlbWUucGFwZXIsXG4gICAgICBib3JkZXJSYWRpdXMgPSBfY29udGV4dCRtdWlUaGVtZS5ib3JkZXJSYWRpdXM7XG5cblxuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGNvbG9yOiBwYXBlci5jb2xvcixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogcGFwZXIuYmFja2dyb3VuZENvbG9yLFxuICAgICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbkVuYWJsZWQgJiYgX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoKSxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgZm9udEZhbWlseTogYmFzZVRoZW1lLmZvbnRGYW1pbHksXG4gICAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoMCwwLDAsMCknLCAvLyBSZW1vdmUgbW9iaWxlIGNvbG9yIGZsYXNoaW5nIChkZXByZWNhdGVkKVxuICAgICAgYm94U2hhZG93OiBwYXBlci56RGVwdGhTaGFkb3dzW3pEZXB0aCAtIDFdLCAvLyBObyBzaGFkb3cgZm9yIDAgZGVwdGggcGFwZXJzXG4gICAgICBib3JkZXJSYWRpdXM6IGNpcmNsZSA/ICc1MCUnIDogcm91bmRlZCA/IGJvcmRlclJhZGl1cyA6ICcwcHgnXG4gICAgfVxuICB9O1xufVxuXG52YXIgUGFwZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShQYXBlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUGFwZXIoKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUGFwZXIpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChQYXBlci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUGFwZXIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFBhcGVyLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNpcmNsZSA9IF9wcm9wcy5jaXJjbGUsXG4gICAgICAgICAgcm91bmRlZCA9IF9wcm9wcy5yb3VuZGVkLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHRyYW5zaXRpb25FbmFibGVkID0gX3Byb3BzLnRyYW5zaXRpb25FbmFibGVkLFxuICAgICAgICAgIHpEZXB0aCA9IF9wcm9wcy56RGVwdGgsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnY2hpbGRyZW4nLCAnY2lyY2xlJywgJ3JvdW5kZWQnLCAnc3R5bGUnLCAndHJhbnNpdGlvbkVuYWJsZWQnLCAnekRlcHRoJ10pO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuICAgICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwgeyBzdHlsZTogcHJlcGFyZVN0eWxlcygoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnJvb3QsIHN0eWxlKSkgfSksXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUGFwZXI7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5QYXBlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGNpcmNsZTogZmFsc2UsXG4gIHJvdW5kZWQ6IHRydWUsXG4gIHRyYW5zaXRpb25FbmFibGVkOiB0cnVlLFxuICB6RGVwdGg6IDFcbn07XG5QYXBlci5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuUGFwZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQ2hpbGRyZW4gcGFzc2VkIGludG8gdGhlIHBhcGVyIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogU2V0IHRvIHRydWUgdG8gZ2VuZXJhdGUgYSBjaXJjdWxhciBwYXBlciBjb250YWluZXIuXG4gICAqL1xuICBjaXJjbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBwYXBlciBjb250YWluZXIgd2lsbCBoYXZlIGEgYm9yZGVyIHJhZGl1cy5cbiAgICogU2V0IHRoaXMgdG8gZmFsc2UgdG8gZ2VuZXJhdGUgYSBjb250YWluZXIgd2l0aCBzaGFycCBjb3JuZXJzLlxuICAgKi9cbiAgcm91bmRlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIENTUyB0cmFuc2l0aW9ucyBmb3IgdGhlIHBhcGVyIGVsZW1lbnQuXG4gICAqL1xuICB0cmFuc2l0aW9uRW5hYmxlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhpcyBudW1iZXIgcmVwcmVzZW50cyB0aGUgekRlcHRoIG9mIHRoZSBwYXBlciBzaGFkb3cuXG4gICAqL1xuICB6RGVwdGg6IF9wcm9wVHlwZXM0LmRlZmF1bHQuekRlcHRoXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBQYXBlcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9kb20gPSByZXF1aXJlKCcuLi91dGlscy9kb20nKTtcblxudmFyIF9kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gaGVhdmlseSBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vS2hhbi9yZWFjdC1jb21wb25lbnRzL2Jsb2IvbWFzdGVyL2pzL2xheWVyZWQtY29tcG9uZW50LW1peGluLmpzeFxudmFyIFJlbmRlclRvTGF5ZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShSZW5kZXJUb0xheWVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZW5kZXJUb0xheWVyKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFJlbmRlclRvTGF5ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gUmVuZGVyVG9MYXllci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUmVuZGVyVG9MYXllcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLm9uQ2xpY2tBd2F5ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghX3RoaXMucHJvcHMuY29tcG9uZW50Q2xpY2tBd2F5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsID0gX3RoaXMubGF5ZXI7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBlbCAmJiBldmVudC50YXJnZXQgPT09IHdpbmRvdyB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiAhX2RvbTIuZGVmYXVsdC5pc0Rlc2NlbmRhbnQoZWwsIGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgX3RoaXMucHJvcHMuY29tcG9uZW50Q2xpY2tBd2F5KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUmVuZGVyVG9MYXllciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5yZW5kZXJMYXllcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMucmVuZGVyTGF5ZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy51bnJlbmRlckxheWVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0TGF5ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXllcigpIHtcbiAgICAgIHJldHVybiB0aGlzLmxheWVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VucmVuZGVyTGF5ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlbmRlckxheWVyKCkge1xuICAgICAgaWYgKCF0aGlzLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvcHMudXNlTGF5ZXJGb3JDbGlja0F3YXkpIHtcbiAgICAgICAgdGhpcy5sYXllci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICAgIHRoaXMubGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2tBd2F5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja0F3YXkpO1xuICAgICAgfVxuXG4gICAgICAoMCwgX3JlYWN0RG9tLnVubW91bnRDb21wb25lbnRBdE5vZGUpKHRoaXMubGF5ZXIpO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmxheWVyKTtcbiAgICAgIHRoaXMubGF5ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGNhbGxpbmcgdGhpcyBtZXRob2QgaW4gY29tcG9uZW50RGlkTW91bnQoKSBhbmRcbiAgICAgKiBjb21wb25lbnREaWRVcGRhdGUoKSwgeW91J3JlIGVmZmVjdGl2ZWx5IGNyZWF0aW5nIGEgXCJ3b3JtaG9sZVwiIHRoYXRcbiAgICAgKiBmdW5uZWxzIFJlYWN0J3MgaGllcmFyY2hpY2FsIHVwZGF0ZXMgdGhyb3VnaCB0byBhIERPTSBub2RlIG9uIGFuXG4gICAgICogZW50aXJlbHkgZGlmZmVyZW50IHBhcnQgb2YgdGhlIHBhZ2UuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlckxheWVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyTGF5ZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb3BlbiA9IF9wcm9wcy5vcGVuLFxuICAgICAgICAgIHJlbmRlciA9IF9wcm9wcy5yZW5kZXI7XG5cblxuICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgaWYgKCF0aGlzLmxheWVyKSB7XG4gICAgICAgICAgdGhpcy5sYXllciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5sYXllcik7XG5cbiAgICAgICAgICBpZiAodGhpcy5wcm9wcy51c2VMYXllckZvckNsaWNrQXdheSkge1xuICAgICAgICAgICAgdGhpcy5sYXllci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja0F3YXkpO1xuICAgICAgICAgICAgdGhpcy5sYXllci5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnN0eWxlLnRvcCA9IDA7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnN0eWxlLmJvdHRvbSA9IDA7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnN0eWxlLmxlZnQgPSAwO1xuICAgICAgICAgICAgdGhpcy5sYXllci5zdHlsZS5yaWdodCA9IDA7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnN0eWxlLnpJbmRleCA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS56SW5kZXgubGF5ZXI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGhpczIub25DbGlja0F3YXkpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxheWVyRWxlbWVudCA9IHJlbmRlcigpO1xuICAgICAgICB0aGlzLmxheWVyRWxlbWVudCA9ICgwLCBfcmVhY3REb20udW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIpKHRoaXMsIGxheWVyRWxlbWVudCwgdGhpcy5sYXllcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVucmVuZGVyTGF5ZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFJlbmRlclRvTGF5ZXI7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5SZW5kZXJUb0xheWVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgdXNlTGF5ZXJGb3JDbGlja0F3YXk6IHRydWVcbn07XG5SZW5kZXJUb0xheWVyLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5SZW5kZXJUb0xheWVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgY29tcG9uZW50Q2xpY2tBd2F5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuICByZW5kZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYy5pc1JlcXVpcmVkLFxuICB1c2VMYXllckZvckNsaWNrQXdheTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBSZW5kZXJUb0xheWVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucGFzc2l2ZU9wdGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBhdHRyKSB7XG4gIHJldHVybiAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShvYmplY3QsIHByb3BlcnR5LCBhdHRyKTtcbn1cblxuLy8gUGFzc2l2ZSBvcHRpb25zXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvZG9tL3Bhc3NpdmVldmVudGxpc3RlbmVycy5qc1xudmFyIHBhc3NpdmVPcHRpb24gPSBleHBvcnRzLnBhc3NpdmVPcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWNoZSA9IG51bGw7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FjaGUgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBjYWNoZTtcbiAgICB9XG5cbiAgICB2YXIgc3VwcG9ydHNQYXNzaXZlT3B0aW9uID0gZmFsc2U7XG5cbiAgICB0cnkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBkZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vXG4gICAgfVxuXG4gICAgY2FjaGUgPSBzdXBwb3J0c1Bhc3NpdmVPcHRpb247XG5cbiAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlT3B0aW9uO1xuICB9KCk7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHt9OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbnZhciBfa2V5cyA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cycpO1xuXG52YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbicpO1xuXG52YXIgX2Fzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NpZ24pO1xuXG5leHBvcnRzLndpdGhPcHRpb25zID0gd2l0aE9wdGlvbnM7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnZmJqcy9saWIvc2hhbGxvd0VxdWFsJyk7XG5cbnZhciBfc2hhbGxvd0VxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoYWxsb3dFcXVhbCk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX3N1cHBvcnRzID0gcmVxdWlyZSgnLi9zdXBwb3J0cycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZGVmYXVsdEV2ZW50T3B0aW9ucyA9IHtcbiAgY2FwdHVyZTogZmFsc2UsXG4gIHBhc3NpdmU6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBtZXJnZURlZmF1bHRFdmVudE9wdGlvbnMob3B0aW9ucykge1xuICByZXR1cm4gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHt9LCBkZWZhdWx0RXZlbnRPcHRpb25zLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRMaXN0ZW5lckFyZ3MoZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICB2YXIgYXJncyA9IFtldmVudE5hbWUsIGNhbGxiYWNrXTtcbiAgYXJncy5wdXNoKF9zdXBwb3J0cy5wYXNzaXZlT3B0aW9uID8gb3B0aW9ucyA6IG9wdGlvbnMuY2FwdHVyZSk7XG4gIHJldHVybiBhcmdzO1xufVxuXG5mdW5jdGlvbiBvbih0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBnZXRFdmVudExpc3RlbmVyQXJncyhldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIG9mZih0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBnZXRFdmVudExpc3RlbmVyQXJncyhldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hMaXN0ZW5lcihwcm9wcywgaXRlcmF0ZWUpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICB0YXJnZXQgPSBwcm9wcy50YXJnZXQsXG4gICAgICBldmVudFByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkocHJvcHMsIFsnY2hpbGRyZW4nLCAndGFyZ2V0J10pO1xuXG5cbiAgKDAsIF9rZXlzMi5kZWZhdWx0KShldmVudFByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUuc3Vic3RyaW5nKDAsIDIpICE9PSAnb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHByb3AgPSBldmVudFByb3BzW25hbWVdO1xuICAgIHZhciB0eXBlID0gdHlwZW9mIHByb3AgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkocHJvcCk7XG4gICAgdmFyIGlzT2JqZWN0ID0gdHlwZSA9PT0gJ29iamVjdCc7XG4gICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlID09PSAnZnVuY3Rpb24nO1xuXG4gICAgaWYgKCFpc09iamVjdCAmJiAhaXNGdW5jdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjYXB0dXJlID0gbmFtZS5zdWJzdHIoLTcpLnRvTG93ZXJDYXNlKCkgPT09ICdjYXB0dXJlJztcbiAgICB2YXIgZXZlbnROYW1lID0gbmFtZS5zdWJzdHJpbmcoMikudG9Mb3dlckNhc2UoKTtcbiAgICBldmVudE5hbWUgPSBjYXB0dXJlID8gZXZlbnROYW1lLnN1YnN0cmluZygwLCBldmVudE5hbWUubGVuZ3RoIC0gNykgOiBldmVudE5hbWU7XG5cbiAgICBpZiAoaXNPYmplY3QpIHtcbiAgICAgIGl0ZXJhdGVlKGV2ZW50TmFtZSwgcHJvcC5oYW5kbGVyLCBwcm9wLm9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZShldmVudE5hbWUsIHByb3AsIG1lcmdlRGVmYXVsdEV2ZW50T3B0aW9ucyh7IGNhcHR1cmU6IGNhcHR1cmUgfSkpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHdpdGhPcHRpb25zKGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShvcHRpb25zLCAncmVhY3QtZXZlbnQtbGlzdGVuZXI6IHNob3VsZCBiZSBzcGVjaWZpZWQgb3B0aW9ucyBpbiB3aXRoT3B0aW9ucy4nKSA6IHZvaWQgMDtcblxuICByZXR1cm4ge1xuICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgb3B0aW9uczogbWVyZ2VEZWZhdWx0RXZlbnRPcHRpb25zKG9wdGlvbnMpXG4gIH07XG59XG5cbnZhciBFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoRXZlbnRMaXN0ZW5lciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRXZlbnRMaXN0ZW5lcigpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBFdmVudExpc3RlbmVyKTtcbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoRXZlbnRMaXN0ZW5lci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRXZlbnRMaXN0ZW5lcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRXZlbnRMaXN0ZW5lciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5hZGRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzaG91bGRDb21wb25lbnRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzKSB7XG4gICAgICByZXR1cm4gISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKCkge1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLmFkZExpc3RlbmVycygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FkZExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZExpc3RlbmVycygpIHtcbiAgICAgIHRoaXMuYXBwbHlMaXN0ZW5lcnMob24pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZUxpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVycygpIHtcbiAgICAgIHRoaXMuYXBwbHlMaXN0ZW5lcnMob2ZmKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhcHBseUxpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5TGlzdGVuZXJzKG9uT3JPZmYpIHtcbiAgICAgIHZhciB0YXJnZXQgPSB0aGlzLnByb3BzLnRhcmdldDtcblxuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGFyZ2V0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGVsZW1lbnQgPSB3aW5kb3dbdGFyZ2V0XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvckVhY2hMaXN0ZW5lcih0aGlzLnByb3BzLCBvbk9yT2ZmLmJpbmQobnVsbCwgZWxlbWVudCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuIHx8IG51bGw7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBFdmVudExpc3RlbmVyO1xufShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuRXZlbnRMaXN0ZW5lci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYSBzaW5nbGUgY2hpbGQgdG9vLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBET00gdGFyZ2V0IHRvIGxpc3RlbiB0by5cbiAgICovXG4gIHRhcmdldDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ10pLmlzUmVxdWlyZWRcbn0gOiB7fTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRMaXN0ZW5lcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkhvdEtleUhvbGRlciA9IHVuZGVmaW5lZDtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBIb3RLZXlIb2xkZXIgPSBleHBvcnRzLkhvdEtleUhvbGRlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSG90S2V5SG9sZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBIb3RLZXlIb2xkZXIpO1xuXG4gICAgdGhpcy5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnRpbWVySWQgPSBudWxsO1xuICAgICAgX3RoaXMubGFzdEtleXMgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShIb3RLZXlIb2xkZXIsIFt7XG4gICAga2V5OiAnYXBwZW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kKGtleSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJJZCk7XG4gICAgICB0aGlzLnRpbWVySWQgPSBzZXRUaW1lb3V0KHRoaXMuY2xlYXIsIDUwMCk7XG4gICAgICByZXR1cm4gdGhpcy5sYXN0S2V5cyA9ICh0aGlzLmxhc3RLZXlzIHx8ICcnKSArIGtleTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEhvdEtleUhvbGRlcjtcbn0oKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU3ViaGVhZGVyID0gZnVuY3Rpb24gU3ViaGVhZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgaW5zZXQgPSBwcm9wcy5pbnNldCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKHByb3BzLCBbJ2NoaWxkcmVuJywgJ2luc2V0JywgJ3N0eWxlJ10pO1xuICB2YXIgX2NvbnRleHQkbXVpVGhlbWUgPSBjb250ZXh0Lm11aVRoZW1lLFxuICAgICAgcHJlcGFyZVN0eWxlcyA9IF9jb250ZXh0JG11aVRoZW1lLnByZXBhcmVTdHlsZXMsXG4gICAgICBzdWJoZWFkZXIgPSBfY29udGV4dCRtdWlUaGVtZS5zdWJoZWFkZXI7XG5cblxuICB2YXIgc3R5bGVzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgY29sb3I6IHN1YmhlYWRlci5jb2xvcixcbiAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgIGZvbnRXZWlnaHQ6IHN1YmhlYWRlci5mb250V2VpZ2h0LFxuICAgICAgbGluZUhlaWdodDogJzQ4cHgnLFxuICAgICAgcGFkZGluZ0xlZnQ6IGluc2V0ID8gNzIgOiAxNixcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpKSB9KSxcbiAgICBjaGlsZHJlblxuICApO1xufTtcblxuU3ViaGVhZGVyLm11aU5hbWUgPSAnU3ViaGVhZGVyJztcblxuU3ViaGVhZGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIE5vZGUgdGhhdCB3aWxsIGJlIHBsYWNlZCBpbnNpZGUgdGhlIGBTdWJoZWFkZXJgLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBgU3ViaGVhZGVyYCB3aWxsIGJlIGluZGVudGVkLlxuICAgKi9cbiAgaW5zZXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcblxuU3ViaGVhZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW5zZXQ6IGZhbHNlXG59O1xuXG5TdWJoZWFkZXIuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU3ViaGVhZGVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9TdWJoZWFkZXIgPSByZXF1aXJlKCcuL1N1YmhlYWRlcicpO1xuXG52YXIgX1N1YmhlYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdWJoZWFkZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfU3ViaGVhZGVyMi5kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9ldmVudHMgPSByZXF1aXJlKCcuLi91dGlscy9ldmVudHMnKTtcblxudmFyIF9ldmVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXZlbnRzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGlzRGVzY2VuZGFudCA9IGZ1bmN0aW9uIGlzRGVzY2VuZGFudChlbCwgdGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZWwgPT09IHRhcmdldCB8fCBpc0Rlc2NlbmRhbnQoZWwsIHRhcmdldC5wYXJlbnROb2RlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgY2xpY2tBd2F5RXZlbnRzID0gWydtb3VzZXVwJywgJ3RvdWNoZW5kJ107XG52YXIgYmluZCA9IGZ1bmN0aW9uIGJpbmQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNsaWNrQXdheUV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiBfZXZlbnRzMi5kZWZhdWx0Lm9uKGRvY3VtZW50LCBldmVudCwgY2FsbGJhY2spO1xuICB9KTtcbn07XG52YXIgdW5iaW5kID0gZnVuY3Rpb24gdW5iaW5kKGNhbGxiYWNrKSB7XG4gIHJldHVybiBjbGlja0F3YXlFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gX2V2ZW50czIuZGVmYXVsdC5vZmYoZG9jdW1lbnQsIGV2ZW50LCBjYWxsYmFjayk7XG4gIH0pO1xufTtcblxudmFyIENsaWNrQXdheUxpc3RlbmVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoQ2xpY2tBd2F5TGlzdGVuZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENsaWNrQXdheUxpc3RlbmVyKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIENsaWNrQXdheUxpc3RlbmVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IENsaWNrQXdheUxpc3RlbmVyLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShDbGlja0F3YXlMaXN0ZW5lcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZUNsaWNrQXdheSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJRTExIHN1cHBvcnQsIHdoaWNoIHRyaWdnZXIgdGhlIGhhbmRsZUNsaWNrQXdheSBldmVuIGFmdGVyIHRoZSB1bmJpbmRcbiAgICAgIGlmIChfdGhpcy5pc0N1cnJlbnRseU1vdW50ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKF90aGlzKTtcblxuICAgICAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgIWlzRGVzY2VuZGFudChlbCwgZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2tBd2F5KGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShDbGlja0F3YXlMaXN0ZW5lciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5pc0N1cnJlbnRseU1vdW50ZWQgPSB0cnVlO1xuICAgICAgaWYgKHRoaXMucHJvcHMub25DbGlja0F3YXkpIHtcbiAgICAgICAgYmluZCh0aGlzLmhhbmRsZUNsaWNrQXdheSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgaWYgKHByZXZQcm9wcy5vbkNsaWNrQXdheSAhPT0gdGhpcy5wcm9wcy5vbkNsaWNrQXdheSkge1xuICAgICAgICB1bmJpbmQodGhpcy5oYW5kbGVDbGlja0F3YXkpO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbkNsaWNrQXdheSkge1xuICAgICAgICAgIGJpbmQodGhpcy5oYW5kbGVDbGlja0F3YXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuaXNDdXJyZW50bHlNb3VudGVkID0gZmFsc2U7XG4gICAgICB1bmJpbmQodGhpcy5oYW5kbGVDbGlja0F3YXkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQ2xpY2tBd2F5TGlzdGVuZXI7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5DbGlja0F3YXlMaXN0ZW5lci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIG9uQ2xpY2tBd2F5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmNcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IENsaWNrQXdheUxpc3RlbmVyOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5hc3NpZ247XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9ldmVudHMgPSByZXF1aXJlKCcuLi91dGlscy9ldmVudHMnKTtcblxudmFyIF9ldmVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXZlbnRzKTtcblxudmFyIF9wcm9wVHlwZXMzID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJvcFR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlczMpO1xuXG52YXIgX01lbnUgPSByZXF1aXJlKCcuLi9NZW51L01lbnUnKTtcblxudmFyIF9NZW51MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01lbnUpO1xuXG52YXIgX1BvcG92ZXIgPSByZXF1aXJlKCcuLi9Qb3BvdmVyL1BvcG92ZXInKTtcblxudmFyIF9Qb3BvdmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BvcG92ZXIpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEljb25NZW51ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoSWNvbk1lbnUsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEljb25NZW51KCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEljb25NZW51KTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IEljb25NZW51Ll9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShJY29uTWVudSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWVudUluaXRpYWxseUtleWJvYXJkRm9jdXNlZDogZmFsc2UsXG4gICAgICBvcGVuOiBmYWxzZVxuICAgIH0sIF90aGlzLmhhbmRsZUl0ZW1DbGljayA9IGZ1bmN0aW9uIChldmVudCwgY2hpbGQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5jbGlja0Nsb3NlRGVsYXkgIT09IDAgJiYgIWNoaWxkLnByb3BzLmhhc093blByb3BlcnR5KCdtZW51SXRlbXMnKSkge1xuICAgICAgICB2YXIgaXNLZXlib2FyZCA9IF9ldmVudHMyLmRlZmF1bHQuaXNLZXlib2FyZChldmVudCk7XG4gICAgICAgIF90aGlzLnRpbWVyQ2xvc2VJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLmNsb3NlKGlzS2V5Ym9hcmQgPyAnZW50ZXInIDogJ2l0ZW1UYXAnLCBpc0tleWJvYXJkKTtcbiAgICAgICAgfSwgX3RoaXMucHJvcHMuY2xpY2tDbG9zZURlbGF5KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMucHJvcHMub25JdGVtQ2xpY2soZXZlbnQsIGNoaWxkKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBfdGhpcy5jbG9zZShyZWFzb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZUVzY0tleURvd25NZW51ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5jbG9zZSgnZXNjYXBlJywgZXZlbnQpO1xuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShJY29uTWVudSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMub3BlbiAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG9wZW46IG5leHRQcm9wcy5vcGVuLFxuICAgICAgICAgIGFuY2hvckVsOiB0aGlzLnJlZnMuaWNvbk1lbnVDb250YWluZXJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyQ2xvc2VJZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaXNPcGVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNPcGVuKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RhdGUub3BlbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb3NlKHJlYXNvbiwgaXNLZXlib2FyZCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvcHMub3BlbiAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnByb3BzLm9uUmVxdWVzdENoYW5nZShmYWxzZSwgcmVhc29uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiBmYWxzZSB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gU2V0IGZvY3VzIG9uIHRoZSBpY29uIGJ1dHRvbiB3aGVuIHRoZSBtZW51IGNsb3NlXG4gICAgICAgICAgaWYgKGlzS2V5Ym9hcmQpIHtcbiAgICAgICAgICAgIHZhciBpY29uQnV0dG9uID0gX3RoaXMyLnJlZnMuaWNvbkJ1dHRvbjtcbiAgICAgICAgICAgIF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShpY29uQnV0dG9uKS5mb2N1cygpO1xuICAgICAgICAgICAgaWNvbkJ1dHRvbi5zZXRLZXlib2FyZEZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcGVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbihyZWFzb24sIGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vcGVuICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25SZXF1ZXN0Q2hhbmdlKHRydWUsIHJlYXNvbik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG1lbnVJbml0aWFsbHlLZXlib2FyZEZvY3VzZWQ6IF9ldmVudHMyLmRlZmF1bHQuaXNLZXlib2FyZChldmVudCksXG4gICAgICAgICAgYW5jaG9yRWw6IGV2ZW50LmN1cnJlbnRUYXJnZXRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICBtZW51SW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkOiBfZXZlbnRzMi5kZWZhdWx0LmlzS2V5Ym9hcmQoZXZlbnQpLFxuICAgICAgICBhbmNob3JFbDogZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFuY2hvck9yaWdpbiA9IF9wcm9wcy5hbmNob3JPcmlnaW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBhbmltYXRlZCA9IF9wcm9wcy5hbmltYXRlZCxcbiAgICAgICAgICBhbmltYXRpb24gPSBfcHJvcHMuYW5pbWF0aW9uLFxuICAgICAgICAgIGljb25CdXR0b25FbGVtZW50ID0gX3Byb3BzLmljb25CdXR0b25FbGVtZW50LFxuICAgICAgICAgIGljb25TdHlsZSA9IF9wcm9wcy5pY29uU3R5bGUsXG4gICAgICAgICAgb25JdGVtQ2xpY2sgPSBfcHJvcHMub25JdGVtQ2xpY2ssXG4gICAgICAgICAgb25LZXlib2FyZEZvY3VzID0gX3Byb3BzLm9uS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgICBvbk1vdXNlRG93biA9IF9wcm9wcy5vbk1vdXNlRG93bixcbiAgICAgICAgICBvbk1vdXNlTGVhdmUgPSBfcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgICAgIG9uTW91c2VFbnRlciA9IF9wcm9wcy5vbk1vdXNlRW50ZXIsXG4gICAgICAgICAgb25Nb3VzZVVwID0gX3Byb3BzLm9uTW91c2VVcCxcbiAgICAgICAgICBvblJlcXVlc3RDaGFuZ2UgPSBfcHJvcHMub25SZXF1ZXN0Q2hhbmdlLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfcHJvcHMub25DbGljayxcbiAgICAgICAgICBsaXN0U3R5bGUgPSBfcHJvcHMubGlzdFN0eWxlLFxuICAgICAgICAgIG1lbnVTdHlsZSA9IF9wcm9wcy5tZW51U3R5bGUsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdGFyZ2V0T3JpZ2luID0gX3Byb3BzLnRhcmdldE9yaWdpbixcbiAgICAgICAgICBjbGlja0Nsb3NlRGVsYXkgPSBfcHJvcHMuY2xpY2tDbG9zZURlbGF5LFxuICAgICAgICAgIHVzZUxheWVyRm9yQ2xpY2tBd2F5ID0gX3Byb3BzLnVzZUxheWVyRm9yQ2xpY2tBd2F5LFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3Byb3BzLCBbJ2FuY2hvck9yaWdpbicsICdjbGFzc05hbWUnLCAnYW5pbWF0ZWQnLCAnYW5pbWF0aW9uJywgJ2ljb25CdXR0b25FbGVtZW50JywgJ2ljb25TdHlsZScsICdvbkl0ZW1DbGljaycsICdvbktleWJvYXJkRm9jdXMnLCAnb25Nb3VzZURvd24nLCAnb25Nb3VzZUxlYXZlJywgJ29uTW91c2VFbnRlcicsICdvbk1vdXNlVXAnLCAnb25SZXF1ZXN0Q2hhbmdlJywgJ29uQ2xpY2snLCAnbGlzdFN0eWxlJywgJ21lbnVTdHlsZScsICdzdHlsZScsICd0YXJnZXRPcmlnaW4nLCAnY2xpY2tDbG9zZURlbGF5JywgJ3VzZUxheWVyRm9yQ2xpY2tBd2F5J10pO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcbiAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIG9wZW4gPSBfc3RhdGUub3BlbixcbiAgICAgICAgICBhbmNob3JFbCA9IF9zdGF0ZS5hbmNob3JFbDtcblxuXG4gICAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgICByb290OiB7XG4gICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVudToge1xuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBtZXJnZWRSb290U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5yb290LCBzdHlsZSk7XG4gICAgICB2YXIgbWVyZ2VkTWVudVN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMubWVudSwgbWVudVN0eWxlKTtcblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShpY29uQnV0dG9uRWxlbWVudC50eXBlLm11aU5hbWUgIT09ICdTdmdJY29uJywgJ01hdGVyaWFsLVVJOiBZb3Ugc2hvdWQgbm90IHByb3ZpZGUgYW4gPFN2Z0ljb24gLz4gdG8gdGhlIFxcJ2ljb25CdXR0b25FbGVtZW50XFwnIHByb3BlcnR5IG9mIDxJY29uTWVudSAvPi5cXG5Zb3Ugc2hvdWxkIHdyYXBwZWQgaXQgd2l0aCBhbiA8SWNvbkJ1dHRvbiAvPi4nKSA6IHZvaWQgMDtcblxuICAgICAgdmFyIGljb25CdXR0b25Qcm9wcyA9IHtcbiAgICAgICAgb25LZXlib2FyZEZvY3VzOiBvbktleWJvYXJkRm9jdXMsXG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICBfdGhpczMub3BlbihfZXZlbnRzMi5kZWZhdWx0LmlzS2V5Ym9hcmQoZXZlbnQpID8gJ2tleWJvYXJkJyA6ICdpY29uVGFwJywgZXZlbnQpO1xuICAgICAgICAgIGlmIChpY29uQnV0dG9uRWxlbWVudC5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgICAgICBpY29uQnV0dG9uRWxlbWVudC5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlZjogJ2ljb25CdXR0b24nXG4gICAgICB9O1xuICAgICAgaWYgKGljb25TdHlsZSB8fCBpY29uQnV0dG9uRWxlbWVudC5wcm9wcy5pY29uU3R5bGUpIHtcbiAgICAgICAgaWNvbkJ1dHRvblByb3BzLmljb25TdHlsZSA9IGljb25TdHlsZSA/ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgaWNvblN0eWxlLCBpY29uQnV0dG9uRWxlbWVudC5wcm9wcy5pY29uU3R5bGUpIDogaWNvbkJ1dHRvbkVsZW1lbnQucHJvcHMuaWNvblN0eWxlO1xuICAgICAgfVxuICAgICAgdmFyIGljb25CdXR0b24gPSBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGljb25CdXR0b25FbGVtZW50LCBpY29uQnV0dG9uUHJvcHMpO1xuXG4gICAgICB2YXIgbWVudSA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfTWVudTIuZGVmYXVsdCxcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHtcbiAgICAgICAgICBpbml0aWFsbHlLZXlib2FyZEZvY3VzZWQ6IHRoaXMuc3RhdGUubWVudUluaXRpYWxseUtleWJvYXJkRm9jdXNlZCxcbiAgICAgICAgICBvbkVzY0tleURvd246IHRoaXMuaGFuZGxlRXNjS2V5RG93bk1lbnUsXG4gICAgICAgICAgb25JdGVtQ2xpY2s6IHRoaXMuaGFuZGxlSXRlbUNsaWNrLFxuICAgICAgICAgIHN0eWxlOiBtZXJnZWRNZW51U3R5bGVzLFxuICAgICAgICAgIGxpc3RTdHlsZTogbGlzdFN0eWxlXG4gICAgICAgIH0pLFxuICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgcmVmOiAnaWNvbk1lbnVDb250YWluZXInLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICAgIG9uTW91c2VEb3duOiBvbk1vdXNlRG93bixcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IG9uTW91c2VMZWF2ZSxcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6IG9uTW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlVXA6IG9uTW91c2VVcCxcbiAgICAgICAgICBvbkNsaWNrOiBvbkNsaWNrLFxuICAgICAgICAgIHN0eWxlOiBwcmVwYXJlU3R5bGVzKG1lcmdlZFJvb3RTdHlsZXMpXG4gICAgICAgIH0sXG4gICAgICAgIGljb25CdXR0b24sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIF9Qb3BvdmVyMi5kZWZhdWx0LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFuY2hvck9yaWdpbjogYW5jaG9yT3JpZ2luLFxuICAgICAgICAgICAgdGFyZ2V0T3JpZ2luOiB0YXJnZXRPcmlnaW4sXG4gICAgICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICAgICAgYW5jaG9yRWw6IGFuY2hvckVsLFxuICAgICAgICAgICAgY2hpbGRDb250ZXh0VHlwZXM6IHRoaXMuY29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMsXG4gICAgICAgICAgICB1c2VMYXllckZvckNsaWNrQXdheTogdXNlTGF5ZXJGb3JDbGlja0F3YXksXG4gICAgICAgICAgICBvblJlcXVlc3RDbG9zZTogdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UsXG4gICAgICAgICAgICBhbmltYXRlZDogYW5pbWF0ZWQsXG4gICAgICAgICAgICBhbmltYXRpb246IGFuaW1hdGlvbixcbiAgICAgICAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWVudVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gSWNvbk1lbnU7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5JY29uTWVudS5tdWlOYW1lID0gJ0ljb25NZW51Jztcbkljb25NZW51LmRlZmF1bHRQcm9wcyA9IHtcbiAgYW5jaG9yT3JpZ2luOiB7XG4gICAgdmVydGljYWw6ICd0b3AnLFxuICAgIGhvcml6b250YWw6ICdsZWZ0J1xuICB9LFxuICBhbmltYXRlZDogdHJ1ZSxcbiAgbXVsdGlwbGU6IGZhbHNlLFxuICBvcGVuOiBudWxsLFxuICBvbkl0ZW1DbGljazogZnVuY3Rpb24gb25JdGVtQ2xpY2soKSB7fSxcbiAgb25LZXlib2FyZEZvY3VzOiBmdW5jdGlvbiBvbktleWJvYXJkRm9jdXMoKSB7fSxcbiAgb25Nb3VzZURvd246IGZ1bmN0aW9uIG9uTW91c2VEb3duKCkge30sXG4gIG9uTW91c2VMZWF2ZTogZnVuY3Rpb24gb25Nb3VzZUxlYXZlKCkge30sXG4gIG9uTW91c2VFbnRlcjogZnVuY3Rpb24gb25Nb3VzZUVudGVyKCkge30sXG4gIG9uTW91c2VVcDogZnVuY3Rpb24gb25Nb3VzZVVwKCkge30sXG4gIG9uUmVxdWVzdENoYW5nZTogZnVuY3Rpb24gb25SZXF1ZXN0Q2hhbmdlKCkge30sXG4gIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7fSxcbiAgdGFyZ2V0T3JpZ2luOiB7XG4gICAgdmVydGljYWw6ICd0b3AnLFxuICAgIGhvcml6b250YWw6ICdsZWZ0J1xuICB9LFxuICBjbGlja0Nsb3NlRGVsYXk6IDIwMCxcbiAgdXNlTGF5ZXJGb3JDbGlja0F3YXk6IGZhbHNlXG59O1xuSWNvbk1lbnUuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcbkljb25NZW51LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBpY29uIHdoZXJlIHRoZSBtZW51XG4gICAqIGB0YXJnZXRPcmlnaW5gIHdpbGwgYXR0YWNoLlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dXG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBtaWRkbGUsIHJpZ2h0XS5cbiAgICovXG4gIGFuY2hvck9yaWdpbjogX3Byb3BUeXBlczQuZGVmYXVsdC5vcmlnaW4sXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgcG9wb3ZlciB3aWxsIGFwcGx5IHRyYW5zaXRpb25zIHdoZW5cbiAgICogaXQgZ2V0cyBhZGRlZCB0byB0aGUgRE9NLlxuICAgKi9cbiAgYW5pbWF0ZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IGFuaW1hdGlvbiBjb21wb25lbnQgdXNlZC5cbiAgICovXG4gIGFuaW1hdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogU2hvdWxkIGJlIHVzZWQgdG8gcGFzcyBgTWVudUl0ZW1gIGNvbXBvbmVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogU2V0cyB0aGUgZGVsYXkgaW4gbWlsbGlzZWNvbmRzIGJlZm9yZSBjbG9zaW5nIHRoZVxuICAgKiBtZW51IHdoZW4gYW4gaXRlbSBpcyBjbGlja2VkLlxuICAgKiBJZiBzZXQgdG8gMCB0aGVuIHRoZSBhdXRvIGNsb3NlIGZ1bmN0aW9uYWxpdHlcbiAgICogd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGNsaWNrQ2xvc2VEZWxheTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBgSWNvbkJ1dHRvbmAgdG8gcmVuZGVyLiBUaGlzIGJ1dHRvbiB3aWxsIG9wZW4gdGhlIG1lbnUuXG4gICAqL1xuICBpY29uQnV0dG9uRWxlbWVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgdW5kZXJseWluZyBpY29uIGVsZW1lbnQuXG4gICAqL1xuICBpY29uU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHVuZGVybHlpbmcgYExpc3RgIGVsZW1lbnQuXG4gICAqL1xuICBsaXN0U3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIG1lbnUgZWxlbWVudC5cbiAgICovXG4gIG1lbnVTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgdmFsdWUgY2FuIGFuIGJlIGFycmF5IGFuZCBhbGxvdyB0aGUgbWVudSB0byBiZSBhIG11bHRpLXNlbGVjdC5cbiAgICovXG4gIG11bHRpcGxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBgSWNvbkJ1dHRvbmAgZWxlbWVudCBpcyBjbGlja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQ2xpY2sgZXZlbnQgdGFyZ2V0aW5nIHRoZSBgSWNvbkJ1dHRvbmAgZWxlbWVudC5cbiAgICovXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQgd2l0aCBhIGNsaWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQ2xpY2sgZXZlbnQgdGFyZ2V0aW5nIHRoZSBzZWxlY3RlZCBtZW51IGl0ZW0gZWxlbWVudC5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNoaWxkIFRoZSBzZWxlY3RlZCBlbGVtZW50LlxuICAgKi9cbiAgb25JdGVtQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIGBJY29uQnV0dG9uYCBlbGVtZW50IGlzIGZvY3VzZWQgb3IgYmx1cnJlZCBieSB0aGUga2V5Ym9hcmQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBgZm9jdXNgIG9yIGBibHVyYCBldmVudCB0YXJnZXRpbmcgdGhlIGBJY29uQnV0dG9uYCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGtleWJvYXJkRm9jdXNlZCBJZiB0cnVlLCB0aGUgYEljb25CdXR0b25gIGVsZW1lbnQgaXMgZm9jdXNlZC5cbiAgICovXG4gIG9uS2V5Ym9hcmRGb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvbk1vdXNlRG93bjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvbk1vdXNlRW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Nb3VzZUxlYXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VVcDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgYG9wZW5gIHN0YXRlIG9mIHRoZSBtZW51IGlzIHJlcXVlc3RlZCB0byBiZSBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wZW4gSWYgdHJ1ZSwgdGhlIG1lbnUgd2FzIHJlcXVlc3RlZCB0byBiZSBvcGVuZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gVGhlIHJlYXNvbiBmb3IgdGhlIG9wZW4gb3IgY2xvc2UgcmVxdWVzdC4gUG9zc2libGUgdmFsdWVzIGFyZVxuICAgKiAna2V5Ym9hcmQnIGFuZCAnaWNvblRhcCcgZm9yIG9wZW4gcmVxdWVzdHM7ICdlbnRlcicsICdlc2NhcGUnLCAnaXRlbVRhcCcsIGFuZCAnY2xpY2tBd2F5J1xuICAgKiBmb3IgY2xvc2UgcmVxdWVzdHMuXG4gICAqL1xuICBvblJlcXVlc3RDaGFuZ2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBgSWNvbk1lbnVgIGlzIG9wZW5lZC5cbiAgICovXG4gIG9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgbWVudSB3aGljaCB3aWxsIHN0aWNrIHRvIHRoZSBtZW51XG4gICAqIG9yaWdpbi5cbiAgICogT3B0aW9uczpcbiAgICogdmVydGljYWw6IFt0b3AsIGNlbnRlciwgYm90dG9tXVxuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgbWlkZGxlLCByaWdodF0uXG4gICAqL1xuICB0YXJnZXRPcmlnaW46IF9wcm9wVHlwZXM0LmRlZmF1bHQub3JpZ2luLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIHBvcG92ZXIgd2lsbCByZW5kZXIgb24gdG9wIG9mIGFuIGludmlzaWJsZVxuICAgKiBsYXllciwgd2hpY2ggd2lsbCBwcmV2ZW50IGNsaWNrcyB0byB0aGUgdW5kZXJseWluZyBlbGVtZW50cy5cbiAgICovXG4gIHVzZUxheWVyRm9yQ2xpY2tBd2F5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2xcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IEljb25NZW51OyIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9T3N3YWxkKTtcIiwgXCJcIl0pO1xuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5wYWdlIHtcXG4gIGNvbG9yOiAjMUEzNTQ5O1xcbiAgbWFyZ2luLXRvcDogM2VtO1xcbiAgbWFyZ2luLWxlZnQ6IDBweDtcXG4gIHBhZGRpbmc6IDBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgdG9wOiAwcHg7XFxuICBsZWZ0OiAwcHg7XFxuICB6LWluZGV4OiAtMTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG92ZXJmbG93OiBzY3JvbGw7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NvbG9ycyA9IHJlcXVpcmUoJy4vY29sb3JzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBUeXBvZ3JhcGh5ID0gZnVuY3Rpb24gVHlwb2dyYXBoeSgpIHtcbiAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgVHlwb2dyYXBoeSk7XG5cbiAgLy8gdGV4dCBjb2xvcnNcbiAgdGhpcy50ZXh0RnVsbEJsYWNrID0gX2NvbG9ycy5mdWxsQmxhY2s7XG4gIHRoaXMudGV4dERhcmtCbGFjayA9IF9jb2xvcnMuZGFya0JsYWNrO1xuICB0aGlzLnRleHRMaWdodEJsYWNrID0gX2NvbG9ycy5saWdodEJsYWNrO1xuICB0aGlzLnRleHRNaW5CbGFjayA9IF9jb2xvcnMubWluQmxhY2s7XG4gIHRoaXMudGV4dEZ1bGxXaGl0ZSA9IF9jb2xvcnMuZnVsbFdoaXRlO1xuICB0aGlzLnRleHREYXJrV2hpdGUgPSBfY29sb3JzLmRhcmtXaGl0ZTtcbiAgdGhpcy50ZXh0TGlnaHRXaGl0ZSA9IF9jb2xvcnMubGlnaHRXaGl0ZTtcblxuICAvLyBmb250IHdlaWdodFxuICB0aGlzLmZvbnRXZWlnaHRMaWdodCA9IDMwMDtcbiAgdGhpcy5mb250V2VpZ2h0Tm9ybWFsID0gNDAwO1xuICB0aGlzLmZvbnRXZWlnaHRNZWRpdW0gPSA1MDA7XG5cbiAgdGhpcy5mb250U3R5bGVCdXR0b25Gb250U2l6ZSA9IDE0O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbmV3IFR5cG9ncmFwaHkoKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNvbXBvc2U7XG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufSIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Qua2V5cztcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9rZXlzID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzJyk7XG5cbnZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gcnRsO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcmVUcmFuc2xhdGUgPSAvKChefFxccyl0cmFuc2xhdGUoM2R8WCk/XFwoKShcXC0/W1xcZF0rKS87XG52YXIgcmVTa2V3ID0gLygoXnxcXHMpc2tldyh4fHkpP1xcKClcXHMqKFxcLT9bXFxkXSspKGRlZ3xyYWR8Z3JhZCkoLFxccyooXFwtP1tcXGRdKykoZGVnfHJhZHxncmFkKSk/LztcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGVuc3VyZXMgdGhhdCBgc3R5bGVgIHN1cHBvcnRzIGJvdGggbHRyIGFuZCBydGwgZGlyZWN0aW9ucyBieVxuICogY2hlY2tpbmcgYHN0eWxlQ29uc3RhbnRzYCBpbiBgbXVpVGhlbWVgIGFuZCByZXBsYWNpbmcgYXR0cmlidXRlIGtleXMgaWZcbiAqIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gcnRsKG11aVRoZW1lKSB7XG4gIGlmIChtdWlUaGVtZS5pc1J0bCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIGlmIChzdHlsZS5kaXJlY3Rpb25JbnZhcmlhbnQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmxpcHBlZEF0dHJpYnV0ZXMgPSB7XG4gICAgICAgIC8vIEtleXMgYW5kIHRoZWlyIHJlcGxhY2VtZW50cy5cbiAgICAgICAgcmlnaHQ6ICdsZWZ0JyxcbiAgICAgICAgbGVmdDogJ3JpZ2h0JyxcbiAgICAgICAgbWFyZ2luUmlnaHQ6ICdtYXJnaW5MZWZ0JyxcbiAgICAgICAgbWFyZ2luTGVmdDogJ21hcmdpblJpZ2h0JyxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAncGFkZGluZ0xlZnQnLFxuICAgICAgICBwYWRkaW5nTGVmdDogJ3BhZGRpbmdSaWdodCcsXG4gICAgICAgIGJvcmRlclJpZ2h0OiAnYm9yZGVyTGVmdCcsXG4gICAgICAgIGJvcmRlckxlZnQ6ICdib3JkZXJSaWdodCdcbiAgICAgIH07XG5cbiAgICAgIHZhciBuZXdTdHlsZSA9IHt9O1xuXG4gICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKHN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVbYXR0cmlidXRlXTtcbiAgICAgICAgdmFyIGtleSA9IGF0dHJpYnV0ZTtcblxuICAgICAgICBpZiAoZmxpcHBlZEF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoYXR0cmlidXRlKSkge1xuICAgICAgICAgIGtleSA9IGZsaXBwZWRBdHRyaWJ1dGVzW2F0dHJpYnV0ZV07XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGF0dHJpYnV0ZSkge1xuICAgICAgICAgIGNhc2UgJ2Zsb2F0JzpcbiAgICAgICAgICBjYXNlICd0ZXh0QWxpZ24nOlxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gJ2xlZnQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gJ3JpZ2h0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnZGlyZWN0aW9uJzpcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ2x0cicpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSAncnRsJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICdydGwnKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gJ2x0cic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3RyYW5zZm9ybSc6XG4gICAgICAgICAgICBpZiAoIXZhbHVlKSBicmVhaztcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKG1hdGNoZXMgPSB2YWx1ZS5tYXRjaChyZVRyYW5zbGF0ZSkpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKG1hdGNoZXNbMF0sIG1hdGNoZXNbMV0gKyAtcGFyc2VGbG9hdChtYXRjaGVzWzRdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hlcyA9IHZhbHVlLm1hdGNoKHJlU2tldykpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKG1hdGNoZXNbMF0sIG1hdGNoZXNbMV0gKyAtcGFyc2VGbG9hdChtYXRjaGVzWzRdKSArIG1hdGNoZXNbNV0gKyBtYXRjaGVzWzZdID8gJywgJyArICgtcGFyc2VGbG9hdChtYXRjaGVzWzddKSArIG1hdGNoZXNbOF0pIDogJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICd0cmFuc2Zvcm1PcmlnaW4nOlxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkgYnJlYWs7XG4gICAgICAgICAgICBpZiAodmFsdWUuaW5kZXhPZigncmlnaHQnKSA+IC0xKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgncmlnaHQnLCAnbGVmdCcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5pbmRleE9mKCdsZWZ0JykgPiAtMSkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoJ2xlZnQnLCAncmlnaHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3U3R5bGVba2V5XSA9IHZhbHVlO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBuZXdTdHlsZTtcbiAgICB9O1xuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FsbE9uY2U7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQ0FMTEVEX09OQ0UgPSAnbXVpUHJlcGFyZWQnO1xuXG5mdW5jdGlvbiBjYWxsT25jZSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICBpZiAoc3R5bGVbQ0FMTEVEX09OQ0VdKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdNYXRlcmlhbC1VSTogWW91IGNhbm5vdCBjYWxsIHByZXBhcmVTdHlsZXMoKSBvbiB0aGUgc2FtZSBzdHlsZSBvYmplY3QgbW9yZSB0aGFuIG9uY2UuJykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBzdHlsZVtDQUxMRURfT05DRV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH07XG4gIH1cbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2l0aW9uO1xuXG52YXIgX2h5cGhlbmF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnY3NzLWluLWpzLXV0aWxzL2xpYi9oeXBoZW5hdGVQcm9wZXJ0eScpO1xuXG52YXIgX2h5cGhlbmF0ZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h5cGhlbmF0ZVByb3BlcnR5KTtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG52YXIgX2NhcGl0YWxpemVTdHJpbmcgPSByZXF1aXJlKCcuLi8uLi91dGlscy9jYXBpdGFsaXplU3RyaW5nJyk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYXBpdGFsaXplU3RyaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHByb3BlcnRpZXMgPSB7XG4gIHRyYW5zaXRpb246IHRydWUsXG4gIHRyYW5zaXRpb25Qcm9wZXJ0eTogdHJ1ZSxcbiAgV2Via2l0VHJhbnNpdGlvbjogdHJ1ZSxcbiAgV2Via2l0VHJhbnNpdGlvblByb3BlcnR5OiB0cnVlLFxuICBNb3pUcmFuc2l0aW9uOiB0cnVlLFxuICBNb3pUcmFuc2l0aW9uUHJvcGVydHk6IHRydWVcbn07XG5cblxudmFyIHByZWZpeE1hcHBpbmcgPSB7XG4gIFdlYmtpdDogJy13ZWJraXQtJyxcbiAgTW96OiAnLW1vei0nLFxuICBtczogJy1tcy0nXG59O1xuXG5mdW5jdGlvbiBwcmVmaXhWYWx1ZSh2YWx1ZSwgcHJvcGVydHlQcmVmaXhNYXApIHtcbiAgaWYgKCgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvLyBvbmx5IHNwbGl0IG11bHRpIHZhbHVlcywgbm90IGN1YmljIGJlemllcnNcbiAgdmFyIG11bHRpcGxlVmFsdWVzID0gdmFsdWUuc3BsaXQoLywoPyFbXigpXSooPzpcXChbXigpXSpcXCkpP1xcKSkvZyk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG11bHRpcGxlVmFsdWVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHNpbmdsZVZhbHVlID0gbXVsdGlwbGVWYWx1ZXNbaV07XG4gICAgdmFyIHZhbHVlcyA9IFtzaW5nbGVWYWx1ZV07XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydHlQcmVmaXhNYXApIHtcbiAgICAgIHZhciBkYXNoQ2FzZVByb3BlcnR5ID0gKDAsIF9oeXBoZW5hdGVQcm9wZXJ0eTIuZGVmYXVsdCkocHJvcGVydHkpO1xuXG4gICAgICBpZiAoc2luZ2xlVmFsdWUuaW5kZXhPZihkYXNoQ2FzZVByb3BlcnR5KSA+IC0xICYmIGRhc2hDYXNlUHJvcGVydHkgIT09ICdvcmRlcicpIHtcbiAgICAgICAgdmFyIHByZWZpeGVzID0gcHJvcGVydHlQcmVmaXhNYXBbcHJvcGVydHldO1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgcExlbiA9IHByZWZpeGVzLmxlbmd0aDsgaiA8IHBMZW47ICsraikge1xuICAgICAgICAgIC8vIGpvaW4gYWxsIHByZWZpeGVzIGFuZCBjcmVhdGUgYSBuZXcgdmFsdWVcbiAgICAgICAgICB2YWx1ZXMudW5zaGlmdChzaW5nbGVWYWx1ZS5yZXBsYWNlKGRhc2hDYXNlUHJvcGVydHksIHByZWZpeE1hcHBpbmdbcHJlZml4ZXNbal1dICsgZGFzaENhc2VQcm9wZXJ0eSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbXVsdGlwbGVWYWx1ZXNbaV0gPSB2YWx1ZXMuam9pbignLCcpO1xuICB9XG5cbiAgcmV0dXJuIG11bHRpcGxlVmFsdWVzLmpvaW4oJywnKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbihwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBwcm9wZXJ0eVByZWZpeE1hcCkge1xuICAvLyBhbHNvIGNoZWNrIGZvciBhbHJlYWR5IHByZWZpeGVkIHRyYW5zaXRpb25zXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgdmFyIG91dHB1dFZhbHVlID0gcHJlZml4VmFsdWUodmFsdWUsIHByb3BlcnR5UHJlZml4TWFwKTtcbiAgICAvLyBpZiB0aGUgcHJvcGVydHkgaXMgYWxyZWFkeSBwcmVmaXhlZFxuICAgIHZhciB3ZWJraXRPdXRwdXQgPSBvdXRwdXRWYWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKS5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuICEvLW1vei18LW1zLS8udGVzdCh2YWwpO1xuICAgIH0pLmpvaW4oJywnKTtcblxuICAgIGlmIChwcm9wZXJ0eS5pbmRleE9mKCdXZWJraXQnKSA+IC0xKSB7XG4gICAgICByZXR1cm4gd2Via2l0T3V0cHV0O1xuICAgIH1cblxuICAgIHZhciBtb3pPdXRwdXQgPSBvdXRwdXRWYWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKS5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuICEvLXdlYmtpdC18LW1zLS8udGVzdCh2YWwpO1xuICAgIH0pLmpvaW4oJywnKTtcblxuICAgIGlmIChwcm9wZXJ0eS5pbmRleE9mKCdNb3onKSA+IC0xKSB7XG4gICAgICByZXR1cm4gbW96T3V0cHV0O1xuICAgIH1cblxuICAgIHN0eWxlWydXZWJraXQnICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gd2Via2l0T3V0cHV0O1xuICAgIHN0eWxlWydNb3onICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gbW96T3V0cHV0O1xuICAgIHJldHVybiBvdXRwdXRWYWx1ZTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2l6aW5nO1xudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICctbW96LScsICcnXTtcblxudmFyIHByb3BlcnRpZXMgPSB7XG4gIG1heEhlaWdodDogdHJ1ZSxcbiAgbWF4V2lkdGg6IHRydWUsXG4gIHdpZHRoOiB0cnVlLFxuICBoZWlnaHQ6IHRydWUsXG4gIGNvbHVtbldpZHRoOiB0cnVlLFxuICBtaW5XaWR0aDogdHJ1ZSxcbiAgbWluSGVpZ2h0OiB0cnVlXG59O1xudmFyIHZhbHVlcyA9IHtcbiAgJ21pbi1jb250ZW50JzogdHJ1ZSxcbiAgJ21heC1jb250ZW50JzogdHJ1ZSxcbiAgJ2ZpbGwtYXZhaWxhYmxlJzogdHJ1ZSxcbiAgJ2ZpdC1jb250ZW50JzogdHJ1ZSxcbiAgJ2NvbnRhaW4tZmxvYXRzJzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gc2l6aW5nKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkgJiYgdmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHByZWZpeCArIHZhbHVlO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBncmFkaWVudDtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJyddO1xuXG52YXIgdmFsdWVzID0gL2xpbmVhci1ncmFkaWVudHxyYWRpYWwtZ3JhZGllbnR8cmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudHxyZXBlYXRpbmctcmFkaWFsLWdyYWRpZW50LztcblxuZnVuY3Rpb24gZ3JhZGllbnQocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEoMCwgX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpICYmIHZhbHVlcy50ZXN0KHZhbHVlKSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHByZWZpeCArIHZhbHVlO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmbGV4Ym94T2xkO1xudmFyIGFsdGVybmF0aXZlVmFsdWVzID0ge1xuICAnc3BhY2UtYXJvdW5kJzogJ2p1c3RpZnknLFxuICAnc3BhY2UtYmV0d2Vlbic6ICdqdXN0aWZ5JyxcbiAgJ2ZsZXgtc3RhcnQnOiAnc3RhcnQnLFxuICAnZmxleC1lbmQnOiAnZW5kJyxcbiAgJ3dyYXAtcmV2ZXJzZSc6ICdtdWx0aXBsZScsXG4gIHdyYXA6ICdtdWx0aXBsZSdcbn07XG5cbnZhciBhbHRlcm5hdGl2ZVByb3BzID0ge1xuICBhbGlnbkl0ZW1zOiAnV2Via2l0Qm94QWxpZ24nLFxuICBqdXN0aWZ5Q29udGVudDogJ1dlYmtpdEJveFBhY2snLFxuICBmbGV4V3JhcDogJ1dlYmtpdEJveExpbmVzJ1xufTtcblxuZnVuY3Rpb24gZmxleGJveE9sZChwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlKSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2ZsZXhEaXJlY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodmFsdWUuaW5kZXhPZignY29sdW1uJykgPiAtMSkge1xuICAgICAgc3R5bGUuV2Via2l0Qm94T3JpZW50ID0gJ3ZlcnRpY2FsJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuV2Via2l0Qm94T3JpZW50ID0gJ2hvcml6b250YWwnO1xuICAgIH1cbiAgICBpZiAodmFsdWUuaW5kZXhPZigncmV2ZXJzZScpID4gLTEpIHtcbiAgICAgIHN0eWxlLldlYmtpdEJveERpcmVjdGlvbiA9ICdyZXZlcnNlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuV2Via2l0Qm94RGlyZWN0aW9uID0gJ25vcm1hbCc7XG4gICAgfVxuICB9XG4gIGlmIChhbHRlcm5hdGl2ZVByb3BzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgIHN0eWxlW2FsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldXSA9IGFsdGVybmF0aXZlVmFsdWVzW3ZhbHVlXSB8fCB2YWx1ZTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmxleGJveElFO1xudmFyIGFsdGVybmF0aXZlVmFsdWVzID0ge1xuICAnc3BhY2UtYXJvdW5kJzogJ2Rpc3RyaWJ1dGUnLFxuICAnc3BhY2UtYmV0d2Vlbic6ICdqdXN0aWZ5JyxcbiAgJ2ZsZXgtc3RhcnQnOiAnc3RhcnQnLFxuICAnZmxleC1lbmQnOiAnZW5kJ1xufTtcbnZhciBhbHRlcm5hdGl2ZVByb3BzID0ge1xuICBhbGlnbkNvbnRlbnQ6ICdtc0ZsZXhMaW5lUGFjaycsXG4gIGFsaWduU2VsZjogJ21zRmxleEl0ZW1BbGlnbicsXG4gIGFsaWduSXRlbXM6ICdtc0ZsZXhBbGlnbicsXG4gIGp1c3RpZnlDb250ZW50OiAnbXNGbGV4UGFjaycsXG4gIG9yZGVyOiAnbXNGbGV4T3JkZXInLFxuICBmbGV4R3JvdzogJ21zRmxleFBvc2l0aXZlJyxcbiAgZmxleFNocmluazogJ21zRmxleE5lZ2F0aXZlJyxcbiAgZmxleEJhc2lzOiAnbXNGbGV4UHJlZmVycmVkU2l6ZSdcbn07XG5cbmZ1bmN0aW9uIGZsZXhib3hJRShwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlKSB7XG4gIGlmIChhbHRlcm5hdGl2ZVByb3BzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgIHN0eWxlW2FsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldXSA9IGFsdGVybmF0aXZlVmFsdWVzW3ZhbHVlXSB8fCB2YWx1ZTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmxleDtcbnZhciB2YWx1ZXMgPSB7XG4gIGZsZXg6IFsnLXdlYmtpdC1ib3gnLCAnLW1vei1ib3gnLCAnLW1zLWZsZXhib3gnLCAnLXdlYmtpdC1mbGV4JywgJ2ZsZXgnXSxcbiAgJ2lubGluZS1mbGV4JzogWyctd2Via2l0LWlubGluZS1ib3gnLCAnLW1vei1pbmxpbmUtYm94JywgJy1tcy1pbmxpbmUtZmxleGJveCcsICctd2Via2l0LWlubGluZS1mbGV4JywgJ2lubGluZS1mbGV4J11cbn07XG5cbmZ1bmN0aW9uIGZsZXgocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2Rpc3BsYXknICYmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWVzW3ZhbHVlXTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FsYztcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2lzUHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJyddO1xuZnVuY3Rpb24gY2FsYyhwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkgJiYgdmFsdWUuaW5kZXhPZignY2FsYygnKSA+IC0xKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvY2FsY1xcKC9nLCBwcmVmaXggKyAnY2FsYygnKTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NhbGMgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvY2FsYycpO1xuXG52YXIgX2NhbGMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FsYyk7XG5cbnZhciBfZmxleCA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4Jyk7XG5cbnZhciBfZmxleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mbGV4KTtcblxudmFyIF9mbGV4Ym94SUUgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleGJveElFJyk7XG5cbnZhciBfZmxleGJveElFMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsZXhib3hJRSk7XG5cbnZhciBfZmxleGJveE9sZCA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4Ym94T2xkJyk7XG5cbnZhciBfZmxleGJveE9sZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mbGV4Ym94T2xkKTtcblxudmFyIF9ncmFkaWVudCA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9ncmFkaWVudCcpO1xuXG52YXIgX2dyYWRpZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dyYWRpZW50KTtcblxudmFyIF9zaXppbmcgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvc2l6aW5nJyk7XG5cbnZhciBfc2l6aW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpemluZyk7XG5cbnZhciBfdHJhbnNpdGlvbiA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy90cmFuc2l0aW9uJyk7XG5cbnZhciBfdHJhbnNpdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBwbHVnaW5zOiBbX2NhbGMyLmRlZmF1bHQsIF9mbGV4Mi5kZWZhdWx0LCBfZmxleGJveElFMi5kZWZhdWx0LCBfZmxleGJveE9sZDIuZGVmYXVsdCwgX2dyYWRpZW50Mi5kZWZhdWx0LCBfc2l6aW5nMi5kZWZhdWx0LCBfdHJhbnNpdGlvbjIuZGVmYXVsdF0sXG4gIHByZWZpeE1hcDogeyBcInRyYW5zZm9ybVwiOiBbXCJXZWJraXRcIiwgXCJtc1wiXSwgXCJ0cmFuc2Zvcm1PcmlnaW5cIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwidHJhbnNmb3JtT3JpZ2luWFwiOiBbXCJXZWJraXRcIiwgXCJtc1wiXSwgXCJ0cmFuc2Zvcm1PcmlnaW5ZXCI6IFtcIldlYmtpdFwiLCBcIm1zXCJdLCBcImJhY2tmYWNlVmlzaWJpbGl0eVwiOiBbXCJXZWJraXRcIl0sIFwicGVyc3BlY3RpdmVcIjogW1wiV2Via2l0XCJdLCBcInBlcnNwZWN0aXZlT3JpZ2luXCI6IFtcIldlYmtpdFwiXSwgXCJ0cmFuc2Zvcm1TdHlsZVwiOiBbXCJXZWJraXRcIl0sIFwidHJhbnNmb3JtT3JpZ2luWlwiOiBbXCJXZWJraXRcIl0sIFwiYW5pbWF0aW9uXCI6IFtcIldlYmtpdFwiXSwgXCJhbmltYXRpb25EZWxheVwiOiBbXCJXZWJraXRcIl0sIFwiYW5pbWF0aW9uRGlyZWN0aW9uXCI6IFtcIldlYmtpdFwiXSwgXCJhbmltYXRpb25GaWxsTW9kZVwiOiBbXCJXZWJraXRcIl0sIFwiYW5pbWF0aW9uRHVyYXRpb25cIjogW1wiV2Via2l0XCJdLCBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IFtcIldlYmtpdFwiXSwgXCJhbmltYXRpb25OYW1lXCI6IFtcIldlYmtpdFwiXSwgXCJhbmltYXRpb25QbGF5U3RhdGVcIjogW1wiV2Via2l0XCJdLCBcImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uXCI6IFtcIldlYmtpdFwiXSwgXCJhcHBlYXJhbmNlXCI6IFtcIldlYmtpdFwiLCBcIk1velwiXSwgXCJ1c2VyU2VsZWN0XCI6IFtcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCJdLCBcImZvbnRLZXJuaW5nXCI6IFtcIldlYmtpdFwiXSwgXCJ0ZXh0RW1waGFzaXNQb3NpdGlvblwiOiBbXCJXZWJraXRcIl0sIFwidGV4dEVtcGhhc2lzXCI6IFtcIldlYmtpdFwiXSwgXCJ0ZXh0RW1waGFzaXNTdHlsZVwiOiBbXCJXZWJraXRcIl0sIFwidGV4dEVtcGhhc2lzQ29sb3JcIjogW1wiV2Via2l0XCJdLCBcImJveERlY29yYXRpb25CcmVha1wiOiBbXCJXZWJraXRcIl0sIFwiY2xpcFBhdGhcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tJbWFnZVwiOiBbXCJXZWJraXRcIl0sIFwibWFza01vZGVcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tSZXBlYXRcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tQb3NpdGlvblwiOiBbXCJXZWJraXRcIl0sIFwibWFza0NsaXBcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tPcmlnaW5cIjogW1wiV2Via2l0XCJdLCBcIm1hc2tTaXplXCI6IFtcIldlYmtpdFwiXSwgXCJtYXNrQ29tcG9zaXRlXCI6IFtcIldlYmtpdFwiXSwgXCJtYXNrXCI6IFtcIldlYmtpdFwiXSwgXCJtYXNrQm9yZGVyU291cmNlXCI6IFtcIldlYmtpdFwiXSwgXCJtYXNrQm9yZGVyTW9kZVwiOiBbXCJXZWJraXRcIl0sIFwibWFza0JvcmRlclNsaWNlXCI6IFtcIldlYmtpdFwiXSwgXCJtYXNrQm9yZGVyV2lkdGhcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tCb3JkZXJPdXRzZXRcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tCb3JkZXJcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tUeXBlXCI6IFtcIldlYmtpdFwiXSwgXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCI6IFtcIldlYmtpdFwiLCBcIk1velwiXSwgXCJ0ZXh0RGVjb3JhdGlvblNraXBcIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcInRleHREZWNvcmF0aW9uTGluZVwiOiBbXCJXZWJraXRcIiwgXCJNb3pcIl0sIFwidGV4dERlY29yYXRpb25Db2xvclwiOiBbXCJXZWJraXRcIiwgXCJNb3pcIl0sIFwiZmlsdGVyXCI6IFtcIldlYmtpdFwiXSwgXCJmb250RmVhdHVyZVNldHRpbmdzXCI6IFtcIldlYmtpdFwiLCBcIk1velwiXSwgXCJicmVha0FmdGVyXCI6IFtcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCJdLCBcImJyZWFrQmVmb3JlXCI6IFtcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCJdLCBcImJyZWFrSW5zaWRlXCI6IFtcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCJdLCBcImNvbHVtbkNvdW50XCI6IFtcIldlYmtpdFwiLCBcIk1velwiXSwgXCJjb2x1bW5GaWxsXCI6IFtcIldlYmtpdFwiLCBcIk1velwiXSwgXCJjb2x1bW5HYXBcIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcImNvbHVtblJ1bGVcIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcImNvbHVtblJ1bGVDb2xvclwiOiBbXCJXZWJraXRcIiwgXCJNb3pcIl0sIFwiY29sdW1uUnVsZVN0eWxlXCI6IFtcIldlYmtpdFwiLCBcIk1velwiXSwgXCJjb2x1bW5SdWxlV2lkdGhcIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcImNvbHVtbnNcIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcImNvbHVtblNwYW5cIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcImNvbHVtbldpZHRoXCI6IFtcIldlYmtpdFwiLCBcIk1velwiXSwgXCJmbGV4XCI6IFtcIldlYmtpdFwiLCBcIm1zXCJdLCBcImZsZXhCYXNpc1wiOiBbXCJXZWJraXRcIl0sIFwiZmxleERpcmVjdGlvblwiOiBbXCJXZWJraXRcIiwgXCJtc1wiXSwgXCJmbGV4R3Jvd1wiOiBbXCJXZWJraXRcIl0sIFwiZmxleEZsb3dcIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwiZmxleFNocmlua1wiOiBbXCJXZWJraXRcIl0sIFwiZmxleFdyYXBcIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwiYWxpZ25Db250ZW50XCI6IFtcIldlYmtpdFwiXSwgXCJhbGlnbkl0ZW1zXCI6IFtcIldlYmtpdFwiXSwgXCJhbGlnblNlbGZcIjogW1wiV2Via2l0XCJdLCBcImp1c3RpZnlDb250ZW50XCI6IFtcIldlYmtpdFwiXSwgXCJvcmRlclwiOiBbXCJXZWJraXRcIl0sIFwidHJhbnNpdGlvbkRlbGF5XCI6IFtcIldlYmtpdFwiXSwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIjogW1wiV2Via2l0XCJdLCBcInRyYW5zaXRpb25Qcm9wZXJ0eVwiOiBbXCJXZWJraXRcIl0sIFwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXCI6IFtcIldlYmtpdFwiXSwgXCJiYWNrZHJvcEZpbHRlclwiOiBbXCJXZWJraXRcIl0sIFwic2Nyb2xsU25hcFR5cGVcIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwic2Nyb2xsU25hcFBvaW50c1hcIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwic2Nyb2xsU25hcFBvaW50c1lcIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwic2Nyb2xsU25hcERlc3RpbmF0aW9uXCI6IFtcIldlYmtpdFwiLCBcIm1zXCJdLCBcInNjcm9sbFNuYXBDb29yZGluYXRlXCI6IFtcIldlYmtpdFwiLCBcIm1zXCJdLCBcInNoYXBlSW1hZ2VUaHJlc2hvbGRcIjogW1wiV2Via2l0XCJdLCBcInNoYXBlSW1hZ2VNYXJnaW5cIjogW1wiV2Via2l0XCJdLCBcInNoYXBlSW1hZ2VPdXRzaWRlXCI6IFtcIldlYmtpdFwiXSwgXCJoeXBoZW5zXCI6IFtcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCJdLCBcImZsb3dJbnRvXCI6IFtcIldlYmtpdFwiLCBcIm1zXCJdLCBcImZsb3dGcm9tXCI6IFtcIldlYmtpdFwiLCBcIm1zXCJdLCBcInJlZ2lvbkZyYWdtZW50XCI6IFtcIldlYmtpdFwiLCBcIm1zXCJdLCBcImJveFNpemluZ1wiOiBbXCJNb3pcIl0sIFwidGV4dEFsaWduTGFzdFwiOiBbXCJNb3pcIl0sIFwidGFiU2l6ZVwiOiBbXCJNb3pcIl0sIFwid3JhcEZsb3dcIjogW1wibXNcIl0sIFwid3JhcFRocm91Z2hcIjogW1wibXNcIl0sIFwid3JhcE1hcmdpblwiOiBbXCJtc1wiXSwgXCJ0b3VjaEFjdGlvblwiOiBbXCJtc1wiXSwgXCJncmlkVGVtcGxhdGVDb2x1bW5zXCI6IFtcIm1zXCJdLCBcImdyaWRUZW1wbGF0ZVJvd3NcIjogW1wibXNcIl0sIFwiZ3JpZFRlbXBsYXRlQXJlYXNcIjogW1wibXNcIl0sIFwiZ3JpZFRlbXBsYXRlXCI6IFtcIm1zXCJdLCBcImdyaWRBdXRvQ29sdW1uc1wiOiBbXCJtc1wiXSwgXCJncmlkQXV0b1Jvd3NcIjogW1wibXNcIl0sIFwiZ3JpZEF1dG9GbG93XCI6IFtcIm1zXCJdLCBcImdyaWRcIjogW1wibXNcIl0sIFwiZ3JpZFJvd1N0YXJ0XCI6IFtcIm1zXCJdLCBcImdyaWRDb2x1bW5TdGFydFwiOiBbXCJtc1wiXSwgXCJncmlkUm93RW5kXCI6IFtcIm1zXCJdLCBcImdyaWRSb3dcIjogW1wibXNcIl0sIFwiZ3JpZENvbHVtblwiOiBbXCJtc1wiXSwgXCJncmlkQ29sdW1uRW5kXCI6IFtcIm1zXCJdLCBcImdyaWRDb2x1bW5HYXBcIjogW1wibXNcIl0sIFwiZ3JpZFJvd0dhcFwiOiBbXCJtc1wiXSwgXCJncmlkQXJlYVwiOiBbXCJtc1wiXSwgXCJncmlkR2FwXCI6IFtcIm1zXCJdLCBcInRleHRTaXplQWRqdXN0XCI6IFtcIldlYmtpdFwiLCBcIm1zXCJdLCBcImJvcmRlckltYWdlXCI6IFtcIldlYmtpdFwiXSwgXCJib3JkZXJJbWFnZU91dHNldFwiOiBbXCJXZWJraXRcIl0sIFwiYm9yZGVySW1hZ2VSZXBlYXRcIjogW1wiV2Via2l0XCJdLCBcImJvcmRlckltYWdlU2xpY2VcIjogW1wiV2Via2l0XCJdLCBcImJvcmRlckltYWdlU291cmNlXCI6IFtcIldlYmtpdFwiXSwgXCJib3JkZXJJbWFnZVdpZHRoXCI6IFtcIldlYmtpdFwiXSB9XG59OyAvKiBlc2xpbnQtZGlzYWJsZSAqLyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvW0EtWl0vZztcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG52YXIgY2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcgaW4gY2FjaGVcbiAgICA/IGNhY2hlW3N0cmluZ11cbiAgICA6IGNhY2hlW3N0cmluZ10gPSBzdHJpbmdcbiAgICAgIC5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sICctJCYnKVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGVTdHlsZU5hbWU7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2l0aW9uO1xuXG52YXIgX2h5cGhlbmF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnY3NzLWluLWpzLXV0aWxzL2xpYi9oeXBoZW5hdGVQcm9wZXJ0eScpO1xuXG52YXIgX2h5cGhlbmF0ZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h5cGhlbmF0ZVByb3BlcnR5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHByb3BlcnRpZXMgPSB7XG4gIHRyYW5zaXRpb246IHRydWUsXG4gIHRyYW5zaXRpb25Qcm9wZXJ0eTogdHJ1ZSxcbiAgV2Via2l0VHJhbnNpdGlvbjogdHJ1ZSxcbiAgV2Via2l0VHJhbnNpdGlvblByb3BlcnR5OiB0cnVlLFxuICBNb3pUcmFuc2l0aW9uOiB0cnVlLFxuICBNb3pUcmFuc2l0aW9uUHJvcGVydHk6IHRydWVcbn07XG5cblxudmFyIHJlcXVpcmVzUHJlZml4RGFzaENhc2VkID0gdm9pZCAwO1xuXG5mdW5jdGlvbiB0cmFuc2l0aW9uKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIF9yZWYpIHtcbiAgdmFyIGNzc1ByZWZpeCA9IF9yZWYuY3NzUHJlZml4LFxuICAgICAga2VlcFVucHJlZml4ZWQgPSBfcmVmLmtlZXBVbnByZWZpeGVkLFxuICAgICAgcmVxdWlyZXNQcmVmaXggPSBfcmVmLnJlcXVpcmVzUHJlZml4O1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgLy8gbWVtb2l6ZSB0aGUgcHJlZml4IGFycmF5IGZvciBsYXRlciB1c2VcbiAgICBpZiAoIXJlcXVpcmVzUHJlZml4RGFzaENhc2VkKSB7XG4gICAgICByZXF1aXJlc1ByZWZpeERhc2hDYXNlZCA9IE9iamVjdC5rZXlzKHJlcXVpcmVzUHJlZml4KS5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmV0dXJuICgwLCBfaHlwaGVuYXRlUHJvcGVydHkyLmRlZmF1bHQpKHByb3ApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gb25seSBzcGxpdCBtdWx0aSB2YWx1ZXMsIG5vdCBjdWJpYyBiZXppZXJzXG4gICAgdmFyIG11bHRpcGxlVmFsdWVzID0gdmFsdWUuc3BsaXQoLywoPyFbXigpXSooPzpcXChbXigpXSpcXCkpP1xcKSkvZyk7XG5cbiAgICByZXF1aXJlc1ByZWZpeERhc2hDYXNlZC5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICBtdWx0aXBsZVZhbHVlcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGluZGV4KSB7XG4gICAgICAgIGlmICh2YWwuaW5kZXhPZihwcm9wKSA+IC0xICYmIHByb3AgIT09ICdvcmRlcicpIHtcbiAgICAgICAgICBtdWx0aXBsZVZhbHVlc1tpbmRleF0gPSB2YWwucmVwbGFjZShwcm9wLCBjc3NQcmVmaXggKyBwcm9wKSArIChrZWVwVW5wcmVmaXhlZCA/ICcsJyArIHZhbCA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXVsdGlwbGVWYWx1ZXMuam9pbignLCcpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzaXppbmc7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJvcGVydGllcyA9IHtcbiAgbWF4SGVpZ2h0OiB0cnVlLFxuICBtYXhXaWR0aDogdHJ1ZSxcbiAgd2lkdGg6IHRydWUsXG4gIGhlaWdodDogdHJ1ZSxcbiAgY29sdW1uV2lkdGg6IHRydWUsXG4gIG1pbldpZHRoOiB0cnVlLFxuICBtaW5IZWlnaHQ6IHRydWVcbn07XG5cbnZhciB2YWx1ZXMgPSB7XG4gICdtaW4tY29udGVudCc6IHRydWUsXG4gICdtYXgtY29udGVudCc6IHRydWUsXG4gICdmaWxsLWF2YWlsYWJsZSc6IHRydWUsXG4gICdmaXQtY29udGVudCc6IHRydWUsXG4gICdjb250YWluLWZsb2F0cyc6IHRydWVcblxuICAvLyBUT0RPOiBjaHJvbWUgJiBvcGVyYSBzdXBwb3J0IGl0XG59O2Z1bmN0aW9uIHNpemluZyhwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBfcmVmKSB7XG4gIHZhciBjc3NQcmVmaXggPSBfcmVmLmNzc1ByZWZpeCxcbiAgICAgIGtlZXBVbnByZWZpeGVkID0gX3JlZi5rZWVwVW5wcmVmaXhlZDtcblxuICAvLyBUaGlzIG1pZ2h0IGNoYW5nZSBpbiB0aGUgZnV0dXJlXG4gIC8vIEtlZXAgYW4gZXllIG9uIGl0XG4gIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJiB2YWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgcmV0dXJuICgwLCBfZ2V0UHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkoY3NzUHJlZml4ICsgdmFsdWUsIHZhbHVlLCBrZWVwVW5wcmVmaXhlZCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdyYWRpZW50O1xuXG52YXIgX2dldFByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHZhbHVlcyA9IC9saW5lYXItZ3JhZGllbnR8cmFkaWFsLWdyYWRpZW50fHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnR8cmVwZWF0aW5nLXJhZGlhbC1ncmFkaWVudC87XG5mdW5jdGlvbiBncmFkaWVudChwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBfcmVmKSB7XG4gIHZhciBicm93c2VyTmFtZSA9IF9yZWYuYnJvd3Nlck5hbWUsXG4gICAgICBicm93c2VyVmVyc2lvbiA9IF9yZWYuYnJvd3NlclZlcnNpb24sXG4gICAgICBjc3NQcmVmaXggPSBfcmVmLmNzc1ByZWZpeCxcbiAgICAgIGtlZXBVbnByZWZpeGVkID0gX3JlZi5rZWVwVW5wcmVmaXhlZDtcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZXMudGVzdCh2YWx1ZSkgJiYgKGJyb3dzZXJOYW1lID09PSAnZmlyZWZveCcgJiYgYnJvd3NlclZlcnNpb24gPCAxNiB8fCBicm93c2VyTmFtZSA9PT0gJ2Nocm9tZScgJiYgYnJvd3NlclZlcnNpb24gPCAyNiB8fCAoYnJvd3Nlck5hbWUgPT09ICdzYWZhcmknIHx8IGJyb3dzZXJOYW1lID09PSAnaW9zX3NhZicpICYmIGJyb3dzZXJWZXJzaW9uIDwgNyB8fCAoYnJvd3Nlck5hbWUgPT09ICdvcGVyYScgfHwgYnJvd3Nlck5hbWUgPT09ICdvcF9taW5pJykgJiYgYnJvd3NlclZlcnNpb24gPCAxMi4xIHx8IGJyb3dzZXJOYW1lID09PSAnYW5kcm9pZCcgJiYgYnJvd3NlclZlcnNpb24gPCA0LjQgfHwgYnJvd3Nlck5hbWUgPT09ICdhbmRfdWMnKSkge1xuICAgIHJldHVybiAoMCwgX2dldFByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKGNzc1ByZWZpeCArIHZhbHVlLCB2YWx1ZSwga2VlcFVucHJlZml4ZWQpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmbGV4Ym94T2xkO1xuXG52YXIgX2dldFByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGFsdGVybmF0aXZlVmFsdWVzID0ge1xuICAnc3BhY2UtYXJvdW5kJzogJ2p1c3RpZnknLFxuICAnc3BhY2UtYmV0d2Vlbic6ICdqdXN0aWZ5JyxcbiAgJ2ZsZXgtc3RhcnQnOiAnc3RhcnQnLFxuICAnZmxleC1lbmQnOiAnZW5kJyxcbiAgJ3dyYXAtcmV2ZXJzZSc6ICdtdWx0aXBsZScsXG4gIHdyYXA6ICdtdWx0aXBsZScsXG4gIGZsZXg6ICdib3gnLFxuICAnaW5saW5lLWZsZXgnOiAnaW5saW5lLWJveCdcbn07XG5cblxudmFyIGFsdGVybmF0aXZlUHJvcHMgPSB7XG4gIGFsaWduSXRlbXM6ICdXZWJraXRCb3hBbGlnbicsXG4gIGp1c3RpZnlDb250ZW50OiAnV2Via2l0Qm94UGFjaycsXG4gIGZsZXhXcmFwOiAnV2Via2l0Qm94TGluZXMnXG59O1xuXG52YXIgb3RoZXJQcm9wcyA9IFsnYWxpZ25Db250ZW50JywgJ2FsaWduU2VsZicsICdvcmRlcicsICdmbGV4R3JvdycsICdmbGV4U2hyaW5rJywgJ2ZsZXhCYXNpcycsICdmbGV4RGlyZWN0aW9uJ107XG52YXIgcHJvcGVydGllcyA9IE9iamVjdC5rZXlzKGFsdGVybmF0aXZlUHJvcHMpLmNvbmNhdChvdGhlclByb3BzKTtcblxuZnVuY3Rpb24gZmxleGJveE9sZChwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBfcmVmKSB7XG4gIHZhciBicm93c2VyTmFtZSA9IF9yZWYuYnJvd3Nlck5hbWUsXG4gICAgICBicm93c2VyVmVyc2lvbiA9IF9yZWYuYnJvd3NlclZlcnNpb24sXG4gICAgICBjc3NQcmVmaXggPSBfcmVmLmNzc1ByZWZpeCxcbiAgICAgIGtlZXBVbnByZWZpeGVkID0gX3JlZi5rZWVwVW5wcmVmaXhlZCxcbiAgICAgIHJlcXVpcmVzUHJlZml4ID0gX3JlZi5yZXF1aXJlc1ByZWZpeDtcblxuICBpZiAoKHByb3BlcnRpZXMuaW5kZXhPZihwcm9wZXJ0eSkgPiAtMSB8fCBwcm9wZXJ0eSA9PT0gJ2Rpc3BsYXknICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuaW5kZXhPZignZmxleCcpID4gLTEpICYmIChicm93c2VyTmFtZSA9PT0gJ2ZpcmVmb3gnICYmIGJyb3dzZXJWZXJzaW9uIDwgMjIgfHwgYnJvd3Nlck5hbWUgPT09ICdjaHJvbWUnICYmIGJyb3dzZXJWZXJzaW9uIDwgMjEgfHwgKGJyb3dzZXJOYW1lID09PSAnc2FmYXJpJyB8fCBicm93c2VyTmFtZSA9PT0gJ2lvc19zYWYnKSAmJiBicm93c2VyVmVyc2lvbiA8PSA2LjEgfHwgYnJvd3Nlck5hbWUgPT09ICdhbmRyb2lkJyAmJiBicm93c2VyVmVyc2lvbiA8IDQuNCB8fCBicm93c2VyTmFtZSA9PT0gJ2FuZF91YycpKSB7XG4gICAgZGVsZXRlIHJlcXVpcmVzUHJlZml4W3Byb3BlcnR5XTtcblxuICAgIGlmICgha2VlcFVucHJlZml4ZWQgJiYgIUFycmF5LmlzQXJyYXkoc3R5bGVbcHJvcGVydHldKSkge1xuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BlcnR5XTtcbiAgICB9XG4gICAgaWYgKHByb3BlcnR5ID09PSAnZmxleERpcmVjdGlvbicgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKHZhbHVlLmluZGV4T2YoJ2NvbHVtbicpID4gLTEpIHtcbiAgICAgICAgc3R5bGUuV2Via2l0Qm94T3JpZW50ID0gJ3ZlcnRpY2FsJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlLldlYmtpdEJveE9yaWVudCA9ICdob3Jpem9udGFsJztcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZS5pbmRleE9mKCdyZXZlcnNlJykgPiAtMSkge1xuICAgICAgICBzdHlsZS5XZWJraXRCb3hEaXJlY3Rpb24gPSAncmV2ZXJzZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZS5XZWJraXRCb3hEaXJlY3Rpb24gPSAnbm9ybWFsJztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BlcnR5ID09PSAnZGlzcGxheScgJiYgYWx0ZXJuYXRpdmVWYWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gKDAsIF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KShjc3NQcmVmaXggKyBhbHRlcm5hdGl2ZVZhbHVlc1t2YWx1ZV0sIHZhbHVlLCBrZWVwVW5wcmVmaXhlZCk7XG4gICAgfVxuICAgIGlmIChhbHRlcm5hdGl2ZVByb3BzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgc3R5bGVbYWx0ZXJuYXRpdmVQcm9wc1twcm9wZXJ0eV1dID0gYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdIHx8IHZhbHVlO1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmxleGJveElFO1xuXG52YXIgX2dldFByZWZpeGVkVmFsdWUgPSByZXF1aXJlKCcuLi8uLi91dGlscy9nZXRQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGFsdGVybmF0aXZlVmFsdWVzID0ge1xuICAnc3BhY2UtYXJvdW5kJzogJ2Rpc3RyaWJ1dGUnLFxuICAnc3BhY2UtYmV0d2Vlbic6ICdqdXN0aWZ5JyxcbiAgJ2ZsZXgtc3RhcnQnOiAnc3RhcnQnLFxuICAnZmxleC1lbmQnOiAnZW5kJyxcbiAgZmxleDogJ2ZsZXhib3gnLFxuICAnaW5saW5lLWZsZXgnOiAnaW5saW5lLWZsZXhib3gnXG59O1xuXG52YXIgYWx0ZXJuYXRpdmVQcm9wcyA9IHtcbiAgYWxpZ25Db250ZW50OiAnbXNGbGV4TGluZVBhY2snLFxuICBhbGlnblNlbGY6ICdtc0ZsZXhJdGVtQWxpZ24nLFxuICBhbGlnbkl0ZW1zOiAnbXNGbGV4QWxpZ24nLFxuICBqdXN0aWZ5Q29udGVudDogJ21zRmxleFBhY2snLFxuICBvcmRlcjogJ21zRmxleE9yZGVyJyxcbiAgZmxleEdyb3c6ICdtc0ZsZXhQb3NpdGl2ZScsXG4gIGZsZXhTaHJpbms6ICdtc0ZsZXhOZWdhdGl2ZScsXG4gIGZsZXhCYXNpczogJ21zRmxleFByZWZlcnJlZFNpemUnXG59O1xuXG5mdW5jdGlvbiBmbGV4Ym94SUUocHJvcGVydHksIHZhbHVlLCBzdHlsZSwgX3JlZikge1xuICB2YXIgYnJvd3Nlck5hbWUgPSBfcmVmLmJyb3dzZXJOYW1lLFxuICAgICAgYnJvd3NlclZlcnNpb24gPSBfcmVmLmJyb3dzZXJWZXJzaW9uLFxuICAgICAgY3NzUHJlZml4ID0gX3JlZi5jc3NQcmVmaXgsXG4gICAgICBrZWVwVW5wcmVmaXhlZCA9IF9yZWYua2VlcFVucHJlZml4ZWQsXG4gICAgICByZXF1aXJlc1ByZWZpeCA9IF9yZWYucmVxdWlyZXNQcmVmaXg7XG5cbiAgaWYgKChhbHRlcm5hdGl2ZVByb3BzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSB8fCBwcm9wZXJ0eSA9PT0gJ2Rpc3BsYXknICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuaW5kZXhPZignZmxleCcpID4gLTEpICYmIChicm93c2VyTmFtZSA9PT0gJ2llX21vYicgfHwgYnJvd3Nlck5hbWUgPT09ICdpZScpICYmIGJyb3dzZXJWZXJzaW9uID09PSAxMCkge1xuICAgIGRlbGV0ZSByZXF1aXJlc1ByZWZpeFtwcm9wZXJ0eV07XG5cbiAgICBpZiAoIWtlZXBVbnByZWZpeGVkICYmICFBcnJheS5pc0FycmF5KHN0eWxlW3Byb3BlcnR5XSkpIHtcbiAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wZXJ0eV07XG4gICAgfVxuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ2Rpc3BsYXknICYmIGFsdGVybmF0aXZlVmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuICgwLCBfZ2V0UHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkoY3NzUHJlZml4ICsgYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdLCB2YWx1ZSwga2VlcFVucHJlZml4ZWQpO1xuICAgIH1cbiAgICBpZiAoYWx0ZXJuYXRpdmVQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgIHN0eWxlW2FsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldXSA9IGFsdGVybmF0aXZlVmFsdWVzW3ZhbHVlXSB8fCB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZsZXg7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdmFsdWVzID0ge1xuICBmbGV4OiB0cnVlLFxuICAnaW5saW5lLWZsZXgnOiB0cnVlXG59O1xuZnVuY3Rpb24gZmxleChwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBfcmVmKSB7XG4gIHZhciBicm93c2VyTmFtZSA9IF9yZWYuYnJvd3Nlck5hbWUsXG4gICAgICBicm93c2VyVmVyc2lvbiA9IF9yZWYuYnJvd3NlclZlcnNpb24sXG4gICAgICBjc3NQcmVmaXggPSBfcmVmLmNzc1ByZWZpeCxcbiAgICAgIGtlZXBVbnByZWZpeGVkID0gX3JlZi5rZWVwVW5wcmVmaXhlZDtcblxuICBpZiAocHJvcGVydHkgPT09ICdkaXNwbGF5JyAmJiB2YWx1ZXNbdmFsdWVdICYmIChicm93c2VyTmFtZSA9PT0gJ2Nocm9tZScgJiYgYnJvd3NlclZlcnNpb24gPCAyOSAmJiBicm93c2VyVmVyc2lvbiA+IDIwIHx8IChicm93c2VyTmFtZSA9PT0gJ3NhZmFyaScgfHwgYnJvd3Nlck5hbWUgPT09ICdpb3Nfc2FmJykgJiYgYnJvd3NlclZlcnNpb24gPCA5ICYmIGJyb3dzZXJWZXJzaW9uID4gNiB8fCBicm93c2VyTmFtZSA9PT0gJ29wZXJhJyAmJiAoYnJvd3NlclZlcnNpb24gPT09IDE1IHx8IGJyb3dzZXJWZXJzaW9uID09PSAxNikpKSB7XG4gICAgcmV0dXJuICgwLCBfZ2V0UHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkoY3NzUHJlZml4ICsgdmFsdWUsIHZhbHVlLCBrZWVwVW5wcmVmaXhlZCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbGM7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBjYWxjKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIF9yZWYpIHtcbiAgdmFyIGJyb3dzZXJOYW1lID0gX3JlZi5icm93c2VyTmFtZSxcbiAgICAgIGJyb3dzZXJWZXJzaW9uID0gX3JlZi5icm93c2VyVmVyc2lvbixcbiAgICAgIGNzc1ByZWZpeCA9IF9yZWYuY3NzUHJlZml4LFxuICAgICAga2VlcFVucHJlZml4ZWQgPSBfcmVmLmtlZXBVbnByZWZpeGVkO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmluZGV4T2YoJ2NhbGMoJykgPiAtMSAmJiAoYnJvd3Nlck5hbWUgPT09ICdmaXJlZm94JyAmJiBicm93c2VyVmVyc2lvbiA8IDE1IHx8IGJyb3dzZXJOYW1lID09PSAnY2hyb21lJyAmJiBicm93c2VyVmVyc2lvbiA8IDI1IHx8IGJyb3dzZXJOYW1lID09PSAnc2FmYXJpJyAmJiBicm93c2VyVmVyc2lvbiA8IDYuMSB8fCBicm93c2VyTmFtZSA9PT0gJ2lvc19zYWYnICYmIGJyb3dzZXJWZXJzaW9uIDwgNykpIHtcbiAgICByZXR1cm4gKDAsIF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZS5yZXBsYWNlKC9jYWxjXFwoL2csIGNzc1ByZWZpeCArICdjYWxjKCcpLCB2YWx1ZSwga2VlcFVucHJlZml4ZWQpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY2FsYyA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvY2FsYycpO1xuXG52YXIgX2NhbGMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FsYyk7XG5cbnZhciBfZmxleCA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvZmxleCcpO1xuXG52YXIgX2ZsZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmxleCk7XG5cbnZhciBfZmxleGJveElFID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9mbGV4Ym94SUUnKTtcblxudmFyIF9mbGV4Ym94SUUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmxleGJveElFKTtcblxudmFyIF9mbGV4Ym94T2xkID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9mbGV4Ym94T2xkJyk7XG5cbnZhciBfZmxleGJveE9sZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mbGV4Ym94T2xkKTtcblxudmFyIF9ncmFkaWVudCA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvZ3JhZGllbnQnKTtcblxudmFyIF9ncmFkaWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ncmFkaWVudCk7XG5cbnZhciBfc2l6aW5nID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9zaXppbmcnKTtcblxudmFyIF9zaXppbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2l6aW5nKTtcblxudmFyIF90cmFuc2l0aW9uID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy90cmFuc2l0aW9uJyk7XG5cbnZhciBfdHJhbnNpdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBwbHVnaW5zOiBbX2NhbGMyLmRlZmF1bHQsIF9mbGV4Mi5kZWZhdWx0LCBfZmxleGJveElFMi5kZWZhdWx0LCBfZmxleGJveE9sZDIuZGVmYXVsdCwgX2dyYWRpZW50Mi5kZWZhdWx0LCBfc2l6aW5nMi5kZWZhdWx0LCBfdHJhbnNpdGlvbjIuZGVmYXVsdF0sXG4gIHByZWZpeE1hcDogeyBcImNocm9tZVwiOiB7IFwidHJhbnNmb3JtXCI6IDM1LCBcInRyYW5zZm9ybU9yaWdpblwiOiAzNSwgXCJ0cmFuc2Zvcm1PcmlnaW5YXCI6IDM1LCBcInRyYW5zZm9ybU9yaWdpbllcIjogMzUsIFwiYmFja2ZhY2VWaXNpYmlsaXR5XCI6IDM1LCBcInBlcnNwZWN0aXZlXCI6IDM1LCBcInBlcnNwZWN0aXZlT3JpZ2luXCI6IDM1LCBcInRyYW5zZm9ybVN0eWxlXCI6IDM1LCBcInRyYW5zZm9ybU9yaWdpblpcIjogMzUsIFwiYW5pbWF0aW9uXCI6IDQyLCBcImFuaW1hdGlvbkRlbGF5XCI6IDQyLCBcImFuaW1hdGlvbkRpcmVjdGlvblwiOiA0MiwgXCJhbmltYXRpb25GaWxsTW9kZVwiOiA0MiwgXCJhbmltYXRpb25EdXJhdGlvblwiOiA0MiwgXCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiA0MiwgXCJhbmltYXRpb25OYW1lXCI6IDQyLCBcImFuaW1hdGlvblBsYXlTdGF0ZVwiOiA0MiwgXCJhbmltYXRpb25UaW1pbmdGdW5jdGlvblwiOiA0MiwgXCJhcHBlYXJhbmNlXCI6IDYwLCBcInVzZXJTZWxlY3RcIjogNTMsIFwiZm9udEtlcm5pbmdcIjogMzIsIFwidGV4dEVtcGhhc2lzUG9zaXRpb25cIjogNjAsIFwidGV4dEVtcGhhc2lzXCI6IDYwLCBcInRleHRFbXBoYXNpc1N0eWxlXCI6IDYwLCBcInRleHRFbXBoYXNpc0NvbG9yXCI6IDYwLCBcImJveERlY29yYXRpb25CcmVha1wiOiA2MCwgXCJjbGlwUGF0aFwiOiA1NCwgXCJtYXNrSW1hZ2VcIjogNjAsIFwibWFza01vZGVcIjogNjAsIFwibWFza1JlcGVhdFwiOiA2MCwgXCJtYXNrUG9zaXRpb25cIjogNjAsIFwibWFza0NsaXBcIjogNjAsIFwibWFza09yaWdpblwiOiA2MCwgXCJtYXNrU2l6ZVwiOiA2MCwgXCJtYXNrQ29tcG9zaXRlXCI6IDYwLCBcIm1hc2tcIjogNjAsIFwibWFza0JvcmRlclNvdXJjZVwiOiA2MCwgXCJtYXNrQm9yZGVyTW9kZVwiOiA2MCwgXCJtYXNrQm9yZGVyU2xpY2VcIjogNjAsIFwibWFza0JvcmRlcldpZHRoXCI6IDYwLCBcIm1hc2tCb3JkZXJPdXRzZXRcIjogNjAsIFwibWFza0JvcmRlclJlcGVhdFwiOiA2MCwgXCJtYXNrQm9yZGVyXCI6IDYwLCBcIm1hc2tUeXBlXCI6IDYwLCBcInRleHREZWNvcmF0aW9uU3R5bGVcIjogNTYsIFwidGV4dERlY29yYXRpb25Ta2lwXCI6IDU2LCBcInRleHREZWNvcmF0aW9uTGluZVwiOiA1NiwgXCJ0ZXh0RGVjb3JhdGlvbkNvbG9yXCI6IDU2LCBcImZpbHRlclwiOiA1MiwgXCJmb250RmVhdHVyZVNldHRpbmdzXCI6IDQ3LCBcImJyZWFrQWZ0ZXJcIjogNDksIFwiYnJlYWtCZWZvcmVcIjogNDksIFwiYnJlYWtJbnNpZGVcIjogNDksIFwiY29sdW1uQ291bnRcIjogNDksIFwiY29sdW1uRmlsbFwiOiA0OSwgXCJjb2x1bW5HYXBcIjogNDksIFwiY29sdW1uUnVsZVwiOiA0OSwgXCJjb2x1bW5SdWxlQ29sb3JcIjogNDksIFwiY29sdW1uUnVsZVN0eWxlXCI6IDQ5LCBcImNvbHVtblJ1bGVXaWR0aFwiOiA0OSwgXCJjb2x1bW5zXCI6IDQ5LCBcImNvbHVtblNwYW5cIjogNDksIFwiY29sdW1uV2lkdGhcIjogNDkgfSwgXCJzYWZhcmlcIjogeyBcImZsZXhcIjogOCwgXCJmbGV4QmFzaXNcIjogOCwgXCJmbGV4RGlyZWN0aW9uXCI6IDgsIFwiZmxleEdyb3dcIjogOCwgXCJmbGV4Rmxvd1wiOiA4LCBcImZsZXhTaHJpbmtcIjogOCwgXCJmbGV4V3JhcFwiOiA4LCBcImFsaWduQ29udGVudFwiOiA4LCBcImFsaWduSXRlbXNcIjogOCwgXCJhbGlnblNlbGZcIjogOCwgXCJqdXN0aWZ5Q29udGVudFwiOiA4LCBcIm9yZGVyXCI6IDgsIFwidHJhbnNpdGlvblwiOiA2LCBcInRyYW5zaXRpb25EZWxheVwiOiA2LCBcInRyYW5zaXRpb25EdXJhdGlvblwiOiA2LCBcInRyYW5zaXRpb25Qcm9wZXJ0eVwiOiA2LCBcInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblwiOiA2LCBcInRyYW5zZm9ybVwiOiA4LCBcInRyYW5zZm9ybU9yaWdpblwiOiA4LCBcInRyYW5zZm9ybU9yaWdpblhcIjogOCwgXCJ0cmFuc2Zvcm1PcmlnaW5ZXCI6IDgsIFwiYmFja2ZhY2VWaXNpYmlsaXR5XCI6IDgsIFwicGVyc3BlY3RpdmVcIjogOCwgXCJwZXJzcGVjdGl2ZU9yaWdpblwiOiA4LCBcInRyYW5zZm9ybVN0eWxlXCI6IDgsIFwidHJhbnNmb3JtT3JpZ2luWlwiOiA4LCBcImFuaW1hdGlvblwiOiA4LCBcImFuaW1hdGlvbkRlbGF5XCI6IDgsIFwiYW5pbWF0aW9uRGlyZWN0aW9uXCI6IDgsIFwiYW5pbWF0aW9uRmlsbE1vZGVcIjogOCwgXCJhbmltYXRpb25EdXJhdGlvblwiOiA4LCBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IDgsIFwiYW5pbWF0aW9uTmFtZVwiOiA4LCBcImFuaW1hdGlvblBsYXlTdGF0ZVwiOiA4LCBcImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uXCI6IDgsIFwiYXBwZWFyYW5jZVwiOiAxMC4xLCBcInVzZXJTZWxlY3RcIjogMTAuMSwgXCJiYWNrZHJvcEZpbHRlclwiOiAxMC4xLCBcImZvbnRLZXJuaW5nXCI6IDksIFwic2Nyb2xsU25hcFR5cGVcIjogMTAsIFwic2Nyb2xsU25hcFBvaW50c1hcIjogMTAsIFwic2Nyb2xsU25hcFBvaW50c1lcIjogMTAsIFwic2Nyb2xsU25hcERlc3RpbmF0aW9uXCI6IDEwLCBcInNjcm9sbFNuYXBDb29yZGluYXRlXCI6IDEwLCBcInRleHRFbXBoYXNpc1Bvc2l0aW9uXCI6IDcsIFwidGV4dEVtcGhhc2lzXCI6IDcsIFwidGV4dEVtcGhhc2lzU3R5bGVcIjogNywgXCJ0ZXh0RW1waGFzaXNDb2xvclwiOiA3LCBcImJveERlY29yYXRpb25CcmVha1wiOiAxMC4xLCBcImNsaXBQYXRoXCI6IDEwLjEsIFwibWFza0ltYWdlXCI6IDEwLjEsIFwibWFza01vZGVcIjogMTAuMSwgXCJtYXNrUmVwZWF0XCI6IDEwLjEsIFwibWFza1Bvc2l0aW9uXCI6IDEwLjEsIFwibWFza0NsaXBcIjogMTAuMSwgXCJtYXNrT3JpZ2luXCI6IDEwLjEsIFwibWFza1NpemVcIjogMTAuMSwgXCJtYXNrQ29tcG9zaXRlXCI6IDEwLjEsIFwibWFza1wiOiAxMC4xLCBcIm1hc2tCb3JkZXJTb3VyY2VcIjogMTAuMSwgXCJtYXNrQm9yZGVyTW9kZVwiOiAxMC4xLCBcIm1hc2tCb3JkZXJTbGljZVwiOiAxMC4xLCBcIm1hc2tCb3JkZXJXaWR0aFwiOiAxMC4xLCBcIm1hc2tCb3JkZXJPdXRzZXRcIjogMTAuMSwgXCJtYXNrQm9yZGVyUmVwZWF0XCI6IDEwLjEsIFwibWFza0JvcmRlclwiOiAxMC4xLCBcIm1hc2tUeXBlXCI6IDEwLjEsIFwidGV4dERlY29yYXRpb25TdHlsZVwiOiAxMC4xLCBcInRleHREZWNvcmF0aW9uU2tpcFwiOiAxMC4xLCBcInRleHREZWNvcmF0aW9uTGluZVwiOiAxMC4xLCBcInRleHREZWNvcmF0aW9uQ29sb3JcIjogMTAuMSwgXCJzaGFwZUltYWdlVGhyZXNob2xkXCI6IDEwLCBcInNoYXBlSW1hZ2VNYXJnaW5cIjogMTAsIFwic2hhcGVJbWFnZU91dHNpZGVcIjogMTAsIFwiZmlsdGVyXCI6IDksIFwiaHlwaGVuc1wiOiAxMC4xLCBcImZsb3dJbnRvXCI6IDEwLjEsIFwiZmxvd0Zyb21cIjogMTAuMSwgXCJicmVha0JlZm9yZVwiOiA4LCBcImJyZWFrQWZ0ZXJcIjogOCwgXCJicmVha0luc2lkZVwiOiA4LCBcInJlZ2lvbkZyYWdtZW50XCI6IDEwLjEsIFwiY29sdW1uQ291bnRcIjogOCwgXCJjb2x1bW5GaWxsXCI6IDgsIFwiY29sdW1uR2FwXCI6IDgsIFwiY29sdW1uUnVsZVwiOiA4LCBcImNvbHVtblJ1bGVDb2xvclwiOiA4LCBcImNvbHVtblJ1bGVTdHlsZVwiOiA4LCBcImNvbHVtblJ1bGVXaWR0aFwiOiA4LCBcImNvbHVtbnNcIjogOCwgXCJjb2x1bW5TcGFuXCI6IDgsIFwiY29sdW1uV2lkdGhcIjogOCB9LCBcImZpcmVmb3hcIjogeyBcImFwcGVhcmFuY2VcIjogNTUsIFwidXNlclNlbGVjdFwiOiA1NSwgXCJib3hTaXppbmdcIjogMjgsIFwidGV4dEFsaWduTGFzdFwiOiA0OCwgXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCI6IDM1LCBcInRleHREZWNvcmF0aW9uU2tpcFwiOiAzNSwgXCJ0ZXh0RGVjb3JhdGlvbkxpbmVcIjogMzUsIFwidGV4dERlY29yYXRpb25Db2xvclwiOiAzNSwgXCJ0YWJTaXplXCI6IDU1LCBcImh5cGhlbnNcIjogNDIsIFwiZm9udEZlYXR1cmVTZXR0aW5nc1wiOiAzMywgXCJicmVha0FmdGVyXCI6IDUxLCBcImJyZWFrQmVmb3JlXCI6IDUxLCBcImJyZWFrSW5zaWRlXCI6IDUxLCBcImNvbHVtbkNvdW50XCI6IDUxLCBcImNvbHVtbkZpbGxcIjogNTEsIFwiY29sdW1uR2FwXCI6IDUxLCBcImNvbHVtblJ1bGVcIjogNTEsIFwiY29sdW1uUnVsZUNvbG9yXCI6IDUxLCBcImNvbHVtblJ1bGVTdHlsZVwiOiA1MSwgXCJjb2x1bW5SdWxlV2lkdGhcIjogNTEsIFwiY29sdW1uc1wiOiA1MSwgXCJjb2x1bW5TcGFuXCI6IDUxLCBcImNvbHVtbldpZHRoXCI6IDUxIH0sIFwib3BlcmFcIjogeyBcImZsZXhcIjogMTYsIFwiZmxleEJhc2lzXCI6IDE2LCBcImZsZXhEaXJlY3Rpb25cIjogMTYsIFwiZmxleEdyb3dcIjogMTYsIFwiZmxleEZsb3dcIjogMTYsIFwiZmxleFNocmlua1wiOiAxNiwgXCJmbGV4V3JhcFwiOiAxNiwgXCJhbGlnbkNvbnRlbnRcIjogMTYsIFwiYWxpZ25JdGVtc1wiOiAxNiwgXCJhbGlnblNlbGZcIjogMTYsIFwianVzdGlmeUNvbnRlbnRcIjogMTYsIFwib3JkZXJcIjogMTYsIFwidHJhbnNmb3JtXCI6IDIyLCBcInRyYW5zZm9ybU9yaWdpblwiOiAyMiwgXCJ0cmFuc2Zvcm1PcmlnaW5YXCI6IDIyLCBcInRyYW5zZm9ybU9yaWdpbllcIjogMjIsIFwiYmFja2ZhY2VWaXNpYmlsaXR5XCI6IDIyLCBcInBlcnNwZWN0aXZlXCI6IDIyLCBcInBlcnNwZWN0aXZlT3JpZ2luXCI6IDIyLCBcInRyYW5zZm9ybVN0eWxlXCI6IDIyLCBcInRyYW5zZm9ybU9yaWdpblpcIjogMjIsIFwiYW5pbWF0aW9uXCI6IDI5LCBcImFuaW1hdGlvbkRlbGF5XCI6IDI5LCBcImFuaW1hdGlvbkRpcmVjdGlvblwiOiAyOSwgXCJhbmltYXRpb25GaWxsTW9kZVwiOiAyOSwgXCJhbmltYXRpb25EdXJhdGlvblwiOiAyOSwgXCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiAyOSwgXCJhbmltYXRpb25OYW1lXCI6IDI5LCBcImFuaW1hdGlvblBsYXlTdGF0ZVwiOiAyOSwgXCJhbmltYXRpb25UaW1pbmdGdW5jdGlvblwiOiAyOSwgXCJhcHBlYXJhbmNlXCI6IDQ1LCBcInVzZXJTZWxlY3RcIjogNDAsIFwiZm9udEtlcm5pbmdcIjogMTksIFwidGV4dEVtcGhhc2lzUG9zaXRpb25cIjogNDUsIFwidGV4dEVtcGhhc2lzXCI6IDQ1LCBcInRleHRFbXBoYXNpc1N0eWxlXCI6IDQ1LCBcInRleHRFbXBoYXNpc0NvbG9yXCI6IDQ1LCBcImJveERlY29yYXRpb25CcmVha1wiOiA0NSwgXCJjbGlwUGF0aFwiOiA0MSwgXCJtYXNrSW1hZ2VcIjogNDUsIFwibWFza01vZGVcIjogNDUsIFwibWFza1JlcGVhdFwiOiA0NSwgXCJtYXNrUG9zaXRpb25cIjogNDUsIFwibWFza0NsaXBcIjogNDUsIFwibWFza09yaWdpblwiOiA0NSwgXCJtYXNrU2l6ZVwiOiA0NSwgXCJtYXNrQ29tcG9zaXRlXCI6IDQ1LCBcIm1hc2tcIjogNDUsIFwibWFza0JvcmRlclNvdXJjZVwiOiA0NSwgXCJtYXNrQm9yZGVyTW9kZVwiOiA0NSwgXCJtYXNrQm9yZGVyU2xpY2VcIjogNDUsIFwibWFza0JvcmRlcldpZHRoXCI6IDQ1LCBcIm1hc2tCb3JkZXJPdXRzZXRcIjogNDUsIFwibWFza0JvcmRlclJlcGVhdFwiOiA0NSwgXCJtYXNrQm9yZGVyXCI6IDQ1LCBcIm1hc2tUeXBlXCI6IDQ1LCBcInRleHREZWNvcmF0aW9uU3R5bGVcIjogNDMsIFwidGV4dERlY29yYXRpb25Ta2lwXCI6IDQzLCBcInRleHREZWNvcmF0aW9uTGluZVwiOiA0MywgXCJ0ZXh0RGVjb3JhdGlvbkNvbG9yXCI6IDQzLCBcImZpbHRlclwiOiAzOSwgXCJmb250RmVhdHVyZVNldHRpbmdzXCI6IDM0LCBcImJyZWFrQWZ0ZXJcIjogMzYsIFwiYnJlYWtCZWZvcmVcIjogMzYsIFwiYnJlYWtJbnNpZGVcIjogMzYsIFwiY29sdW1uQ291bnRcIjogMzYsIFwiY29sdW1uRmlsbFwiOiAzNiwgXCJjb2x1bW5HYXBcIjogMzYsIFwiY29sdW1uUnVsZVwiOiAzNiwgXCJjb2x1bW5SdWxlQ29sb3JcIjogMzYsIFwiY29sdW1uUnVsZVN0eWxlXCI6IDM2LCBcImNvbHVtblJ1bGVXaWR0aFwiOiAzNiwgXCJjb2x1bW5zXCI6IDM2LCBcImNvbHVtblNwYW5cIjogMzYsIFwiY29sdW1uV2lkdGhcIjogMzYgfSwgXCJpZVwiOiB7IFwiZmxleFwiOiAxMCwgXCJmbGV4RGlyZWN0aW9uXCI6IDEwLCBcImZsZXhGbG93XCI6IDEwLCBcImZsZXhXcmFwXCI6IDEwLCBcInRyYW5zZm9ybVwiOiA5LCBcInRyYW5zZm9ybU9yaWdpblwiOiA5LCBcInRyYW5zZm9ybU9yaWdpblhcIjogOSwgXCJ0cmFuc2Zvcm1PcmlnaW5ZXCI6IDksIFwidXNlclNlbGVjdFwiOiAxMSwgXCJ3cmFwRmxvd1wiOiAxMSwgXCJ3cmFwVGhyb3VnaFwiOiAxMSwgXCJ3cmFwTWFyZ2luXCI6IDExLCBcInNjcm9sbFNuYXBUeXBlXCI6IDExLCBcInNjcm9sbFNuYXBQb2ludHNYXCI6IDExLCBcInNjcm9sbFNuYXBQb2ludHNZXCI6IDExLCBcInNjcm9sbFNuYXBEZXN0aW5hdGlvblwiOiAxMSwgXCJzY3JvbGxTbmFwQ29vcmRpbmF0ZVwiOiAxMSwgXCJ0b3VjaEFjdGlvblwiOiAxMCwgXCJoeXBoZW5zXCI6IDExLCBcImZsb3dJbnRvXCI6IDExLCBcImZsb3dGcm9tXCI6IDExLCBcImJyZWFrQmVmb3JlXCI6IDExLCBcImJyZWFrQWZ0ZXJcIjogMTEsIFwiYnJlYWtJbnNpZGVcIjogMTEsIFwicmVnaW9uRnJhZ21lbnRcIjogMTEsIFwiZ3JpZFRlbXBsYXRlQ29sdW1uc1wiOiAxMSwgXCJncmlkVGVtcGxhdGVSb3dzXCI6IDExLCBcImdyaWRUZW1wbGF0ZUFyZWFzXCI6IDExLCBcImdyaWRUZW1wbGF0ZVwiOiAxMSwgXCJncmlkQXV0b0NvbHVtbnNcIjogMTEsIFwiZ3JpZEF1dG9Sb3dzXCI6IDExLCBcImdyaWRBdXRvRmxvd1wiOiAxMSwgXCJncmlkXCI6IDExLCBcImdyaWRSb3dTdGFydFwiOiAxMSwgXCJncmlkQ29sdW1uU3RhcnRcIjogMTEsIFwiZ3JpZFJvd0VuZFwiOiAxMSwgXCJncmlkUm93XCI6IDExLCBcImdyaWRDb2x1bW5cIjogMTEsIFwiZ3JpZENvbHVtbkVuZFwiOiAxMSwgXCJncmlkQ29sdW1uR2FwXCI6IDExLCBcImdyaWRSb3dHYXBcIjogMTEsIFwiZ3JpZEFyZWFcIjogMTEsIFwiZ3JpZEdhcFwiOiAxMSwgXCJ0ZXh0U2l6ZUFkanVzdFwiOiAxMSB9LCBcImVkZ2VcIjogeyBcInVzZXJTZWxlY3RcIjogMTUsIFwid3JhcEZsb3dcIjogMTUsIFwid3JhcFRocm91Z2hcIjogMTUsIFwid3JhcE1hcmdpblwiOiAxNSwgXCJzY3JvbGxTbmFwVHlwZVwiOiAxNSwgXCJzY3JvbGxTbmFwUG9pbnRzWFwiOiAxNSwgXCJzY3JvbGxTbmFwUG9pbnRzWVwiOiAxNSwgXCJzY3JvbGxTbmFwRGVzdGluYXRpb25cIjogMTUsIFwic2Nyb2xsU25hcENvb3JkaW5hdGVcIjogMTUsIFwiaHlwaGVuc1wiOiAxNSwgXCJmbG93SW50b1wiOiAxNSwgXCJmbG93RnJvbVwiOiAxNSwgXCJicmVha0JlZm9yZVwiOiAxNSwgXCJicmVha0FmdGVyXCI6IDE1LCBcImJyZWFrSW5zaWRlXCI6IDE1LCBcInJlZ2lvbkZyYWdtZW50XCI6IDE1LCBcImdyaWRUZW1wbGF0ZUNvbHVtbnNcIjogMTUsIFwiZ3JpZFRlbXBsYXRlUm93c1wiOiAxNSwgXCJncmlkVGVtcGxhdGVBcmVhc1wiOiAxNSwgXCJncmlkVGVtcGxhdGVcIjogMTUsIFwiZ3JpZEF1dG9Db2x1bW5zXCI6IDE1LCBcImdyaWRBdXRvUm93c1wiOiAxNSwgXCJncmlkQXV0b0Zsb3dcIjogMTUsIFwiZ3JpZFwiOiAxNSwgXCJncmlkUm93U3RhcnRcIjogMTUsIFwiZ3JpZENvbHVtblN0YXJ0XCI6IDE1LCBcImdyaWRSb3dFbmRcIjogMTUsIFwiZ3JpZFJvd1wiOiAxNSwgXCJncmlkQ29sdW1uXCI6IDE1LCBcImdyaWRDb2x1bW5FbmRcIjogMTUsIFwiZ3JpZENvbHVtbkdhcFwiOiAxNSwgXCJncmlkUm93R2FwXCI6IDE1LCBcImdyaWRBcmVhXCI6IDE1LCBcImdyaWRHYXBcIjogMTUgfSwgXCJpb3Nfc2FmXCI6IHsgXCJmbGV4XCI6IDguMSwgXCJmbGV4QmFzaXNcIjogOC4xLCBcImZsZXhEaXJlY3Rpb25cIjogOC4xLCBcImZsZXhHcm93XCI6IDguMSwgXCJmbGV4Rmxvd1wiOiA4LjEsIFwiZmxleFNocmlua1wiOiA4LjEsIFwiZmxleFdyYXBcIjogOC4xLCBcImFsaWduQ29udGVudFwiOiA4LjEsIFwiYWxpZ25JdGVtc1wiOiA4LjEsIFwiYWxpZ25TZWxmXCI6IDguMSwgXCJqdXN0aWZ5Q29udGVudFwiOiA4LjEsIFwib3JkZXJcIjogOC4xLCBcInRyYW5zaXRpb25cIjogNiwgXCJ0cmFuc2l0aW9uRGVsYXlcIjogNiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIjogNiwgXCJ0cmFuc2l0aW9uUHJvcGVydHlcIjogNiwgXCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cIjogNiwgXCJ0cmFuc2Zvcm1cIjogOC4xLCBcInRyYW5zZm9ybU9yaWdpblwiOiA4LjEsIFwidHJhbnNmb3JtT3JpZ2luWFwiOiA4LjEsIFwidHJhbnNmb3JtT3JpZ2luWVwiOiA4LjEsIFwiYmFja2ZhY2VWaXNpYmlsaXR5XCI6IDguMSwgXCJwZXJzcGVjdGl2ZVwiOiA4LjEsIFwicGVyc3BlY3RpdmVPcmlnaW5cIjogOC4xLCBcInRyYW5zZm9ybVN0eWxlXCI6IDguMSwgXCJ0cmFuc2Zvcm1PcmlnaW5aXCI6IDguMSwgXCJhbmltYXRpb25cIjogOC4xLCBcImFuaW1hdGlvbkRlbGF5XCI6IDguMSwgXCJhbmltYXRpb25EaXJlY3Rpb25cIjogOC4xLCBcImFuaW1hdGlvbkZpbGxNb2RlXCI6IDguMSwgXCJhbmltYXRpb25EdXJhdGlvblwiOiA4LjEsIFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogOC4xLCBcImFuaW1hdGlvbk5hbWVcIjogOC4xLCBcImFuaW1hdGlvblBsYXlTdGF0ZVwiOiA4LjEsIFwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb25cIjogOC4xLCBcImFwcGVhcmFuY2VcIjogMTAsIFwidXNlclNlbGVjdFwiOiAxMCwgXCJiYWNrZHJvcEZpbHRlclwiOiAxMCwgXCJmb250S2VybmluZ1wiOiAxMCwgXCJzY3JvbGxTbmFwVHlwZVwiOiAxMCwgXCJzY3JvbGxTbmFwUG9pbnRzWFwiOiAxMCwgXCJzY3JvbGxTbmFwUG9pbnRzWVwiOiAxMCwgXCJzY3JvbGxTbmFwRGVzdGluYXRpb25cIjogMTAsIFwic2Nyb2xsU25hcENvb3JkaW5hdGVcIjogMTAsIFwiYm94RGVjb3JhdGlvbkJyZWFrXCI6IDEwLCBcImNsaXBQYXRoXCI6IDEwLCBcIm1hc2tJbWFnZVwiOiAxMCwgXCJtYXNrTW9kZVwiOiAxMCwgXCJtYXNrUmVwZWF0XCI6IDEwLCBcIm1hc2tQb3NpdGlvblwiOiAxMCwgXCJtYXNrQ2xpcFwiOiAxMCwgXCJtYXNrT3JpZ2luXCI6IDEwLCBcIm1hc2tTaXplXCI6IDEwLCBcIm1hc2tDb21wb3NpdGVcIjogMTAsIFwibWFza1wiOiAxMCwgXCJtYXNrQm9yZGVyU291cmNlXCI6IDEwLCBcIm1hc2tCb3JkZXJNb2RlXCI6IDEwLCBcIm1hc2tCb3JkZXJTbGljZVwiOiAxMCwgXCJtYXNrQm9yZGVyV2lkdGhcIjogMTAsIFwibWFza0JvcmRlck91dHNldFwiOiAxMCwgXCJtYXNrQm9yZGVyUmVwZWF0XCI6IDEwLCBcIm1hc2tCb3JkZXJcIjogMTAsIFwibWFza1R5cGVcIjogMTAsIFwidGV4dFNpemVBZGp1c3RcIjogMTAsIFwidGV4dERlY29yYXRpb25TdHlsZVwiOiAxMCwgXCJ0ZXh0RGVjb3JhdGlvblNraXBcIjogMTAsIFwidGV4dERlY29yYXRpb25MaW5lXCI6IDEwLCBcInRleHREZWNvcmF0aW9uQ29sb3JcIjogMTAsIFwic2hhcGVJbWFnZVRocmVzaG9sZFwiOiAxMCwgXCJzaGFwZUltYWdlTWFyZ2luXCI6IDEwLCBcInNoYXBlSW1hZ2VPdXRzaWRlXCI6IDEwLCBcImZpbHRlclwiOiA5LCBcImh5cGhlbnNcIjogMTAsIFwiZmxvd0ludG9cIjogMTAsIFwiZmxvd0Zyb21cIjogMTAsIFwiYnJlYWtCZWZvcmVcIjogOC4xLCBcImJyZWFrQWZ0ZXJcIjogOC4xLCBcImJyZWFrSW5zaWRlXCI6IDguMSwgXCJyZWdpb25GcmFnbWVudFwiOiAxMCwgXCJjb2x1bW5Db3VudFwiOiA4LjEsIFwiY29sdW1uRmlsbFwiOiA4LjEsIFwiY29sdW1uR2FwXCI6IDguMSwgXCJjb2x1bW5SdWxlXCI6IDguMSwgXCJjb2x1bW5SdWxlQ29sb3JcIjogOC4xLCBcImNvbHVtblJ1bGVTdHlsZVwiOiA4LjEsIFwiY29sdW1uUnVsZVdpZHRoXCI6IDguMSwgXCJjb2x1bW5zXCI6IDguMSwgXCJjb2x1bW5TcGFuXCI6IDguMSwgXCJjb2x1bW5XaWR0aFwiOiA4LjEgfSwgXCJhbmRyb2lkXCI6IHsgXCJib3JkZXJJbWFnZVwiOiA0LjIsIFwiYm9yZGVySW1hZ2VPdXRzZXRcIjogNC4yLCBcImJvcmRlckltYWdlUmVwZWF0XCI6IDQuMiwgXCJib3JkZXJJbWFnZVNsaWNlXCI6IDQuMiwgXCJib3JkZXJJbWFnZVNvdXJjZVwiOiA0LjIsIFwiYm9yZGVySW1hZ2VXaWR0aFwiOiA0LjIsIFwiZmxleFwiOiA0LjIsIFwiZmxleEJhc2lzXCI6IDQuMiwgXCJmbGV4RGlyZWN0aW9uXCI6IDQuMiwgXCJmbGV4R3Jvd1wiOiA0LjIsIFwiZmxleEZsb3dcIjogNC4yLCBcImZsZXhTaHJpbmtcIjogNC4yLCBcImZsZXhXcmFwXCI6IDQuMiwgXCJhbGlnbkNvbnRlbnRcIjogNC4yLCBcImFsaWduSXRlbXNcIjogNC4yLCBcImFsaWduU2VsZlwiOiA0LjIsIFwianVzdGlmeUNvbnRlbnRcIjogNC4yLCBcIm9yZGVyXCI6IDQuMiwgXCJ0cmFuc2l0aW9uXCI6IDQuMiwgXCJ0cmFuc2l0aW9uRGVsYXlcIjogNC4yLCBcInRyYW5zaXRpb25EdXJhdGlvblwiOiA0LjIsIFwidHJhbnNpdGlvblByb3BlcnR5XCI6IDQuMiwgXCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cIjogNC4yLCBcInRyYW5zZm9ybVwiOiA0LjQsIFwidHJhbnNmb3JtT3JpZ2luXCI6IDQuNCwgXCJ0cmFuc2Zvcm1PcmlnaW5YXCI6IDQuNCwgXCJ0cmFuc2Zvcm1PcmlnaW5ZXCI6IDQuNCwgXCJiYWNrZmFjZVZpc2liaWxpdHlcIjogNC40LCBcInBlcnNwZWN0aXZlXCI6IDQuNCwgXCJwZXJzcGVjdGl2ZU9yaWdpblwiOiA0LjQsIFwidHJhbnNmb3JtU3R5bGVcIjogNC40LCBcInRyYW5zZm9ybU9yaWdpblpcIjogNC40LCBcImFuaW1hdGlvblwiOiA0LjQsIFwiYW5pbWF0aW9uRGVsYXlcIjogNC40LCBcImFuaW1hdGlvbkRpcmVjdGlvblwiOiA0LjQsIFwiYW5pbWF0aW9uRmlsbE1vZGVcIjogNC40LCBcImFuaW1hdGlvbkR1cmF0aW9uXCI6IDQuNCwgXCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiA0LjQsIFwiYW5pbWF0aW9uTmFtZVwiOiA0LjQsIFwiYW5pbWF0aW9uUGxheVN0YXRlXCI6IDQuNCwgXCJhbmltYXRpb25UaW1pbmdGdW5jdGlvblwiOiA0LjQsIFwiYXBwZWFyYW5jZVwiOiA1MywgXCJ1c2VyU2VsZWN0XCI6IDUzLCBcImZvbnRLZXJuaW5nXCI6IDQuNCwgXCJ0ZXh0RW1waGFzaXNQb3NpdGlvblwiOiA1MywgXCJ0ZXh0RW1waGFzaXNcIjogNTMsIFwidGV4dEVtcGhhc2lzU3R5bGVcIjogNTMsIFwidGV4dEVtcGhhc2lzQ29sb3JcIjogNTMsIFwiYm94RGVjb3JhdGlvbkJyZWFrXCI6IDUzLCBcImNsaXBQYXRoXCI6IDUzLCBcIm1hc2tJbWFnZVwiOiA1MywgXCJtYXNrTW9kZVwiOiA1MywgXCJtYXNrUmVwZWF0XCI6IDUzLCBcIm1hc2tQb3NpdGlvblwiOiA1MywgXCJtYXNrQ2xpcFwiOiA1MywgXCJtYXNrT3JpZ2luXCI6IDUzLCBcIm1hc2tTaXplXCI6IDUzLCBcIm1hc2tDb21wb3NpdGVcIjogNTMsIFwibWFza1wiOiA1MywgXCJtYXNrQm9yZGVyU291cmNlXCI6IDUzLCBcIm1hc2tCb3JkZXJNb2RlXCI6IDUzLCBcIm1hc2tCb3JkZXJTbGljZVwiOiA1MywgXCJtYXNrQm9yZGVyV2lkdGhcIjogNTMsIFwibWFza0JvcmRlck91dHNldFwiOiA1MywgXCJtYXNrQm9yZGVyUmVwZWF0XCI6IDUzLCBcIm1hc2tCb3JkZXJcIjogNTMsIFwibWFza1R5cGVcIjogNTMsIFwiZmlsdGVyXCI6IDQuNCwgXCJmb250RmVhdHVyZVNldHRpbmdzXCI6IDQuNCwgXCJicmVha0FmdGVyXCI6IDUzLCBcImJyZWFrQmVmb3JlXCI6IDUzLCBcImJyZWFrSW5zaWRlXCI6IDUzLCBcImNvbHVtbkNvdW50XCI6IDUzLCBcImNvbHVtbkZpbGxcIjogNTMsIFwiY29sdW1uR2FwXCI6IDUzLCBcImNvbHVtblJ1bGVcIjogNTMsIFwiY29sdW1uUnVsZUNvbG9yXCI6IDUzLCBcImNvbHVtblJ1bGVTdHlsZVwiOiA1MywgXCJjb2x1bW5SdWxlV2lkdGhcIjogNTMsIFwiY29sdW1uc1wiOiA1MywgXCJjb2x1bW5TcGFuXCI6IDUzLCBcImNvbHVtbldpZHRoXCI6IDUzIH0sIFwiYW5kX2NoclwiOiB7IFwiYXBwZWFyYW5jZVwiOiA1NiwgXCJ0ZXh0RW1waGFzaXNQb3NpdGlvblwiOiA1NiwgXCJ0ZXh0RW1waGFzaXNcIjogNTYsIFwidGV4dEVtcGhhc2lzU3R5bGVcIjogNTYsIFwidGV4dEVtcGhhc2lzQ29sb3JcIjogNTYsIFwiYm94RGVjb3JhdGlvbkJyZWFrXCI6IDU2LCBcIm1hc2tJbWFnZVwiOiA1NiwgXCJtYXNrTW9kZVwiOiA1NiwgXCJtYXNrUmVwZWF0XCI6IDU2LCBcIm1hc2tQb3NpdGlvblwiOiA1NiwgXCJtYXNrQ2xpcFwiOiA1NiwgXCJtYXNrT3JpZ2luXCI6IDU2LCBcIm1hc2tTaXplXCI6IDU2LCBcIm1hc2tDb21wb3NpdGVcIjogNTYsIFwibWFza1wiOiA1NiwgXCJtYXNrQm9yZGVyU291cmNlXCI6IDU2LCBcIm1hc2tCb3JkZXJNb2RlXCI6IDU2LCBcIm1hc2tCb3JkZXJTbGljZVwiOiA1NiwgXCJtYXNrQm9yZGVyV2lkdGhcIjogNTYsIFwibWFza0JvcmRlck91dHNldFwiOiA1NiwgXCJtYXNrQm9yZGVyUmVwZWF0XCI6IDU2LCBcIm1hc2tCb3JkZXJcIjogNTYsIFwibWFza1R5cGVcIjogNTYsIFwidGV4dERlY29yYXRpb25TdHlsZVwiOiA1NiwgXCJ0ZXh0RGVjb3JhdGlvblNraXBcIjogNTYsIFwidGV4dERlY29yYXRpb25MaW5lXCI6IDU2LCBcInRleHREZWNvcmF0aW9uQ29sb3JcIjogNTYgfSwgXCJhbmRfdWNcIjogeyBcImZsZXhcIjogMTEsIFwiZmxleEJhc2lzXCI6IDExLCBcImZsZXhEaXJlY3Rpb25cIjogMTEsIFwiZmxleEdyb3dcIjogMTEsIFwiZmxleEZsb3dcIjogMTEsIFwiZmxleFNocmlua1wiOiAxMSwgXCJmbGV4V3JhcFwiOiAxMSwgXCJhbGlnbkNvbnRlbnRcIjogMTEsIFwiYWxpZ25JdGVtc1wiOiAxMSwgXCJhbGlnblNlbGZcIjogMTEsIFwianVzdGlmeUNvbnRlbnRcIjogMTEsIFwib3JkZXJcIjogMTEsIFwidHJhbnNpdGlvblwiOiAxMSwgXCJ0cmFuc2l0aW9uRGVsYXlcIjogMTEsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCI6IDExLCBcInRyYW5zaXRpb25Qcm9wZXJ0eVwiOiAxMSwgXCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cIjogMTEsIFwidHJhbnNmb3JtXCI6IDExLCBcInRyYW5zZm9ybU9yaWdpblwiOiAxMSwgXCJ0cmFuc2Zvcm1PcmlnaW5YXCI6IDExLCBcInRyYW5zZm9ybU9yaWdpbllcIjogMTEsIFwiYmFja2ZhY2VWaXNpYmlsaXR5XCI6IDExLCBcInBlcnNwZWN0aXZlXCI6IDExLCBcInBlcnNwZWN0aXZlT3JpZ2luXCI6IDExLCBcInRyYW5zZm9ybVN0eWxlXCI6IDExLCBcInRyYW5zZm9ybU9yaWdpblpcIjogMTEsIFwiYW5pbWF0aW9uXCI6IDExLCBcImFuaW1hdGlvbkRlbGF5XCI6IDExLCBcImFuaW1hdGlvbkRpcmVjdGlvblwiOiAxMSwgXCJhbmltYXRpb25GaWxsTW9kZVwiOiAxMSwgXCJhbmltYXRpb25EdXJhdGlvblwiOiAxMSwgXCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiAxMSwgXCJhbmltYXRpb25OYW1lXCI6IDExLCBcImFuaW1hdGlvblBsYXlTdGF0ZVwiOiAxMSwgXCJhbmltYXRpb25UaW1pbmdGdW5jdGlvblwiOiAxMSwgXCJhcHBlYXJhbmNlXCI6IDExLCBcInVzZXJTZWxlY3RcIjogMTEsIFwiZm9udEtlcm5pbmdcIjogMTEsIFwidGV4dEVtcGhhc2lzUG9zaXRpb25cIjogMTEsIFwidGV4dEVtcGhhc2lzXCI6IDExLCBcInRleHRFbXBoYXNpc1N0eWxlXCI6IDExLCBcInRleHRFbXBoYXNpc0NvbG9yXCI6IDExLCBcIm1hc2tJbWFnZVwiOiAxMSwgXCJtYXNrTW9kZVwiOiAxMSwgXCJtYXNrUmVwZWF0XCI6IDExLCBcIm1hc2tQb3NpdGlvblwiOiAxMSwgXCJtYXNrQ2xpcFwiOiAxMSwgXCJtYXNrT3JpZ2luXCI6IDExLCBcIm1hc2tTaXplXCI6IDExLCBcIm1hc2tDb21wb3NpdGVcIjogMTEsIFwibWFza1wiOiAxMSwgXCJtYXNrQm9yZGVyU291cmNlXCI6IDExLCBcIm1hc2tCb3JkZXJNb2RlXCI6IDExLCBcIm1hc2tCb3JkZXJTbGljZVwiOiAxMSwgXCJtYXNrQm9yZGVyV2lkdGhcIjogMTEsIFwibWFza0JvcmRlck91dHNldFwiOiAxMSwgXCJtYXNrQm9yZGVyUmVwZWF0XCI6IDExLCBcIm1hc2tCb3JkZXJcIjogMTEsIFwibWFza1R5cGVcIjogMTEsIFwidGV4dFNpemVBZGp1c3RcIjogMTEsIFwiZmlsdGVyXCI6IDExLCBcImh5cGhlbnNcIjogMTEsIFwiZmxvd0ludG9cIjogMTEsIFwiZmxvd0Zyb21cIjogMTEsIFwiYnJlYWtCZWZvcmVcIjogMTEsIFwiYnJlYWtBZnRlclwiOiAxMSwgXCJicmVha0luc2lkZVwiOiAxMSwgXCJyZWdpb25GcmFnbWVudFwiOiAxMSwgXCJmb250RmVhdHVyZVNldHRpbmdzXCI6IDExLCBcImNvbHVtbkNvdW50XCI6IDExLCBcImNvbHVtbkZpbGxcIjogMTEsIFwiY29sdW1uR2FwXCI6IDExLCBcImNvbHVtblJ1bGVcIjogMTEsIFwiY29sdW1uUnVsZUNvbG9yXCI6IDExLCBcImNvbHVtblJ1bGVTdHlsZVwiOiAxMSwgXCJjb2x1bW5SdWxlV2lkdGhcIjogMTEsIFwiY29sdW1uc1wiOiAxMSwgXCJjb2x1bW5TcGFuXCI6IDExLCBcImNvbHVtbldpZHRoXCI6IDExIH0sIFwib3BfbWluaVwiOiB7fSB9XG59OyAvKiBlc2xpbnQtZGlzYWJsZSAqLyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldFByZWZpeGVkS2V5ZnJhbWVzO1xuZnVuY3Rpb24gZ2V0UHJlZml4ZWRLZXlmcmFtZXMoYnJvd3Nlck5hbWUsIGJyb3dzZXJWZXJzaW9uLCBjc3NQcmVmaXgpIHtcbiAgdmFyIHByZWZpeGVkS2V5ZnJhbWVzID0gJ2tleWZyYW1lcyc7XG5cbiAgaWYgKGJyb3dzZXJOYW1lID09PSAnY2hyb21lJyAmJiBicm93c2VyVmVyc2lvbiA8IDQzIHx8IChicm93c2VyTmFtZSA9PT0gJ3NhZmFyaScgfHwgYnJvd3Nlck5hbWUgPT09ICdpb3Nfc2FmJykgJiYgYnJvd3NlclZlcnNpb24gPCA5IHx8IGJyb3dzZXJOYW1lID09PSAnb3BlcmEnICYmIGJyb3dzZXJWZXJzaW9uIDwgMzAgfHwgYnJvd3Nlck5hbWUgPT09ICdhbmRyb2lkJyAmJiBicm93c2VyVmVyc2lvbiA8PSA0LjQgfHwgYnJvd3Nlck5hbWUgPT09ICdhbmRfdWMnKSB7XG4gICAgcmV0dXJuIGNzc1ByZWZpeCArIHByZWZpeGVkS2V5ZnJhbWVzO1xuICB9XG4gIHJldHVybiBwcmVmaXhlZEtleWZyYW1lcztcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XHJcblx0dGhyb3cgbmV3IEVycm9yKFwiZGVmaW5lIGNhbm5vdCBiZSB1c2VkIGluZGlyZWN0XCIpO1xyXG59O1xyXG4iLCIvKiFcbiAqIEJvd3NlciAtIGEgYnJvd3NlciBkZXRlY3RvclxuICogaHR0cHM6Ly9naXRodWIuY29tL2RlZC9ib3dzZXJcbiAqIE1JVCBMaWNlbnNlIHwgKGMpIER1c3RpbiBEaWF6IDIwMTVcbiAqL1xuXG4hZnVuY3Rpb24gKHJvb3QsIG5hbWUsIGRlZmluaXRpb24pIHtcbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpXG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSBkZWZpbmUobmFtZSwgZGVmaW5pdGlvbilcbiAgZWxzZSByb290W25hbWVdID0gZGVmaW5pdGlvbigpXG59KHRoaXMsICdib3dzZXInLCBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgICogU2VlIHVzZXJhZ2VudHMuanMgZm9yIGV4YW1wbGVzIG9mIG5hdmlnYXRvci51c2VyQWdlbnRcbiAgICAqL1xuXG4gIHZhciB0ID0gdHJ1ZVxuXG4gIGZ1bmN0aW9uIGRldGVjdCh1YSkge1xuXG4gICAgZnVuY3Rpb24gZ2V0Rmlyc3RNYXRjaChyZWdleCkge1xuICAgICAgdmFyIG1hdGNoID0gdWEubWF0Y2gocmVnZXgpO1xuICAgICAgcmV0dXJuIChtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxICYmIG1hdGNoWzFdKSB8fCAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZWNvbmRNYXRjaChyZWdleCkge1xuICAgICAgdmFyIG1hdGNoID0gdWEubWF0Y2gocmVnZXgpO1xuICAgICAgcmV0dXJuIChtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxICYmIG1hdGNoWzJdKSB8fCAnJztcbiAgICB9XG5cbiAgICB2YXIgaW9zZGV2aWNlID0gZ2V0Rmlyc3RNYXRjaCgvKGlwb2R8aXBob25lfGlwYWQpL2kpLnRvTG93ZXJDYXNlKClcbiAgICAgICwgbGlrZUFuZHJvaWQgPSAvbGlrZSBhbmRyb2lkL2kudGVzdCh1YSlcbiAgICAgICwgYW5kcm9pZCA9ICFsaWtlQW5kcm9pZCAmJiAvYW5kcm9pZC9pLnRlc3QodWEpXG4gICAgICAsIG5leHVzTW9iaWxlID0gL25leHVzXFxzKlswLTZdXFxzKi9pLnRlc3QodWEpXG4gICAgICAsIG5leHVzVGFibGV0ID0gIW5leHVzTW9iaWxlICYmIC9uZXh1c1xccypbMC05XSsvaS50ZXN0KHVhKVxuICAgICAgLCBjaHJvbWVvcyA9IC9Dck9TLy50ZXN0KHVhKVxuICAgICAgLCBzaWxrID0gL3NpbGsvaS50ZXN0KHVhKVxuICAgICAgLCBzYWlsZmlzaCA9IC9zYWlsZmlzaC9pLnRlc3QodWEpXG4gICAgICAsIHRpemVuID0gL3RpemVuL2kudGVzdCh1YSlcbiAgICAgICwgd2Vib3MgPSAvKHdlYnxocHcpb3MvaS50ZXN0KHVhKVxuICAgICAgLCB3aW5kb3dzcGhvbmUgPSAvd2luZG93cyBwaG9uZS9pLnRlc3QodWEpXG4gICAgICAsIHNhbXN1bmdCcm93c2VyID0gL1NhbXN1bmdCcm93c2VyL2kudGVzdCh1YSlcbiAgICAgICwgd2luZG93cyA9ICF3aW5kb3dzcGhvbmUgJiYgL3dpbmRvd3MvaS50ZXN0KHVhKVxuICAgICAgLCBtYWMgPSAhaW9zZGV2aWNlICYmICFzaWxrICYmIC9tYWNpbnRvc2gvaS50ZXN0KHVhKVxuICAgICAgLCBsaW51eCA9ICFhbmRyb2lkICYmICFzYWlsZmlzaCAmJiAhdGl6ZW4gJiYgIXdlYm9zICYmIC9saW51eC9pLnRlc3QodWEpXG4gICAgICAsIGVkZ2VWZXJzaW9uID0gZ2V0U2Vjb25kTWF0Y2goL2VkZyhbZWFdfGlvcylcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICAsIHZlcnNpb25JZGVudGlmaWVyID0gZ2V0Rmlyc3RNYXRjaCgvdmVyc2lvblxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgICwgdGFibGV0ID0gL3RhYmxldC9pLnRlc3QodWEpICYmICEvdGFibGV0IHBjL2kudGVzdCh1YSlcbiAgICAgICwgbW9iaWxlID0gIXRhYmxldCAmJiAvW14tXW1vYmkvaS50ZXN0KHVhKVxuICAgICAgLCB4Ym94ID0gL3hib3gvaS50ZXN0KHVhKVxuICAgICAgLCByZXN1bHRcblxuICAgIGlmICgvb3BlcmEvaS50ZXN0KHVhKSkge1xuICAgICAgLy8gIGFuIG9sZCBPcGVyYVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnT3BlcmEnXG4gICAgICAsIG9wZXJhOiB0XG4gICAgICAsIHZlcnNpb246IHZlcnNpb25JZGVudGlmaWVyIHx8IGdldEZpcnN0TWF0Y2goLyg/Om9wZXJhfG9wcnxvcGlvcylbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKC9vcHJcXC98b3Bpb3MvaS50ZXN0KHVhKSkge1xuICAgICAgLy8gYSBuZXcgT3BlcmFcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ09wZXJhJ1xuICAgICAgICAsIG9wZXJhOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86b3ByfG9waW9zKVtcXHNcXC9dKFxcZCsoXFwuXFxkKyk/KS9pKSB8fCB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvU2Ftc3VuZ0Jyb3dzZXIvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnU2Ftc3VuZyBJbnRlcm5ldCBmb3IgQW5kcm9pZCdcbiAgICAgICAgLCBzYW1zdW5nQnJvd3NlcjogdFxuICAgICAgICAsIHZlcnNpb246IHZlcnNpb25JZGVudGlmaWVyIHx8IGdldEZpcnN0TWF0Y2goLyg/OlNhbXN1bmdCcm93c2VyKVtcXHNcXC9dKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvY29hc3QvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnT3BlcmEgQ29hc3QnXG4gICAgICAgICwgY29hc3Q6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiB2ZXJzaW9uSWRlbnRpZmllciB8fCBnZXRGaXJzdE1hdGNoKC8oPzpjb2FzdClbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL3lhYnJvd3Nlci9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdZYW5kZXggQnJvd3NlcidcbiAgICAgICwgeWFuZGV4YnJvd3NlcjogdFxuICAgICAgLCB2ZXJzaW9uOiB2ZXJzaW9uSWRlbnRpZmllciB8fCBnZXRGaXJzdE1hdGNoKC8oPzp5YWJyb3dzZXIpW1xcc1xcL10oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC91Y2Jyb3dzZXIvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIG5hbWU6ICdVQyBCcm93c2VyJ1xuICAgICAgICAsIHVjYnJvd3NlcjogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OnVjYnJvd3NlcilbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvbXhpb3MvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnTWF4dGhvbidcbiAgICAgICAgLCBtYXh0aG9uOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86bXhpb3MpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL2VwaXBoYW55L2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0VwaXBoYW55J1xuICAgICAgICAsIGVwaXBoYW55OiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86ZXBpcGhhbnkpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL3B1ZmZpbi9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdQdWZmaW4nXG4gICAgICAgICwgcHVmZmluOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86cHVmZmluKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9zbGVpcG5pci9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdTbGVpcG5pcidcbiAgICAgICAgLCBzbGVpcG5pcjogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OnNsZWlwbmlyKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9rLW1lbGVvbi9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdLLU1lbGVvbidcbiAgICAgICAgLCBrTWVsZW9uOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86ay1tZWxlb24pW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAod2luZG93c3Bob25lKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdXaW5kb3dzIFBob25lJ1xuICAgICAgLCBvc25hbWU6ICdXaW5kb3dzIFBob25lJ1xuICAgICAgLCB3aW5kb3dzcGhvbmU6IHRcbiAgICAgIH1cbiAgICAgIGlmIChlZGdlVmVyc2lvbikge1xuICAgICAgICByZXN1bHQubXNlZGdlID0gdFxuICAgICAgICByZXN1bHQudmVyc2lvbiA9IGVkZ2VWZXJzaW9uXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0Lm1zaWUgPSB0XG4gICAgICAgIHJlc3VsdC52ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvaWVtb2JpbGVcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9tc2llfHRyaWRlbnQvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnSW50ZXJuZXQgRXhwbG9yZXInXG4gICAgICAsIG1zaWU6IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86bXNpZSB8cnY6KShcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNocm9tZW9zKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdDaHJvbWUnXG4gICAgICAsIG9zbmFtZTogJ0Nocm9tZSBPUydcbiAgICAgICwgY2hyb21lb3M6IHRcbiAgICAgICwgY2hyb21lQm9vazogdFxuICAgICAgLCBjaHJvbWU6IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86Y2hyb21lfGNyaW9zfGNybW8pXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoL2VkZyhbZWFdfGlvcykvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnTWljcm9zb2Z0IEVkZ2UnXG4gICAgICAsIG1zZWRnZTogdFxuICAgICAgLCB2ZXJzaW9uOiBlZGdlVmVyc2lvblxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvdml2YWxkaS9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdWaXZhbGRpJ1xuICAgICAgICAsIHZpdmFsZGk6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC92aXZhbGRpXFwvKFxcZCsoXFwuXFxkKyk/KS9pKSB8fCB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChzYWlsZmlzaCkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnU2FpbGZpc2gnXG4gICAgICAsIG9zbmFtZTogJ1NhaWxmaXNoIE9TJ1xuICAgICAgLCBzYWlsZmlzaDogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC9zYWlsZmlzaFxccz9icm93c2VyXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvc2VhbW9ua2V5XFwvL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1NlYU1vbmtleSdcbiAgICAgICwgc2VhbW9ua2V5OiB0XG4gICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goL3NlYW1vbmtleVxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL2ZpcmVmb3h8aWNld2Vhc2VsfGZ4aW9zL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0ZpcmVmb3gnXG4gICAgICAsIGZpcmVmb3g6IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86ZmlyZWZveHxpY2V3ZWFzZWx8Znhpb3MpWyBcXC9dKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgICAgaWYgKC9cXCgobW9iaWxlfHRhYmxldCk7W15cXCldKnJ2OltcXGRcXC5dK1xcKS9pLnRlc3QodWEpKSB7XG4gICAgICAgIHJlc3VsdC5maXJlZm94b3MgPSB0XG4gICAgICAgIHJlc3VsdC5vc25hbWUgPSAnRmlyZWZveCBPUydcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoc2lsaykge1xuICAgICAgcmVzdWx0ID0gIHtcbiAgICAgICAgbmFtZTogJ0FtYXpvbiBTaWxrJ1xuICAgICAgLCBzaWxrOiB0XG4gICAgICAsIHZlcnNpb24gOiBnZXRGaXJzdE1hdGNoKC9zaWxrXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvcGhhbnRvbS9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdQaGFudG9tSlMnXG4gICAgICAsIHBoYW50b206IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvcGhhbnRvbWpzXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvc2xpbWVyanMvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnU2xpbWVySlMnXG4gICAgICAgICwgc2xpbWVyOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvc2xpbWVyanNcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9ibGFja2JlcnJ5fFxcYmJiXFxkKy9pLnRlc3QodWEpIHx8IC9yaW1cXHN0YWJsZXQvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnQmxhY2tCZXJyeSdcbiAgICAgICwgb3NuYW1lOiAnQmxhY2tCZXJyeSBPUydcbiAgICAgICwgYmxhY2tiZXJyeTogdFxuICAgICAgLCB2ZXJzaW9uOiB2ZXJzaW9uSWRlbnRpZmllciB8fCBnZXRGaXJzdE1hdGNoKC9ibGFja2JlcnJ5W1xcZF0rXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh3ZWJvcykge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnV2ViT1MnXG4gICAgICAsIG9zbmFtZTogJ1dlYk9TJ1xuICAgICAgLCB3ZWJvczogdFxuICAgICAgLCB2ZXJzaW9uOiB2ZXJzaW9uSWRlbnRpZmllciB8fCBnZXRGaXJzdE1hdGNoKC93KD86ZWIpP29zYnJvd3NlclxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH07XG4gICAgICAvdG91Y2hwYWRcXC8vaS50ZXN0KHVhKSAmJiAocmVzdWx0LnRvdWNocGFkID0gdClcbiAgICB9XG4gICAgZWxzZSBpZiAoL2JhZGEvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnQmFkYSdcbiAgICAgICwgb3NuYW1lOiAnQmFkYSdcbiAgICAgICwgYmFkYTogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC9kb2xmaW5cXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmICh0aXplbikge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnVGl6ZW4nXG4gICAgICAsIG9zbmFtZTogJ1RpemVuJ1xuICAgICAgLCB0aXplbjogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzp0aXplblxccz8pP2Jyb3dzZXJcXC8oXFxkKyhcXC5cXGQrKT8pL2kpIHx8IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmICgvcXVwemlsbGEvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnUXVwWmlsbGEnXG4gICAgICAgICwgcXVwemlsbGE6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpxdXB6aWxsYSlbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKSB8fCB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvY2hyb21pdW0vaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnQ2hyb21pdW0nXG4gICAgICAgICwgY2hyb21pdW06IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpjaHJvbWl1bSlbXFxzXFwvXShcXGQrKD86XFwuXFxkKyk/KS9pKSB8fCB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvY2hyb21lfGNyaW9zfGNybW8vaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnQ2hyb21lJ1xuICAgICAgICAsIGNocm9tZTogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OmNocm9tZXxjcmlvc3xjcm1vKVxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYW5kcm9pZCkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnQW5kcm9pZCdcbiAgICAgICAgLCB2ZXJzaW9uOiB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvc2FmYXJpfGFwcGxld2Via2l0L2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1NhZmFyaSdcbiAgICAgICwgc2FmYXJpOiB0XG4gICAgICB9XG4gICAgICBpZiAodmVyc2lvbklkZW50aWZpZXIpIHtcbiAgICAgICAgcmVzdWx0LnZlcnNpb24gPSB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpb3NkZXZpY2UpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZSA6IGlvc2RldmljZSA9PSAnaXBob25lJyA/ICdpUGhvbmUnIDogaW9zZGV2aWNlID09ICdpcGFkJyA/ICdpUGFkJyA6ICdpUG9kJ1xuICAgICAgfVxuICAgICAgLy8gV1RGOiB2ZXJzaW9uIGlzIG5vdCBwYXJ0IG9mIHVzZXIgYWdlbnQgaW4gd2ViIGFwcHNcbiAgICAgIGlmICh2ZXJzaW9uSWRlbnRpZmllcikge1xuICAgICAgICByZXN1bHQudmVyc2lvbiA9IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYoL2dvb2dsZWJvdC9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdHb29nbGVib3QnXG4gICAgICAsIGdvb2dsZWJvdDogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC9nb29nbGVib3RcXC8oXFxkKyhcXC5cXGQrKSkvaSkgfHwgdmVyc2lvbklkZW50aWZpZXJcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6IGdldEZpcnN0TWF0Y2goL14oLiopXFwvKC4qKSAvKSxcbiAgICAgICAgdmVyc2lvbjogZ2V0U2Vjb25kTWF0Y2goL14oLiopXFwvKC4qKSAvKVxuICAgICB9O1xuICAgfVxuXG4gICAgLy8gc2V0IHdlYmtpdCBvciBnZWNrbyBmbGFnIGZvciBicm93c2VycyBiYXNlZCBvbiB0aGVzZSBlbmdpbmVzXG4gICAgaWYgKCFyZXN1bHQubXNlZGdlICYmIC8oYXBwbGUpP3dlYmtpdC9pLnRlc3QodWEpKSB7XG4gICAgICBpZiAoLyhhcHBsZSk/d2Via2l0XFwvNTM3XFwuMzYvaS50ZXN0KHVhKSkge1xuICAgICAgICByZXN1bHQubmFtZSA9IHJlc3VsdC5uYW1lIHx8IFwiQmxpbmtcIlxuICAgICAgICByZXN1bHQuYmxpbmsgPSB0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQubmFtZSA9IHJlc3VsdC5uYW1lIHx8IFwiV2Via2l0XCJcbiAgICAgICAgcmVzdWx0LndlYmtpdCA9IHRcbiAgICAgIH1cbiAgICAgIGlmICghcmVzdWx0LnZlcnNpb24gJiYgdmVyc2lvbklkZW50aWZpZXIpIHtcbiAgICAgICAgcmVzdWx0LnZlcnNpb24gPSB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXJlc3VsdC5vcGVyYSAmJiAvZ2Vja29cXC8vaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0Lm5hbWUgPSByZXN1bHQubmFtZSB8fCBcIkdlY2tvXCJcbiAgICAgIHJlc3VsdC5nZWNrbyA9IHRcbiAgICAgIHJlc3VsdC52ZXJzaW9uID0gcmVzdWx0LnZlcnNpb24gfHwgZ2V0Rmlyc3RNYXRjaCgvZ2Vja29cXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgfVxuXG4gICAgLy8gc2V0IE9TIGZsYWdzIGZvciBwbGF0Zm9ybXMgdGhhdCBoYXZlIG11bHRpcGxlIGJyb3dzZXJzXG4gICAgaWYgKCFyZXN1bHQud2luZG93c3Bob25lICYmIChhbmRyb2lkIHx8IHJlc3VsdC5zaWxrKSkge1xuICAgICAgcmVzdWx0LmFuZHJvaWQgPSB0XG4gICAgICByZXN1bHQub3NuYW1lID0gJ0FuZHJvaWQnXG4gICAgfSBlbHNlIGlmICghcmVzdWx0LndpbmRvd3NwaG9uZSAmJiBpb3NkZXZpY2UpIHtcbiAgICAgIHJlc3VsdFtpb3NkZXZpY2VdID0gdFxuICAgICAgcmVzdWx0LmlvcyA9IHRcbiAgICAgIHJlc3VsdC5vc25hbWUgPSAnaU9TJ1xuICAgIH0gZWxzZSBpZiAobWFjKSB7XG4gICAgICByZXN1bHQubWFjID0gdFxuICAgICAgcmVzdWx0Lm9zbmFtZSA9ICdtYWNPUydcbiAgICB9IGVsc2UgaWYgKHhib3gpIHtcbiAgICAgIHJlc3VsdC54Ym94ID0gdFxuICAgICAgcmVzdWx0Lm9zbmFtZSA9ICdYYm94J1xuICAgIH0gZWxzZSBpZiAod2luZG93cykge1xuICAgICAgcmVzdWx0LndpbmRvd3MgPSB0XG4gICAgICByZXN1bHQub3NuYW1lID0gJ1dpbmRvd3MnXG4gICAgfSBlbHNlIGlmIChsaW51eCkge1xuICAgICAgcmVzdWx0LmxpbnV4ID0gdFxuICAgICAgcmVzdWx0Lm9zbmFtZSA9ICdMaW51eCdcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXaW5kb3dzVmVyc2lvbiAocykge1xuICAgICAgc3dpdGNoIChzKSB7XG4gICAgICAgIGNhc2UgJ05UJzogcmV0dXJuICdOVCdcbiAgICAgICAgY2FzZSAnWFAnOiByZXR1cm4gJ1hQJ1xuICAgICAgICBjYXNlICdOVCA1LjAnOiByZXR1cm4gJzIwMDAnXG4gICAgICAgIGNhc2UgJ05UIDUuMSc6IHJldHVybiAnWFAnXG4gICAgICAgIGNhc2UgJ05UIDUuMic6IHJldHVybiAnMjAwMydcbiAgICAgICAgY2FzZSAnTlQgNi4wJzogcmV0dXJuICdWaXN0YSdcbiAgICAgICAgY2FzZSAnTlQgNi4xJzogcmV0dXJuICc3J1xuICAgICAgICBjYXNlICdOVCA2LjInOiByZXR1cm4gJzgnXG4gICAgICAgIGNhc2UgJ05UIDYuMyc6IHJldHVybiAnOC4xJ1xuICAgICAgICBjYXNlICdOVCAxMC4wJzogcmV0dXJuICcxMCdcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9TIHZlcnNpb24gZXh0cmFjdGlvblxuICAgIHZhciBvc1ZlcnNpb24gPSAnJztcbiAgICBpZiAocmVzdWx0LndpbmRvd3MpIHtcbiAgICAgIG9zVmVyc2lvbiA9IGdldFdpbmRvd3NWZXJzaW9uKGdldEZpcnN0TWF0Y2goL1dpbmRvd3MgKChOVHxYUCkoIFxcZFxcZD8uXFxkKT8pL2kpKVxuICAgIH0gZWxzZSBpZiAocmVzdWx0LndpbmRvd3NwaG9uZSkge1xuICAgICAgb3NWZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvd2luZG93cyBwaG9uZSAoPzpvcyk/XFxzPyhcXGQrKFxcLlxcZCspKikvaSk7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQubWFjKSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9NYWMgT1MgWCAoXFxkKyhbX1xcLlxcc11cXGQrKSopL2kpO1xuICAgICAgb3NWZXJzaW9uID0gb3NWZXJzaW9uLnJlcGxhY2UoL1tfXFxzXS9nLCAnLicpO1xuICAgIH0gZWxzZSBpZiAoaW9zZGV2aWNlKSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9vcyAoXFxkKyhbX1xcc11cXGQrKSopIGxpa2UgbWFjIG9zIHgvaSk7XG4gICAgICBvc1ZlcnNpb24gPSBvc1ZlcnNpb24ucmVwbGFjZSgvW19cXHNdL2csICcuJyk7XG4gICAgfSBlbHNlIGlmIChhbmRyb2lkKSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9hbmRyb2lkWyBcXC8tXShcXGQrKFxcLlxcZCspKikvaSk7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQud2Vib3MpIHtcbiAgICAgIG9zVmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goLyg/OndlYnxocHcpb3NcXC8oXFxkKyhcXC5cXGQrKSopL2kpO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0LmJsYWNrYmVycnkpIHtcbiAgICAgIG9zVmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL3JpbVxcc3RhYmxldFxcc29zXFxzKFxcZCsoXFwuXFxkKykqKS9pKTtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdC5iYWRhKSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9iYWRhXFwvKFxcZCsoXFwuXFxkKykqKS9pKTtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdC50aXplbikge1xuICAgICAgb3NWZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvdGl6ZW5bXFwvXFxzXShcXGQrKFxcLlxcZCspKikvaSk7XG4gICAgfVxuICAgIGlmIChvc1ZlcnNpb24pIHtcbiAgICAgIHJlc3VsdC5vc3ZlcnNpb24gPSBvc1ZlcnNpb247XG4gICAgfVxuXG4gICAgLy8gZGV2aWNlIHR5cGUgZXh0cmFjdGlvblxuICAgIHZhciBvc01ham9yVmVyc2lvbiA9ICFyZXN1bHQud2luZG93cyAmJiBvc1ZlcnNpb24uc3BsaXQoJy4nKVswXTtcbiAgICBpZiAoXG4gICAgICAgICB0YWJsZXRcbiAgICAgIHx8IG5leHVzVGFibGV0XG4gICAgICB8fCBpb3NkZXZpY2UgPT0gJ2lwYWQnXG4gICAgICB8fCAoYW5kcm9pZCAmJiAob3NNYWpvclZlcnNpb24gPT0gMyB8fCAob3NNYWpvclZlcnNpb24gPj0gNCAmJiAhbW9iaWxlKSkpXG4gICAgICB8fCByZXN1bHQuc2lsa1xuICAgICkge1xuICAgICAgcmVzdWx0LnRhYmxldCA9IHRcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgbW9iaWxlXG4gICAgICB8fCBpb3NkZXZpY2UgPT0gJ2lwaG9uZSdcbiAgICAgIHx8IGlvc2RldmljZSA9PSAnaXBvZCdcbiAgICAgIHx8IGFuZHJvaWRcbiAgICAgIHx8IG5leHVzTW9iaWxlXG4gICAgICB8fCByZXN1bHQuYmxhY2tiZXJyeVxuICAgICAgfHwgcmVzdWx0LndlYm9zXG4gICAgICB8fCByZXN1bHQuYmFkYVxuICAgICkge1xuICAgICAgcmVzdWx0Lm1vYmlsZSA9IHRcbiAgICB9XG5cbiAgICAvLyBHcmFkZWQgQnJvd3NlciBTdXBwb3J0XG4gICAgLy8gaHR0cDovL2RldmVsb3Blci55YWhvby5jb20veXVpL2FydGljbGVzL2dic1xuICAgIGlmIChyZXN1bHQubXNlZGdlIHx8XG4gICAgICAgIChyZXN1bHQubXNpZSAmJiByZXN1bHQudmVyc2lvbiA+PSAxMCkgfHxcbiAgICAgICAgKHJlc3VsdC55YW5kZXhicm93c2VyICYmIHJlc3VsdC52ZXJzaW9uID49IDE1KSB8fFxuXHRcdCAgICAocmVzdWx0LnZpdmFsZGkgJiYgcmVzdWx0LnZlcnNpb24gPj0gMS4wKSB8fFxuICAgICAgICAocmVzdWx0LmNocm9tZSAmJiByZXN1bHQudmVyc2lvbiA+PSAyMCkgfHxcbiAgICAgICAgKHJlc3VsdC5zYW1zdW5nQnJvd3NlciAmJiByZXN1bHQudmVyc2lvbiA+PSA0KSB8fFxuICAgICAgICAocmVzdWx0LmZpcmVmb3ggJiYgcmVzdWx0LnZlcnNpb24gPj0gMjAuMCkgfHxcbiAgICAgICAgKHJlc3VsdC5zYWZhcmkgJiYgcmVzdWx0LnZlcnNpb24gPj0gNikgfHxcbiAgICAgICAgKHJlc3VsdC5vcGVyYSAmJiByZXN1bHQudmVyc2lvbiA+PSAxMC4wKSB8fFxuICAgICAgICAocmVzdWx0LmlvcyAmJiByZXN1bHQub3N2ZXJzaW9uICYmIHJlc3VsdC5vc3ZlcnNpb24uc3BsaXQoXCIuXCIpWzBdID49IDYpIHx8XG4gICAgICAgIChyZXN1bHQuYmxhY2tiZXJyeSAmJiByZXN1bHQudmVyc2lvbiA+PSAxMC4xKVxuICAgICAgICB8fCAocmVzdWx0LmNocm9taXVtICYmIHJlc3VsdC52ZXJzaW9uID49IDIwKVxuICAgICAgICApIHtcbiAgICAgIHJlc3VsdC5hID0gdDtcbiAgICB9XG4gICAgZWxzZSBpZiAoKHJlc3VsdC5tc2llICYmIHJlc3VsdC52ZXJzaW9uIDwgMTApIHx8XG4gICAgICAgIChyZXN1bHQuY2hyb21lICYmIHJlc3VsdC52ZXJzaW9uIDwgMjApIHx8XG4gICAgICAgIChyZXN1bHQuZmlyZWZveCAmJiByZXN1bHQudmVyc2lvbiA8IDIwLjApIHx8XG4gICAgICAgIChyZXN1bHQuc2FmYXJpICYmIHJlc3VsdC52ZXJzaW9uIDwgNikgfHxcbiAgICAgICAgKHJlc3VsdC5vcGVyYSAmJiByZXN1bHQudmVyc2lvbiA8IDEwLjApIHx8XG4gICAgICAgIChyZXN1bHQuaW9zICYmIHJlc3VsdC5vc3ZlcnNpb24gJiYgcmVzdWx0Lm9zdmVyc2lvbi5zcGxpdChcIi5cIilbMF0gPCA2KVxuICAgICAgICB8fCAocmVzdWx0LmNocm9taXVtICYmIHJlc3VsdC52ZXJzaW9uIDwgMjApXG4gICAgICAgICkge1xuICAgICAgcmVzdWx0LmMgPSB0XG4gICAgfSBlbHNlIHJlc3VsdC54ID0gdFxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgdmFyIGJvd3NlciA9IGRldGVjdCh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyA/IG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJycgOiAnJylcblxuICBib3dzZXIudGVzdCA9IGZ1bmN0aW9uIChicm93c2VyTGlzdCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnJvd3Nlckxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBicm93c2VySXRlbSA9IGJyb3dzZXJMaXN0W2ldO1xuICAgICAgaWYgKHR5cGVvZiBicm93c2VySXRlbT09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoYnJvd3Nlckl0ZW0gaW4gYm93c2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB2ZXJzaW9uIHByZWNpc2lvbnMgY291bnRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogICBnZXRWZXJzaW9uUHJlY2lzaW9uKFwiMS4xMC4zXCIpIC8vIDNcbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSB2ZXJzaW9uXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZlcnNpb25QcmVjaXNpb24odmVyc2lvbikge1xuICAgIHJldHVybiB2ZXJzaW9uLnNwbGl0KFwiLlwiKS5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogQXJyYXk6Om1hcCBwb2x5ZmlsbFxuICAgKlxuICAgKiBAcGFyYW0gIHtBcnJheX0gYXJyXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBpdGVyYXRvclxuICAgKiBAcmV0dXJuIHtBcnJheX1cbiAgICovXG4gIGZ1bmN0aW9uIG1hcChhcnIsIGl0ZXJhdG9yKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdLCBpO1xuICAgIGlmIChBcnJheS5wcm90b3R5cGUubWFwKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFyciwgaXRlcmF0b3IpO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHQucHVzaChpdGVyYXRvcihhcnJbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYnJvd3NlciB2ZXJzaW9uIHdlaWdodFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIGNvbXBhcmVWZXJzaW9ucyhbJzEuMTAuMi4xJywgICcxLjguMi4xLjkwJ10pICAgIC8vIDFcbiAgICogICBjb21wYXJlVmVyc2lvbnMoWycxLjAxMC4yLjEnLCAnMS4wOS4yLjEuOTAnXSk7ICAvLyAxXG4gICAqICAgY29tcGFyZVZlcnNpb25zKFsnMS4xMC4yLjEnLCAgJzEuMTAuMi4xJ10pOyAgICAgLy8gMFxuICAgKiAgIGNvbXBhcmVWZXJzaW9ucyhbJzEuMTAuMi4xJywgICcxLjA4MDAuMiddKTsgICAgIC8vIC0xXG4gICAqXG4gICAqIEBwYXJhbSAge0FycmF5PFN0cmluZz59IHZlcnNpb25zIHZlcnNpb25zIHRvIGNvbXBhcmVcbiAgICogQHJldHVybiB7TnVtYmVyfSBjb21wYXJpc29uIHJlc3VsdFxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGFyZVZlcnNpb25zKHZlcnNpb25zKSB7XG4gICAgLy8gMSkgZ2V0IGNvbW1vbiBwcmVjaXNpb24gZm9yIGJvdGggdmVyc2lvbnMsIGZvciBleGFtcGxlIGZvciBcIjEwLjBcIiBhbmQgXCI5XCIgaXQgc2hvdWxkIGJlIDJcbiAgICB2YXIgcHJlY2lzaW9uID0gTWF0aC5tYXgoZ2V0VmVyc2lvblByZWNpc2lvbih2ZXJzaW9uc1swXSksIGdldFZlcnNpb25QcmVjaXNpb24odmVyc2lvbnNbMV0pKTtcbiAgICB2YXIgY2h1bmtzID0gbWFwKHZlcnNpb25zLCBmdW5jdGlvbiAodmVyc2lvbikge1xuICAgICAgdmFyIGRlbHRhID0gcHJlY2lzaW9uIC0gZ2V0VmVyc2lvblByZWNpc2lvbih2ZXJzaW9uKTtcblxuICAgICAgLy8gMikgXCI5XCIgLT4gXCI5LjBcIiAoZm9yIHByZWNpc2lvbiA9IDIpXG4gICAgICB2ZXJzaW9uID0gdmVyc2lvbiArIG5ldyBBcnJheShkZWx0YSArIDEpLmpvaW4oXCIuMFwiKTtcblxuICAgICAgLy8gMykgXCI5LjBcIiAtPiBbXCIwMDAwMDAwMDBcIlwiLCBcIjAwMDAwMDAwOVwiXVxuICAgICAgcmV0dXJuIG1hcCh2ZXJzaW9uLnNwbGl0KFwiLlwiKSwgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgQXJyYXkoMjAgLSBjaHVuay5sZW5ndGgpLmpvaW4oXCIwXCIpICsgY2h1bms7XG4gICAgICB9KS5yZXZlcnNlKCk7XG4gICAgfSk7XG5cbiAgICAvLyBpdGVyYXRlIGluIHJldmVyc2Ugb3JkZXIgYnkgcmV2ZXJzZWQgY2h1bmtzIGFycmF5XG4gICAgd2hpbGUgKC0tcHJlY2lzaW9uID49IDApIHtcbiAgICAgIC8vIDQpIGNvbXBhcmU6IFwiMDAwMDAwMDA5XCIgPiBcIjAwMDAwMDAxMFwiID0gZmFsc2UgKGJ1dCBcIjlcIiA+IFwiMTBcIiA9IHRydWUpXG4gICAgICBpZiAoY2h1bmtzWzBdW3ByZWNpc2lvbl0gPiBjaHVua3NbMV1bcHJlY2lzaW9uXSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGNodW5rc1swXVtwcmVjaXNpb25dID09PSBjaHVua3NbMV1bcHJlY2lzaW9uXSkge1xuICAgICAgICBpZiAocHJlY2lzaW9uID09PSAwKSB7XG4gICAgICAgICAgLy8gYWxsIHZlcnNpb24gY2h1bmtzIGFyZSBzYW1lXG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGJyb3dzZXIgaXMgdW5zdXBwb3J0ZWRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogICBib3dzZXIuaXNVbnN1cHBvcnRlZEJyb3dzZXIoe1xuICAgKiAgICAgbXNpZTogXCIxMFwiLFxuICAgKiAgICAgZmlyZWZveDogXCIyM1wiLFxuICAgKiAgICAgY2hyb21lOiBcIjI5XCIsXG4gICAqICAgICBzYWZhcmk6IFwiNS4xXCIsXG4gICAqICAgICBvcGVyYTogXCIxNlwiLFxuICAgKiAgICAgcGhhbnRvbTogXCI1MzRcIlxuICAgKiAgIH0pO1xuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9ICBtaW5WZXJzaW9ucyBtYXAgb2YgbWluaW1hbCB2ZXJzaW9uIHRvIGJyb3dzZXJcbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gW3N0cmljdE1vZGUgPSBmYWxzZV0gZmxhZyB0byByZXR1cm4gZmFsc2UgaWYgYnJvd3NlciB3YXNuJ3QgZm91bmQgaW4gbWFwXG4gICAqIEBwYXJhbSAge1N0cmluZ30gIFt1YV0gdXNlciBhZ2VudCBzdHJpbmdcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGlzVW5zdXBwb3J0ZWRCcm93c2VyKG1pblZlcnNpb25zLCBzdHJpY3RNb2RlLCB1YSkge1xuICAgIHZhciBfYm93c2VyID0gYm93c2VyO1xuXG4gICAgLy8gbWFrZSBzdHJpY3RNb2RlIHBhcmFtIG9wdGlvbmFsIHdpdGggdWEgcGFyYW0gdXNhZ2VcbiAgICBpZiAodHlwZW9mIHN0cmljdE1vZGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB1YSA9IHN0cmljdE1vZGU7XG4gICAgICBzdHJpY3RNb2RlID0gdm9pZCgwKTtcbiAgICB9XG5cbiAgICBpZiAoc3RyaWN0TW9kZSA9PT0gdm9pZCgwKSkge1xuICAgICAgc3RyaWN0TW9kZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAodWEpIHtcbiAgICAgIF9ib3dzZXIgPSBkZXRlY3QodWEpO1xuICAgIH1cblxuICAgIHZhciB2ZXJzaW9uID0gXCJcIiArIF9ib3dzZXIudmVyc2lvbjtcbiAgICBmb3IgKHZhciBicm93c2VyIGluIG1pblZlcnNpb25zKSB7XG4gICAgICBpZiAobWluVmVyc2lvbnMuaGFzT3duUHJvcGVydHkoYnJvd3NlcikpIHtcbiAgICAgICAgaWYgKF9ib3dzZXJbYnJvd3Nlcl0pIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG1pblZlcnNpb25zW2Jyb3dzZXJdICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCcm93c2VyIHZlcnNpb24gaW4gdGhlIG1pblZlcnNpb24gbWFwIHNob3VsZCBiZSBhIHN0cmluZzogJyArIGJyb3dzZXIgKyAnOiAnICsgU3RyaW5nKG1pblZlcnNpb25zKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gYnJvd3NlciB2ZXJzaW9uIGFuZCBtaW4gc3VwcG9ydGVkIHZlcnNpb24uXG4gICAgICAgICAgcmV0dXJuIGNvbXBhcmVWZXJzaW9ucyhbdmVyc2lvbiwgbWluVmVyc2lvbnNbYnJvd3Nlcl1dKSA8IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaWN0TW9kZTsgLy8gbm90IGZvdW5kXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYnJvd3NlciBpcyBzdXBwb3J0ZWRcbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBtaW5WZXJzaW9ucyBtYXAgb2YgbWluaW1hbCB2ZXJzaW9uIHRvIGJyb3dzZXJcbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gW3N0cmljdE1vZGUgPSBmYWxzZV0gZmxhZyB0byByZXR1cm4gZmFsc2UgaWYgYnJvd3NlciB3YXNuJ3QgZm91bmQgaW4gbWFwXG4gICAqIEBwYXJhbSAge1N0cmluZ30gIFt1YV0gdXNlciBhZ2VudCBzdHJpbmdcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIGNoZWNrKG1pblZlcnNpb25zLCBzdHJpY3RNb2RlLCB1YSkge1xuICAgIHJldHVybiAhaXNVbnN1cHBvcnRlZEJyb3dzZXIobWluVmVyc2lvbnMsIHN0cmljdE1vZGUsIHVhKTtcbiAgfVxuXG4gIGJvd3Nlci5pc1Vuc3VwcG9ydGVkQnJvd3NlciA9IGlzVW5zdXBwb3J0ZWRCcm93c2VyO1xuICBib3dzZXIuY29tcGFyZVZlcnNpb25zID0gY29tcGFyZVZlcnNpb25zO1xuICBib3dzZXIuY2hlY2sgPSBjaGVjaztcblxuICAvKlxuICAgKiBTZXQgb3VyIGRldGVjdCBtZXRob2QgdG8gdGhlIG1haW4gYm93c2VyIG9iamVjdCBzbyB3ZSBjYW5cbiAgICogcmV1c2UgaXQgdG8gdGVzdCBvdGhlciB1c2VyIGFnZW50cy5cbiAgICogVGhpcyBpcyBuZWVkZWQgdG8gaW1wbGVtZW50IGZ1dHVyZSB0ZXN0cy5cbiAgICovXG4gIGJvd3Nlci5fZGV0ZWN0ID0gZGV0ZWN0O1xuXG4gIC8qXG4gICAqIFNldCBvdXIgZGV0ZWN0IHB1YmxpYyBtZXRob2QgdG8gdGhlIG1haW4gYm93c2VyIG9iamVjdFxuICAgKiBUaGlzIGlzIG5lZWRlZCB0byBpbXBsZW1lbnQgYm93c2VyIGluIHNlcnZlciBzaWRlXG4gICAqL1xuICBib3dzZXIuZGV0ZWN0ID0gZGV0ZWN0O1xuICByZXR1cm4gYm93c2VyXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdldEJyb3dzZXJJbmZvcm1hdGlvbjtcblxudmFyIF9ib3dzZXIgPSByZXF1aXJlKCdib3dzZXInKTtcblxudmFyIF9ib3dzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYm93c2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHByZWZpeEJ5QnJvd3NlciA9IHtcbiAgY2hyb21lOiAnV2Via2l0JyxcbiAgc2FmYXJpOiAnV2Via2l0JyxcbiAgaW9zOiAnV2Via2l0JyxcbiAgYW5kcm9pZDogJ1dlYmtpdCcsXG4gIHBoYW50b206ICdXZWJraXQnLFxuICBvcGVyYTogJ1dlYmtpdCcsXG4gIHdlYm9zOiAnV2Via2l0JyxcbiAgYmxhY2tiZXJyeTogJ1dlYmtpdCcsXG4gIGJhZGE6ICdXZWJraXQnLFxuICB0aXplbjogJ1dlYmtpdCcsXG4gIGNocm9taXVtOiAnV2Via2l0JyxcbiAgdml2YWxkaTogJ1dlYmtpdCcsXG4gIGZpcmVmb3g6ICdNb3onLFxuICBzZWFtb25leTogJ01veicsXG4gIHNhaWxmaXNoOiAnTW96JyxcbiAgbXNpZTogJ21zJyxcbiAgbXNlZGdlOiAnbXMnXG59O1xuXG5cbnZhciBicm93c2VyQnlDYW5JdXNlQWxpYXMgPSB7XG4gIGNocm9tZTogJ2Nocm9tZScsXG4gIGNocm9taXVtOiAnY2hyb21lJyxcbiAgc2FmYXJpOiAnc2FmYXJpJyxcbiAgZmlyZm94OiAnZmlyZWZveCcsXG4gIG1zZWRnZTogJ2VkZ2UnLFxuICBvcGVyYTogJ29wZXJhJyxcbiAgdml2YWxkaTogJ29wZXJhJyxcbiAgbXNpZTogJ2llJ1xufTtcblxuZnVuY3Rpb24gZ2V0QnJvd3Nlck5hbWUoYnJvd3NlckluZm8pIHtcbiAgaWYgKGJyb3dzZXJJbmZvLmZpcmVmb3gpIHtcbiAgICByZXR1cm4gJ2ZpcmVmb3gnO1xuICB9XG5cbiAgaWYgKGJyb3dzZXJJbmZvLm1vYmlsZSB8fCBicm93c2VySW5mby50YWJsZXQpIHtcbiAgICBpZiAoYnJvd3NlckluZm8uaW9zKSB7XG4gICAgICByZXR1cm4gJ2lvc19zYWYnO1xuICAgIH0gZWxzZSBpZiAoYnJvd3NlckluZm8uYW5kcm9pZCkge1xuICAgICAgcmV0dXJuICdhbmRyb2lkJztcbiAgICB9IGVsc2UgaWYgKGJyb3dzZXJJbmZvLm9wZXJhKSB7XG4gICAgICByZXR1cm4gJ29wX21pbmknO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGJyb3dzZXIgaW4gYnJvd3NlckJ5Q2FuSXVzZUFsaWFzKSB7XG4gICAgaWYgKGJyb3dzZXJJbmZvLmhhc093blByb3BlcnR5KGJyb3dzZXIpKSB7XG4gICAgICByZXR1cm4gYnJvd3NlckJ5Q2FuSXVzZUFsaWFzW2Jyb3dzZXJdO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFVzZXMgYm93c2VyIHRvIGdldCBkZWZhdWx0IGJyb3dzZXIgYnJvd3NlckluZm9ybWF0aW9uIHN1Y2ggYXMgdmVyc2lvbiBhbmQgbmFtZVxuICogRXZhbHVhdGVzIGJvd3NlciBicm93c2VySW5mbyBhbmQgYWRkcyB2ZW5kb3JQcmVmaXggYnJvd3NlckluZm9ybWF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gdXNlckFnZW50IC0gdXNlckFnZW50IHRoYXQgZ2V0cyBldmFsdWF0ZWRcbiAqL1xuZnVuY3Rpb24gZ2V0QnJvd3NlckluZm9ybWF0aW9uKHVzZXJBZ2VudCkge1xuICB2YXIgYnJvd3NlckluZm8gPSBfYm93c2VyMi5kZWZhdWx0Ll9kZXRlY3QodXNlckFnZW50KTtcblxuICBpZiAoYnJvd3NlckluZm8ueWFuZGV4YnJvd3Nlcikge1xuICAgIGJyb3dzZXJJbmZvID0gX2Jvd3NlcjIuZGVmYXVsdC5fZGV0ZWN0KHVzZXJBZ2VudC5yZXBsYWNlKC9ZYUJyb3dzZXJcXC9bMC05Ll0qLywgJycpKTtcbiAgfVxuXG4gIGZvciAodmFyIGJyb3dzZXIgaW4gcHJlZml4QnlCcm93c2VyKSB7XG4gICAgaWYgKGJyb3dzZXJJbmZvLmhhc093blByb3BlcnR5KGJyb3dzZXIpKSB7XG4gICAgICB2YXIgcHJlZml4ID0gcHJlZml4QnlCcm93c2VyW2Jyb3dzZXJdO1xuXG4gICAgICBicm93c2VySW5mby5qc1ByZWZpeCA9IHByZWZpeDtcbiAgICAgIGJyb3dzZXJJbmZvLmNzc1ByZWZpeCA9ICctJyArIHByZWZpeC50b0xvd2VyQ2FzZSgpICsgJy0nO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgYnJvd3NlckluZm8uYnJvd3Nlck5hbWUgPSBnZXRCcm93c2VyTmFtZShicm93c2VySW5mbyk7XG5cbiAgLy8gRm9yIGNvcmRvdmEgSU9TIDggdGhlIHZlcnNpb24gaXMgbWlzc2luZywgc2V0IHRydW5jYXRlZCBvc3ZlcnNpb24gdG8gcHJldmVudCBOYU5cbiAgaWYgKGJyb3dzZXJJbmZvLnZlcnNpb24pIHtcbiAgICBicm93c2VySW5mby5icm93c2VyVmVyc2lvbiA9IHBhcnNlRmxvYXQoYnJvd3NlckluZm8udmVyc2lvbik7XG4gIH0gZWxzZSB7XG4gICAgYnJvd3NlckluZm8uYnJvd3NlclZlcnNpb24gPSBwYXJzZUludChwYXJzZUZsb2F0KGJyb3dzZXJJbmZvLm9zdmVyc2lvbiksIDEwKTtcbiAgfVxuXG4gIGJyb3dzZXJJbmZvLm9zVmVyc2lvbiA9IHBhcnNlRmxvYXQoYnJvd3NlckluZm8ub3N2ZXJzaW9uKTtcblxuICAvLyBpT1MgZm9yY2VzIGFsbCBicm93c2VycyB0byB1c2UgU2FmYXJpIHVuZGVyIHRoZSBob29kXG4gIC8vIGFzIHRoZSBTYWZhcmkgdmVyc2lvbiBzZWVtcyB0byBtYXRjaCB0aGUgaU9TIHZlcnNpb25cbiAgLy8gd2UganVzdCBleHBsaWNpdGVseSB1c2UgdGhlIG9zdmVyc2lvbiBpbnN0ZWFkXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2ZyaXNjaG1hbm4vaW5saW5lLXN0eWxlLXByZWZpeGVyL2lzc3Vlcy83MlxuICBpZiAoYnJvd3NlckluZm8uYnJvd3Nlck5hbWUgPT09ICdpb3Nfc2FmJyAmJiBicm93c2VySW5mby5icm93c2VyVmVyc2lvbiA+IGJyb3dzZXJJbmZvLm9zVmVyc2lvbikge1xuICAgIGJyb3dzZXJJbmZvLmJyb3dzZXJWZXJzaW9uID0gYnJvd3NlckluZm8ub3NWZXJzaW9uO1xuICB9XG5cbiAgLy8gc2VwZXJhdGUgbmF0aXZlIGFuZHJvaWQgY2hyb21lXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2ZyaXNjaG1hbm4vaW5saW5lLXN0eWxlLXByZWZpeGVyL2lzc3Vlcy80NVxuICBpZiAoYnJvd3NlckluZm8uYnJvd3Nlck5hbWUgPT09ICdhbmRyb2lkJyAmJiBicm93c2VySW5mby5jaHJvbWUgJiYgYnJvd3NlckluZm8uYnJvd3NlclZlcnNpb24gPiAzNykge1xuICAgIGJyb3dzZXJJbmZvLmJyb3dzZXJOYW1lID0gJ2FuZF9jaHInO1xuICB9XG5cbiAgLy8gRm9yIGFuZHJvaWQgPCA0LjQgd2Ugd2FudCB0byBjaGVjayB0aGUgb3N2ZXJzaW9uXG4gIC8vIG5vdCB0aGUgY2hyb21lIHZlcnNpb24sIHNlZSBpc3N1ZSAjMjZcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvZnJpc2NobWFubi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvaXNzdWVzLzI2XG4gIGlmIChicm93c2VySW5mby5icm93c2VyTmFtZSA9PT0gJ2FuZHJvaWQnICYmIGJyb3dzZXJJbmZvLm9zVmVyc2lvbiA8IDUpIHtcbiAgICBicm93c2VySW5mby5icm93c2VyVmVyc2lvbiA9IGJyb3dzZXJJbmZvLm9zVmVyc2lvbjtcbiAgfVxuXG4gIC8vIFNhbXN1bmcgYnJvd3NlciBhcmUgYmFzaWNhbGx5IGJ1aWxkIG9uIENocm9tZSA+IDQ0XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2ZyaXNjaG1hbm4vaW5saW5lLXN0eWxlLXByZWZpeGVyL2lzc3Vlcy8xMDJcbiAgaWYgKGJyb3dzZXJJbmZvLmJyb3dzZXJOYW1lID09PSAnYW5kcm9pZCcgJiYgYnJvd3NlckluZm8uc2Ftc3VuZ0Jyb3dzZXIpIHtcbiAgICBicm93c2VySW5mby5icm93c2VyTmFtZSA9ICdhbmRfY2hyJztcbiAgICBicm93c2VySW5mby5icm93c2VyVmVyc2lvbiA9IDQ0O1xuICB9XG5cbiAgcmV0dXJuIGJyb3dzZXJJbmZvO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVQcmVmaXhlcjtcblxudmFyIF9nZXRCcm93c2VySW5mb3JtYXRpb24gPSByZXF1aXJlKCcuLi91dGlscy9nZXRCcm93c2VySW5mb3JtYXRpb24nKTtcblxudmFyIF9nZXRCcm93c2VySW5mb3JtYXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0QnJvd3NlckluZm9ybWF0aW9uKTtcblxudmFyIF9nZXRQcmVmaXhlZEtleWZyYW1lcyA9IHJlcXVpcmUoJy4uL3V0aWxzL2dldFByZWZpeGVkS2V5ZnJhbWVzJyk7XG5cbnZhciBfZ2V0UHJlZml4ZWRLZXlmcmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJlZml4ZWRLZXlmcmFtZXMpO1xuXG52YXIgX2NhcGl0YWxpemVTdHJpbmcgPSByZXF1aXJlKCcuLi91dGlscy9jYXBpdGFsaXplU3RyaW5nJyk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYXBpdGFsaXplU3RyaW5nKTtcblxudmFyIF9hZGROZXdWYWx1ZXNPbmx5ID0gcmVxdWlyZSgnLi4vdXRpbHMvYWRkTmV3VmFsdWVzT25seScpO1xuXG52YXIgX2FkZE5ld1ZhbHVlc09ubHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWRkTmV3VmFsdWVzT25seSk7XG5cbnZhciBfaXNPYmplY3QgPSByZXF1aXJlKCcuLi91dGlscy9pc09iamVjdCcpO1xuXG52YXIgX2lzT2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzT2JqZWN0KTtcblxudmFyIF9wcmVmaXhWYWx1ZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3ByZWZpeFZhbHVlJyk7XG5cbnZhciBfcHJlZml4VmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlZml4VmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBjcmVhdGVQcmVmaXhlcihfcmVmKSB7XG4gIHZhciBwcmVmaXhNYXAgPSBfcmVmLnByZWZpeE1hcCxcbiAgICAgIHBsdWdpbnMgPSBfcmVmLnBsdWdpbnM7XG4gIHZhciBmYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgKiBJbnN0YW50aWFudGUgYSBuZXcgcHJlZml4ZXJcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyQWdlbnQgLSB1c2VyQWdlbnQgdG8gZ2F0aGVyIHByZWZpeCBpbmZvcm1hdGlvbiBhY2NvcmRpbmcgdG8gY2FuaXVzZS5jb21cbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZWVwVW5wcmVmaXhlZCAtIGtlZXBzIHVucHJlZml4ZWQgcHJvcGVydGllcyBhbmQgdmFsdWVzXG4gICAgKi9cbiAgICBmdW5jdGlvbiBQcmVmaXhlcigpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByZWZpeGVyKTtcblxuICAgICAgdmFyIGRlZmF1bHRVc2VyQWdlbnQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyA/IG5hdmlnYXRvci51c2VyQWdlbnQgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMuX3VzZXJBZ2VudCA9IG9wdGlvbnMudXNlckFnZW50IHx8IGRlZmF1bHRVc2VyQWdlbnQ7XG4gICAgICB0aGlzLl9rZWVwVW5wcmVmaXhlZCA9IG9wdGlvbnMua2VlcFVucHJlZml4ZWQgfHwgZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLl91c2VyQWdlbnQpIHtcbiAgICAgICAgdGhpcy5fYnJvd3NlckluZm8gPSAoMCwgX2dldEJyb3dzZXJJbmZvcm1hdGlvbjIuZGVmYXVsdCkodGhpcy5fdXNlckFnZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2tzIGlmIHRoZSB1c2VyQWdlbnQgd2FzIHJlc29sdmVkIGNvcnJlY3RseVxuICAgICAgaWYgKHRoaXMuX2Jyb3dzZXJJbmZvICYmIHRoaXMuX2Jyb3dzZXJJbmZvLmNzc1ByZWZpeCkge1xuICAgICAgICB0aGlzLnByZWZpeGVkS2V5ZnJhbWVzID0gKDAsIF9nZXRQcmVmaXhlZEtleWZyYW1lczIuZGVmYXVsdCkodGhpcy5fYnJvd3NlckluZm8uYnJvd3Nlck5hbWUsIHRoaXMuX2Jyb3dzZXJJbmZvLmJyb3dzZXJWZXJzaW9uLCB0aGlzLl9icm93c2VySW5mby5jc3NQcmVmaXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdXNlRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmVmaXhEYXRhID0gdGhpcy5fYnJvd3NlckluZm8uYnJvd3Nlck5hbWUgJiYgcHJlZml4TWFwW3RoaXMuX2Jyb3dzZXJJbmZvLmJyb3dzZXJOYW1lXTtcbiAgICAgIGlmIChwcmVmaXhEYXRhKSB7XG4gICAgICAgIHRoaXMuX3JlcXVpcmVzUHJlZml4ID0ge307XG5cbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJlZml4RGF0YSkge1xuICAgICAgICAgIGlmIChwcmVmaXhEYXRhW3Byb3BlcnR5XSA+PSB0aGlzLl9icm93c2VySW5mby5icm93c2VyVmVyc2lvbikge1xuICAgICAgICAgICAgdGhpcy5fcmVxdWlyZXNQcmVmaXhbcHJvcGVydHldID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9oYXNQcm9wc1JlcXVpcmluZ1ByZWZpeCA9IE9iamVjdC5rZXlzKHRoaXMuX3JlcXVpcmVzUHJlZml4KS5sZW5ndGggPiAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdXNlRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9tZXRhRGF0YSA9IHtcbiAgICAgICAgYnJvd3NlclZlcnNpb246IHRoaXMuX2Jyb3dzZXJJbmZvLmJyb3dzZXJWZXJzaW9uLFxuICAgICAgICBicm93c2VyTmFtZTogdGhpcy5fYnJvd3NlckluZm8uYnJvd3Nlck5hbWUsXG4gICAgICAgIGNzc1ByZWZpeDogdGhpcy5fYnJvd3NlckluZm8uY3NzUHJlZml4LFxuICAgICAgICBqc1ByZWZpeDogdGhpcy5fYnJvd3NlckluZm8uanNQcmVmaXgsXG4gICAgICAgIGtlZXBVbnByZWZpeGVkOiB0aGlzLl9rZWVwVW5wcmVmaXhlZCxcbiAgICAgICAgcmVxdWlyZXNQcmVmaXg6IHRoaXMuX3JlcXVpcmVzUHJlZml4XG4gICAgICB9O1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhQcmVmaXhlciwgW3tcbiAgICAgIGtleTogJ3ByZWZpeCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlZml4KHN0eWxlKSB7XG4gICAgICAgIC8vIHVzZSBzdGF0aWMgcHJlZml4ZXIgYXMgZmFsbGJhY2sgaWYgdXNlckFnZW50IGNhbiBub3QgYmUgcmVzb2x2ZWRcbiAgICAgICAgaWYgKHRoaXMuX3VzZUZhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbGxiYWNrKHN0eWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9ubHkgYWRkIHByZWZpeGVzIGlmIG5lZWRlZFxuICAgICAgICBpZiAoIXRoaXMuX2hhc1Byb3BzUmVxdWlyaW5nUHJlZml4KSB7XG4gICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByZWZpeFN0eWxlKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdfcHJlZml4U3R5bGUnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcmVmaXhTdHlsZShzdHlsZSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzdHlsZSkge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BlcnR5XTtcblxuICAgICAgICAgIC8vIGhhbmRsZSBuZXN0ZWQgb2JqZWN0c1xuICAgICAgICAgIGlmICgoMCwgX2lzT2JqZWN0Mi5kZWZhdWx0KSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9IHRoaXMucHJlZml4KHZhbHVlKTtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBhcnJheSB2YWx1ZXNcbiAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICB2YXIgY29tYmluZWRWYWx1ZSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsdWUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gKDAsIF9wcmVmaXhWYWx1ZTIuZGVmYXVsdCkocGx1Z2lucywgcHJvcGVydHksIHZhbHVlW2ldLCBzdHlsZSwgdGhpcy5fbWV0YURhdGEpO1xuICAgICAgICAgICAgICAoMCwgX2FkZE5ld1ZhbHVlc09ubHkyLmRlZmF1bHQpKGNvbWJpbmVkVmFsdWUsIHByb2Nlc3NlZFZhbHVlIHx8IHZhbHVlW2ldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gb25seSBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IHdhcyB0b3VjaGVkXG4gICAgICAgICAgICAvLyBieSBhbnkgcGx1Z2luIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgbXV0YXRpb25zXG4gICAgICAgICAgICBpZiAoY29tYmluZWRWYWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9IGNvbWJpbmVkVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBfcHJvY2Vzc2VkVmFsdWUgPSAoMCwgX3ByZWZpeFZhbHVlMi5kZWZhdWx0KShwbHVnaW5zLCBwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCB0aGlzLl9tZXRhRGF0YSk7XG5cbiAgICAgICAgICAgIC8vIG9ubHkgbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCB3YXMgdG91Y2hlZFxuICAgICAgICAgICAgLy8gYnkgYW55IHBsdWdpbiB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IG11dGF0aW9uc1xuICAgICAgICAgICAgaWYgKF9wcm9jZXNzZWRWYWx1ZSkge1xuICAgICAgICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSBfcHJvY2Vzc2VkVmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFkZCBwcmVmaXhlcyB0byBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBpZiAodGhpcy5fcmVxdWlyZXNQcmVmaXguaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgIHN0eWxlW3RoaXMuX2Jyb3dzZXJJbmZvLmpzUHJlZml4ICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gdmFsdWU7XG4gICAgICAgICAgICAgIGlmICghdGhpcy5fa2VlcFVucHJlZml4ZWQpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgc3R5bGVbcHJvcGVydHldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICogUmV0dXJucyBhIHByZWZpeGVkIHZlcnNpb24gb2YgdGhlIHN0eWxlIG9iamVjdCB1c2luZyBhbGwgdmVuZG9yIHByZWZpeGVzXG4gICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZXMgLSBTdHlsZSBvYmplY3QgdGhhdCBnZXRzIHByZWZpeGVkIHByb3BlcnRpZXMgYWRkZWRcbiAgICAgICogQHJldHVybnMge09iamVjdH0gLSBTdHlsZSBvYmplY3Qgd2l0aCBwcmVmaXhlZCBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXNcbiAgICAgICovXG5cbiAgICB9XSwgW3tcbiAgICAgIGtleTogJ3ByZWZpeEFsbCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlZml4QWxsKHN0eWxlcykge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2soc3R5bGVzKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gUHJlZml4ZXI7XG4gIH0oKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHByZWZpeFByb3BlcnR5O1xuXG52YXIgX2NhcGl0YWxpemVTdHJpbmcgPSByZXF1aXJlKCcuL2NhcGl0YWxpemVTdHJpbmcnKTtcblxudmFyIF9jYXBpdGFsaXplU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhcGl0YWxpemVTdHJpbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBwcmVmaXhQcm9wZXJ0eShwcmVmaXhQcm9wZXJ0aWVzLCBwcm9wZXJ0eSwgc3R5bGUpIHtcbiAgaWYgKHByZWZpeFByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgdmFyIHJlcXVpcmVkUHJlZml4ZXMgPSBwcmVmaXhQcm9wZXJ0aWVzW3Byb3BlcnR5XTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmVxdWlyZWRQcmVmaXhlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgc3R5bGVbcmVxdWlyZWRQcmVmaXhlc1tpXSArICgwLCBfY2FwaXRhbGl6ZVN0cmluZzIuZGVmYXVsdCkocHJvcGVydHkpXSA9IHN0eWxlW3Byb3BlcnR5XTtcbiAgICB9XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVByZWZpeGVyO1xuXG52YXIgX3ByZWZpeFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJlZml4UHJvcGVydHknKTtcblxudmFyIF9wcmVmaXhQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXhQcm9wZXJ0eSk7XG5cbnZhciBfcHJlZml4VmFsdWUgPSByZXF1aXJlKCcuLi91dGlscy9wcmVmaXhWYWx1ZScpO1xuXG52YXIgX3ByZWZpeFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZpeFZhbHVlKTtcblxudmFyIF9hZGROZXdWYWx1ZXNPbmx5ID0gcmVxdWlyZSgnLi4vdXRpbHMvYWRkTmV3VmFsdWVzT25seScpO1xuXG52YXIgX2FkZE5ld1ZhbHVlc09ubHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWRkTmV3VmFsdWVzT25seSk7XG5cbnZhciBfaXNPYmplY3QgPSByZXF1aXJlKCcuLi91dGlscy9pc09iamVjdCcpO1xuXG52YXIgX2lzT2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzT2JqZWN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gY3JlYXRlUHJlZml4ZXIoX3JlZikge1xuICB2YXIgcHJlZml4TWFwID0gX3JlZi5wcmVmaXhNYXAsXG4gICAgICBwbHVnaW5zID0gX3JlZi5wbHVnaW5zO1xuXG4gIGZ1bmN0aW9uIHByZWZpeEFsbChzdHlsZSkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wZXJ0eV07XG5cbiAgICAgIC8vIGhhbmRsZSBuZXN0ZWQgb2JqZWN0c1xuICAgICAgaWYgKCgwLCBfaXNPYmplY3QyLmRlZmF1bHQpKHZhbHVlKSkge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXhBbGwodmFsdWUpO1xuICAgICAgICAvLyBoYW5kbGUgYXJyYXkgdmFsdWVzXG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhciBjb21iaW5lZFZhbHVlID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gKDAsIF9wcmVmaXhWYWx1ZTIuZGVmYXVsdCkocGx1Z2lucywgcHJvcGVydHksIHZhbHVlW2ldLCBzdHlsZSwgcHJlZml4TWFwKTtcbiAgICAgICAgICAoMCwgX2FkZE5ld1ZhbHVlc09ubHkyLmRlZmF1bHQpKGNvbWJpbmVkVmFsdWUsIHByb2Nlc3NlZFZhbHVlIHx8IHZhbHVlW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9ubHkgbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCB3YXMgdG91Y2hlZFxuICAgICAgICAvLyBieSBhbnkgcGx1Z2luIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgbXV0YXRpb25zXG4gICAgICAgIGlmIChjb21iaW5lZFZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSBjb21iaW5lZFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3Byb2Nlc3NlZFZhbHVlID0gKDAsIF9wcmVmaXhWYWx1ZTIuZGVmYXVsdCkocGx1Z2lucywgcHJvcGVydHksIHZhbHVlLCBzdHlsZSwgcHJlZml4TWFwKTtcblxuICAgICAgICAvLyBvbmx5IG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgd2FzIHRvdWNoZWRcbiAgICAgICAgLy8gYnkgYW55IHBsdWdpbiB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IG11dGF0aW9uc1xuICAgICAgICBpZiAoX3Byb2Nlc3NlZFZhbHVlKSB7XG4gICAgICAgICAgc3R5bGVbcHJvcGVydHldID0gX3Byb2Nlc3NlZFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgKDAsIF9wcmVmaXhQcm9wZXJ0eTIuZGVmYXVsdCkocHJlZml4TWFwLCBwcm9wZXJ0eSwgc3R5bGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiBwcmVmaXhBbGw7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChtdWlUaGVtZSkge1xuICB2YXIgaXNDbGllbnQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIHVzZXJBZ2VudCA9IG11aVRoZW1lLnVzZXJBZ2VudDtcblxuICBpZiAodXNlckFnZW50ID09PSB1bmRlZmluZWQgJiYgaXNDbGllbnQpIHtcbiAgICB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xuICB9XG5cbiAgaWYgKHVzZXJBZ2VudCA9PT0gdW5kZWZpbmVkICYmICFoYXNXYXJuZWRBYm91dFVzZXJBZ2VudCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdNYXRlcmlhbC1VSTogdXNlckFnZW50IHNob3VsZCBiZSBzdXBwbGllZCBpbiB0aGUgbXVpVGhlbWUgY29udGV4dFxcbiAgICAgIGZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuJykgOiB2b2lkIDA7XG5cbiAgICBoYXNXYXJuZWRBYm91dFVzZXJBZ2VudCA9IHRydWU7XG4gIH1cblxuICB2YXIgcHJlZml4QWxsID0gKDAsIF9jcmVhdGVQcmVmaXhlcjIuZGVmYXVsdCkoX2F1dG9wcmVmaXhlclN0YXRpYzIuZGVmYXVsdCk7XG5cbiAgaWYgKHVzZXJBZ2VudCA9PT0gZmFsc2UpIHtcbiAgICAvLyBEaXNhYmxlZCBhdXRvcHJlZml4ZXJcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIGlmICh1c2VyQWdlbnQgPT09ICdhbGwnIHx8IHVzZXJBZ2VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gUHJlZml4IGZvciBhbGwgdXNlciBhZ2VudFxuICAgIHJldHVybiBmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIHZhciBpc0ZsZXggPSBbJ2ZsZXgnLCAnaW5saW5lLWZsZXgnXS5pbmRleE9mKHN0eWxlLmRpc3BsYXkpICE9PSAtMTtcbiAgICAgIHZhciBzdHlsZVByZWZpeGVkID0gcHJlZml4QWxsKHN0eWxlKTtcblxuICAgICAgaWYgKGlzRmxleCkge1xuICAgICAgICB2YXIgZGlzcGxheSA9IHN0eWxlUHJlZml4ZWQuZGlzcGxheTtcbiAgICAgICAgaWYgKGlzQ2xpZW50KSB7XG4gICAgICAgICAgLy8gV2UgY2FuJ3QgYXBwbHkgdGhpcyBqb2luIHdpdGggcmVhY3QtZG9tOlxuICAgICAgICAgIC8vICNodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzY0NjdcbiAgICAgICAgICBzdHlsZVByZWZpeGVkLmRpc3BsYXkgPSBkaXNwbGF5W2Rpc3BsYXkubGVuZ3RoIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGVQcmVmaXhlZC5kaXNwbGF5ID0gZGlzcGxheS5qb2luKCc7IGRpc3BsYXk6ICcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHlsZVByZWZpeGVkO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdmFyIFByZWZpeGVyID0gKDAsIF9jcmVhdGVQcmVmaXhlcjQuZGVmYXVsdCkoX2F1dG9wcmVmaXhlckR5bmFtaWMyLmRlZmF1bHQsIHByZWZpeEFsbCk7XG4gICAgdmFyIHByZWZpeGVyID0gbmV3IFByZWZpeGVyKHtcbiAgICAgIHVzZXJBZ2VudDogdXNlckFnZW50XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICByZXR1cm4gcHJlZml4ZXIucHJlZml4KHN0eWxlKTtcbiAgICB9O1xuICB9XG59O1xuXG52YXIgX2NyZWF0ZVByZWZpeGVyID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9jcmVhdGVQcmVmaXhlcicpO1xuXG52YXIgX2NyZWF0ZVByZWZpeGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVByZWZpeGVyKTtcblxudmFyIF9jcmVhdGVQcmVmaXhlcjMgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9jcmVhdGVQcmVmaXhlcicpO1xuXG52YXIgX2NyZWF0ZVByZWZpeGVyNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVByZWZpeGVyMyk7XG5cbnZhciBfYXV0b3ByZWZpeGVyRHluYW1pYyA9IHJlcXVpcmUoJy4vYXV0b3ByZWZpeGVyRHluYW1pYycpO1xuXG52YXIgX2F1dG9wcmVmaXhlckR5bmFtaWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXV0b3ByZWZpeGVyRHluYW1pYyk7XG5cbnZhciBfYXV0b3ByZWZpeGVyU3RhdGljID0gcmVxdWlyZSgnLi9hdXRvcHJlZml4ZXJTdGF0aWMnKTtcblxudmFyIF9hdXRvcHJlZml4ZXJTdGF0aWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXV0b3ByZWZpeGVyU3RhdGljKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBoYXNXYXJuZWRBYm91dFVzZXJBZ2VudCA9IGZhbHNlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBtZW51OiAxMDAwLFxuICBhcHBCYXI6IDExMDAsXG4gIGRyYXdlck92ZXJsYXk6IDEyMDAsXG4gIGRyYXdlcjogMTMwMCxcbiAgZGlhbG9nT3ZlcmxheTogMTQwMCxcbiAgZGlhbG9nOiAxNTAwLFxuICBsYXllcjogMjAwMCxcbiAgcG9wb3ZlcjogMjEwMCxcbiAgc25hY2tiYXI6IDI5MDAsXG4gIHRvb2x0aXA6IDMwMDBcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIGljb25TaXplOiAyNCxcblxuICBkZXNrdG9wR3V0dGVyOiAyNCxcbiAgZGVza3RvcEd1dHRlck1vcmU6IDMyLFxuICBkZXNrdG9wR3V0dGVyTGVzczogMTYsXG4gIGRlc2t0b3BHdXR0ZXJNaW5pOiA4LFxuICBkZXNrdG9wS2V5bGluZUluY3JlbWVudDogNjQsXG4gIGRlc2t0b3BEcm9wRG93bk1lbnVJdGVtSGVpZ2h0OiAzMixcbiAgZGVza3RvcERyb3BEb3duTWVudUZvbnRTaXplOiAxNSxcbiAgZGVza3RvcERyYXdlck1lbnVJdGVtSGVpZ2h0OiA0OCxcbiAgZGVza3RvcFN1YmhlYWRlckhlaWdodDogNDgsXG4gIGRlc2t0b3BUb29sYmFySGVpZ2h0OiA1NlxufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY29sb3JzID0gcmVxdWlyZSgnLi4vY29sb3JzJyk7XG5cbnZhciBfY29sb3JNYW5pcHVsYXRvciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2NvbG9yTWFuaXB1bGF0b3InKTtcblxudmFyIF9zcGFjaW5nID0gcmVxdWlyZSgnLi4vc3BhY2luZycpO1xuXG52YXIgX3NwYWNpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3BhY2luZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogIExpZ2h0IFRoZW1lIGlzIHRoZSBkZWZhdWx0IHRoZW1lIHVzZWQgaW4gbWF0ZXJpYWwtdWkuIEl0IGlzIGd1YXJhbnRlZWQgdG9cbiAqICBoYXZlIGFsbCB0aGVtZSB2YXJpYWJsZXMgbmVlZGVkIGZvciBldmVyeSBjb21wb25lbnQuIFZhcmlhYmxlcyBub3QgZGVmaW5lZFxuICogIGluIGEgY3VzdG9tIHRoZW1lIHdpbGwgZGVmYXVsdCB0byB0aGVzZSB2YWx1ZXMuXG4gKi9cbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgc3BhY2luZzogX3NwYWNpbmcyLmRlZmF1bHQsXG4gIGZvbnRGYW1pbHk6ICdSb2JvdG8sIHNhbnMtc2VyaWYnLFxuICBib3JkZXJSYWRpdXM6IDIsXG4gIHBhbGV0dGU6IHtcbiAgICBwcmltYXJ5MUNvbG9yOiBfY29sb3JzLmN5YW41MDAsXG4gICAgcHJpbWFyeTJDb2xvcjogX2NvbG9ycy5jeWFuNzAwLFxuICAgIHByaW1hcnkzQ29sb3I6IF9jb2xvcnMuZ3JleTQwMCxcbiAgICBhY2NlbnQxQ29sb3I6IF9jb2xvcnMucGlua0EyMDAsXG4gICAgYWNjZW50MkNvbG9yOiBfY29sb3JzLmdyZXkxMDAsXG4gICAgYWNjZW50M0NvbG9yOiBfY29sb3JzLmdyZXk1MDAsXG4gICAgdGV4dENvbG9yOiBfY29sb3JzLmRhcmtCbGFjayxcbiAgICBzZWNvbmRhcnlUZXh0Q29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShfY29sb3JzLmRhcmtCbGFjaywgMC41NCksXG4gICAgYWx0ZXJuYXRlVGV4dENvbG9yOiBfY29sb3JzLndoaXRlLFxuICAgIGNhbnZhc0NvbG9yOiBfY29sb3JzLndoaXRlLFxuICAgIGJvcmRlckNvbG9yOiBfY29sb3JzLmdyZXkzMDAsXG4gICAgZGlzYWJsZWRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKF9jb2xvcnMuZGFya0JsYWNrLCAwLjMpLFxuICAgIHBpY2tlckhlYWRlckNvbG9yOiBfY29sb3JzLmN5YW41MDAsXG4gICAgY2xvY2tDaXJjbGVDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKF9jb2xvcnMuZGFya0JsYWNrLCAwLjA3KSxcbiAgICBzaGFkb3dDb2xvcjogX2NvbG9ycy5mdWxsQmxhY2tcbiAgfVxufTsgLyoqXG4gICAgKiBOQjogSWYgeW91IHVwZGF0ZSB0aGlzIGZpbGUsIHBsZWFzZSBhbHNvIHVwZGF0ZSBgZG9jcy9zcmMvYXBwL2N1c3RvbWl6YXRpb24vVGhlbWVzLmpzYFxuICAgICovIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLyoqXG4gKiBMb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanMuZm91bmRhdGlvbi8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG52YXIgSE9UX0NPVU5UID0gODAwLFxuICAgIEhPVF9TUEFOID0gMTY7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzYWZlR2V0KG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBrZXkgPT0gJ19fcHJvdG9fXydcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogb2JqZWN0W2tleV07XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIFN5bWJvbCA9IHJvb3QuU3ltYm9sLFxuICAgIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXksXG4gICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQsXG4gICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU5vdyA9IERhdGUubm93O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbnZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICB9XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn0oKSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgfVxuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVyZ2VgIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBtZXJnZWQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAqICBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgIGlmIChpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBrZXlzSW4pO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIG1lcmdlcyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIG1lcmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAqICBjb3VudGVycGFydHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICBzcmNWYWx1ZSA9IHNhZmVHZXQoc291cmNlLCBrZXkpLFxuICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgaWYgKHN0YWNrZWQpIHtcbiAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBzdGFja2VkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICA6IHVuZGVmaW5lZDtcblxuICB2YXIgaXNDb21tb24gPSBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIGlmIChpc0NvbW1vbikge1xuICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgaXNCdWZmZXIoc3JjVmFsdWUpLFxuICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgaWYgKGlzQXJyIHx8IGlzQnVmZiB8fCBpc1R5cGVkKSB7XG4gICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZUJ1ZmZlcihzcmNWYWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICBpZiAoaXNBcmd1bWVudHMob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghaXNPYmplY3Qob2JqVmFsdWUpIHx8IChzcmNJbmRleCAmJiBpc0Z1bmN0aW9uKG9ialZhbHVlKSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChpc0NvbW1vbikge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgfVxuICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAnd3JpdGFibGUnOiB0cnVlXG4gIH0pO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG59XG5cbi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzTmV3KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICBsZW5ndGggPSAxO1xuICAgIH1cbiAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICkge1xuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIGluZGV4ID0gLTE7XG4gICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICogbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gc2hvcnRPdXQoZnVuYykge1xuICB2YXIgY291bnQgPSAwLFxuICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgbGFzdENhbGxlZCA9IHN0YW1wO1xuICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50c1swXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAqL1xuZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC41LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHtcbiAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAqIH07XG4gKlxuICogdmFyIG90aGVyID0ge1xuICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICogfTtcbiAqXG4gKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICovXG52YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG59KTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZXJnZTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5mcm9tO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheScpO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQ29uc3VtYWJsZUFycmF5Mik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGdldE11aVRoZW1lO1xuXG52YXIgX2xvZGFzaCA9IHJlcXVpcmUoJ2xvZGFzaC5tZXJnZScpO1xuXG52YXIgX2xvZGFzaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2Rhc2gpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKCcuLi91dGlscy9jb2xvck1hbmlwdWxhdG9yJyk7XG5cbnZhciBfbGlnaHRCYXNlVGhlbWUgPSByZXF1aXJlKCcuL2Jhc2VUaGVtZXMvbGlnaHRCYXNlVGhlbWUnKTtcblxudmFyIF9saWdodEJhc2VUaGVtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9saWdodEJhc2VUaGVtZSk7XG5cbnZhciBfekluZGV4ID0gcmVxdWlyZSgnLi96SW5kZXgnKTtcblxudmFyIF96SW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfekluZGV4KTtcblxudmFyIF9hdXRvcHJlZml4ZXIgPSByZXF1aXJlKCcuLi91dGlscy9hdXRvcHJlZml4ZXInKTtcblxudmFyIF9hdXRvcHJlZml4ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXV0b3ByZWZpeGVyKTtcblxudmFyIF9jYWxsT25jZSA9IHJlcXVpcmUoJy4uL3V0aWxzL2NhbGxPbmNlJyk7XG5cbnZhciBfY2FsbE9uY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FsbE9uY2UpO1xuXG52YXIgX3J0bCA9IHJlcXVpcmUoJy4uL3V0aWxzL3J0bCcpO1xuXG52YXIgX3J0bDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ydGwpO1xuXG52YXIgX2NvbXBvc2UgPSByZXF1aXJlKCdyZWNvbXBvc2UvY29tcG9zZScpO1xuXG52YXIgX2NvbXBvc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tcG9zZSk7XG5cbnZhciBfdHlwb2dyYXBoeSA9IHJlcXVpcmUoJy4vdHlwb2dyYXBoeScpO1xuXG52YXIgX3R5cG9ncmFwaHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwb2dyYXBoeSk7XG5cbnZhciBfY29sb3JzID0gcmVxdWlyZSgnLi9jb2xvcnMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBHZXQgdGhlIE1VSSB0aGVtZSBjb3JyZXNwb25kaW5nIHRvIGEgYmFzZSB0aGVtZS5cbiAqIEl0J3MgcG9zc2libGUgdG8gb3ZlcnJpZGUgdGhlIGNvbXB1dGVkIHRoZW1lIHZhbHVlc1xuICogYnkgcHJvdmlkaW5nIGEgc2Vjb25kIGFyZ3VtZW50LiBUaGUgY2FsY3VsYXRlZFxuICogdGhlbWUgd2lsbCBiZSBkZWVwbHkgbWVyZ2VkIHdpdGggdGhlIHNlY29uZCBhcmd1bWVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0TXVpVGhlbWUobXVpVGhlbWUpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1vcmUgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbW9yZVtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBtdWlUaGVtZSA9IF9sb2Rhc2gyLmRlZmF1bHQuYXBwbHkodW5kZWZpbmVkLCBbe1xuICAgIHpJbmRleDogX3pJbmRleDIuZGVmYXVsdCxcbiAgICBpc1J0bDogZmFsc2UsXG4gICAgdXNlckFnZW50OiB1bmRlZmluZWRcbiAgfSwgX2xpZ2h0QmFzZVRoZW1lMi5kZWZhdWx0LCBtdWlUaGVtZV0uY29uY2F0KG1vcmUpKTtcblxuICB2YXIgX211aVRoZW1lID0gbXVpVGhlbWUsXG4gICAgICBzcGFjaW5nID0gX211aVRoZW1lLnNwYWNpbmcsXG4gICAgICBmb250RmFtaWx5ID0gX211aVRoZW1lLmZvbnRGYW1pbHksXG4gICAgICBwYWxldHRlID0gX211aVRoZW1lLnBhbGV0dGU7XG5cbiAgdmFyIGJhc2VUaGVtZSA9IHsgc3BhY2luZzogc3BhY2luZywgZm9udEZhbWlseTogZm9udEZhbWlseSwgcGFsZXR0ZTogcGFsZXR0ZSB9O1xuXG4gIG11aVRoZW1lID0gKDAsIF9sb2Rhc2gyLmRlZmF1bHQpKHtcbiAgICBhcHBCYXI6IHtcbiAgICAgIGNvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICB0ZXh0Q29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgaGVpZ2h0OiBzcGFjaW5nLmRlc2t0b3BLZXlsaW5lSW5jcmVtZW50LFxuICAgICAgdGl0bGVGb250V2VpZ2h0OiBfdHlwb2dyYXBoeTIuZGVmYXVsdC5mb250V2VpZ2h0Tm9ybWFsLFxuICAgICAgcGFkZGluZzogc3BhY2luZy5kZXNrdG9wR3V0dGVyXG4gICAgfSxcbiAgICBhdmF0YXI6IHtcbiAgICAgIGNvbG9yOiBwYWxldHRlLmNhbnZhc0NvbG9yLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZW1waGFzaXplKShwYWxldHRlLmNhbnZhc0NvbG9yLCAwLjI2KVxuICAgIH0sXG4gICAgYmFkZ2U6IHtcbiAgICAgIGNvbG9yOiBwYWxldHRlLmFsdGVybmF0ZVRleHRDb2xvcixcbiAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICBwcmltYXJ5Q29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgIHByaW1hcnlUZXh0Q29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgc2Vjb25kYXJ5Q29sb3I6IHBhbGV0dGUuYWNjZW50MUNvbG9yLFxuICAgICAgc2Vjb25kYXJ5VGV4dENvbG9yOiBwYWxldHRlLmFsdGVybmF0ZVRleHRDb2xvcixcbiAgICAgIGZvbnRXZWlnaHQ6IF90eXBvZ3JhcGh5Mi5kZWZhdWx0LmZvbnRXZWlnaHRNZWRpdW1cbiAgICB9LFxuICAgIGJvdHRvbU5hdmlnYXRpb246IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS5jYW52YXNDb2xvcixcbiAgICAgIHVuc2VsZWN0ZWRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUudGV4dENvbG9yLCAwLjU0KSxcbiAgICAgIHNlbGVjdGVkQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgIGhlaWdodDogNTYsXG4gICAgICB1bnNlbGVjdGVkRm9udFNpemU6IDEyLFxuICAgICAgc2VsZWN0ZWRGb250U2l6ZTogMTRcbiAgICB9LFxuICAgIGJ1dHRvbjoge1xuICAgICAgaGVpZ2h0OiAzNixcbiAgICAgIG1pbldpZHRoOiA4OCxcbiAgICAgIGljb25CdXR0b25TaXplOiBzcGFjaW5nLmljb25TaXplICogMlxuICAgIH0sXG4gICAgY2FyZDoge1xuICAgICAgdGl0bGVDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUudGV4dENvbG9yLCAwLjg3KSxcbiAgICAgIHN1YnRpdGxlQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnRleHRDb2xvciwgMC41NCksXG4gICAgICBmb250V2VpZ2h0OiBfdHlwb2dyYXBoeTIuZGVmYXVsdC5mb250V2VpZ2h0TWVkaXVtXG4gICAgfSxcbiAgICBjYXJkTWVkaWE6IHtcbiAgICAgIGNvbG9yOiBfY29sb3JzLmRhcmtXaGl0ZSxcbiAgICAgIG92ZXJsYXlDb250ZW50QmFja2dyb3VuZDogX2NvbG9ycy5saWdodEJsYWNrLFxuICAgICAgdGl0bGVDb2xvcjogX2NvbG9ycy5kYXJrV2hpdGUsXG4gICAgICBzdWJ0aXRsZUNvbG9yOiBfY29sb3JzLmxpZ2h0V2hpdGVcbiAgICB9LFxuICAgIGNhcmRUZXh0OiB7XG4gICAgICB0ZXh0Q29sb3I6IHBhbGV0dGUudGV4dENvbG9yXG4gICAgfSxcbiAgICBjaGVja2JveDoge1xuICAgICAgYm94Q29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgY2hlY2tlZENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICByZXF1aXJlZENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICBkaXNhYmxlZENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3IsXG4gICAgICBsYWJlbENvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgIGxhYmVsRGlzYWJsZWRDb2xvcjogcGFsZXR0ZS5kaXNhYmxlZENvbG9yXG4gICAgfSxcbiAgICBjaGlwOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5lbXBoYXNpemUpKHBhbGV0dGUuY2FudmFzQ29sb3IsIDAuMTIpLFxuICAgICAgZGVsZXRlSWNvbkNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuMjYpLFxuICAgICAgdGV4dENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuODcpLFxuICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgZm9udFdlaWdodDogX3R5cG9ncmFwaHkyLmRlZmF1bHQuZm9udFdlaWdodE5vcm1hbCxcbiAgICAgIHNoYWRvdzogJzAgMXB4IDZweCAnICsgKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUuc2hhZG93Q29sb3IsIDAuMTIpICsgJyxcXG4gICAgICAgIDAgMXB4IDRweCAnICsgKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUuc2hhZG93Q29sb3IsIDAuMTIpXG4gICAgfSxcbiAgICBkYXRlUGlja2VyOiB7XG4gICAgICBjb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgdGV4dENvbG9yOiBwYWxldHRlLmFsdGVybmF0ZVRleHRDb2xvcixcbiAgICAgIGNhbGVuZGFyVGV4dENvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgIHNlbGVjdENvbG9yOiBwYWxldHRlLnByaW1hcnkyQ29sb3IsXG4gICAgICBzZWxlY3RUZXh0Q29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgY2FsZW5kYXJZZWFyQmFja2dyb3VuZENvbG9yOiBwYWxldHRlLmNhbnZhc0NvbG9yLFxuICAgICAgaGVhZGVyQ29sb3I6IHBhbGV0dGUucGlja2VySGVhZGVyQ29sb3IgfHwgcGFsZXR0ZS5wcmltYXJ5MUNvbG9yXG4gICAgfSxcbiAgICBkaWFsb2c6IHtcbiAgICAgIHRpdGxlRm9udFNpemU6IDIyLFxuICAgICAgYm9keUZvbnRTaXplOiAxNixcbiAgICAgIGJvZHlDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUudGV4dENvbG9yLCAwLjYpXG4gICAgfSxcbiAgICBkcm9wRG93bk1lbnU6IHtcbiAgICAgIGFjY2VudENvbG9yOiBwYWxldHRlLmJvcmRlckNvbG9yXG4gICAgfSxcbiAgICBlbmhhbmNlZEJ1dHRvbjoge1xuICAgICAgdGFwSGlnaGxpZ2h0Q29sb3I6IF9jb2xvcnMudHJhbnNwYXJlbnRcbiAgICB9LFxuICAgIGZsYXRCdXR0b246IHtcbiAgICAgIGNvbG9yOiBfY29sb3JzLnRyYW5zcGFyZW50LFxuICAgICAgYnV0dG9uRmlsdGVyQ29sb3I6ICcjOTk5OTk5JyxcbiAgICAgIGRpc2FibGVkVGV4dENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuMyksXG4gICAgICB0ZXh0Q29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgcHJpbWFyeVRleHRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgc2Vjb25kYXJ5VGV4dENvbG9yOiBwYWxldHRlLmFjY2VudDFDb2xvcixcbiAgICAgIGZvbnRTaXplOiBfdHlwb2dyYXBoeTIuZGVmYXVsdC5mb250U3R5bGVCdXR0b25Gb250U2l6ZSxcbiAgICAgIGZvbnRXZWlnaHQ6IF90eXBvZ3JhcGh5Mi5kZWZhdWx0LmZvbnRXZWlnaHRNZWRpdW1cbiAgICB9LFxuICAgIGZsb2F0aW5nQWN0aW9uQnV0dG9uOiB7XG4gICAgICBidXR0b25TaXplOiA1NixcbiAgICAgIG1pbmlTaXplOiA0MCxcbiAgICAgIGNvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICBpY29uQ29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgc2Vjb25kYXJ5Q29sb3I6IHBhbGV0dGUuYWNjZW50MUNvbG9yLFxuICAgICAgc2Vjb25kYXJ5SWNvbkNvbG9yOiBwYWxldHRlLmFsdGVybmF0ZVRleHRDb2xvcixcbiAgICAgIGRpc2FibGVkVGV4dENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3IsXG4gICAgICBkaXNhYmxlZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZW1waGFzaXplKShwYWxldHRlLmNhbnZhc0NvbG9yLCAwLjEyKVxuICAgIH0sXG4gICAgZ3JpZFRpbGU6IHtcbiAgICAgIHRleHRDb2xvcjogX2NvbG9ycy53aGl0ZVxuICAgIH0sXG4gICAgaWNvbjoge1xuICAgICAgY29sb3I6IHBhbGV0dGUuY2FudmFzQ29sb3IsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvclxuICAgIH0sXG4gICAgaW5rQmFyOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUuYWNjZW50MUNvbG9yXG4gICAgfSxcbiAgICBkcmF3ZXI6IHtcbiAgICAgIHdpZHRoOiBzcGFjaW5nLmRlc2t0b3BLZXlsaW5lSW5jcmVtZW50ICogNCxcbiAgICAgIGNvbG9yOiBwYWxldHRlLmNhbnZhc0NvbG9yXG4gICAgfSxcbiAgICBsaXN0SXRlbToge1xuICAgICAgbmVzdGVkTGV2ZWxEZXB0aDogMTgsXG4gICAgICBzZWNvbmRhcnlUZXh0Q29sb3I6IHBhbGV0dGUuc2Vjb25kYXJ5VGV4dENvbG9yLFxuICAgICAgbGVmdEljb25Db2xvcjogX2NvbG9ycy5ncmV5NjAwLFxuICAgICAgcmlnaHRJY29uQ29sb3I6IF9jb2xvcnMuZ3JleTYwMFxuICAgIH0sXG4gICAgbWVudToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLmNhbnZhc0NvbG9yLFxuICAgICAgY29udGFpbmVyQmFja2dyb3VuZENvbG9yOiBwYWxldHRlLmNhbnZhc0NvbG9yXG4gICAgfSxcbiAgICBtZW51SXRlbToge1xuICAgICAgZGF0YUhlaWdodDogMzIsXG4gICAgICBoZWlnaHQ6IDQ4LFxuICAgICAgaG92ZXJDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUudGV4dENvbG9yLCAwLjEpLFxuICAgICAgcGFkZGluZzogc3BhY2luZy5kZXNrdG9wR3V0dGVyLFxuICAgICAgc2VsZWN0ZWRUZXh0Q29sb3I6IHBhbGV0dGUuYWNjZW50MUNvbG9yLFxuICAgICAgcmlnaHRJY29uRGVza3RvcEZpbGw6IF9jb2xvcnMuZ3JleTYwMFxuICAgIH0sXG4gICAgbWVudVN1YmhlYWRlcjoge1xuICAgICAgcGFkZGluZzogc3BhY2luZy5kZXNrdG9wR3V0dGVyLFxuICAgICAgYm9yZGVyQ29sb3I6IHBhbGV0dGUuYm9yZGVyQ29sb3IsXG4gICAgICB0ZXh0Q29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvclxuICAgIH0sXG4gICAgb3ZlcmxheToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBfY29sb3JzLmxpZ2h0QmxhY2tcbiAgICB9LFxuICAgIHBhcGVyOiB7XG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUuY2FudmFzQ29sb3IsXG4gICAgICB6RGVwdGhTaGFkb3dzOiBbWzEsIDYsIDAuMTIsIDEsIDQsIDAuMTJdLCBbMywgMTAsIDAuMTYsIDMsIDEwLCAwLjIzXSwgWzEwLCAzMCwgMC4xOSwgNiwgMTAsIDAuMjNdLCBbMTQsIDQ1LCAwLjI1LCAxMCwgMTgsIDAuMjJdLCBbMTksIDYwLCAwLjMwLCAxNSwgMjAsIDAuMjJdXS5tYXAoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuICcwICcgKyBkWzBdICsgJ3B4ICcgKyBkWzFdICsgJ3B4ICcgKyAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS5zaGFkb3dDb2xvciwgZFsyXSkgKyAnLFxcbiAgICAgICAgIDAgJyArIGRbM10gKyAncHggJyArIGRbNF0gKyAncHggJyArICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnNoYWRvd0NvbG9yLCBkWzVdKTtcbiAgICAgIH0pXG4gICAgfSxcbiAgICByYWRpb0J1dHRvbjoge1xuICAgICAgYm9yZGVyQ29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLmFsdGVybmF0ZVRleHRDb2xvcixcbiAgICAgIGNoZWNrZWRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgcmVxdWlyZWRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgZGlzYWJsZWRDb2xvcjogcGFsZXR0ZS5kaXNhYmxlZENvbG9yLFxuICAgICAgc2l6ZTogMjQsXG4gICAgICBsYWJlbENvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgIGxhYmVsRGlzYWJsZWRDb2xvcjogcGFsZXR0ZS5kaXNhYmxlZENvbG9yXG4gICAgfSxcbiAgICByYWlzZWRCdXR0b246IHtcbiAgICAgIGNvbG9yOiBwYWxldHRlLmFsdGVybmF0ZVRleHRDb2xvcixcbiAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICBwcmltYXJ5Q29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgIHByaW1hcnlUZXh0Q29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgc2Vjb25kYXJ5Q29sb3I6IHBhbGV0dGUuYWNjZW50MUNvbG9yLFxuICAgICAgc2Vjb25kYXJ5VGV4dENvbG9yOiBwYWxldHRlLmFsdGVybmF0ZVRleHRDb2xvcixcbiAgICAgIGRpc2FibGVkQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5kYXJrZW4pKHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLCAwLjEpLFxuICAgICAgZGlzYWJsZWRUZXh0Q29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnRleHRDb2xvciwgMC4zKSxcbiAgICAgIGZvbnRTaXplOiBfdHlwb2dyYXBoeTIuZGVmYXVsdC5mb250U3R5bGVCdXR0b25Gb250U2l6ZSxcbiAgICAgIGZvbnRXZWlnaHQ6IF90eXBvZ3JhcGh5Mi5kZWZhdWx0LmZvbnRXZWlnaHRNZWRpdW1cbiAgICB9LFxuICAgIHJlZnJlc2hJbmRpY2F0b3I6IHtcbiAgICAgIHN0cm9rZUNvbG9yOiBwYWxldHRlLmJvcmRlckNvbG9yLFxuICAgICAgbG9hZGluZ1N0cm9rZUNvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3JcbiAgICB9LFxuICAgIHJpcHBsZToge1xuICAgICAgY29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnRleHRDb2xvciwgMC44NylcbiAgICB9LFxuICAgIHNsaWRlcjoge1xuICAgICAgdHJhY2tTaXplOiAyLFxuICAgICAgdHJhY2tDb2xvcjogcGFsZXR0ZS5wcmltYXJ5M0NvbG9yLFxuICAgICAgdHJhY2tDb2xvclNlbGVjdGVkOiBwYWxldHRlLmFjY2VudDNDb2xvcixcbiAgICAgIGhhbmRsZVNpemU6IDEyLFxuICAgICAgaGFuZGxlU2l6ZURpc2FibGVkOiA4LFxuICAgICAgaGFuZGxlU2l6ZUFjdGl2ZTogMTgsXG4gICAgICBoYW5kbGVDb2xvclplcm86IHBhbGV0dGUucHJpbWFyeTNDb2xvcixcbiAgICAgIGhhbmRsZUZpbGxDb2xvcjogcGFsZXR0ZS5hbHRlcm5hdGVUZXh0Q29sb3IsXG4gICAgICBzZWxlY3Rpb25Db2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgcmlwcGxlQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvclxuICAgIH0sXG4gICAgc25hY2tiYXI6IHtcbiAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS5hbHRlcm5hdGVUZXh0Q29sb3IsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgYWN0aW9uQ29sb3I6IHBhbGV0dGUuYWNjZW50MUNvbG9yXG4gICAgfSxcbiAgICBzdWJoZWFkZXI6IHtcbiAgICAgIGNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuNTQpLFxuICAgICAgZm9udFdlaWdodDogX3R5cG9ncmFwaHkyLmRlZmF1bHQuZm9udFdlaWdodE1lZGl1bVxuICAgIH0sXG4gICAgc3RlcHBlcjoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgaG92ZXJCYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShfY29sb3JzLmJsYWNrLCAwLjA2KSxcbiAgICAgIGljb25Db2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgaG92ZXJlZEljb25Db2xvcjogX2NvbG9ycy5ncmV5NzAwLFxuICAgICAgaW5hY3RpdmVJY29uQ29sb3I6IF9jb2xvcnMuZ3JleTUwMCxcbiAgICAgIHRleHRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKF9jb2xvcnMuYmxhY2ssIDAuODcpLFxuICAgICAgZGlzYWJsZWRUZXh0Q29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShfY29sb3JzLmJsYWNrLCAwLjI2KSxcbiAgICAgIGNvbm5lY3RvckxpbmVDb2xvcjogX2NvbG9ycy5ncmV5NDAwXG4gICAgfSxcbiAgICBzdmdJY29uOiB7XG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3JcbiAgICB9LFxuICAgIHRhYmxlOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUuY2FudmFzQ29sb3JcbiAgICB9LFxuICAgIHRhYmxlRm9vdGVyOiB7XG4gICAgICBib3JkZXJDb2xvcjogcGFsZXR0ZS5ib3JkZXJDb2xvcixcbiAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS5hY2NlbnQzQ29sb3JcbiAgICB9LFxuICAgIHRhYmxlSGVhZGVyOiB7XG4gICAgICBib3JkZXJDb2xvcjogcGFsZXR0ZS5ib3JkZXJDb2xvclxuICAgIH0sXG4gICAgdGFibGVIZWFkZXJDb2x1bW46IHtcbiAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS5hY2NlbnQzQ29sb3IsXG4gICAgICBoZWlnaHQ6IDU2LFxuICAgICAgc3BhY2luZzogMjRcbiAgICB9LFxuICAgIHRhYmxlUm93OiB7XG4gICAgICBob3ZlckNvbG9yOiBwYWxldHRlLmFjY2VudDJDb2xvcixcbiAgICAgIHN0cmlwZUNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkoKDAsIF9jb2xvck1hbmlwdWxhdG9yLmxpZ2h0ZW4pKHBhbGV0dGUucHJpbWFyeTFDb2xvciwgMC41KSwgMC40KSxcbiAgICAgIHNlbGVjdGVkQ29sb3I6IHBhbGV0dGUuYm9yZGVyQ29sb3IsXG4gICAgICB0ZXh0Q29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgYm9yZGVyQ29sb3I6IHBhbGV0dGUuYm9yZGVyQ29sb3IsXG4gICAgICBoZWlnaHQ6IDQ4XG4gICAgfSxcbiAgICB0YWJsZVJvd0NvbHVtbjoge1xuICAgICAgaGVpZ2h0OiA0OCxcbiAgICAgIHNwYWNpbmc6IDI0XG4gICAgfSxcbiAgICB0YWJzOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgIHRleHRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLCAwLjcpLFxuICAgICAgc2VsZWN0ZWRUZXh0Q29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yXG4gICAgfSxcbiAgICB0ZXh0RmllbGQ6IHtcbiAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICBoaW50Q29sb3I6IHBhbGV0dGUuZGlzYWJsZWRDb2xvcixcbiAgICAgIGZsb2F0aW5nTGFiZWxDb2xvcjogcGFsZXR0ZS5kaXNhYmxlZENvbG9yLFxuICAgICAgZGlzYWJsZWRUZXh0Q29sb3I6IHBhbGV0dGUuZGlzYWJsZWRDb2xvcixcbiAgICAgIGVycm9yQ29sb3I6IF9jb2xvcnMucmVkNTAwLFxuICAgICAgZm9jdXNDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgYm9yZGVyQ29sb3I6IHBhbGV0dGUuYm9yZGVyQ29sb3JcbiAgICB9LFxuICAgIHRpbWVQaWNrZXI6IHtcbiAgICAgIGNvbG9yOiBwYWxldHRlLmFsdGVybmF0ZVRleHRDb2xvcixcbiAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS5hbHRlcm5hdGVUZXh0Q29sb3IsXG4gICAgICBhY2NlbnRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgY2xvY2tDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICBjbG9ja0NpcmNsZUNvbG9yOiBwYWxldHRlLmNsb2NrQ2lyY2xlQ29sb3IsXG4gICAgICBoZWFkZXJDb2xvcjogcGFsZXR0ZS5waWNrZXJIZWFkZXJDb2xvciB8fCBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICBzZWxlY3RDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MkNvbG9yLFxuICAgICAgc2VsZWN0VGV4dENvbG9yOiBwYWxldHRlLmFsdGVybmF0ZVRleHRDb2xvclxuICAgIH0sXG4gICAgdG9nZ2xlOiB7XG4gICAgICB0aHVtYk9uQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgIHRodW1iT2ZmQ29sb3I6IHBhbGV0dGUuYWNjZW50MkNvbG9yLFxuICAgICAgdGh1bWJEaXNhYmxlZENvbG9yOiBwYWxldHRlLmJvcmRlckNvbG9yLFxuICAgICAgdGh1bWJSZXF1aXJlZENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICB0cmFja09uQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnByaW1hcnkxQ29sb3IsIDAuNSksXG4gICAgICB0cmFja09mZkNvbG9yOiBwYWxldHRlLnByaW1hcnkzQ29sb3IsXG4gICAgICB0cmFja0Rpc2FibGVkQ29sb3I6IHBhbGV0dGUucHJpbWFyeTNDb2xvcixcbiAgICAgIGxhYmVsQ29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgbGFiZWxEaXNhYmxlZENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3IsXG4gICAgICB0cmFja1JlcXVpcmVkQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnByaW1hcnkxQ29sb3IsIDAuNSlcbiAgICB9LFxuICAgIHRvb2xiYXI6IHtcbiAgICAgIGNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuNTQpLFxuICAgICAgaG92ZXJDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUudGV4dENvbG9yLCAwLjg3KSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmRhcmtlbikocGFsZXR0ZS5hY2NlbnQyQ29sb3IsIDAuMDUpLFxuICAgICAgaGVpZ2h0OiA1NixcbiAgICAgIHRpdGxlRm9udFNpemU6IDIwLFxuICAgICAgaWNvbkNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuNCksXG4gICAgICBzZXBhcmF0b3JDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUudGV4dENvbG9yLCAwLjE3NSksXG4gICAgICBtZW51SG92ZXJDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUudGV4dENvbG9yLCAwLjEpXG4gICAgfSxcbiAgICB0b29sdGlwOiB7XG4gICAgICBjb2xvcjogX2NvbG9ycy53aGl0ZSxcbiAgICAgIHJpcHBsZUJhY2tncm91bmRDb2xvcjogX2NvbG9ycy5ncmV5NzAwLFxuICAgICAgb3BhY2l0eTogMC45XG4gICAgfVxuICB9LCBtdWlUaGVtZSwge1xuICAgIGJhc2VUaGVtZTogYmFzZVRoZW1lLCAvLyBUbyBwcm92aWRlIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAgcmF3VGhlbWU6IGJhc2VUaGVtZSAvLyBUbyBwcm92aWRlIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gIH0pO1xuXG4gIHZhciB0cmFuc2Zvcm1lcnMgPSBbX2F1dG9wcmVmaXhlcjIuZGVmYXVsdCwgX3J0bDIuZGVmYXVsdCwgX2NhbGxPbmNlMi5kZWZhdWx0XS5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gdChtdWlUaGVtZSk7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0O1xuICB9KTtcblxuICBtdWlUaGVtZS5wcmVwYXJlU3R5bGVzID0gX2NvbXBvc2UyLmRlZmF1bHQuYXBwbHkodW5kZWZpbmVkLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5My5kZWZhdWx0KSh0cmFuc2Zvcm1lcnMpKTtcblxuICByZXR1cm4gbXVpVGhlbWU7XG59IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCkge1xuICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5zZXRQcm90b3R5cGVPZjtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGlkID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbiAoaXQpIHtcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogTUVUQSxcbiAgTkVFRDogZmFsc2UsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWs6IGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xuICAgIHZhciBpID0gMTtcbiAgICB2YXIgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN5bWJvbDtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2xcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbnZhciBET01JdGVyYWJsZXMgPSAoJ0NTU1J1bGVMaXN0LENTU1N0eWxlRGVjbGFyYXRpb24sQ1NTVmFsdWVMaXN0LENsaWVudFJlY3RMaXN0LERPTVJlY3RMaXN0LERPTVN0cmluZ0xpc3QsJyArXG4gICdET01Ub2tlbkxpc3QsRGF0YVRyYW5zZmVySXRlbUxpc3QsRmlsZUxpc3QsSFRNTEFsbENvbGxlY3Rpb24sSFRNTENvbGxlY3Rpb24sSFRNTEZvcm1FbGVtZW50LEhUTUxTZWxlY3RFbGVtZW50LCcgK1xuICAnTWVkaWFMaXN0LE1pbWVUeXBlQXJyYXksTmFtZWROb2RlTWFwLE5vZGVMaXN0LFBhaW50UmVxdWVzdExpc3QsUGx1Z2luLFBsdWdpbkFycmF5LFNWR0xlbmd0aExpc3QsU1ZHTnVtYmVyTGlzdCwnICtcbiAgJ1NWR1BhdGhTZWdMaXN0LFNWR1BvaW50TGlzdCxTVkdTdHJpbmdMaXN0LFNWR1RyYW5zZm9ybUxpc3QsU291cmNlQnVmZmVyTGlzdCxTdHlsZVNoZWV0TGlzdCxUZXh0VHJhY2tDdWVMaXN0LCcgK1xuICAnVGV4dFRyYWNrTGlzdCxUb3VjaExpc3QnKS5zcGxpdCgnLCcpO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IERPTUl0ZXJhYmxlcy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IERPTUl0ZXJhYmxlc1tpXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG59XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdpdGVyYXRvcicpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpIHtcbiAgcmV0dXJuICRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgIGZhbHNlLFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW1cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGVtcHR5RnVuY3Rpb247XG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBiYT1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLGVhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudFwiKSxBPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLEM9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIiksZmE9cmVxdWlyZShcImZianMvbGliL2dldEFjdGl2ZUVsZW1lbnRcIiksaGE9cmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSxqYT1yZXF1aXJlKFwiZmJqcy9saWIvY29udGFpbnNOb2RlXCIpLGthPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKTtcbmZ1bmN0aW9uIEQoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxjPVwiaHR0cDovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2JhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9ZWE/dm9pZCAwOkQoXCIyMjdcIik7XG5mdW5jdGlvbiBtYShhLGIsYyxkLGUsZixoLGcsayl7dGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITE7dGhpcy5fY2F1Z2h0RXJyb3I9bnVsbDt2YXIgdj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyx2KX1jYXRjaChsKXt0aGlzLl9jYXVnaHRFcnJvcj1sLHRoaXMuX2hhc0NhdWdodEVycm9yPSEwfX1cbnZhciBFPXtfY2F1Z2h0RXJyb3I6bnVsbCxfaGFzQ2F1Z2h0RXJyb3I6ITEsX3JldGhyb3dFcnJvcjpudWxsLF9oYXNSZXRocm93RXJyb3I6ITEsaW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsZyxrKXttYS5hcHBseShFLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7RS5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKEUuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHY9RS5jbGVhckNhdWdodEVycm9yKCk7RS5faGFzUmV0aHJvd0Vycm9yfHwoRS5faGFzUmV0aHJvd0Vycm9yPSEwLEUuX3JldGhyb3dFcnJvcj12KX19LHJldGhyb3dDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBuYS5hcHBseShFLGFyZ3VtZW50cyl9LGhhc0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEUuX2hhc0NhdWdodEVycm9yfSxjbGVhckNhdWdodEVycm9yOmZ1bmN0aW9uKCl7aWYoRS5faGFzQ2F1Z2h0RXJyb3Ipe3ZhciBhPVxuRS5fY2F1Z2h0RXJyb3I7RS5fY2F1Z2h0RXJyb3I9bnVsbDtFLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1EKFwiMTk4XCIpfX07ZnVuY3Rpb24gbmEoKXtpZihFLl9oYXNSZXRocm93RXJyb3Ipe3ZhciBhPUUuX3JldGhyb3dFcnJvcjtFLl9yZXRocm93RXJyb3I9bnVsbDtFLl9oYXNSZXRocm93RXJyb3I9ITE7dGhyb3cgYTt9fXZhciBvYT1udWxsLHBhPXt9O1xuZnVuY3Rpb24gcWEoKXtpZihvYSlmb3IodmFyIGEgaW4gcGEpe3ZhciBiPXBhW2FdLGM9b2EuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDpEKFwiOTZcIixhKTtpZighcmFbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6RChcIjk3XCIsYSk7cmFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0saD1iLGc9ZDtzYS5oYXNPd25Qcm9wZXJ0eShnKT9EKFwiOTlcIixnKTp2b2lkIDA7c2FbZ109Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmdGEoa1tlXSxoLGcpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHRhKGYucmVnaXN0cmF0aW9uTmFtZSxoLGcpLGU9ITApOmU9ITE7ZT92b2lkIDA6RChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHRhKGEsYixjKXt1YVthXT9EKFwiMTAwXCIsYSk6dm9pZCAwO3VhW2FdPWI7dmFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgcmE9W10sc2E9e30sdWE9e30sdmE9e307ZnVuY3Rpb24gd2EoYSl7b2E/RChcIjEwMVwiKTp2b2lkIDA7b2E9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7cWEoKX1mdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtwYS5oYXNPd25Qcm9wZXJ0eShjKSYmcGFbY109PT1kfHwocGFbY10/RChcIjEwMlwiLGMpOnZvaWQgMCxwYVtjXT1kLGI9ITApfWImJnFhKCl9XG52YXIgQ2E9T2JqZWN0LmZyZWV6ZSh7cGx1Z2luczpyYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6c2EscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6dWEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczp2YSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp3YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6eGF9KSxEYT1udWxsLEVhPW51bGwsRmE9bnVsbDtmdW5jdGlvbiBHYShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PUZhKGQpO0UuaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBIYShhLGIpe251bGw9PWI/RChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gSWEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIEphPW51bGw7XG5mdW5jdGlvbiBLYShhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKylHYShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJkdhKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIExhKGEpe3JldHVybiBLYShhLCEwKX1mdW5jdGlvbiBNYShhKXtyZXR1cm4gS2EoYSwhMSl9dmFyIE5hPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOndhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp4YX07XG5mdW5jdGlvbiBPYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPURhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBQYShhLGIpe251bGwhPT1hJiYoSmE9SGEoSmEsYSkpO2E9SmE7SmE9bnVsbDthJiYoYj9JYShhLExhKTpJYShhLE1hKSxKYT9EKFwiOTVcIik6dm9pZCAwLEUucmV0aHJvd0NhdWdodEVycm9yKCkpfWZ1bmN0aW9uIFFhKGEsYixjLGQpe2Zvcih2YXIgZT1udWxsLGY9MDtmPHJhLmxlbmd0aDtmKyspe3ZhciBoPXJhW2ZdO2gmJihoPWguZXh0cmFjdEV2ZW50cyhhLGIsYyxkKSkmJihlPUhhKGUsaCkpfVBhKGUsITEpfXZhciBSYT1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246TmEsZ2V0TGlzdGVuZXI6T2EscnVuRXZlbnRzSW5CYXRjaDpQYSxydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOlFhfSksU2E9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRj1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK1NhLFRhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrU2E7XG5mdW5jdGlvbiBVYShhKXtpZihhW0ZdKXJldHVybiBhW0ZdO2Zvcig7IWFbRl07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtGXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIFZhKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTtEKFwiMzNcIil9ZnVuY3Rpb24gWGEoYSl7cmV0dXJuIGFbVGFdfHxudWxsfXZhciBiYj1PYmplY3QuZnJlZXplKHtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbRl09YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6VWEsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbRl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpWYSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOlhhLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW1RhXT1ifX0pO1xuZnVuY3Rpb24gTChhKXtkbyBhPWFbXCJyZXR1cm5cIl07d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gY2IoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT1MKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfWZ1bmN0aW9uIGRiKGEsYixjKXtpZihiPU9hKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9SGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9SGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gZWIoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmY2IoYS5fdGFyZ2V0SW5zdCxkYixhKX1cbmZ1bmN0aW9uIGZiKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0woYik6bnVsbDtjYihiLGRiLGEpfX1mdW5jdGlvbiBnYihhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1PYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9SGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9SGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIGhiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmZ2IoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIGliKGEpe0lhKGEsZWIpfVxuZnVuY3Rpb24gamIoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGg9MCxnPWU7ZztnPUwoZykpaCsrO2c9MDtmb3IodmFyIGs9ZjtrO2s9TChrKSlnKys7Zm9yKDswPGgtZzspZT1MKGUpLGgtLTtmb3IoOzA8Zy1oOylmPUwoZiksZy0tO2Zvcig7aC0tOyl7aWYoZT09PWZ8fGU9PT1mLmFsdGVybmF0ZSlicmVhayBhO2U9TChlKTtmPUwoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2g9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWgmJmg9PT1mKWJyZWFrO2UucHVzaChjKTtjPUwoYyl9Zm9yKGM9W107ZCYmZCE9PWY7KXtoPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztjLnB1c2goZCk7ZD1MKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspZ2IoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspZ2IoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIga2I9T2JqZWN0LmZyZWV6ZSh7YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczppYixhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXtJYShhLGZiKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOmpiLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe0lhKGEsaGIpfX0pLGxiPW51bGw7ZnVuY3Rpb24gbWIoKXshbGImJm0uY2FuVXNlRE9NJiYobGI9XCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50P1widGV4dENvbnRlbnRcIjpcImlubmVyVGV4dFwiKTtyZXR1cm4gbGJ9dmFyIE09e19yb290Om51bGwsX3N0YXJ0VGV4dDpudWxsLF9mYWxsYmFja1RleHQ6bnVsbH07XG5mdW5jdGlvbiBuYigpe2lmKE0uX2ZhbGxiYWNrVGV4dClyZXR1cm4gTS5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9TS5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPW9iKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgaD1jLWE7Zm9yKGQ9MTtkPD1oJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtNLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gTS5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIG9iKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gTS5fcm9vdD9NLl9yb290LnZhbHVlOk0uX3Jvb3RbbWIoKV19XG52YXIgcGI9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxxYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6Qy50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIE4oYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP0MudGhhdFJldHVybnNUcnVlOkMudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbkEoTi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1DLnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OkMudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxwYi5sZW5ndGg7YSsrKXRoaXNbcGJbYV1dPW51bGx9fSk7Ti5JbnRlcmZhY2U9cWI7Ti5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7QShlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9QSh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtyYihjKTtyZXR1cm4gY307cmIoTik7XG5mdW5jdGlvbiBzYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiB0YihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6RChcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gcmIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9c2I7YS5yZWxlYXNlPXRifXZhciB1Yj1OLmV4dGVuZCh7ZGF0YTpudWxsfSksdmI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHdiPVs5LDEzLDI3LDMyXSx4Yj1tLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cseWI9bnVsbDttLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoeWI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB6Yj1tLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXliLEFiPW0uY2FuVXNlRE9NJiYoIXhifHx5YiYmODx5YiYmMTE+PXliKSxCYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxLYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcENvbXBvc2l0aW9uRW5kXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wVGV4dElucHV0XCIsXCJ0b3BQYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvbkVuZCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uU3RhcnQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25VcGRhdGUgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9fSxMYj0hMTtcbmZ1bmN0aW9uIE1iKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlVcFwiOnJldHVybi0xIT09d2IuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJ0b3BLZXlEb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwidG9wS2V5UHJlc3NcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcEJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBOYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBPYj0hMTtmdW5jdGlvbiBQYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gTmIoYik7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0xiPSEwO3JldHVybiBCYjtjYXNlIFwidG9wVGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1CYiYmTGI/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gUWIoYSxiKXtpZihPYilyZXR1cm5cInRvcENvbXBvc2l0aW9uRW5kXCI9PT1hfHwheGImJk1iKGEsYik/KGE9bmIoKSxNLl9yb290PW51bGwsTS5fc3RhcnRUZXh0PW51bGwsTS5fZmFsbGJhY2tUZXh0PW51bGwsT2I9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIEFiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIFJiPXtldmVudFR5cGVzOktiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZih4YiliOntzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uU3RhcnRcIjplPUtiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjplPUtiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uVXBkYXRlXCI6ZT1LYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgT2I/TWIoYSxjKSYmKGU9S2IuY29tcG9zaXRpb25FbmQpOlwidG9wS2V5RG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1LYi5jb21wb3NpdGlvblN0YXJ0KTtlPyhBYiYmKE9ifHxlIT09S2IuY29tcG9zaXRpb25TdGFydD9lPT09S2IuY29tcG9zaXRpb25FbmQmJk9iJiYoZj1uYigpKTooTS5fcm9vdD1kLE0uX3N0YXJ0VGV4dD1vYigpLE9iPSEwKSksZT11Yi5nZXRQb29sZWQoZSxcbmIsYyxkKSxmP2UuZGF0YT1mOihmPU5iKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxpYihlKSxmPWUpOmY9bnVsbDsoYT16Yj9QYihhLGMpOlFiKGEsYykpPyhiPXZiLmdldFBvb2xlZChLYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsaWIoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sU2I9bnVsbCxUYj17aW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDpmdW5jdGlvbihhKXtTYj1hfX0sVWI9bnVsbCxWYj1udWxsO2Z1bmN0aW9uIFdiKGEpe2lmKGE9RWEoYSkpe1NiJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgU2IucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZT92b2lkIDA6RChcIjE5NFwiKTt2YXIgYj1EYShhLnN0YXRlTm9kZSk7U2IucmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShhLnN0YXRlTm9kZSxhLnR5cGUsYil9fWZ1bmN0aW9uIFhiKGEpe1ViP1ZiP1ZiLnB1c2goYSk6VmI9W2FdOlViPWF9XG5mdW5jdGlvbiBZYigpe3JldHVybiBudWxsIT09VWJ8fG51bGwhPT1WYn1mdW5jdGlvbiBaYigpe2lmKFViKXt2YXIgYT1VYixiPVZiO1ZiPVViPW51bGw7V2IoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKVdiKGJbYV0pfX12YXIgJGI9T2JqZWN0LmZyZWV6ZSh7aW5qZWN0aW9uOlRiLGVucXVldWVTdGF0ZVJlc3RvcmU6WGIsbmVlZHNTdGF0ZVJlc3RvcmU6WWIscmVzdG9yZVN0YXRlSWZOZWVkZWQ6WmJ9KTtmdW5jdGlvbiBhYyhhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIGJjKGEsYixjKXtyZXR1cm4gYShiLGMpfWZ1bmN0aW9uIGNjKCl7fXZhciBkYz0hMTtmdW5jdGlvbiBlYyhhLGIpe2lmKGRjKXJldHVybiBhKGIpO2RjPSEwO3RyeXtyZXR1cm4gYWMoYSxiKX1maW5hbGx5e2RjPSExLFliKCkmJihjYygpLFpiKCkpfX1cbnZhciBmYz17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBnYyhhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWZjW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBoYyhhKXthPWEudGFyZ2V0fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfVxuZnVuY3Rpb24gaWMoYSxiKXtpZighbS5jYW5Vc2VET018fGImJiEoXCJhZGRFdmVudExpc3RlbmVyXCJpbiBkb2N1bWVudCkpcmV0dXJuITE7YT1cIm9uXCIrYTtiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBqYyhhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24ga2MoYSl7dmFyIGI9amMoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYy5nZXQuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2Muc2V0LmNhbGwodGhpcyxhKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pLHtnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPW51bGw7ZGVsZXRlIGFbYl19fX1cbmZ1bmN0aW9uIGxjKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1rYyhhKSl9ZnVuY3Rpb24gbWMoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPWpjKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9XG52YXIgbmM9ZWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIsTz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0sb2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHBjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY2FsbFwiKTo2MDEwNCxxYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnJldHVyblwiKTo2MDEwNSxyYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixzYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHRjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx2Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsd2M9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLFxueGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5Yz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gemMoYSl7aWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXljJiZhW3ljXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gQWMoYSl7YT1hLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2Ugc2M6cmV0dXJuXCJSZWFjdEZyYWdtZW50XCI7Y2FzZSByYzpyZXR1cm5cIlJlYWN0UG9ydGFsXCI7Y2FzZSBwYzpyZXR1cm5cIlJlYWN0Q2FsbFwiO2Nhc2UgcWM6cmV0dXJuXCJSZWFjdFJldHVyblwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeGM6cmV0dXJuIGE9YS5yZW5kZXIuZGlzcGxheU5hbWV8fGEucmVuZGVyLm5hbWV8fFwiXCIsXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCJ9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBCYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlO3ZhciBlPUFjKGEpO3ZhciBmPW51bGw7YyYmKGY9QWMoYykpO2M9ZDtlPVwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKGM/XCIgKGF0IFwiK2MuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitjLmxpbmVOdW1iZXIrXCIpXCI6Zj9cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDplPVwiXCJ9Yis9ZTthPWFbXCJyZXR1cm5cIl19d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgQ2M9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLERjPXt9LEVjPXt9O2Z1bmN0aW9uIEZjKGEpe2lmKEVjLmhhc093blByb3BlcnR5KGEpKXJldHVybiEwO2lmKERjLmhhc093blByb3BlcnR5KGEpKXJldHVybiExO2lmKENjLnRlc3QoYSkpcmV0dXJuIEVjW2FdPSEwO0RjW2FdPSEwO3JldHVybiExfVxuZnVuY3Rpb24gR2MoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gSGMoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8R2MoYSxiLGMsZCkpcmV0dXJuITA7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9XG5mdW5jdGlvbiBVKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgVj17fTtcImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwwLCExLGEsbnVsbCl9KTtcbltbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtWW2JdPW5ldyBVKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMiwhMSxhLG51bGwpfSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMCxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw2LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIFNjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gVGMoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoU2MsXG5UYyk7VltiXT1uZXcgVShiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoU2MsVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoU2MsVGMpO1ZbYl09bmV3IFUoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtWLnRhYkluZGV4PW5ldyBVKFwidGFiSW5kZXhcIiwxLCExLFwidGFiaW5kZXhcIixudWxsKTtcbmZ1bmN0aW9uIFVjKGEsYixjLGQpe3ZhciBlPVYuaGFzT3duUHJvcGVydHkoYik/VltiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KEhjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9GYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gVmMoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFdjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVhjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gWWMoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZVYyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gWmMoYSxiKXtZYyhhLGIpO3ZhciBjPVhjKGIudmFsdWUpO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWIudHlwZSl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtiLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/JGMoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmJGMoYSxiLnR5cGUsWGMoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBhZChhLGIpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSlcIlwiPT09YS52YWx1ZSYmKGEudmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlKSxhLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Yj1hLm5hbWU7XCJcIiE9PWImJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO1wiXCIhPT1iJiYoYS5uYW1lPWIpfWZ1bmN0aW9uICRjKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1cbmZ1bmN0aW9uIFhjKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX12YXIgYmQ9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ2hhbmdlIHRvcENsaWNrIHRvcEZvY3VzIHRvcElucHV0IHRvcEtleURvd24gdG9wS2V5VXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gY2QoYSxiLGMpe2E9Ti5nZXRQb29sZWQoYmQuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtYYihjKTtpYihhKTtyZXR1cm4gYX12YXIgZGQ9bnVsbCxlZD1udWxsO2Z1bmN0aW9uIGZkKGEpe1BhKGEsITEpfVxuZnVuY3Rpb24gZ2QoYSl7dmFyIGI9VmEoYSk7aWYobWMoYikpcmV0dXJuIGF9ZnVuY3Rpb24gaGQoYSxiKXtpZihcInRvcENoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgaWQ9ITE7bS5jYW5Vc2VET00mJihpZD1pYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtmdW5jdGlvbiBqZCgpe2RkJiYoZGQuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsa2QpLGVkPWRkPW51bGwpfWZ1bmN0aW9uIGtkKGEpe1widmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZnZChlZCkmJihhPWNkKGVkLGEsaGMoYSkpLGVjKGZkLGEpKX1mdW5jdGlvbiBsZChhLGIsYyl7XCJ0b3BGb2N1c1wiPT09YT8oamQoKSxkZD1iLGVkPWMsZGQuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsa2QpKTpcInRvcEJsdXJcIj09PWEmJmpkKCl9XG5mdW5jdGlvbiBtZChhKXtpZihcInRvcFNlbGVjdGlvbkNoYW5nZVwiPT09YXx8XCJ0b3BLZXlVcFwiPT09YXx8XCJ0b3BLZXlEb3duXCI9PT1hKXJldHVybiBnZChlZCl9ZnVuY3Rpb24gbmQoYSxiKXtpZihcInRvcENsaWNrXCI9PT1hKXJldHVybiBnZChiKX1mdW5jdGlvbiBvZChhLGIpe2lmKFwidG9wSW5wdXRcIj09PWF8fFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBnZChiKX1cbnZhciBwZD17ZXZlbnRUeXBlczpiZCxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOmlkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9WYShiKTp3aW5kb3csZj12b2lkIDAsaD12b2lkIDAsZz1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJzZWxlY3RcIj09PWd8fFwiaW5wdXRcIj09PWcmJlwiZmlsZVwiPT09ZS50eXBlP2Y9aGQ6Z2MoZSk/aWQ/Zj1vZDooZj1tZCxoPWxkKTooZz1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zy50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZj1uZCk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gY2QoZixjLGQpO2gmJmgoYSxlLGIpO1widG9wQmx1clwiPT09YSYmbnVsbCE9YiYmKGE9Yi5fd3JhcHBlclN0YXRlfHxlLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJiRjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LHFkPU4uZXh0ZW5kKHt2aWV3Om51bGwsXG5kZXRhaWw6bnVsbH0pLHJkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBzZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPXJkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gdGQoKXtyZXR1cm4gc2R9XG52YXIgdWQ9cWQuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOnRkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pLHZkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX19LHdkPXtldmVudFR5cGVzOnZkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxcbmIsYyxkKXtpZihcInRvcE1vdXNlT3ZlclwiPT09YSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fFwidG9wTW91c2VPdXRcIiE9PWEmJlwidG9wTW91c2VPdmVyXCIhPT1hKXJldHVybiBudWxsO3ZhciBlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O1widG9wTW91c2VPdXRcIj09PWE/KGE9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP1VhKGIpOm51bGwpOmE9bnVsbDtpZihhPT09YilyZXR1cm4gbnVsbDt2YXIgZj1udWxsPT1hP2U6VmEoYSk7ZT1udWxsPT1iP2U6VmEoYik7dmFyIGg9dWQuZ2V0UG9vbGVkKHZkLm1vdXNlTGVhdmUsYSxjLGQpO2gudHlwZT1cIm1vdXNlbGVhdmVcIjtoLnRhcmdldD1mO2gucmVsYXRlZFRhcmdldD1lO2M9dWQuZ2V0UG9vbGVkKHZkLm1vdXNlRW50ZXIsYixjLGQpO2MudHlwZT1cIm1vdXNlZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1cbmY7amIoaCxjLGEsYik7cmV0dXJuW2gsY119fTtmdW5jdGlvbiB4ZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7YltcInJldHVyblwiXTspYj1iW1wicmV0dXJuXCJdO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2JbXCJyZXR1cm5cIl07KWlmKGI9YltcInJldHVyblwiXSwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIHlkKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PXhkKGEpOiExfWZ1bmN0aW9uIHpkKGEpezIhPT14ZChhKT9EKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIEFkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPXhkKGEpLDM9PT1iP0QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Y1tcInJldHVyblwiXSxmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09YylyZXR1cm4gemQoZSksYTtpZihoPT09ZClyZXR1cm4gemQoZSksYjtoPWguc2libGluZ31EKFwiMTg4XCIpfWlmKGNbXCJyZXR1cm5cIl0hPT1kW1wicmV0dXJuXCJdKWM9ZSxkPWY7ZWxzZXtoPSExO2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWU7ZD1mO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZTtjPWY7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpe2ZvcihnPWYuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZjtkPWU7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1mO2M9ZTticmVha31nPWcuc2libGluZ31oP1xudm9pZCAwOkQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9EKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/RChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBCZChhKXthPUFkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gQ2QoYSl7YT1BZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBEZD1OLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksRWQ9Ti5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxGZD1xZC5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gR2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgSGQ9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LElkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxKZD1xZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9SGRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9R2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP0lkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9HZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9HZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLEtkPXVkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxMZD1xZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTp0ZH0pLE1kPU4uZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLE5kPXVkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksT2Q9e30sUGQ9e307ZnVuY3Rpb24gUWQoYSxiKXt2YXIgYz1hWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSxkPVwib25cIitjO2M9XCJ0b3BcIitjO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O09kW2FdPWI7UGRbY109Yn1cblwiYmx1ciBjYW5jZWwgY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZG91YmxlQ2xpY2sgZHJhZ0VuZCBkcmFnU3RhcnQgZHJvcCBmb2N1cyBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbW91c2VEb3duIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSByYXRlQ2hhbmdlIHJlc2V0IHNlZWtlZCBzdWJtaXQgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtRZChhLCEwKX0pO1xuXCJhYm9ydCBhbmltYXRpb25FbmQgYW5pbWF0aW9uSXRlcmF0aW9uIGFuaW1hdGlvblN0YXJ0IGNhblBsYXkgY2FuUGxheVRocm91Z2ggZHJhZyBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBwbGF5aW5nIHByb2dyZXNzIHNjcm9sbCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvZ2dsZSB0b3VjaE1vdmUgdHJhbnNpdGlvbkVuZCB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UWQoYSwhMSl9KTtcbnZhciBSZD17ZXZlbnRUeXBlczpPZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1QZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9UGRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDA9PT1HZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOmE9SmQ7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpjYXNlIFwidG9wRm9jdXNcIjphPUZkO2JyZWFrO2Nhc2UgXCJ0b3BDbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwidG9wRG91YmxlQ2xpY2tcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcE1vdXNlTW92ZVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6Y2FzZSBcInRvcE1vdXNlT3V0XCI6Y2FzZSBcInRvcE1vdXNlT3ZlclwiOmNhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmE9XG51ZDticmVhaztjYXNlIFwidG9wRHJhZ1wiOmNhc2UgXCJ0b3BEcmFnRW5kXCI6Y2FzZSBcInRvcERyYWdFbnRlclwiOmNhc2UgXCJ0b3BEcmFnRXhpdFwiOmNhc2UgXCJ0b3BEcmFnTGVhdmVcIjpjYXNlIFwidG9wRHJhZ092ZXJcIjpjYXNlIFwidG9wRHJhZ1N0YXJ0XCI6Y2FzZSBcInRvcERyb3BcIjphPUtkO2JyZWFrO2Nhc2UgXCJ0b3BUb3VjaENhbmNlbFwiOmNhc2UgXCJ0b3BUb3VjaEVuZFwiOmNhc2UgXCJ0b3BUb3VjaE1vdmVcIjpjYXNlIFwidG9wVG91Y2hTdGFydFwiOmE9TGQ7YnJlYWs7Y2FzZSBcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2UgXCJ0b3BBbmltYXRpb25JdGVyYXRpb25cIjpjYXNlIFwidG9wQW5pbWF0aW9uU3RhcnRcIjphPURkO2JyZWFrO2Nhc2UgXCJ0b3BUcmFuc2l0aW9uRW5kXCI6YT1NZDticmVhaztjYXNlIFwidG9wU2Nyb2xsXCI6YT1xZDticmVhaztjYXNlIFwidG9wV2hlZWxcIjphPU5kO2JyZWFrO2Nhc2UgXCJ0b3BDb3B5XCI6Y2FzZSBcInRvcEN1dFwiOmNhc2UgXCJ0b3BQYXN0ZVwiOmE9RWQ7YnJlYWs7ZGVmYXVsdDphPVxuTn1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO2liKGIpO3JldHVybiBifX0sU2Q9UmQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFRkPVtdO2Z1bmN0aW9uIFVkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2NbXCJyZXR1cm5cIl07KWM9Y1tcInJldHVyblwiXTtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPVVhKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sUWEoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LGhjKGEubmF0aXZlRXZlbnQpKX12YXIgVmQ9ITA7ZnVuY3Rpb24gV2QoYSl7VmQ9ISFhfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oU2QoYSk/WGQ6WWQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCExKX1mdW5jdGlvbiBaZChhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oU2QoYSk/WGQ6WWQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCEwKX1mdW5jdGlvbiBYZChhLGIpe2JjKFlkLGEsYil9XG5mdW5jdGlvbiBZZChhLGIpe2lmKFZkKXt2YXIgYz1oYyhiKTtjPVVhKGMpO251bGwhPT1jJiZcIm51bWJlclwiPT09dHlwZW9mIGMudGFnJiYyIT09eGQoYykmJihjPW51bGwpO2lmKFRkLmxlbmd0aCl7dmFyIGQ9VGQucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7ZWMoVWQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5UZC5sZW5ndGgmJlRkLnB1c2goYSl9fX1cbnZhciAkZD1PYmplY3QuZnJlZXplKHtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gVmR9LHNldEVuYWJsZWQ6V2QsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIFZkfSx0cmFwQnViYmxlZEV2ZW50OlcsdHJhcENhcHR1cmVkRXZlbnQ6WmQsZGlzcGF0Y2hFdmVudDpZZH0pO2Z1bmN0aW9uIGFlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgYmU9e2FuaW1hdGlvbmVuZDphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjphZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OmFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOmFlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sY2U9e30sZGU9e307bS5jYW5Vc2VET00mJihkZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBiZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBiZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBiZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBiZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZWUoYSl7aWYoY2VbYV0pcmV0dXJuIGNlW2FdO2lmKCFiZVthXSlyZXR1cm4gYTt2YXIgYj1iZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBkZSlyZXR1cm4gY2VbYV09YltjXTtyZXR1cm4gYX1cbnZhciBmZT17dG9wQW5pbWF0aW9uRW5kOmVlKFwiYW5pbWF0aW9uZW5kXCIpLHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjplZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSx0b3BBbmltYXRpb25TdGFydDplZShcImFuaW1hdGlvbnN0YXJ0XCIpLHRvcEJsdXI6XCJibHVyXCIsdG9wQ2FuY2VsOlwiY2FuY2VsXCIsdG9wQ2hhbmdlOlwiY2hhbmdlXCIsdG9wQ2xpY2s6XCJjbGlja1wiLHRvcENsb3NlOlwiY2xvc2VcIix0b3BDb21wb3NpdGlvbkVuZDpcImNvbXBvc2l0aW9uZW5kXCIsdG9wQ29tcG9zaXRpb25TdGFydDpcImNvbXBvc2l0aW9uc3RhcnRcIix0b3BDb21wb3NpdGlvblVwZGF0ZTpcImNvbXBvc2l0aW9udXBkYXRlXCIsdG9wQ29udGV4dE1lbnU6XCJjb250ZXh0bWVudVwiLHRvcENvcHk6XCJjb3B5XCIsdG9wQ3V0OlwiY3V0XCIsdG9wRG91YmxlQ2xpY2s6XCJkYmxjbGlja1wiLHRvcERyYWc6XCJkcmFnXCIsdG9wRHJhZ0VuZDpcImRyYWdlbmRcIix0b3BEcmFnRW50ZXI6XCJkcmFnZW50ZXJcIix0b3BEcmFnRXhpdDpcImRyYWdleGl0XCIsdG9wRHJhZ0xlYXZlOlwiZHJhZ2xlYXZlXCIsXG50b3BEcmFnT3ZlcjpcImRyYWdvdmVyXCIsdG9wRHJhZ1N0YXJ0OlwiZHJhZ3N0YXJ0XCIsdG9wRHJvcDpcImRyb3BcIix0b3BGb2N1czpcImZvY3VzXCIsdG9wSW5wdXQ6XCJpbnB1dFwiLHRvcEtleURvd246XCJrZXlkb3duXCIsdG9wS2V5UHJlc3M6XCJrZXlwcmVzc1wiLHRvcEtleVVwOlwia2V5dXBcIix0b3BMb2FkOlwibG9hZFwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcE1vdXNlRG93bjpcIm1vdXNlZG93blwiLHRvcE1vdXNlTW92ZTpcIm1vdXNlbW92ZVwiLHRvcE1vdXNlT3V0OlwibW91c2VvdXRcIix0b3BNb3VzZU92ZXI6XCJtb3VzZW92ZXJcIix0b3BNb3VzZVVwOlwibW91c2V1cFwiLHRvcFBhc3RlOlwicGFzdGVcIix0b3BTY3JvbGw6XCJzY3JvbGxcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BUZXh0SW5wdXQ6XCJ0ZXh0SW5wdXRcIix0b3BUb2dnbGU6XCJ0b2dnbGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLFxudG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOmVlKFwidHJhbnNpdGlvbmVuZFwiKSx0b3BXaGVlbDpcIndoZWVsXCJ9LGdlPXt0b3BBYm9ydDpcImFib3J0XCIsdG9wQ2FuUGxheTpcImNhbnBsYXlcIix0b3BDYW5QbGF5VGhyb3VnaDpcImNhbnBsYXl0aHJvdWdoXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWRlZE1ldGFkYXRhOlwibG9hZGVkbWV0YWRhdGFcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BQYXVzZTpcInBhdXNlXCIsdG9wUGxheTpcInBsYXlcIix0b3BQbGF5aW5nOlwicGxheWluZ1wiLHRvcFByb2dyZXNzOlwicHJvZ3Jlc3NcIix0b3BSYXRlQ2hhbmdlOlwicmF0ZWNoYW5nZVwiLHRvcFNlZWtlZDpcInNlZWtlZFwiLHRvcFNlZWtpbmc6XCJzZWVraW5nXCIsXG50b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIix0b3BXYWl0aW5nOlwid2FpdGluZ1wifSxoZT17fSxpZT0wLGplPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBrZShhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxqZSl8fChhW2plXT1pZSsrLGhlW2FbamVdXT17fSk7cmV0dXJuIGhlW2FbamVdXX1mdW5jdGlvbiBsZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBtZShhLGIpe3ZhciBjPWxlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPWxlKGMpfX1mdW5jdGlvbiBuZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgb2U9bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxwZT17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb250ZXh0TWVudSB0b3BGb2N1cyB0b3BLZXlEb3duIHRvcEtleVVwIHRvcE1vdXNlRG93biB0b3BNb3VzZVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LHFlPW51bGwscmU9bnVsbCxzZT1udWxsLHRlPSExO1xuZnVuY3Rpb24gdWUoYSxiKXtpZih0ZXx8bnVsbD09cWV8fHFlIT09ZmEoKSlyZXR1cm4gbnVsbDt2YXIgYz1xZTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZuZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuIHNlJiZoYShzZSxjKT9udWxsOihzZT1jLGE9Ti5nZXRQb29sZWQocGUuc2VsZWN0LHJlLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9cWUsaWIoYSksYSl9XG52YXIgdmU9e2V2ZW50VHlwZXM6cGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9a2UoZSk7Zj12YS5vblNlbGVjdDtmb3IodmFyIGg9MDtoPGYubGVuZ3RoO2grKyl7dmFyIGc9ZltoXTtpZighZS5oYXNPd25Qcm9wZXJ0eShnKXx8IWVbZ10pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1ZhKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcInRvcEZvY3VzXCI6aWYoZ2MoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpcWU9ZSxyZT1iLHNlPW51bGw7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpzZT1yZT1xZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BNb3VzZURvd25cIjp0ZT0hMDticmVhaztjYXNlIFwidG9wQ29udGV4dE1lbnVcIjpjYXNlIFwidG9wTW91c2VVcFwiOnJldHVybiB0ZT0hMSx1ZShjLGQpO2Nhc2UgXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIjppZihvZSlicmVhaztcbmNhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuIHVlKGMsZCl9cmV0dXJuIG51bGx9fTtOYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO0RhPWJiLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7RWE9YmIuZ2V0SW5zdGFuY2VGcm9tTm9kZTtGYT1iYi5nZXROb2RlRnJvbUluc3RhbmNlO05hLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46UmQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOndkLENoYW5nZUV2ZW50UGx1Z2luOnBkLFNlbGVjdEV2ZW50UGx1Z2luOnZlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46UmJ9KTtcbmZ1bmN0aW9uIHhlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzW1wicmV0dXJuXCJdPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuZnVuY3Rpb24gemUoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyB4ZShhLnRhZyxiLGEua2V5LGEubW9kZSksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLnBlbmRpbmdQcm9wcz1iLGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmV4cGlyYXRpb25UaW1lPWM7ZC5jaGlsZD1hLmNoaWxkO2QubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7ZC5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7ZC5zaWJsaW5nPWEuc2libGluZztkLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiBBZShhLGIsYyl7dmFyIGQ9YS50eXBlLGU9YS5rZXk7YT1hLnByb3BzO3ZhciBmPXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZClmPWQucHJvdG90eXBlJiZkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PzI6MDtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgZClmPTU7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBzYzpyZXR1cm4gQmUoYS5jaGlsZHJlbixiLGMsZSk7Y2FzZSB3YzpmPTExO2J8PTM7YnJlYWs7Y2FzZSB0YzpmPTExO2J8PTI7YnJlYWs7Y2FzZSBwYzpmPTc7YnJlYWs7Y2FzZSBxYzpmPTk7YnJlYWs7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXN3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHVjOmY9MTM7YnJlYWs7Y2FzZSB2YzpmPTEyO2JyZWFrO2Nhc2UgeGM6Zj0xNDticmVhaztkZWZhdWx0OmlmKFwibnVtYmVyXCI9PT10eXBlb2YgZC50YWcpcmV0dXJuIGI9ZCxiLnBlbmRpbmdQcm9wcz1hLGIuZXhwaXJhdGlvblRpbWU9YyxcbmI7RChcIjEzMFwiLG51bGw9PWQ/ZDp0eXBlb2YgZCxcIlwiKX1lbHNlIEQoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9Yj1uZXcgeGUoZixhLGUsYik7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIEJlKGEsYixjLGQpe2E9bmV3IHhlKDEwLGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gQ2UoYSxiLGMpe2E9bmV3IHhlKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBEZShhLGIsYyl7Yj1uZXcgeGUoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9dmFyIEVlPW51bGwsRmU9bnVsbDtcbmZ1bmN0aW9uIEdlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19ZnVuY3Rpb24gSGUoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7RWU9R2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO0ZlPUdlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9ZnVuY3Rpb24gSWUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEVlJiZFZShhKX1mdW5jdGlvbiBKZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRmUmJkZlKGEpfW5ldyBTZXQ7XG5mdW5jdGlvbiBLZShhKXtyZXR1cm57YmFzZVN0YXRlOmEsZXhwaXJhdGlvblRpbWU6MCxmaXJzdDpudWxsLGxhc3Q6bnVsbCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMSxpc0luaXRpYWxpemVkOiExLGNhcHR1cmVkVmFsdWVzOm51bGx9fWZ1bmN0aW9uIExlKGEsYil7bnVsbD09PWEubGFzdD9hLmZpcnN0PWEubGFzdD1iOihhLmxhc3QubmV4dD1iLGEubGFzdD1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iLmV4cGlyYXRpb25UaW1lKWEuZXhwaXJhdGlvblRpbWU9Yi5leHBpcmF0aW9uVGltZX12YXIgTWU9dm9pZCAwLE5lPXZvaWQgMDtcbmZ1bmN0aW9uIE9lKGEpe01lPU5lPW51bGw7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jJiYoYz1hLnVwZGF0ZVF1ZXVlPUtlKG51bGwpKTtudWxsIT09Yj8oYT1iLnVwZGF0ZVF1ZXVlLG51bGw9PT1hJiYoYT1iLnVwZGF0ZVF1ZXVlPUtlKG51bGwpKSk6YT1udWxsO01lPWM7TmU9YSE9PWM/YTpudWxsfWZ1bmN0aW9uIFBlKGEsYil7T2UoYSk7YT1NZTt2YXIgYz1OZTtudWxsPT09Yz9MZShhLGIpOm51bGw9PT1hLmxhc3R8fG51bGw9PT1jLmxhc3Q/KExlKGEsYiksTGUoYyxiKSk6KExlKGEsYiksYy5sYXN0PWIpfWZ1bmN0aW9uIFFlKGEsYixjLGQpe2E9YS5wYXJ0aWFsU3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIsYyxkKTphfVxuZnVuY3Rpb24gUmUoYSxiLGMsZCxlLGYpe251bGwhPT1hJiZhLnVwZGF0ZVF1ZXVlPT09YyYmKGM9Yi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmMuYmFzZVN0YXRlLGV4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3Q6Yy5maXJzdCxsYXN0OmMubGFzdCxpc0luaXRpYWxpemVkOmMuaXNJbml0aWFsaXplZCxjYXB0dXJlZFZhbHVlczpjLmNhcHR1cmVkVmFsdWVzLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExfSk7Yy5leHBpcmF0aW9uVGltZT0wO2MuaXNJbml0aWFsaXplZD9hPWMuYmFzZVN0YXRlOihhPWMuYmFzZVN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxjLmlzSW5pdGlhbGl6ZWQ9ITApO2Zvcih2YXIgaD0hMCxnPWMuZmlyc3Qsaz0hMTtudWxsIT09Zzspe3ZhciB2PWcuZXhwaXJhdGlvblRpbWU7aWYodj5mKXt2YXIgbD1jLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1sfHxsPnYpYy5leHBpcmF0aW9uVGltZT12O2t8fChrPSEwLGMuYmFzZVN0YXRlPWEpfWVsc2V7a3x8XG4oYy5maXJzdD1nLm5leHQsbnVsbD09PWMuZmlyc3QmJihjLmxhc3Q9bnVsbCkpO2lmKGcuaXNSZXBsYWNlKWE9UWUoZyxkLGEsZSksaD0hMDtlbHNlIGlmKHY9UWUoZyxkLGEsZSkpYT1oP0Eoe30sYSx2KTpBKGEsdiksaD0hMTtnLmlzRm9yY2VkJiYoYy5oYXNGb3JjZVVwZGF0ZT0hMCk7bnVsbCE9PWcuY2FsbGJhY2smJih2PWMuY2FsbGJhY2tMaXN0LG51bGw9PT12JiYodj1jLmNhbGxiYWNrTGlzdD1bXSksdi5wdXNoKGcpKTtudWxsIT09Zy5jYXB0dXJlZFZhbHVlJiYodj1jLmNhcHR1cmVkVmFsdWVzLG51bGw9PT12P2MuY2FwdHVyZWRWYWx1ZXM9W2cuY2FwdHVyZWRWYWx1ZV06di5wdXNoKGcuY2FwdHVyZWRWYWx1ZSkpfWc9Zy5uZXh0fW51bGwhPT1jLmNhbGxiYWNrTGlzdD9iLmVmZmVjdFRhZ3w9MzI6bnVsbCE9PWMuZmlyc3R8fGMuaGFzRm9yY2VVcGRhdGV8fG51bGwhPT1jLmNhcHR1cmVkVmFsdWVzfHwoYi51cGRhdGVRdWV1ZT1udWxsKTtrfHwoYy5iYXNlU3RhdGU9YSk7XG5yZXR1cm4gYX1mdW5jdGlvbiBTZShhLGIpe3ZhciBjPWEuY2FsbGJhY2tMaXN0O2lmKG51bGwhPT1jKWZvcihhLmNhbGxiYWNrTGlzdD1udWxsLGE9MDthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXSxlPWQuY2FsbGJhY2s7ZC5jYWxsYmFjaz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBlP0QoXCIxOTFcIixlKTp2b2lkIDA7ZS5jYWxsKGIpfX1cbmZ1bmN0aW9uIFRlKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhLGIsYyxkLGUsZil7aWYobnVsbD09PWJ8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKXJldHVybiEwO3ZhciBuPWEuc3RhdGVOb2RlO2E9YS50eXBlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLnNob3VsZENvbXBvbmVudFVwZGF0ZT9uLnNob3VsZENvbXBvbmVudFVwZGF0ZShjLGUsZik6YS5wcm90b3R5cGUmJmEucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFoYShiLGMpfHwhaGEoZCxlKTohMH1mdW5jdGlvbiBoKGEsYil7Yi51cGRhdGVyPXI7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YX1mdW5jdGlvbiBnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5iLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9ZnVuY3Rpb24gayhhLGIsYyxkKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpcmV0dXJuIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLmNhbGwobnVsbCxjLGQpfXZhciB2PWEuY2FjaGVDb250ZXh0LGw9YS5nZXRNYXNrZWRDb250ZXh0LHA9YS5nZXRVbm1hc2tlZENvbnRleHQsej1hLmlzQ29udGV4dENvbnN1bWVyLEI9YS5oYXNDb250ZXh0Q2hhbmdlZCxyPXtpc01vdW50ZWQ6eWQsZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7UGUoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxcbmNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxkLGUpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YyhhKTtQZShhLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiEwLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGQpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGU9YyhhKTtQZShhLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOmQsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiEwLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZSl9fTtyZXR1cm57YWRvcHRDbGFzc0luc3RhbmNlOmgsY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczprLFxuY29uc3RydWN0Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPXAoYSksZT16KGEpLGY9ZT9sKGEsZCk6a2E7Yz1uZXcgYyhiLGYpO3ZhciBuPW51bGwhPT1jLnN0YXRlJiZ2b2lkIDAhPT1jLnN0YXRlP2Muc3RhdGU6bnVsbDtoKGEsYyk7YS5tZW1vaXplZFN0YXRlPW47Yj1rKGEsYyxiLG4pO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoYS5tZW1vaXplZFN0YXRlPUEoe30sYS5tZW1vaXplZFN0YXRlLGIpKTtlJiZ2KGEsZCxmKTtyZXR1cm4gY30sbW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9YS5hbHRlcm5hdGUsZT1hLnN0YXRlTm9kZSxmPWEucGVuZGluZ1Byb3BzLG49cChhKTtlLnByb3BzPWY7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWthO2UuY29udGV4dD1sKGEsbik7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChjPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGMhPT1lLnN0YXRlJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGUuc3RhdGU9UmUoZCxhLGMsZSxmLGIpKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9LHJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxuPWEuc3RhdGVOb2RlO24ucHJvcHM9YS5tZW1vaXplZFByb3BzO24uc3RhdGU9XG5hLm1lbW9pemVkU3RhdGU7dmFyIGg9YS5tZW1vaXplZFByb3BzLHI9YS5wZW5kaW5nUHJvcHMsej1uLmNvbnRleHQscT1wKGEpO3E9bChhLHEpOyhjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1yfHx6IT09cSkmJmcoYSxuLHIscSk7ej1hLm1lbW9pemVkU3RhdGU7Yj1udWxsIT09YS51cGRhdGVRdWV1ZT9SZShudWxsLGEsYS51cGRhdGVRdWV1ZSxuLHIsYik6ejt2YXIgdT12b2lkIDA7aCE9PXImJih1PWsoYSxuLHIsYikpO2lmKG51bGwhPT11JiZ2b2lkIDAhPT11KXtiPW51bGw9PT1ifHx2b2lkIDA9PT1iP3U6QSh7fSxiLHUpO3ZhciB0PWEudXBkYXRlUXVldWU7XG5udWxsIT09dCYmKHQuYmFzZVN0YXRlPUEoe30sdC5iYXNlU3RhdGUsdSkpfWlmKCEoaCE9PXJ8fHohPT1ifHxCKCl8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KSwhMTsoaD1mKGEsaCxyLHosYixxKSk/KGN8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxNb3VudCYmbi5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9XG40KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpLGQoYSxyKSxlKGEsYikpO24ucHJvcHM9cjtuLnN0YXRlPWI7bi5jb250ZXh0PXE7cmV0dXJuIGh9LHVwZGF0ZUNsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBuPWIudHlwZSx4PWIuc3RhdGVOb2RlO3gucHJvcHM9Yi5tZW1vaXplZFByb3BzO3guc3RhdGU9Yi5tZW1vaXplZFN0YXRlO3ZhciBoPWIubWVtb2l6ZWRQcm9wcyxyPWIucGVuZGluZ1Byb3BzLHE9eC5jb250ZXh0LHU9cChiKTt1PWwoYix1KTsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1yfHxxIT09dSkmJmcoYix4LHIsdSk7cT1iLm1lbW9pemVkU3RhdGU7Yz1udWxsIT09Yi51cGRhdGVRdWV1ZT9SZShhLGIsYi51cGRhdGVRdWV1ZSx4LHIsYyk6cTt2YXIgdD12b2lkIDA7aCE9PXImJih0PWsoYix4LHIsYykpO2lmKG51bGwhPT10JiZ2b2lkIDAhPT10KXtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP3Q6QSh7fSxjLHQpO3ZhciB5PWIudXBkYXRlUXVldWU7bnVsbCE9PXkmJih5LmJhc2VTdGF0ZT1BKHt9LHkuYmFzZVN0YXRlLHQpKX1pZighKGghPT1yfHxxIT09Y3x8QigpfHxudWxsIT09Yi51cGRhdGVRdWV1ZSYmYi51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZcbnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksITE7KHQ9ZihiLGgscixxLGMsdSkpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxVcGRhdGUmJnguY29tcG9uZW50V2lsbFVwZGF0ZShyLGMsdSksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJnguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUocixjLHUpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjA0OCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJlxucT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yMDQ4KSxkKGIsciksZShiLGMpKTt4LnByb3BzPXI7eC5zdGF0ZT1jO3guY29udGV4dD11O3JldHVybiB0fX19dmFyIFVlPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBWZShhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigyIT09Yy50YWc/RChcIjExMFwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6RChcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM9PT1rYT9kLnJlZnM9e306ZC5yZWZzO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP0QoXCIxNDhcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDpEKFwiMjU0XCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBXZShhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmRChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gWGUoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT16ZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGgoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gZyhhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPUNlKGMsYS5tb2RlLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1WZShhLGIsYyksZFtcInJldHVyblwiXT1hLGQ7ZD1BZShjLGEubW9kZSxkKTtkLnJlZj1WZShhLGIsYyk7ZFtcInJldHVyblwiXT1hO3JldHVybiBkfWZ1bmN0aW9uIHYoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuRGUoYyxhLm1vZGUsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8MTAhPT1iLnRhZylyZXR1cm4gYj1CZShjLGEubW9kZSxkLGYpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPUNlKFwiXCIrYixhLm1vZGUsYyksYltcInJldHVyblwiXT1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGM9QWUoYixhLm1vZGUsYyksYy5yZWY9VmUoYSxudWxsLGIpLGNbXCJyZXR1cm5cIl09YSxjO2Nhc2UgcmM6cmV0dXJuIGI9RGUoYixhLm1vZGUsYyksYltcInJldHVyblwiXT1hLGJ9aWYoVWUoYil8fHpjKGIpKXJldHVybiBiPUJlKGIsXG5hLm1vZGUsYyxudWxsKSxiW1wicmV0dXJuXCJdPWEsYjtXZShhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpnKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugb2M6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1zYz9sKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgcmM6cmV0dXJuIGMua2V5PT09ZT92KGEsYixjLGQpOm51bGx9aWYoVWUoYyl8fHpjKGMpKXJldHVybiBudWxsIT09ZT9udWxsOmwoYSxiLGMsZCxudWxsKTtXZShhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEIoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGcoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBvYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09c2M/bChiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgcmM6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLHYoYixhLGQsZSl9aWYoVWUoZCl8fHpjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGwoYixhLGQsZSxudWxsKTtXZShiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoZSxsLGcsaCl7Zm9yKHZhciByPW51bGwsaz1udWxsLHE9bCx1PWw9MCx0PW51bGw7bnVsbCE9PXEmJnU8Zy5sZW5ndGg7dSsrKXtxLmluZGV4PnU/KHQ9cSxxPW51bGwpOnQ9cS5zaWJsaW5nO3ZhciBuPXooZSxxLGdbdV0saCk7aWYobnVsbD09PW4pe251bGw9PT1xJiYocT10KTticmVha31hJiZxJiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHEpO2w9ZihuLGwsdSk7bnVsbD09PWs/cj1uOmsuc2libGluZz1uO2s9bjtxPXR9aWYodT09PWcubGVuZ3RoKXJldHVybiBjKGUscSkscjtpZihudWxsPT09cSl7Zm9yKDt1PGcubGVuZ3RoO3UrKylpZihxPXAoZSxnW3VdLGgpKWw9ZihxLGwsdSksbnVsbD09PWs/cj1xOmsuc2libGluZz1xLGs9cTtyZXR1cm4gcn1mb3IocT1kKGUscSk7dTxnLmxlbmd0aDt1KyspaWYodD1CKHEsZSx1LGdbdV0saCkpe2lmKGEmJm51bGwhPT10LmFsdGVybmF0ZSlxW1wiZGVsZXRlXCJdKG51bGw9PT10LmtleT91OnQua2V5KTtsPWYodCxsLHUpO251bGw9PT1rP3I9dDprLnNpYmxpbmc9dDtrPXR9YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gcn1mdW5jdGlvbiBRKGUsbCxnLGgpe3ZhciByPXpjKGcpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiByP0QoXCIxNTBcIik6dm9pZCAwO2c9ci5jYWxsKGcpO251bGw9PWc/RChcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciBrPVxucj1udWxsLHE9bCx1PWw9MCx0PW51bGwsbj1nLm5leHQoKTtudWxsIT09cSYmIW4uZG9uZTt1Kyssbj1nLm5leHQoKSl7cS5pbmRleD51Pyh0PXEscT1udWxsKTp0PXEuc2libGluZzt2YXIgSD16KGUscSxuLnZhbHVlLGgpO2lmKG51bGw9PT1IKXtxfHwocT10KTticmVha31hJiZxJiZudWxsPT09SC5hbHRlcm5hdGUmJmIoZSxxKTtsPWYoSCxsLHUpO251bGw9PT1rP3I9SDprLnNpYmxpbmc9SDtrPUg7cT10fWlmKG4uZG9uZSlyZXR1cm4gYyhlLHEpLHI7aWYobnVsbD09PXEpe2Zvcig7IW4uZG9uZTt1Kyssbj1nLm5leHQoKSluPXAoZSxuLnZhbHVlLGgpLG51bGwhPT1uJiYobD1mKG4sbCx1KSxudWxsPT09az9yPW46ay5zaWJsaW5nPW4saz1uKTtyZXR1cm4gcn1mb3IocT1kKGUscSk7IW4uZG9uZTt1Kyssbj1nLm5leHQoKSlpZihuPUIocSxlLHUsbi52YWx1ZSxoKSxudWxsIT09bil7aWYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlKXFbXCJkZWxldGVcIl0obnVsbD09PW4ua2V5P3U6bi5rZXkpO1xubD1mKG4sbCx1KTtudWxsPT09az9yPW46ay5zaWJsaW5nPW47az1ufWEmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHJ9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGwpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXNjJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBnPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYoZylzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBvYzphOnt2YXIgaz1mLmtleTtmb3IoZz1kO251bGwhPT1nOyl7aWYoZy5rZXk9PT1rKWlmKDEwPT09Zy50YWc/Zi50eXBlPT09c2M6Zy50eXBlPT09Zi50eXBlKXtjKGEsZy5zaWJsaW5nKTtkPWUoZyxmLnR5cGU9PT1zYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsbCk7ZC5yZWY9VmUoYSxnLGYpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxnKTticmVha31lbHNlIGIoYSxnKTtnPWcuc2libGluZ31mLnR5cGU9PT1cbnNjPyhkPUJlKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGwsZi5rZXkpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihsPUFlKGYsYS5tb2RlLGwpLGwucmVmPVZlKGEsZCxmKSxsW1wicmV0dXJuXCJdPWEsYT1sKX1yZXR1cm4gaChhKTtjYXNlIHJjOmE6e2ZvcihnPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1nKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxsKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1EZShmLGEubW9kZSxsKTtkW1wicmV0dXJuXCJdPWE7YT1kfXJldHVybiBoKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmXG42PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsbCksZFtcInJldHVyblwiXT1hLGE9ZCk6KGMoYSxkKSxkPUNlKGYsYS5tb2RlLGwpLGRbXCJyZXR1cm5cIl09YSxhPWQpLGgoYSk7aWYoVWUoZikpcmV0dXJuIHIoYSxkLGYsbCk7aWYoemMoZikpcmV0dXJuIFEoYSxkLGYsbCk7ZyYmV2UoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYpc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAxOmw9YS50eXBlLEQoXCIxNTJcIixsLmRpc3BsYXlOYW1lfHxsLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBZZT1YZSghMCksWmU9WGUoITEpO1xuZnVuY3Rpb24gJGUoYSxiLGMsZCxlLGYsaCl7ZnVuY3Rpb24gZyhhLGIsYyl7ayhhLGIsYyxiLmV4cGlyYXRpb25UaW1lKX1mdW5jdGlvbiBrKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmUoYixudWxsLGMsZCk6WWUoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gdihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGwoYSxiLGMsZCxlLGYpe3YoYSxiKTtpZighYyYmIWUpcmV0dXJuIGQmJnkoYiwhMSkscihhLGIpO2M9Yi5zdGF0ZU5vZGU7bmMuY3VycmVudD1iO3ZhciBsPWU/bnVsbDpjLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2UmJihrKGEsYixudWxsLGYpLGIuY2hpbGQ9bnVsbCk7ayhhLGIsbCxmKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZ5KGIsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHAoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7XG5iLnBlbmRpbmdDb250ZXh0P3QoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmdChhLGIuY29udGV4dCwhMSk7WShhLGIuY29udGFpbmVySW5mbyl9ZnVuY3Rpb24geihhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2ZvcihudWxsIT09ZSYmKGVbXCJyZXR1cm5cIl09YSk7bnVsbCE9PWU7KXtzd2l0Y2goZS50YWcpe2Nhc2UgMTI6dmFyIGY9ZS5zdGF0ZU5vZGV8MDtpZihlLnR5cGU9PT1iJiYwIT09KGYmYykpe2ZvcihmPWU7bnVsbCE9PWY7KXt2YXIgbD1mLmFsdGVybmF0ZTtpZigwPT09Zi5leHBpcmF0aW9uVGltZXx8Zi5leHBpcmF0aW9uVGltZT5kKWYuZXhwaXJhdGlvblRpbWU9ZCxudWxsIT09bCYmKDA9PT1sLmV4cGlyYXRpb25UaW1lfHxsLmV4cGlyYXRpb25UaW1lPmQpJiYobC5leHBpcmF0aW9uVGltZT1kKTtlbHNlIGlmKG51bGwhPT1sJiYoMD09PWwuZXhwaXJhdGlvblRpbWV8fGwuZXhwaXJhdGlvblRpbWU+ZCkpbC5leHBpcmF0aW9uVGltZT1cbmQ7ZWxzZSBicmVhaztmPWZbXCJyZXR1cm5cIl19Zj1udWxsfWVsc2UgZj1lLmNoaWxkO2JyZWFrO2Nhc2UgMTM6Zj1lLnR5cGU9PT1hLnR5cGU/bnVsbDplLmNoaWxkO2JyZWFrO2RlZmF1bHQ6Zj1lLmNoaWxkfWlmKG51bGwhPT1mKWZbXCJyZXR1cm5cIl09ZTtlbHNlIGZvcihmPWU7bnVsbCE9PWY7KXtpZihmPT09YSl7Zj1udWxsO2JyZWFrfWU9Zi5zaWJsaW5nO2lmKG51bGwhPT1lKXtmPWU7YnJlYWt9Zj1mW1wicmV0dXJuXCJdfWU9Zn19ZnVuY3Rpb24gQihhLGIsYyl7dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5wZW5kaW5nUHJvcHMsZj1iLm1lbW9pemVkUHJvcHM7aWYoIXEoKSYmZj09PWUpcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYik7dmFyIGw9ZS52YWx1ZTtiLm1lbW9pemVkUHJvcHM9ZTtpZihudWxsPT09ZilsPTEwNzM3NDE4MjM7ZWxzZSBpZihmLnZhbHVlPT09ZS52YWx1ZSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxcbnIoYSxiKTtsPTB9ZWxzZXt2YXIgaD1mLnZhbHVlO2lmKGg9PT1sJiYoMCE9PWh8fDEvaD09PTEvbCl8fGghPT1oJiZsIT09bCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYik7bD0wfWVsc2UgaWYobD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxsKToxMDczNzQxODIzLGx8PTAsMD09PWwpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpfWVsc2UgeihiLGQsbCxjKX1iLnN0YXRlTm9kZT1sO0coYik7ZyhhLGIsZS5jaGlsZHJlbik7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcihhLGIpe251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD9EKFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO3ZhciBjPXplKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7XG5iLmNoaWxkPWM7Zm9yKGNbXCJyZXR1cm5cIl09YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz16ZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGNbXCJyZXR1cm5cIl09YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH12YXIgUT1hLnNob3VsZFNldFRleHRDb250ZW50LG49YS5zaG91bGREZXByaW9yaXRpemVTdWJ0cmVlLHg9Yi5wdXNoSG9zdENvbnRleHQsWT1iLnB1c2hIb3N0Q29udGFpbmVyLEc9ZC5wdXNoUHJvdmlkZXIsUj1jLmdldE1hc2tlZENvbnRleHQsUz1jLmdldFVubWFza2VkQ29udGV4dCxxPWMuaGFzQ29udGV4dENoYW5nZWQsdT1jLnB1c2hDb250ZXh0UHJvdmlkZXIsdD1jLnB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QseT1jLmludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIsSD1lLmVudGVySHlkcmF0aW9uU3RhdGUsV2E9ZS5yZXNldEh5ZHJhdGlvblN0YXRlLENiPWUudHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U7XG5hPVRlKGMsZixoLGZ1bmN0aW9uKGEsYil7YS5tZW1vaXplZFByb3BzPWJ9LGZ1bmN0aW9uKGEsYil7YS5tZW1vaXplZFN0YXRlPWJ9KTt2YXIgSmM9YS5hZG9wdENsYXNzSW5zdGFuY2UsS2M9YS5jYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLExjPWEuY29uc3RydWN0Q2xhc3NJbnN0YW5jZSxEYj1hLm1vdW50Q2xhc3NJbnN0YW5jZSxNYz1hLnJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZSxFYj1hLnVwZGF0ZUNsYXNzSW5zdGFuY2U7cmV0dXJue2JlZ2luV29yazpmdW5jdGlvbihhLGIsYyl7aWYoMD09PWIuZXhwaXJhdGlvblRpbWV8fGIuZXhwaXJhdGlvblRpbWU+Yyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6cChiKTticmVhaztjYXNlIDI6dShiKTticmVhaztjYXNlIDQ6WShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTM6RyhiKX1yZXR1cm4gbnVsbH1zd2l0Y2goYi50YWcpe2Nhc2UgMDpudWxsIT09YT9EKFwiMTU1XCIpOnZvaWQgMDt2YXIgZD1iLnR5cGUsXG5lPWIucGVuZGluZ1Byb3BzLGY9UyhiKTtmPVIoYixmKTtkPWQoZSxmKTtiLmVmZmVjdFRhZ3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5yZW5kZXImJnZvaWQgMD09PWQuJCR0eXBlb2Y/KGY9Yi50eXBlLGIudGFnPTIsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1kLnN0YXRlJiZ2b2lkIDAhPT1kLnN0YXRlP2Quc3RhdGU6bnVsbCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJihlPUtjKGIsZCxlLGIubWVtb2l6ZWRTdGF0ZSksbnVsbCE9PWUmJnZvaWQgMCE9PWUmJihiLm1lbW9pemVkU3RhdGU9QSh7fSxiLm1lbW9pemVkU3RhdGUsZSkpKSxlPXUoYiksSmMoYixkKSxEYihiLGMpLGE9bChhLGIsITAsZSwhMSxjKSk6KGIudGFnPTEsZyhhLGIsZCksYi5tZW1vaXplZFByb3BzPWUsYT1iLmNoaWxkKTtyZXR1cm4gYTtjYXNlIDE6cmV0dXJuIGU9Yi50eXBlLGM9Yi5wZW5kaW5nUHJvcHMscSgpfHxcbmIubWVtb2l6ZWRQcm9wcyE9PWM/KGQ9UyhiKSxkPVIoYixkKSxlPWUoYyxkKSxiLmVmZmVjdFRhZ3w9MSxnKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAyOmU9dShiKTtudWxsPT09YT9udWxsPT09Yi5zdGF0ZU5vZGU/KExjKGIsYi5wZW5kaW5nUHJvcHMpLERiKGIsYyksZD0hMCk6ZD1NYyhiLGMpOmQ9RWIoYSxiLGMpO2Y9ITE7dmFyIGg9Yi51cGRhdGVRdWV1ZTtudWxsIT09aCYmbnVsbCE9PWguY2FwdHVyZWRWYWx1ZXMmJihmPWQ9ITApO3JldHVybiBsKGEsYixkLGUsZixjKTtjYXNlIDM6YTppZihwKGIpLGQ9Yi51cGRhdGVRdWV1ZSxudWxsIT09ZCl7Zj1iLm1lbW9pemVkU3RhdGU7ZT1SZShhLGIsZCxudWxsLG51bGwsYyk7Yi5tZW1vaXplZFN0YXRlPWU7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1kJiZudWxsIT09ZC5jYXB0dXJlZFZhbHVlcylkPW51bGw7ZWxzZSBpZihmPT09ZSl7V2EoKTthPXIoYSxiKTticmVhayBhfWVsc2UgZD1cbmUuZWxlbWVudDtmPWIuc3RhdGVOb2RlOyhudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpJiZmLmh5ZHJhdGUmJkgoYik/KGIuZWZmZWN0VGFnfD0yLGIuY2hpbGQ9WmUoYixudWxsLGQsYykpOihXYSgpLGcoYSxiLGQpKTtiLm1lbW9pemVkU3RhdGU9ZTthPWIuY2hpbGR9ZWxzZSBXYSgpLGE9cihhLGIpO3JldHVybiBhO2Nhc2UgNTphOnt4KGIpO251bGw9PT1hJiZDYihiKTtlPWIudHlwZTtoPWIubWVtb2l6ZWRQcm9wcztkPWIucGVuZGluZ1Byb3BzO2Y9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGw7aWYoIXEoKSYmaD09PWQpe2lmKGg9Yi5tb2RlJjEmJm4oZSxkKSliLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7aWYoIWh8fDEwNzM3NDE4MjMhPT1jKXthPXIoYSxiKTticmVhayBhfX1oPWQuY2hpbGRyZW47UShlLGQpP2g9bnVsbDpmJiZRKGUsZikmJihiLmVmZmVjdFRhZ3w9MTYpO3YoYSxiKTsxMDczNzQxODIzIT09YyYmYi5tb2RlJjEmJm4oZSxkKT8oYi5leHBpcmF0aW9uVGltZT1cbjEwNzM3NDE4MjMsYi5tZW1vaXplZFByb3BzPWQsYT1udWxsKTooZyhhLGIsaCksYi5tZW1vaXplZFByb3BzPWQsYT1iLmNoaWxkKX1yZXR1cm4gYTtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZDYihiKSxiLm1lbW9pemVkUHJvcHM9Yi5wZW5kaW5nUHJvcHMsbnVsbDtjYXNlIDg6Yi50YWc9NztjYXNlIDc6cmV0dXJuIGU9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1lfHwoZT1iLm1lbW9pemVkUHJvcHMpLGQ9ZS5jaGlsZHJlbixiLnN0YXRlTm9kZT1udWxsPT09YT9aZShiLGIuc3RhdGVOb2RlLGQsYyk6WWUoYixhLnN0YXRlTm9kZSxkLGMpLGIubWVtb2l6ZWRQcm9wcz1lLGIuc3RhdGVOb2RlO2Nhc2UgOTpyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIFkoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxlPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09ZT8obnVsbD09PWE/Yi5jaGlsZD1ZZShiLG51bGwsZSxjKTpnKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9XG5lLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDE0OnJldHVybiBjPWIudHlwZS5yZW5kZXIsYz1jKGIucGVuZGluZ1Byb3BzLGIucmVmKSxnKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxiLmNoaWxkO2Nhc2UgMTA6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1jPyhnKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxMTpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixxKCl8fG51bGwhPT1jJiZiLm1lbW9pemVkUHJvcHMhPT1jPyhnKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxMzpyZXR1cm4gQihhLGIsYyk7Y2FzZSAxMjphOntkPWIudHlwZTtmPWIucGVuZGluZ1Byb3BzO2g9Yi5tZW1vaXplZFByb3BzO2U9ZC5fY3VycmVudFZhbHVlO3ZhciB0PWQuX2NoYW5nZWRCaXRzO2lmKHEoKXx8MCE9PXR8fGghPT1mKXtiLm1lbW9pemVkUHJvcHM9XG5mO3ZhciBrPWYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzO2lmKHZvaWQgMD09PWt8fG51bGw9PT1rKWs9MTA3Mzc0MTgyMztiLnN0YXRlTm9kZT1rO2lmKDAhPT0odCZrKSl6KGIsZCx0LGMpO2Vsc2UgaWYoaD09PWYpe2E9cihhLGIpO2JyZWFrIGF9Yz1mLmNoaWxkcmVuO2M9YyhlKTtnKGEsYixjKTthPWIuY2hpbGR9ZWxzZSBhPXIoYSxiKX1yZXR1cm4gYTtkZWZhdWx0OkQoXCIxNTZcIil9fX19XG5mdW5jdGlvbiBhZihhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGg9YS5jcmVhdGVJbnN0YW5jZSxnPWEuY3JlYXRlVGV4dEluc3RhbmNlLGs9YS5hcHBlbmRJbml0aWFsQ2hpbGQsdj1hLmZpbmFsaXplSW5pdGlhbENoaWxkcmVuLGw9YS5wcmVwYXJlVXBkYXRlLHA9YS5wZXJzaXN0ZW5jZSx6PWIuZ2V0Um9vdEhvc3RDb250YWluZXIsQj1iLnBvcEhvc3RDb250ZXh0LHI9Yi5nZXRIb3N0Q29udGV4dCxRPWIucG9wSG9zdENvbnRhaW5lcixuPWMucG9wQ29udGV4dFByb3ZpZGVyLHg9Yy5wb3BUb3BMZXZlbENvbnRleHRPYmplY3QsWT1kLnBvcFByb3ZpZGVyLEc9ZS5wcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlLFI9ZS5wcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSxTPWUucG9wSHlkcmF0aW9uU3RhdGUscT12b2lkIDAsdT12b2lkIDAsdD12b2lkIDA7YS5tdXRhdGlvbj8ocT1mdW5jdGlvbigpe30sdT1mdW5jdGlvbihhLGIsYyl7KGIudXBkYXRlUXVldWU9XG5jKSYmZihiKX0sdD1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmZihiKX0pOnA/RChcIjIzNVwiKTpEKFwiMjM2XCIpO3JldHVybntjb21wbGV0ZVdvcms6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gbihiKSxhPWIuc3RhdGVOb2RlLGQ9Yi51cGRhdGVRdWV1ZSxudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMmJihiLmVmZmVjdFRhZyY9LTY1LFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudERpZENhdGNoP2IuZWZmZWN0VGFnfD0yNTY6ZC5jYXB0dXJlZFZhbHVlcz1udWxsKSxudWxsO2Nhc2UgMzpRKGIpO3goYik7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpUyhiKSxiLmVmZmVjdFRhZyY9LTM7cShiKTthPWIudXBkYXRlUXVldWU7XG5udWxsIT09YSYmbnVsbCE9PWEuY2FwdHVyZWRWYWx1ZXMmJihiLmVmZmVjdFRhZ3w9MjU2KTtyZXR1cm4gbnVsbDtjYXNlIDU6QihiKTtjPXooKTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXt2YXIgcD1hLm1lbW9pemVkUHJvcHMsSD1iLnN0YXRlTm9kZSx5PXIoKTtIPWwoSCxlLHAsZCxjLHkpO3UoYSxiLEgsZSxwLGQsYyx5KTthLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZXtpZighZClyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjZcIik6dm9pZCAwLG51bGw7YT1yKCk7aWYoUyhiKSlHKGIsYyxhKSYmZihiKTtlbHNle3A9aChlLGQsYyxhLGIpO2E6Zm9yKHk9Yi5jaGlsZDtudWxsIT09eTspe2lmKDU9PT15LnRhZ3x8Nj09PXkudGFnKWsocCx5LnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09eS50YWcmJm51bGwhPT15LmNoaWxkKXt5LmNoaWxkW1wicmV0dXJuXCJdPXk7eT15LmNoaWxkO2NvbnRpbnVlfWlmKHk9PT1iKWJyZWFrO1xuZm9yKDtudWxsPT09eS5zaWJsaW5nOyl7aWYobnVsbD09PXlbXCJyZXR1cm5cIl18fHlbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7eT15W1wicmV0dXJuXCJdfXkuc2libGluZ1tcInJldHVyblwiXT15W1wicmV0dXJuXCJdO3k9eS5zaWJsaW5nfXYocCxlLGQsYyxhKSYmZihiKTtiLnN0YXRlTm9kZT1wfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSl0KGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9eigpO2M9cigpO1MoYik/UihiKSYmZihiKTpiLnN0YXRlTm9kZT1nKGQsYSxjLGIpfXJldHVybiBudWxsO2Nhc2UgNzooZD1iLm1lbW9pemVkUHJvcHMpP3ZvaWQgMDpEKFwiMTY1XCIpO2IudGFnPTg7ZT1bXTthOmZvcigocD1iLnN0YXRlTm9kZSkmJihwW1wicmV0dXJuXCJdPWIpO251bGwhPT1cbnA7KXtpZig1PT09cC50YWd8fDY9PT1wLnRhZ3x8ND09PXAudGFnKUQoXCIyNDdcIik7ZWxzZSBpZig5PT09cC50YWcpZS5wdXNoKHAucGVuZGluZ1Byb3BzLnZhbHVlKTtlbHNlIGlmKG51bGwhPT1wLmNoaWxkKXtwLmNoaWxkW1wicmV0dXJuXCJdPXA7cD1wLmNoaWxkO2NvbnRpbnVlfWZvcig7bnVsbD09PXAuc2libGluZzspe2lmKG51bGw9PT1wW1wicmV0dXJuXCJdfHxwW1wicmV0dXJuXCJdPT09YilicmVhayBhO3A9cFtcInJldHVyblwiXX1wLnNpYmxpbmdbXCJyZXR1cm5cIl09cFtcInJldHVyblwiXTtwPXAuc2libGluZ31wPWQuaGFuZGxlcjtkPXAoZC5wcm9wcyxlKTtiLmNoaWxkPVllKGIsbnVsbCE9PWE/YS5jaGlsZDpudWxsLGQsYyk7cmV0dXJuIGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBiLnRhZz03LG51bGw7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxMDpyZXR1cm4gbnVsbDtjYXNlIDExOnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gUShiKSxxKGIpLG51bGw7XG5jYXNlIDEzOnJldHVybiBZKGIpLG51bGw7Y2FzZSAxMjpyZXR1cm4gbnVsbDtjYXNlIDA6RChcIjE2N1wiKTtkZWZhdWx0OkQoXCIxNTZcIil9fX19XG5mdW5jdGlvbiBiZihhLGIsYyxkLGUpe3ZhciBmPWEucG9wSG9zdENvbnRhaW5lcixoPWEucG9wSG9zdENvbnRleHQsZz1iLnBvcENvbnRleHRQcm92aWRlcixrPWIucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHY9Yy5wb3BQcm92aWRlcjtyZXR1cm57dGhyb3dFeGNlcHRpb246ZnVuY3Rpb24oYSxiLGMpe2IuZWZmZWN0VGFnfD01MTI7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtiPXt2YWx1ZTpjLHNvdXJjZTpiLHN0YWNrOkJjKGIpfTtkb3tzd2l0Y2goYS50YWcpe2Nhc2UgMzpPZShhKTthLnVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzPVtiXTthLmVmZmVjdFRhZ3w9MTAyNDtyZXR1cm47Y2FzZSAyOmlmKGM9YS5zdGF0ZU5vZGUsMD09PShhLmVmZmVjdFRhZyY2NCkmJm51bGwhPT1jJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnREaWRDYXRjaCYmIWUoYykpe09lKGEpO2M9YS51cGRhdGVRdWV1ZTt2YXIgZD1jLmNhcHR1cmVkVmFsdWVzO251bGw9PT1kP1xuYy5jYXB0dXJlZFZhbHVlcz1bYl06ZC5wdXNoKGIpO2EuZWZmZWN0VGFnfD0xMDI0O3JldHVybn19YT1hW1wicmV0dXJuXCJdfXdoaWxlKG51bGwhPT1hKX0sdW53aW5kV29yazpmdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpnKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIGYoYSksayhhKSxiPWEuZWZmZWN0VGFnLGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgNTpyZXR1cm4gaChhKSxudWxsO2Nhc2UgNDpyZXR1cm4gZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHYoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX0sdW53aW5kSW50ZXJydXB0ZWRXb3JrOmZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOmcoYSk7YnJlYWs7Y2FzZSAzOmYoYSk7ayhhKTticmVhaztjYXNlIDU6aChhKTticmVhaztjYXNlIDQ6ZihhKTticmVhaztjYXNlIDEzOnYoYSl9fX19XG5mdW5jdGlvbiBjZihhLGIpe3ZhciBjPWIuc291cmNlO251bGw9PT1iLnN0YWNrJiZCYyhjKTtudWxsIT09YyYmQWMoYyk7Yj1iLnZhbHVlO251bGwhPT1hJiYyPT09YS50YWcmJkFjKGEpO3RyeXtiJiZiLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZCl7ZCYmZC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGQpfX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaCh0KXtiKGEsdCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBoKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBKZSYmSmUoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZihhKTt2YXIgYz1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yy5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYy5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYy5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe2IoYSx0KX1icmVhaztjYXNlIDU6ZihhKTticmVhaztjYXNlIDc6ZyhhLnN0YXRlTm9kZSk7YnJlYWs7Y2FzZSA0OnAmJnYoYSl9fWZ1bmN0aW9uIGcoYSl7Zm9yKHZhciBiPWE7OylpZihoKGIpLG51bGw9PT1iLmNoaWxkfHxwJiY0PT09Yi50YWcpe2lmKGI9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9ZWxzZSBiLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkfWZ1bmN0aW9uIGsoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9ZnVuY3Rpb24gdihhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWJbXCJyZXR1cm5cIl07YTpmb3IoOzspe251bGw9PT1jP0QoXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jPSEwfWlmKDU9PT1cbmIudGFnfHw2PT09Yi50YWcpZyhiKSxlP1MoZCxiLnN0YXRlTm9kZSk6UihkLGIuc3RhdGVOb2RlKTtlbHNlIGlmKDQ9PT1iLnRhZz9kPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86aChiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZFtcInJldHVyblwiXT1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXTs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319dmFyIGw9YS5nZXRQdWJsaWNJbnN0YW5jZSxwPWEubXV0YXRpb247YT1hLnBlcnNpc3RlbmNlO3B8fChhP0QoXCIyMzVcIik6RChcIjIzNlwiKSk7dmFyIHo9cC5jb21taXRNb3VudCxCPXAuY29tbWl0VXBkYXRlLHI9cC5yZXNldFRleHRDb250ZW50LFE9cC5jb21taXRUZXh0VXBkYXRlLG49cC5hcHBlbmRDaGlsZCxcbng9cC5hcHBlbmRDaGlsZFRvQ29udGFpbmVyLFk9cC5pbnNlcnRCZWZvcmUsRz1wLmluc2VydEluQ29udGFpbmVyQmVmb3JlLFI9cC5yZW1vdmVDaGlsZCxTPXAucmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyO3JldHVybntjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjppZihiLmVmZmVjdFRhZyYyMDQ4JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHM7YS5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGMsZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRSZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe3IoYS5zdGF0ZU5vZGUpfSxcbmNvbW1pdFBsYWNlbWVudDpmdW5jdGlvbihhKXthOntmb3IodmFyIGI9YVtcInJldHVyblwiXTtudWxsIT09Yjspe2lmKGsoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWJbXCJyZXR1cm5cIl19RChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OkQoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihyKGIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jW1wicmV0dXJuXCJdfHxrKGNbXCJyZXR1cm5cIl0pKXtjPW51bGw7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yy5zaWJsaW5nW1wicmV0dXJuXCJdPWNbXCJyZXR1cm5cIl07Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PVxuYy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZFtcInJldHVyblwiXT1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWM/ZD9HKGIsZS5zdGF0ZU5vZGUsYyk6WShiLGUuc3RhdGVOb2RlLGMpOmQ/eChiLGUuc3RhdGVOb2RlKTpuKGIsZS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZFtcInJldHVyblwiXT1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZVtcInJldHVyblwiXXx8ZVtcInJldHVyblwiXT09PWEpcmV0dXJuO2U9ZVtcInJldHVyblwiXX1lLnNpYmxpbmdbXCJyZXR1cm5cIl09ZVtcInJldHVyblwiXTtlPWUuc2libGluZ319LGNvbW1pdERlbGV0aW9uOmZ1bmN0aW9uKGEpe3YoYSk7XG5hW1wicmV0dXJuXCJdPW51bGw7YS5jaGlsZD1udWxsO2EuYWx0ZXJuYXRlJiYoYS5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxhLmFsdGVybmF0ZVtcInJldHVyblwiXT1udWxsKX0sY29tbWl0V29yazpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmQihjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTYyXCIpOnZvaWQgMDtjPWIubWVtb2l6ZWRQcm9wcztRKGIuc3RhdGVOb2RlLG51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpjLGMpO2JyZWFrO2Nhc2UgMzpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRMaWZlQ3ljbGVzOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMjphPVxuYy5zdGF0ZU5vZGU7aWYoYy5lZmZlY3RUYWcmNClpZihudWxsPT09YilhLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7Yj1iLm1lbW9pemVkU3RhdGU7YS5wcm9wcz1jLm1lbW9pemVkUHJvcHM7YS5zdGF0ZT1jLm1lbW9pemVkU3RhdGU7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWM9Yy51cGRhdGVRdWV1ZTtudWxsIT09YyYmU2UoYyxhKTticmVhaztjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1sKGMuY2hpbGQuc3RhdGVOb2RlKTticmVhaztjYXNlIDI6YT1jLmNoaWxkLnN0YXRlTm9kZX1TZShiLGEpfWJyZWFrO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmVmZmVjdFRhZyZcbjQmJnooYSxjLnR5cGUsYy5tZW1vaXplZFByb3BzLGMpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0RXJyb3JMb2dnaW5nOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDI6dmFyIGM9YS50eXBlO2I9YS5zdGF0ZU5vZGU7dmFyIGQ9YS51cGRhdGVRdWV1ZTtudWxsPT09ZHx8bnVsbD09PWQuY2FwdHVyZWRWYWx1ZXM/RChcIjI2NFwiKTp2b2lkIDA7dmFyIGY9ZC5jYXB0dXJlZFZhbHVlcztkLmNhcHR1cmVkVmFsdWVzPW51bGw7XCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoJiZlKGIpO2IucHJvcHM9YS5tZW1vaXplZFByb3BzO2Iuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2ZvcihjPTA7YzxmLmxlbmd0aDtjKyspe2Q9ZltjXTt2YXIgbD1kLnZhbHVlLGc9ZC5zdGFjaztjZihhLGQpO2IuY29tcG9uZW50RGlkQ2F0Y2gobCx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWc/ZzpcIlwifSl9YnJlYWs7XG5jYXNlIDM6Yz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jfHxudWxsPT09Yy5jYXB0dXJlZFZhbHVlcz9EKFwiMjY0XCIpOnZvaWQgMDtmPWMuY2FwdHVyZWRWYWx1ZXM7Yy5jYXB0dXJlZFZhbHVlcz1udWxsO2ZvcihjPTA7YzxmLmxlbmd0aDtjKyspZD1mW2NdLGNmKGEsZCksYihkLnZhbHVlKTticmVhaztkZWZhdWx0OkQoXCIyNjVcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9bChjKTticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX0sY29tbWl0RGV0YWNoUmVmOmZ1bmN0aW9uKGEpe2E9YS5yZWY7bnVsbCE9PWEmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hKG51bGwpOmEuY3VycmVudD1udWxsKX19fXZhciBlZj17fTtcbmZ1bmN0aW9uIGZmKGEsYil7ZnVuY3Rpb24gYyhhKXthPT09ZWY/RChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9dmFyIGQ9YS5nZXRDaGlsZEhvc3RDb250ZXh0LGU9YS5nZXRSb290SG9zdENvbnRleHQ7YT1iLmNyZWF0ZUN1cnNvcjt2YXIgZj1iLnB1c2gsaD1iLnBvcCxnPWEoZWYpLGs9YShlZiksdj1hKGVmKTtyZXR1cm57Z2V0SG9zdENvbnRleHQ6ZnVuY3Rpb24oKXtyZXR1cm4gYyhnLmN1cnJlbnQpfSxnZXRSb290SG9zdENvbnRhaW5lcjpmdW5jdGlvbigpe3JldHVybiBjKHYuY3VycmVudCl9LHBvcEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSl7aChnLGEpO2goayxhKTtoKHYsYSl9LHBvcEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe2suY3VycmVudD09PWEmJihoKGcsYSksaChrLGEpKX0scHVzaEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSxiKXtmKHYsYixhKTtmKGssYSxhKTtmKGcsZWYsYSk7Yj1lKGIpO2goZyxhKTtmKGcsYixhKX0scHVzaEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe3ZhciBiPVxuYyh2LmN1cnJlbnQpLGU9YyhnLmN1cnJlbnQpO2I9ZChlLGEudHlwZSxiKTtlIT09YiYmKGYoayxhLGEpLGYoZyxiLGEpKX19fVxuZnVuY3Rpb24gZ2YoYSl7ZnVuY3Rpb24gYihhLGIpe3ZhciBjPW5ldyB4ZSg1LG51bGwsbnVsbCwwKTtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjW1wicmV0dXJuXCJdPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIGMoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gYj1mKGIsYS50eXBlLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPWgoYixhLnBlbmRpbmdQcm9wcyksbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGQoYSl7Zm9yKGE9YVtcInJldHVyblwiXTtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWc7KWE9YVtcInJldHVyblwiXTtwPWF9dmFyIGU9YS5zaG91bGRTZXRUZXh0Q29udGVudDtcbmE9YS5oeWRyYXRpb247aWYoIWEpcmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe30sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oKXtEKFwiMTc1XCIpfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe0QoXCIxNzZcIil9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9fTt2YXIgZj1hLmNhbkh5ZHJhdGVJbnN0YW5jZSxoPWEuY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSxnPWEuZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nLGs9YS5nZXRGaXJzdEh5ZHJhdGFibGVDaGlsZCx2PWEuaHlkcmF0ZUluc3RhbmNlLGw9YS5oeWRyYXRlVGV4dEluc3RhbmNlLHA9bnVsbCx6PW51bGwsQj0hMTtyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbihhKXt6PVxuayhhLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtwPWE7cmV0dXJuIEI9ITB9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt6PXA9bnVsbDtCPSExfSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbihhKXtpZihCKXt2YXIgZD16O2lmKGQpe2lmKCFjKGEsZCkpe2Q9ZyhkKTtpZighZHx8IWMoYSxkKSl7YS5lZmZlY3RUYWd8PTI7Qj0hMTtwPWE7cmV0dXJufWIocCx6KX1wPWE7ej1rKGQpfWVsc2UgYS5lZmZlY3RUYWd8PTIsQj0hMSxwPWF9fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXtiPXYoYS5zdGF0ZU5vZGUsYS50eXBlLGEubWVtb2l6ZWRQcm9wcyxiLGMsYSk7YS51cGRhdGVRdWV1ZT1iO3JldHVybiBudWxsIT09Yj8hMDohMX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGwoYS5zdGF0ZU5vZGUsYS5tZW1vaXplZFByb3BzLGEpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbihhKXtpZihhIT09XG5wKXJldHVybiExO2lmKCFCKXJldHVybiBkKGEpLEI9ITAsITE7dmFyIGM9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1jJiZcImJvZHlcIiE9PWMmJiFlKGMsYS5tZW1vaXplZFByb3BzKSlmb3IoYz16O2M7KWIoYSxjKSxjPWcoYyk7ZChhKTt6PXA/ZyhhLnN0YXRlTm9kZSk6bnVsbDtyZXR1cm4hMH19fVxuZnVuY3Rpb24gaGYoYSl7ZnVuY3Rpb24gYihhLGIsYyl7YT1hLnN0YXRlTm9kZTthLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YjthLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWN9ZnVuY3Rpb24gYyhhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXN9ZnVuY3Rpb24gZChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlLGQ9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldENoaWxkQ29udGV4dClyZXR1cm4gYjtjPWMuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGMpZSBpbiBkP3ZvaWQgMDpEKFwiMTA4XCIsQWMoYSl8fFwiVW5rbm93blwiLGUpO3JldHVybiBBKHt9LGIsYyl9dmFyIGU9YS5jcmVhdGVDdXJzb3IsZj1hLnB1c2gsaD1hLnBvcCxnPWUoa2EpLGs9ZSghMSksdj1rYTtyZXR1cm57Z2V0VW5tYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBjKGEpP1xudjpnLmN1cnJlbnR9LGNhY2hlQ29udGV4dDpiLGdldE1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSxjKXt2YXIgZD1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFkKXJldHVybiBrYTt2YXIgZT1hLnN0YXRlTm9kZTtpZihlJiZlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1jKXJldHVybiBlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBmPXt9LGc7Zm9yKGcgaW4gZClmW2ddPWNbZ107ZSYmYihhLGMsZik7cmV0dXJuIGZ9LGhhc0NvbnRleHRDaGFuZ2VkOmZ1bmN0aW9uKCl7cmV0dXJuIGsuY3VycmVudH0saXNDb250ZXh0Q29uc3VtZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNvbnRleHRUeXBlc30saXNDb250ZXh0UHJvdmlkZXI6Yyxwb3BDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSl7YyhhKSYmKGgoayxhKSxoKGcsYSkpfSxwb3BUb3BMZXZlbENvbnRleHRPYmplY3Q6ZnVuY3Rpb24oYSl7aChrLFxuYSk7aChnLGEpfSxwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0OmZ1bmN0aW9uKGEsYixjKXtudWxsIT1nLmN1cnNvcj9EKFwiMTY4XCIpOnZvaWQgMDtmKGcsYixhKTtmKGssYyxhKX0scHJvY2Vzc0NoaWxkQ29udGV4dDpkLHB1c2hDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSl7aWYoIWMoYSkpcmV0dXJuITE7dmFyIGI9YS5zdGF0ZU5vZGU7Yj1iJiZiLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxrYTt2PWcuY3VycmVudDtmKGcsYixhKTtmKGssay5jdXJyZW50LGEpO3JldHVybiEwfSxpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7Yz92b2lkIDA6RChcIjE2OVwiKTtpZihiKXt2YXIgZT1kKGEsdik7Yy5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1lO2goayxhKTtoKGcsYSk7ZihnLGUsYSl9ZWxzZSBoKGssYSk7ZihrLGIsYSl9LGZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEpe2ZvcigyIT09XG54ZChhKXx8MiE9PWEudGFnP0QoXCIxNzBcIik6dm9pZCAwOzMhPT1hLnRhZzspe2lmKGMoYSkpcmV0dXJuIGEuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0OyhhPWFbXCJyZXR1cm5cIl0pP3ZvaWQgMDpEKFwiMTcxXCIpfXJldHVybiBhLnN0YXRlTm9kZS5jb250ZXh0fX19XG5mdW5jdGlvbiBqZihhKXt2YXIgYj1hLmNyZWF0ZUN1cnNvcixjPWEucHVzaCxkPWEucG9wLGU9YihudWxsKSxmPWIobnVsbCksaD1iKDApO3JldHVybntwdXNoUHJvdmlkZXI6ZnVuY3Rpb24oYSl7dmFyIGI9YS50eXBlLl9jb250ZXh0O2MoaCxiLl9jaGFuZ2VkQml0cyxhKTtjKGYsYi5fY3VycmVudFZhbHVlLGEpO2MoZSxhLGEpO2IuX2N1cnJlbnRWYWx1ZT1hLnBlbmRpbmdQcm9wcy52YWx1ZTtiLl9jaGFuZ2VkQml0cz1hLnN0YXRlTm9kZX0scG9wUHJvdmlkZXI6ZnVuY3Rpb24oYSl7dmFyIGI9aC5jdXJyZW50LGM9Zi5jdXJyZW50O2QoZSxhKTtkKGYsYSk7ZChoLGEpO2E9YS50eXBlLl9jb250ZXh0O2EuX2N1cnJlbnRWYWx1ZT1jO2EuX2NoYW5nZWRCaXRzPWJ9fX1cbmZ1bmN0aW9uIGtmKCl7dmFyIGE9W10sYj0tMTtyZXR1cm57Y3JlYXRlQ3Vyc29yOmZ1bmN0aW9uKGEpe3JldHVybntjdXJyZW50OmF9fSxpc0VtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuLTE9PT1ifSxwb3A6ZnVuY3Rpb24oYyl7MD5ifHwoYy5jdXJyZW50PWFbYl0sYVtiXT1udWxsLGItLSl9LHB1c2g6ZnVuY3Rpb24oYyxkKXtiKys7YVtiXT1jLmN1cnJlbnQ7Yy5jdXJyZW50PWR9LGNoZWNrVGhhdFN0YWNrSXNFbXB0eTpmdW5jdGlvbigpe30scmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2OmZ1bmN0aW9uKCl7fX19XG5mdW5jdGlvbiBsZihhKXtmdW5jdGlvbiBiKCl7aWYobnVsbCE9PUkpZm9yKHZhciBhPUlbXCJyZXR1cm5cIl07bnVsbCE9PWE7KUxjKGEpLGE9YVtcInJldHVyblwiXTtZYT1udWxsO1o9MDtJPW51bGw7TmM9ITF9ZnVuY3Rpb24gYyhhKXtyZXR1cm4gbnVsbCE9PXlhJiZ5YS5oYXMoYSl9ZnVuY3Rpb24gZChhKXtmb3IoOzspe3ZhciBiPWEuYWx0ZXJuYXRlLGM9YVtcInJldHVyblwiXSxkPWEuc2libGluZztpZigwPT09KGEuZWZmZWN0VGFnJjUxMikpe2I9Q2IoYixhLFopO3ZhciBlPWE7aWYoMTA3Mzc0MTgyMz09PVp8fDEwNzM3NDE4MjMhPT1lLmV4cGlyYXRpb25UaW1lKXtiOnN3aXRjaChlLnRhZyl7Y2FzZSAzOmNhc2UgMjp2YXIgZj1lLnVwZGF0ZVF1ZXVlO2Y9bnVsbD09PWY/MDpmLmV4cGlyYXRpb25UaW1lO2JyZWFrIGI7ZGVmYXVsdDpmPTB9Zm9yKHZhciBnPWUuY2hpbGQ7bnVsbCE9PWc7KTAhPT1nLmV4cGlyYXRpb25UaW1lJiYoMD09PWZ8fGY+Zy5leHBpcmF0aW9uVGltZSkmJihmPVxuZy5leHBpcmF0aW9uVGltZSksZz1nLnNpYmxpbmc7ZS5leHBpcmF0aW9uVGltZT1mfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1jJiYwPT09KGMuZWZmZWN0VGFnJjUxMikmJihudWxsPT09Yy5maXJzdEVmZmVjdCYmKGMuZmlyc3RFZmZlY3Q9YS5maXJzdEVmZmVjdCksbnVsbCE9PWEubGFzdEVmZmVjdCYmKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNle05jPSEwO2JyZWFrfX1lbHNle2E9S2MoYSk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj0yNTU5LGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1cbm51bGwsYy5lZmZlY3RUYWd8PTUxMik7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2UgYnJlYWt9fXJldHVybiBudWxsfWZ1bmN0aW9uIGUoYSl7dmFyIGI9V2EoYS5hbHRlcm5hdGUsYSxaKTtudWxsPT09YiYmKGI9ZChhKSk7bmMuY3VycmVudD1udWxsO3JldHVybiBifWZ1bmN0aW9uIGYoYSxjLGYpe2NhP0QoXCIyNDNcIik6dm9pZCAwO2NhPSEwO2lmKGMhPT1afHxhIT09WWF8fG51bGw9PT1JKWIoKSxZYT1hLFo9YyxJPXplKFlhLmN1cnJlbnQsbnVsbCxaKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBnPSExO2Rve3RyeXtpZihmKWZvcig7bnVsbCE9PUkmJiFTKCk7KUk9ZShJKTtlbHNlIGZvcig7bnVsbCE9PUk7KUk9ZShJKX1jYXRjaChPYyl7aWYobnVsbD09PUkpe2c9ITA7cShPYyk7YnJlYWt9Zj1JO3ZhciBoPWZbXCJyZXR1cm5cIl07aWYobnVsbD09PWgpe2c9ITA7cShPYyk7YnJlYWt9SmMoaCxmLE9jKTtJPWQoZil9YnJlYWt9d2hpbGUoMSk7XG5jYT0hMTtpZihnfHxudWxsIT09SSlyZXR1cm4gbnVsbDtpZihOYylyZXR1cm4gYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmN1cnJlbnQuYWx0ZXJuYXRlO0QoXCIyNjJcIil9ZnVuY3Rpb24gaChhLGIsYyxkKXthPXt2YWx1ZTpjLHNvdXJjZTphLHN0YWNrOkJjKGEpfTtQZShiLHtleHBpcmF0aW9uVGltZTpkLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOm51bGwsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6YSxuZXh0Om51bGx9KTt2KGIsZCl9ZnVuY3Rpb24gZyhhLGIpe2E6e2NhJiYhWmE/RChcIjI2M1wiKTp2b2lkIDA7Zm9yKHZhciBkPWFbXCJyZXR1cm5cIl07bnVsbCE9PWQ7KXtzd2l0Y2goZC50YWcpe2Nhc2UgMjp2YXIgZT1kLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkQ2F0Y2gmJiFjKGUpKXtoKGEsZCxiLFxuMSk7YT12b2lkIDA7YnJlYWsgYX1icmVhaztjYXNlIDM6aChhLGQsYiwxKTthPXZvaWQgMDticmVhayBhfWQ9ZFtcInJldHVyblwiXX0zPT09YS50YWcmJmgoYSxhLGIsMSk7YT12b2lkIDB9cmV0dXJuIGF9ZnVuY3Rpb24gayhhKXthPTAhPT1pYT9pYTpjYT9aYT8xOlo6YS5tb2RlJjE/emE/MTAqKCgobCgpKzE1KS8xMHwwKSsxKToyNSooKChsKCkrNTAwKS8yNXwwKSsxKToxO3phJiYoMD09PWRhfHxhPmRhKSYmKGRhPWEpO3JldHVybiBhfWZ1bmN0aW9uIHYoYSxjKXthOntmb3IoO251bGwhPT1hOyl7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+YylhLmV4cGlyYXRpb25UaW1lPWM7bnVsbCE9PWEuYWx0ZXJuYXRlJiYoMD09PWEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lfHxhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT5jKSYmKGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPWMpO2lmKG51bGw9PT1hW1wicmV0dXJuXCJdKWlmKDM9PT1hLnRhZyl7dmFyIGQ9XG5hLnN0YXRlTm9kZTshY2EmJjAhPT1aJiZjPFomJmIoKTtjYSYmIVphJiZZYT09PWR8fEIoZCxjKTtGYj54ZyYmRChcIjE4NVwiKX1lbHNle2M9dm9pZCAwO2JyZWFrIGF9YT1hW1wicmV0dXJuXCJdfWM9dm9pZCAwfXJldHVybiBjfWZ1bmN0aW9uIGwoKXt5ZT1JYygpLVBjO3JldHVybiB5Zz0oeWUvMTB8MCkrMn1mdW5jdGlvbiBwKGEsYixjLGQsZSl7dmFyIGY9aWE7aWE9MTt0cnl7cmV0dXJuIGEoYixjLGQsZSl9ZmluYWxseXtpYT1mfX1mdW5jdGlvbiB6KGEpe2lmKDAhPT1HYil7aWYoYT5HYilyZXR1cm47bWcoUWMpfXZhciBiPUljKCktUGM7R2I9YTtRYz1sZyhRLHt0aW1lb3V0OjEwKihhLTIpLWJ9KX1mdW5jdGlvbiBCKGEsYil7aWYobnVsbD09PWEubmV4dFNjaGVkdWxlZFJvb3QpYS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1iLG51bGw9PT1LPyhsYT1LPWEsYS5uZXh0U2NoZWR1bGVkUm9vdD1hKTooSz1LLm5leHRTY2hlZHVsZWRSb290PWEsSy5uZXh0U2NoZWR1bGVkUm9vdD1sYSk7XG5lbHNle3ZhciBjPWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWN8fGI8YylhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWJ9VHx8KEo/SGImJihhYT1hLFA9MSxHKGEsMSwhMSkpOjE9PT1iP24oKTp6KGIpKX1mdW5jdGlvbiByKCl7dmFyIGE9MCxiPW51bGw7aWYobnVsbCE9PUspZm9yKHZhciBjPUssZD1sYTtudWxsIT09ZDspe3ZhciBlPWQucmVtYWluaW5nRXhwaXJhdGlvblRpbWU7aWYoMD09PWUpe251bGw9PT1jfHxudWxsPT09Sz9EKFwiMjQ0XCIpOnZvaWQgMDtpZihkPT09ZC5uZXh0U2NoZWR1bGVkUm9vdCl7bGE9Sz1kLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBpZihkPT09bGEpbGE9ZT1kLm5leHRTY2hlZHVsZWRSb290LEsubmV4dFNjaGVkdWxlZFJvb3Q9ZSxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZWxzZSBpZihkPT09Syl7Sz1jO0submV4dFNjaGVkdWxlZFJvb3Q9bGE7ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgYy5uZXh0U2NoZWR1bGVkUm9vdD1cbmQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2lmKDA9PT1hfHxlPGEpYT1lLGI9ZDtpZihkPT09SylicmVhaztjPWQ7ZD1kLm5leHRTY2hlZHVsZWRSb290fX1jPWFhO251bGwhPT1jJiZjPT09YiYmMT09PWE/RmIrKzpGYj0wO2FhPWI7UD1hfWZ1bmN0aW9uIFEoYSl7eCgwLCEwLGEpfWZ1bmN0aW9uIG4oKXt4KDEsITEsbnVsbCl9ZnVuY3Rpb24geChhLGIsYyl7JGE9YztyKCk7aWYoYilmb3IoO251bGwhPT1hYSYmMCE9PVAmJigwPT09YXx8YT49UCkmJighSWJ8fGwoKT49UCk7KUcoYWEsUCwhSWIpLHIoKTtlbHNlIGZvcig7bnVsbCE9PWFhJiYwIT09UCYmKDA9PT1hfHxhPj1QKTspRyhhYSxQLCExKSxyKCk7bnVsbCE9PSRhJiYoR2I9MCxRYz0tMSk7MCE9PVAmJnooUCk7JGE9bnVsbDtJYj0hMTtZKCl9ZnVuY3Rpb24gWSgpe0ZiPTA7aWYobnVsbCE9PUFhKXt2YXIgYT1BYTtBYT1udWxsO2Zvcih2YXIgYj1cbjA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07dHJ5e2MuX29uQ29tcGxldGUoKX1jYXRjaCh3Zyl7QmF8fChCYT0hMCxKYj13Zyl9fX1pZihCYSl0aHJvdyBhPUpiLEpiPW51bGwsQmE9ITEsYTt9ZnVuY3Rpb24gRyhhLGIsYyl7VD9EKFwiMjQ1XCIpOnZvaWQgMDtUPSEwO2M/KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/UihhLGMsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsYz1mKGEsYiwhMCksbnVsbCE9PWMmJihTKCk/YS5maW5pc2hlZFdvcms9YzpSKGEsYyxiKSkpKTooYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9SKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPWYoYSxiLCExKSxudWxsIT09YyYmUihhLGMsYikpKTtUPSExfWZ1bmN0aW9uIFIoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWMmJihudWxsPT09QWE/QWE9W2RdOkFhLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9XG4wO3JldHVybn1hLmZpbmlzaGVkV29yaz1udWxsO1phPWNhPSEwO2M9Yi5zdGF0ZU5vZGU7Yy5jdXJyZW50PT09Yj9EKFwiMTc3XCIpOnZvaWQgMDtkPWMucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOzA9PT1kP0QoXCIyNjFcIik6dm9pZCAwO2MucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGU9bCgpO25jLmN1cnJlbnQ9bnVsbDtpZigxPGIuZWZmZWN0VGFnKWlmKG51bGwhPT1iLmxhc3RFZmZlY3Qpe2IubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI7dmFyIGY9Yi5maXJzdEVmZmVjdH1lbHNlIGY9YjtlbHNlIGY9Yi5maXJzdEVmZmVjdDt6ZyhjLmNvbnRhaW5lckluZm8pO2Zvcih3PWY7bnVsbCE9PXc7KXt2YXIgaD0hMSxrPXZvaWQgMDt0cnl7Zm9yKDtudWxsIT09dzspdy5lZmZlY3RUYWcmMjA0OCYmRGIody5hbHRlcm5hdGUsdyksdz13Lm5leHRFZmZlY3R9Y2F0Y2goYWIpe2g9ITAsaz1hYn1oJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LGspLG51bGwhPT1cbncmJih3PXcubmV4dEVmZmVjdCkpfWZvcih3PWY7bnVsbCE9PXc7KXtoPSExO2s9dm9pZCAwO3RyeXtmb3IoO251bGwhPT13Oyl7dmFyIHA9dy5lZmZlY3RUYWc7cCYxNiYmTWModyk7aWYocCYxMjgpe3ZhciBuPXcuYWx0ZXJuYXRlO251bGwhPT1uJiZrZyhuKX1zd2l0Y2gocCYxNCl7Y2FzZSAyOkViKHcpO3cuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6RWIodyk7dy5lZmZlY3RUYWcmPS0zO3dlKHcuYWx0ZXJuYXRlLHcpO2JyZWFrO2Nhc2UgNDp3ZSh3LmFsdGVybmF0ZSx3KTticmVhaztjYXNlIDg6Z2codyl9dz13Lm5leHRFZmZlY3R9fWNhdGNoKGFiKXtoPSEwLGs9YWJ9aCYmKG51bGw9PT13P0QoXCIxNzhcIik6dm9pZCAwLGcodyxrKSxudWxsIT09dyYmKHc9dy5uZXh0RWZmZWN0KSl9QWcoYy5jb250YWluZXJJbmZvKTtjLmN1cnJlbnQ9Yjtmb3Iodz1mO251bGwhPT13Oyl7cD0hMTtuPXZvaWQgMDt0cnl7Zm9yKGY9YyxoPWUsaz1kO251bGwhPT13Oyl7dmFyIHI9dy5lZmZlY3RUYWc7XG5yJjM2JiZoZyhmLHcuYWx0ZXJuYXRlLHcsaCxrKTtyJjI1NiYmaWcodyxxKTtyJjEyOCYmamcodyk7dmFyIHQ9dy5uZXh0RWZmZWN0O3cubmV4dEVmZmVjdD1udWxsO3c9dH19Y2F0Y2goYWIpe3A9ITAsbj1hYn1wJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LG4pLG51bGwhPT13JiYodz13Lm5leHRFZmZlY3QpKX1jYT1aYT0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgSWUmJkllKGIuc3RhdGVOb2RlKTtiPWMuY3VycmVudC5leHBpcmF0aW9uVGltZTswPT09YiYmKHlhPW51bGwpO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1mdW5jdGlvbiBTKCl7cmV0dXJuIG51bGw9PT0kYXx8JGEudGltZVJlbWFpbmluZygpPkJnPyExOkliPSEwfWZ1bmN0aW9uIHEoYSl7bnVsbD09PWFhP0QoXCIyNDZcIik6dm9pZCAwO2FhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPTA7QmF8fChCYT0hMCxKYj1hKX12YXIgdT1rZigpLHQ9ZmYoYSx1KSx5PWhmKHUpO3U9amYodSk7dmFyIEg9Z2YoYSksXG5XYT0kZShhLHQseSx1LEgsdixrKS5iZWdpbldvcmssQ2I9YWYoYSx0LHksdSxIKS5jb21wbGV0ZVdvcms7dD1iZih0LHksdSx2LGMpO3ZhciBKYz10LnRocm93RXhjZXB0aW9uLEtjPXQudW53aW5kV29yayxMYz10LnVud2luZEludGVycnVwdGVkV29yazt0PWRmKGEsZyx2LGssZnVuY3Rpb24oYSl7bnVsbD09PXlhP3lhPW5ldyBTZXQoW2FdKTp5YS5hZGQoYSl9LGwpO3ZhciBEYj10LmNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyxNYz10LmNvbW1pdFJlc2V0VGV4dENvbnRlbnQsRWI9dC5jb21taXRQbGFjZW1lbnQsZ2c9dC5jb21taXREZWxldGlvbix3ZT10LmNvbW1pdFdvcmssaGc9dC5jb21taXRMaWZlQ3ljbGVzLGlnPXQuY29tbWl0RXJyb3JMb2dnaW5nLGpnPXQuY29tbWl0QXR0YWNoUmVmLGtnPXQuY29tbWl0RGV0YWNoUmVmLEljPWEubm93LGxnPWEuc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrLG1nPWEuY2FuY2VsRGVmZXJyZWRDYWxsYmFjayx6Zz1hLnByZXBhcmVGb3JDb21taXQsXG5BZz1hLnJlc2V0QWZ0ZXJDb21taXQsUGM9SWMoKSx5Zz0yLHllPVBjLFJjPTAsaWE9MCxjYT0hMSxJPW51bGwsWWE9bnVsbCxaPTAsdz1udWxsLFphPSExLE5jPSExLHlhPW51bGwsbGE9bnVsbCxLPW51bGwsR2I9MCxRYz0tMSxUPSExLGFhPW51bGwsUD0wLGRhPTAsSWI9ITEsQmE9ITEsSmI9bnVsbCwkYT1udWxsLEo9ITEsSGI9ITEsemE9ITEsQWE9bnVsbCx4Zz0xRTMsRmI9MCxCZz0xO3JldHVybntyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lOmwsY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcjprLHNjaGVkdWxlV29yazp2LHJlcXVlc3RXb3JrOkIsZmx1c2hSb290OmZ1bmN0aW9uKGEsYil7VD9EKFwiMjUzXCIpOnZvaWQgMDthYT1hO1A9YjtHKGEsYiwhMSk7bigpO1koKX0sYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1KO0o9ITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7KEo9Yyl8fFR8fG4oKX19LHVuYmF0Y2hlZFVwZGF0ZXM6ZnVuY3Rpb24oYSxiKXtpZihKJiYhSGIpe0hiPVxuITA7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7SGI9ITF9fXJldHVybiBhKGIpfSxmbHVzaFN5bmM6ZnVuY3Rpb24oYSxiKXtUP0QoXCIxODdcIik6dm9pZCAwO3ZhciBjPUo7Sj0hMDt0cnl7cmV0dXJuIHAoYSxiKX1maW5hbGx5e0o9YyxuKCl9fSxmbHVzaENvbnRyb2xsZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9SjtKPSEwO3RyeXtwKGEpfWZpbmFsbHl7KEo9Yil8fFR8fHgoMSwhMSxudWxsKX19LGRlZmVycmVkVXBkYXRlczpmdW5jdGlvbihhKXt2YXIgYj1pYTtpYT0yNSooKChsKCkrNTAwKS8yNXwwKSsxKTt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e2lhPWJ9fSxzeW5jVXBkYXRlczpwLGludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbihhLGIsYyl7aWYoemEpcmV0dXJuIGEoYixjKTtKfHxUfHwwPT09ZGF8fCh4KGRhLCExLG51bGwpLGRhPTApO3ZhciBkPXphLGU9SjtKPXphPSEwO3RyeXtyZXR1cm4gYShiLGMpfWZpbmFsbHl7emE9ZCwoSj1lKXx8VHx8bigpfX0sZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oKXtUfHxcbjA9PT1kYXx8KHgoZGEsITEsbnVsbCksZGE9MCl9LGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246ZnVuY3Rpb24oKXt2YXIgYT0yNSooKChsKCkrNTAwKS8yNXwwKSsxKTthPD1SYyYmKGE9UmMrMSk7cmV0dXJuIFJjPWF9LGxlZ2FjeUNvbnRleHQ6eX19XG5mdW5jdGlvbiBtZihhKXtmdW5jdGlvbiBiKGEsYixjLGQsZSxoKXtkPWIuY3VycmVudDtpZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgbD1nKGMpO2M9ayhjKT92KGMsbCk6bH1lbHNlIGM9a2E7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1oO1BlKGQse2V4cGlyYXRpb25UaW1lOmUscGFydGlhbFN0YXRlOntlbGVtZW50OmF9LGNhbGxiYWNrOnZvaWQgMD09PWI/bnVsbDpiLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxjYXB0dXJlZFZhbHVlOm51bGwsbmV4dDpudWxsfSk7ZihkLGUpO3JldHVybiBlfXZhciBjPWEuZ2V0UHVibGljSW5zdGFuY2U7YT1sZihhKTt2YXIgZD1hLnJlY2FsY3VsYXRlQ3VycmVudFRpbWUsZT1hLmNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIsZj1hLnNjaGVkdWxlV29yayxoPWEubGVnYWN5Q29udGV4dCxnPWguZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQsaz1oLmlzQ29udGV4dFByb3ZpZGVyLHY9XG5oLnByb2Nlc3NDaGlsZENvbnRleHQ7cmV0dXJue2NyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyl7Yj1uZXcgeGUoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBiLnN0YXRlTm9kZT1hfSx1cGRhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxjLGYsaCl7dmFyIGc9Yy5jdXJyZW50LGs9ZCgpO2c9ZShnKTtyZXR1cm4gYihhLGMsZixrLGcsaCl9LHVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWU6ZnVuY3Rpb24oYSxjLGUsZixnKXt2YXIgaD1kKCk7cmV0dXJuIGIoYSxjLGUsaCxmLGcpfSxmbHVzaFJvb3Q6YS5mbHVzaFJvb3QsXG5yZXF1ZXN0V29yazphLnJlcXVlc3RXb3JrLGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246YS5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uLGJhdGNoZWRVcGRhdGVzOmEuYmF0Y2hlZFVwZGF0ZXMsdW5iYXRjaGVkVXBkYXRlczphLnVuYmF0Y2hlZFVwZGF0ZXMsZGVmZXJyZWRVcGRhdGVzOmEuZGVmZXJyZWRVcGRhdGVzLHN5bmNVcGRhdGVzOmEuc3luY1VwZGF0ZXMsaW50ZXJhY3RpdmVVcGRhdGVzOmEuaW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmEuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMsZmx1c2hDb250cm9sbGVkOmEuZmx1c2hDb250cm9sbGVkLGZsdXNoU3luYzphLmZsdXNoU3luYyxnZXRQdWJsaWNSb290SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGMoYS5jaGlsZC5zdGF0ZU5vZGUpO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX0sXG5maW5kSG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2b2lkIDA9PT1iJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyP0QoXCIxODhcIik6RChcIjI2OFwiLE9iamVjdC5rZXlzKGEpKSk7YT1CZChiKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1DZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIEhlKEEoe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1CZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX19fVxudmFyIG5mPU9iamVjdC5mcmVlemUoe2RlZmF1bHQ6bWZ9KSxvZj1uZiYmbWZ8fG5mLHBmPW9mW1wiZGVmYXVsdFwiXT9vZltcImRlZmF1bHRcIl06b2Y7ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpyYyxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX12YXIgcmY9XCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyxzZj12b2lkIDA7c2Y9cmY/ZnVuY3Rpb24oKXtyZXR1cm4gcGVyZm9ybWFuY2Uubm93KCl9OmZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCl9O3ZhciB0Zj12b2lkIDAsdWY9dm9pZCAwO1xuaWYobS5jYW5Vc2VET00paWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHJlcXVlc3RJZGxlQ2FsbGJhY2t8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjYW5jZWxJZGxlQ2FsbGJhY2spe3ZhciB2Zj1udWxsLHdmPSExLHhmPS0xLHlmPSExLHpmPTAsQWY9MzMsQmY9MzMsQ2Y9dm9pZCAwO0NmPXJmP3tkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT16Zi1wZXJmb3JtYW5jZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19OntkaWRUaW1lb3V0OiExLHRpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXt2YXIgYT16Zi1EYXRlLm5vdygpO3JldHVybiAwPGE/YTowfX07dmFyIERmPVwiX19yZWFjdElkbGVDYWxsYmFjayRcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXtpZihhLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09RGYpe3dmPSExO2E9c2YoKTtpZigwPj16Zi1hKWlmKC0xIT09XG54ZiYmeGY8PWEpQ2YuZGlkVGltZW91dD0hMDtlbHNle3lmfHwoeWY9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKEVmKSk7cmV0dXJufWVsc2UgQ2YuZGlkVGltZW91dD0hMTt4Zj0tMTthPXZmO3ZmPW51bGw7bnVsbCE9PWEmJmEoQ2YpfX0sITEpO3ZhciBFZj1mdW5jdGlvbihhKXt5Zj0hMTt2YXIgYj1hLXpmK0JmO2I8QmYmJkFmPEJmPyg4PmImJihiPTgpLEJmPWI8QWY/QWY6Yik6QWY9Yjt6Zj1hK0JmO3dmfHwod2Y9ITAsd2luZG93LnBvc3RNZXNzYWdlKERmLFwiKlwiKSl9O3RmPWZ1bmN0aW9uKGEsYil7dmY9YTtudWxsIT1iJiZcIm51bWJlclwiPT09dHlwZW9mIGIudGltZW91dCYmKHhmPXNmKCkrYi50aW1lb3V0KTt5Znx8KHlmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShFZikpO3JldHVybiAwfTt1Zj1mdW5jdGlvbigpe3ZmPW51bGw7d2Y9ITE7eGY9LTF9fWVsc2UgdGY9d2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2ssdWY9d2luZG93LmNhbmNlbElkbGVDYWxsYmFjaztlbHNlIHRmPVxuZnVuY3Rpb24oYSl7cmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXthKHt0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIEluZmluaXR5fSxkaWRUaW1lb3V0OiExfSl9KX0sdWY9ZnVuY3Rpb24oYSl7Y2xlYXJUaW1lb3V0KGEpfTtmdW5jdGlvbiBGZihhKXt2YXIgYj1cIlwiO2VhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsPT1hfHxcInN0cmluZ1wiIT09dHlwZW9mIGEmJlwibnVtYmVyXCIhPT10eXBlb2YgYXx8KGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gR2YoYSxiKXthPUEoe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1GZihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBIZihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrYztiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWYoYSxiKXt2YXIgYz1iLnZhbHVlO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOm51bGwhPWM/YzpiLmRlZmF1bHRWYWx1ZSx3YXNNdWx0aXBsZTohIWIubXVsdGlwbGV9fWZ1bmN0aW9uIEpmKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9EKFwiOTFcIik6dm9pZCAwO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIEtmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/RChcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOkQoXCI5M1wiKSxiPWJbMF0pLGM9XCJcIitiKSxudWxsPT1jJiYoYz1cIlwiKSk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6XCJcIitjfX1cbmZ1bmN0aW9uIExmKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWIuZGVmYXVsdFZhbHVlJiYoYS5kZWZhdWx0VmFsdWU9Yi5kZWZhdWx0VmFsdWUpfWZ1bmN0aW9uIE1mKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBOZj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBPZihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIFBmKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9PZihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBRZj12b2lkIDAsUmY9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09TmYuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UWY9UWZ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UWYuaW5uZXJIVE1MPVwiXFx4M2NzdmdcXHgzZVwiK2IrXCJcXHgzYy9zdmdcXHgzZVwiO2ZvcihiPVFmLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFNmKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgVGY9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxcbnN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sVWY9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKFRmKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1VmLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7VGZbYl09VGZbYV19KX0pO1xuZnVuY3Rpb24gVmYoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpO3ZhciBlPWM7dmFyIGY9YltjXTtlPW51bGw9PWZ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGZ8fFwiXCI9PT1mP1wiXCI6ZHx8XCJudW1iZXJcIiE9PXR5cGVvZiBmfHwwPT09Znx8VGYuaGFzT3duUHJvcGVydHkoZSkmJlRmW2VdPyhcIlwiK2YpLnRyaW0oKTpmK1wicHhcIjtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIFdmPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBYZihhLGIsYyl7YiYmKFdmW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD9EKFwiMTM3XCIsYSxjKCkpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/RChcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDpEKFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT9EKFwiNjJcIixjKCkpOnZvaWQgMCl9XG5mdW5jdGlvbiBZZihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIFpmPUMudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiAkZihhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1rZShhKTtiPXZhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2MuaGFzT3duUHJvcGVydHkoZSkmJmNbZV18fChcInRvcFNjcm9sbFwiPT09ZT9aZChcInRvcFNjcm9sbFwiLFwic2Nyb2xsXCIsYSk6XCJ0b3BGb2N1c1wiPT09ZXx8XCJ0b3BCbHVyXCI9PT1lPyhaZChcInRvcEZvY3VzXCIsXCJmb2N1c1wiLGEpLFpkKFwidG9wQmx1clwiLFwiYmx1clwiLGEpLGMudG9wQmx1cj0hMCxjLnRvcEZvY3VzPSEwKTpcInRvcENhbmNlbFwiPT09ZT8oaWMoXCJjYW5jZWxcIiwhMCkmJlpkKFwidG9wQ2FuY2VsXCIsXCJjYW5jZWxcIixhKSxjLnRvcENhbmNlbD0hMCk6XCJ0b3BDbG9zZVwiPT09ZT8oaWMoXCJjbG9zZVwiLCEwKSYmWmQoXCJ0b3BDbG9zZVwiLFwiY2xvc2VcIixhKSxjLnRvcENsb3NlPSEwKTpmZS5oYXNPd25Qcm9wZXJ0eShlKSYmVyhlLGZlW2VdLGEpLGNbZV09ITApfX1cbmZ1bmN0aW9uIGFnKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PU5mLmh0bWwmJihkPU9mKGEpKTtkPT09TmYuaHRtbD9cInNjcmlwdFwiPT09YT8oYT1jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCJcXHgzY3NjcmlwdFxceDNlXFx4M2Mvc2NyaXB0XFx4M2VcIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6YT1cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM/Yy5jcmVhdGVFbGVtZW50KGEse2lzOmIuaXN9KTpjLmNyZWF0ZUVsZW1lbnQoYSk6YT1jLmNyZWF0ZUVsZW1lbnROUyhkLGEpO3JldHVybiBhfWZ1bmN0aW9uIGJnKGEsYil7cmV0dXJuKDk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShhKX1cbmZ1bmN0aW9uIGNnKGEsYixjLGQpe3ZhciBlPVlmKGIsYyk7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6VyhcInRvcExvYWRcIixcImxvYWRcIixhKTt2YXIgZj1jO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihmIGluIGdlKWdlLmhhc093blByb3BlcnR5KGYpJiZXKGYsZ2VbZl0sYSk7Zj1jO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZm9ybVwiOlcoXCJ0b3BSZXNldFwiLFwicmVzZXRcIixhKTtXKFwidG9wU3VibWl0XCIsXCJzdWJtaXRcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpXKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6V2MoYSxjKTtmPVZjKGEsYyk7VyhcInRvcEludmFsaWRcIixcblwiaW52YWxpZFwiLGEpOyRmKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpJZihhLGMpO2Y9QSh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpLZihhLGMpO2Y9SmYoYSxjKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmY9Y31YZihiLGYsWmYpO3ZhciBoPWYsZztmb3IoZyBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZykpe3ZhciBrPWhbZ107XCJzdHlsZVwiPT09Zz9WZihhLGssWmYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmUmYoYSxrKSk6XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWJ8fFwiXCIhPT1rKSYmU2YoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJlxuU2YoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1nJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZyYmXCJhdXRvRm9jdXNcIiE9PWcmJih1YS5oYXNPd25Qcm9wZXJ0eShnKT9udWxsIT1rJiYkZihkLGcpOm51bGwhPWsmJlVjKGEsZyxrLGUpKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6bGMoYSk7YWQoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpsYyhhKTtNZihhLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYy52YWx1ZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFjLm11bHRpcGxlO2I9Yy52YWx1ZTtudWxsIT1iP0hmKGEsISFjLm11bHRpcGxlLGIsITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZIZihhLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoYS5vbmNsaWNrPUMpfX1cbmZ1bmN0aW9uIGRnKGEsYixjLGQsZSl7dmFyIGY9bnVsbDtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Yz1WYyhhLGMpO2Q9VmMoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpjPUdmKGEsYyk7ZD1HZihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmM9QSh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjPUpmKGEsYyk7ZD1KZihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUMpfVhmKGIsZCxaZik7Yj1hPXZvaWQgMDt2YXIgaD1udWxsO2ZvcihhIGluIGMpaWYoIWQuaGFzT3duUHJvcGVydHkoYSkmJmMuaGFzT3duUHJvcGVydHkoYSkmJm51bGwhPWNbYV0paWYoXCJzdHlsZVwiPT09YSl7dmFyIGc9Y1thXTtmb3IoYiBpbiBnKWcuaGFzT3duUHJvcGVydHkoYikmJihofHxcbihoPXt9KSxoW2JdPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1hJiZcImNoaWxkcmVuXCIhPT1hJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJlwiYXV0b0ZvY3VzXCIhPT1hJiYodWEuaGFzT3duUHJvcGVydHkoYSk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGEsbnVsbCkpO2ZvcihhIGluIGQpe3ZhciBrPWRbYV07Zz1udWxsIT1jP2NbYV06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYSkmJmshPT1nJiYobnVsbCE9a3x8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09YSlpZihnKXtmb3IoYiBpbiBnKSFnLmhhc093blByb3BlcnR5KGIpfHxrJiZrLmhhc093blByb3BlcnR5KGIpfHwoaHx8KGg9e30pLGhbYl09XCJcIik7Zm9yKGIgaW4gaylrLmhhc093blByb3BlcnR5KGIpJiZnW2JdIT09a1tiXSYmKGh8fChoPXt9KSxoW2JdPWtbYl0pfWVsc2UgaHx8KGZ8fChmPVtdKSxmLnB1c2goYSxoKSksXG5oPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWE/KGs9az9rLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1rJiZnIT09ayYmKGY9Znx8W10pLnB1c2goYSxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1hP2c9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmKHVhLmhhc093blByb3BlcnR5KGEpPyhudWxsIT1rJiYkZihlLGEpLGZ8fGc9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGEsaykpfWgmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixoKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIGVnKGEsYixjLGQsZSl7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJlljKGEsZSk7WWYoYyxkKTtkPVlmKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgaD1iW2ZdLGc9YltmKzFdO1wic3R5bGVcIj09PWg/VmYoYSxnLFpmKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oP1JmKGEsZyk6XCJjaGlsZHJlblwiPT09aD9TZihhLGcpOlVjKGEsaCxnLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpaYyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkxmKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU9dm9pZCAwLGI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/SGYoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP1xuSGYoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsITApOkhmKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1cbmZ1bmN0aW9uIGZnKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6VyhcInRvcExvYWRcIixcImxvYWRcIixhKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IodmFyIGYgaW4gZ2UpZ2UuaGFzT3duUHJvcGVydHkoZikmJlcoZixnZVtmXSxhKTticmVhaztjYXNlIFwic291cmNlXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VyhcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1coXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6VyhcInRvcFRvZ2dsZVwiLFwidG9nZ2xlXCIsYSk7YnJlYWs7Y2FzZSBcImlucHV0XCI6V2MoYSxjKTtXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpOyRmKGUsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6SWYoYSxcbmMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktmKGEsYyksVyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKSwkZihlLFwib25DaGFuZ2VcIil9WGYoYixjLFpmKTtkPW51bGw7Zm9yKHZhciBoIGluIGMpYy5oYXNPd25Qcm9wZXJ0eShoKSYmKGY9Y1toXSxcImNoaWxkcmVuXCI9PT1oP1wic3RyaW5nXCI9PT10eXBlb2YgZj9hLnRleHRDb250ZW50IT09ZiYmKGQ9W1wiY2hpbGRyZW5cIixmXSk6XCJudW1iZXJcIj09PXR5cGVvZiBmJiZhLnRleHRDb250ZW50IT09XCJcIitmJiYoZD1bXCJjaGlsZHJlblwiLFwiXCIrZl0pOnVhLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mJiYkZihlLGgpKTtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6bGMoYSk7YWQoYSxjKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpsYyhhKTtNZihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5vbkNsaWNrJiZcbihhLm9uY2xpY2s9Qyl9cmV0dXJuIGR9ZnVuY3Rpb24gbmcoYSxiKXtyZXR1cm4gYS5ub2RlVmFsdWUhPT1ifVxudmFyIG9nPU9iamVjdC5mcmVlemUoe2NyZWF0ZUVsZW1lbnQ6YWcsY3JlYXRlVGV4dE5vZGU6Ymcsc2V0SW5pdGlhbFByb3BlcnRpZXM6Y2csZGlmZlByb3BlcnRpZXM6ZGcsdXBkYXRlUHJvcGVydGllczplZyxkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzOmZnLGRpZmZIeWRyYXRlZFRleHQ6bmcsd2FybkZvclVubWF0Y2hlZFRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQ6ZnVuY3Rpb24oKXt9LHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0OmZ1bmN0aW9uKCl7fSxyZXN0b3JlQ29udHJvbGxlZFN0YXRlOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6WmMoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPVxuYy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZVxceDNkXCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlXFx4M2RcInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1YYShkKTtlP3ZvaWQgMDpEKFwiOTBcIik7bWMoZCk7WmMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkxmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZIZihhLCEhYy5tdWx0aXBsZSxiLCExKX19fSk7VGIuaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudChvZyk7dmFyIHBnPW51bGwscWc9bnVsbDtcbmZ1bmN0aW9uIHJnKGEpe3RoaXMuX2V4cGlyYXRpb25UaW1lPVguY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbigpO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9cmcucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt0aGlzLl9kZWZlcj92b2lkIDA6RChcIjI1MFwiKTt0aGlzLl9oYXNDaGlsZHJlbj0hMDt0aGlzLl9jaGlsZHJlbj1hO3ZhciBiPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxjPXRoaXMuX2V4cGlyYXRpb25UaW1lLGQ9bmV3IHNnO1gudXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZShhLGIsbnVsbCxjLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5yZy5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21wbGV0ZSlhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5yZy5wcm90b3R5cGUuY29tbWl0PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGI9YS5maXJzdEJhdGNoO3RoaXMuX2RlZmVyJiZudWxsIT09Yj92b2lkIDA6RChcIjI1MVwiKTtpZih0aGlzLl9oYXNDaGlsZHJlbil7dmFyIGM9dGhpcy5fZXhwaXJhdGlvblRpbWU7aWYoYiE9PXRoaXMpe3RoaXMuX2hhc0NoaWxkcmVuJiYoYz10aGlzLl9leHBpcmF0aW9uVGltZT1iLl9leHBpcmF0aW9uVGltZSx0aGlzLnJlbmRlcih0aGlzLl9jaGlsZHJlbikpO2Zvcih2YXIgZD1udWxsLGU9YjtlIT09dGhpczspZD1lLGU9ZS5fbmV4dDtudWxsPT09ZD9EKFwiMjUxXCIpOnZvaWQgMDtkLl9uZXh0PWUuX25leHQ7dGhpcy5fbmV4dD1iO2EuZmlyc3RCYXRjaD10aGlzfXRoaXMuX2RlZmVyPSExO1guZmx1c2hSb290KGEsYyk7Yj10aGlzLl9uZXh0O3RoaXMuX25leHQ9bnVsbDtiPWEuZmlyc3RCYXRjaD1iO251bGwhPT1iJiZiLl9oYXNDaGlsZHJlbiYmYi5yZW5kZXIoYi5fY2hpbGRyZW4pfWVsc2UgdGhpcy5fbmV4dD1cbm51bGwsdGhpcy5fZGVmZXI9ITF9O3JnLnByb3RvdHlwZS5fb25Db21wbGV0ZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21wbGV0ZSl7dGhpcy5fZGlkQ29tcGxldGU9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKSgwLGFbYl0pKCl9fTtmdW5jdGlvbiBzZygpe3RoaXMuX2NhbGxiYWNrcz1udWxsO3RoaXMuX2RpZENvbW1pdD0hMTt0aGlzLl9vbkNvbW1pdD10aGlzLl9vbkNvbW1pdC5iaW5kKHRoaXMpfXNnLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbW1pdClhKCk7ZWxzZXt2YXIgYj10aGlzLl9jYWxsYmFja3M7bnVsbD09PWImJihiPXRoaXMuX2NhbGxiYWNrcz1bXSk7Yi5wdXNoKGEpfX07XG5zZy5wcm90b3R5cGUuX29uQ29tbWl0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbW1pdCl7dGhpcy5fZGlkQ29tbWl0PSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz9EKFwiMTkxXCIsYyk6dm9pZCAwO2MoKX19fTtmdW5jdGlvbiB0ZyhhLGIsYyl7dGhpcy5faW50ZXJuYWxSb290PVguY3JlYXRlQ29udGFpbmVyKGEsYixjKX10Zy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290LGQ9bmV3IHNnO2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJmQudGhlbihiKTtYLnVwZGF0ZUNvbnRhaW5lcihhLGMsbnVsbCxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xudGcucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IHNnO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtYLnVwZGF0ZUNvbnRhaW5lcihudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O3RnLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBzZztjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7WC51cGRhdGVDb250YWluZXIoYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcbnRnLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyByZyh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPD1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIHVnKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHZnKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbnZhciBYPXBmKHtnZXRSb290SG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlVHlwZTtzd2l0Y2goYil7Y2FzZSA5OmNhc2UgMTE6YT0oYT1hLmRvY3VtZW50RWxlbWVudCk/YS5uYW1lc3BhY2VVUkk6UGYobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmI9OD09PWI/YS5wYXJlbnROb2RlOmEsYT1iLm5hbWVzcGFjZVVSSXx8bnVsbCxiPWIudGFnTmFtZSxhPVBmKGEsYil9cmV0dXJuIGF9LGdldENoaWxkSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUGYoYSxiKX0sZ2V0UHVibGljSW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHByZXBhcmVGb3JDb21taXQ6ZnVuY3Rpb24oKXtwZz1WZDt2YXIgYT1mYSgpO2lmKG5lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBiPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOnt2YXIgYz13aW5kb3cuZ2V0U2VsZWN0aW9uJiZ3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5pZihjJiYwIT09Yy5yYW5nZUNvdW50KXtiPWMuYW5jaG9yTm9kZTt2YXIgZD1jLmFuY2hvck9mZnNldCxlPWMuZm9jdXNOb2RlO2M9Yy5mb2N1c09mZnNldDt0cnl7Yi5ub2RlVHlwZSxlLm5vZGVUeXBlfWNhdGNoKEIpe2I9bnVsbDticmVhayBhfXZhciBmPTAsaD0tMSxnPS0xLGs9MCx2PTAsbD1hLHA9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB6Ozspe2whPT1ifHwwIT09ZCYmMyE9PWwubm9kZVR5cGV8fChoPWYrZCk7bCE9PWV8fDAhPT1jJiYzIT09bC5ub2RlVHlwZXx8KGc9ZitjKTszPT09bC5ub2RlVHlwZSYmKGYrPWwubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh6PWwuZmlyc3RDaGlsZCkpYnJlYWs7cD1sO2w9en1mb3IoOzspe2lmKGw9PT1hKWJyZWFrIGI7cD09PWImJisraz09PWQmJihoPWYpO3A9PT1lJiYrK3Y9PT1jJiYoZz1mKTtpZihudWxsIT09KHo9bC5uZXh0U2libGluZykpYnJlYWs7bD1wO3A9bC5wYXJlbnROb2RlfWw9en1iPS0xPT09aHx8LTE9PT1nP251bGw6XG57c3RhcnQ6aCxlbmQ6Z319ZWxzZSBiPW51bGx9Yj1ifHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBiPW51bGw7cWc9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Yn07V2QoITEpfSxyZXNldEFmdGVyQ29tbWl0OmZ1bmN0aW9uKCl7dmFyIGE9cWcsYj1mYSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmphKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZih3aW5kb3cuZ2V0U2VsZWN0aW9uKXtiPXdpbmRvdy5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jW21iKCldLmxlbmd0aDthPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9hOk1hdGgubWluKGQuZW5kLGUpOyFiLmV4dGVuZCYmYT5cbmQmJihlPWQsZD1hLGE9ZSk7ZT1tZShjLGEpO3ZhciBmPW1lKGMsZCk7aWYoZSYmZiYmKDEhPT1iLnJhbmdlQ291bnR8fGIuYW5jaG9yTm9kZSE9PWUubm9kZXx8Yi5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8Yi5mb2N1c05vZGUhPT1mLm5vZGV8fGIuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkpe3ZhciBoPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7aC5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpO2IucmVtb3ZlQWxsUmFuZ2VzKCk7YT5kPyhiLmFkZFJhbmdlKGgpLGIuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihoLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLGIuYWRkUmFuZ2UoaCkpfX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LFxuYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH1xZz1udWxsO1dkKHBnKTtwZz1udWxsfSxjcmVhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUpe2E9YWcoYSxiLGMsZCk7YVtGXT1lO2FbVGFdPWI7cmV0dXJuIGF9LGFwcGVuZEluaXRpYWxDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGZpbmFsaXplSW5pdGlhbENoaWxkcmVuOmZ1bmN0aW9uKGEsYixjLGQpe2NnKGEsYixjLGQpO3JldHVybiB2ZyhiLGMpfSxwcmVwYXJlVXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIGRnKGEsYixjLGQsZSl9LHNob3VsZFNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwic3RyaW5nXCI9PT1cbnR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH0sc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZTpmdW5jdGlvbihhLGIpe3JldHVybiEhYi5oaWRkZW59LGNyZWF0ZVRleHRJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkKXthPWJnKGEsYik7YVtGXT1kO3JldHVybiBhfSxub3c6c2YsbXV0YXRpb246e2NvbW1pdE1vdW50OmZ1bmN0aW9uKGEsYixjKXt2ZyhiLGMpJiZhLmZvY3VzKCl9LGNvbW1pdFVwZGF0ZTpmdW5jdGlvbihhLGIsYyxkLGUpe2FbVGFdPWU7ZWcoYSxiLGMsZCxlKX0scmVzZXRUZXh0Q29udGVudDpmdW5jdGlvbihhKXtTZihhLFwiXCIpfSxjb21taXRUZXh0VXBkYXRlOmZ1bmN0aW9uKGEsYixjKXthLm5vZGVWYWx1ZT1jfSxhcHBlbmRDaGlsZDpmdW5jdGlvbihhLGIpe2EuYXBwZW5kQ2hpbGQoYil9LGFwcGVuZENoaWxkVG9Db250YWluZXI6ZnVuY3Rpb24oYSxiKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYSk6YS5hcHBlbmRDaGlsZChiKX0sXG5pbnNlcnRCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpe2EuaW5zZXJ0QmVmb3JlKGIsYyl9LGluc2VydEluQ29udGFpbmVyQmVmb3JlOmZ1bmN0aW9uKGEsYixjKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGIsYyk6YS5pbnNlcnRCZWZvcmUoYixjKX0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24oYSxiKXthLnJlbW92ZUNoaWxkKGIpfSxyZW1vdmVDaGlsZEZyb21Db250YWluZXI6ZnVuY3Rpb24oYSxiKXs4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYik6YS5yZW1vdmVDaGlsZChiKX19LGh5ZHJhdGlvbjp7Y2FuSHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuIDEhPT1hLm5vZGVUeXBlfHxiLnRvTG93ZXJDYXNlKCkhPT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDphfSxjYW5IeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYil7cmV0dXJuXCJcIj09PWJ8fDMhPT1hLm5vZGVUeXBlP251bGw6YX0sZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nOmZ1bmN0aW9uKGEpe2ZvcihhPVxuYS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX0sZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQ6ZnVuY3Rpb24oYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxoeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2FbRl09ZjthW1RhXT1jO3JldHVybiBmZyhhLGIsYyxlLGQpfSxoeWRyYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXthW0ZdPWM7cmV0dXJuIG5nKGEsYil9LGRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxcbmRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZTpmdW5jdGlvbigpe319LHNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjazp0ZixjYW5jZWxEZWZlcnJlZENhbGxiYWNrOnVmfSksQ2c9WDthYz1DZy5iYXRjaGVkVXBkYXRlcztiYz1DZy5pbnRlcmFjdGl2ZVVwZGF0ZXM7Y2M9Q2cuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM7XG5mdW5jdGlvbiBEZyhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHRnKGEsITEsYil9XG5mdW5jdGlvbiBFZyhhLGIsYyxkLGUpe3VnKGMpP3ZvaWQgMDpEKFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WC5nZXRQdWJsaWNSb290SW5zdGFuY2UoZi5faW50ZXJuYWxSb290KTtoLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1EZyhjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19WC51bmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uKCl7bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX0pfXJldHVybiBYLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpfVxuZnVuY3Rpb24gRmcoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDt1ZyhiKT92b2lkIDA6RChcIjIwMFwiKTtyZXR1cm4gcWYoYSxiLG51bGwsYyl9XG52YXIgR2c9e2NyZWF0ZVBvcnRhbDpGZyxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9udWxsOjE9PT1hLm5vZGVUeXBlP2E6WC5maW5kSG9zdEluc3RhbmNlKGEpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRWcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gRWcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7dWcoYSk/dm9pZCAwOkQoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtFZyhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1cbm51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEZnLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpYLmJhdGNoZWRVcGRhdGVzLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpYLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6WC5mbHVzaFN5bmMsdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOlguZmx1c2hDb250cm9sbGVkLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpSYSxFdmVudFBsdWdpblJlZ2lzdHJ5OkNhLEV2ZW50UHJvcGFnYXRvcnM6a2IsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OiRiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpiYixSZWFjdERPTUV2ZW50TGlzdGVuZXI6JGR9LHVuc3RhYmxlX2NyZWF0ZVJvb3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gbmV3IHRnKGEsITAsbnVsbCE9YiYmITA9PT1iLmh5ZHJhdGUpfX07XG5YLmluamVjdEludG9EZXZUb29scyh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6VWEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4zLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgSGc9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpHZ30pLElnPUhnJiZHZ3x8SGc7bW9kdWxlLmV4cG9ydHM9SWdbXCJkZWZhdWx0XCJdP0lnW1wiZGVmYXVsdFwiXTpJZztcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMy4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIikscD1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIikscT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSx0PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyx1PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHY9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx3PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgseD1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHk9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHo9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLEE9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTpcbjYwMTEyLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPWFyZ3VtZW50cy5sZW5ndGgtMSxlPVwiaHR0cDovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxjPTA7YzxiO2MrKyllKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO24oITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixlKX12YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX07XG5mdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fER9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtFLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/QyhcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1wO3RoaXMudXBkYXRlcj1lfHxEfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO20oSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST17Y3VycmVudDpudWxsfSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTChhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9e30sZz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihjIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsYykmJiFLLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT1iW2NdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGs9QXJyYXkoZiksbD0wO2w8ZjtsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWt9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGMgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbY10mJihkW2NdPWZbY10pO3JldHVybnskJHR5cGVvZjp0LHR5cGU6YSxrZXk6ZyxyZWY6aCxwcm9wczpkLF9vd25lcjpJLmN1cnJlbnR9fVxuZnVuY3Rpb24gTShhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09dH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiXFx4M2RcIjpcIlxceDNkMFwiLFwiOlwiOlwiXFx4M2QyXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBOPS9cXC8rL2csTz1bXTtmdW5jdGlvbiBQKGEsYixlLGMpe2lmKE8ubGVuZ3RoKXt2YXIgZD1PLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19ZnVuY3Rpb24gUShhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPk8ubGVuZ3RoJiZPLnB1c2goYSl9XG5mdW5jdGlvbiBSKGEsYixlLGMpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB0OmNhc2UgdTpnPSEwfX1pZihnKXJldHVybiBlKGMsYSxcIlwiPT09Yj9cIi5cIitTKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe2Q9YVtoXTt2YXIgZj1iK1MoZCxoKTtnKz1SKGQsZixlLGMpfWVsc2UgaWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxcbmg9MDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrUyhkLGgrKyksZys9UihkLGYsZSxjKTtlbHNlXCJvYmplY3RcIj09PWQmJihlPVwiXCIrYSxDKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09ZT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjplLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBTKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBUKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIFUoYSxiLGUpe3ZhciBjPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VihhLGMsZSxxLnRoYXRSZXR1cm5zQXJndW1lbnQpOm51bGwhPWEmJihNKGEpJiYoYj1kKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShOLFwiJFxceDI2L1wiKStcIi9cIikrZSxhPXskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn0pLGMucHVzaChhKSl9ZnVuY3Rpb24gVihhLGIsZSxjLGQpe3ZhciBnPVwiXCI7bnVsbCE9ZSYmKGc9KFwiXCIrZSkucmVwbGFjZShOLFwiJFxceDI2L1wiKStcIi9cIik7Yj1QKGIsZyxjLGQpO251bGw9PWF8fFIoYSxcIlwiLFUsYik7UShiKX1cbnZhciBXPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1YoYSxjLG51bGwsYixlKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVAobnVsbCxudWxsLGIsZSk7bnVsbD09YXx8UihhLFwiXCIsVCxiKTtRKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT8wOlIoYSxcIlwiLHEudGhhdFJldHVybnNOdWxsLG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1YoYSxiLG51bGwscS50aGF0UmV0dXJuc0FyZ3VtZW50KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtNKGEpP3ZvaWQgMDpDKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpFLFB1cmVDb21wb25lbnQ6RyxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6eSxcbl9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9kZWZhdWx0VmFsdWU6YSxfY3VycmVudFZhbHVlOmEsX2NoYW5nZWRCaXRzOjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp4LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEscmVuZGVyOmF9fSxGcmFnbWVudDp2LFN0cmljdE1vZGU6dyx1bnN0YWJsZV9Bc3luY01vZGU6eixjcmVhdGVFbGVtZW50OkwsY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixlKXtudWxsPT09YXx8dm9pZCAwPT09YT9DKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxkPW0oe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihoPWIucmVmLGY9SS5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSk7dmFyIGs9dm9pZCAwO2EudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyYmXG4oaz1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUouY2FsbChiLGMpJiYhSy5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09az9rW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7az1BcnJheShjKTtmb3IodmFyIGw9MDtsPGM7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1rfXJldHVybnskJHR5cGVvZjp0LHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPUwuYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpNLHZlcnNpb246XCIxNi4zLjJcIixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7UmVhY3RDdXJyZW50T3duZXI6SSxhc3NpZ246bX19LFg9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpXfSksXG5ZPVgmJld8fFg7bW9kdWxlLmV4cG9ydHM9WVtcImRlZmF1bHRcIl0/WVtcImRlZmF1bHRcIl06WTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmJhY2tncm91bmQge1xcbiAgdG9wOiAwcHg7XFxuICBsZWZ0OiAwcHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHotaW5kZXg6IC0yO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCJodHRwczovL3M5LnBvc3RpbWcuY2MvM2xubm42ajVyL1NjcmVlbl9TaG90XzIwMTgtMDUtMTBfYXRfMS4yNi4yNV9QTS5wbmdcXFwiKTtcXG4gIGJhY2tncm91bmQtc2l6ZTogY292ZXI7XFxuICBmaWx0ZXI6IGJsdXIoNXB4KTtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYmFja2dyb3VuZC5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYmFja2dyb3VuZC5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2JhY2tncm91bmQuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuYm9keSB7XFxuICB3aWR0aDogIDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBvdmVyZmxvdzogc2Nyb2xsO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ib2R5LmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ib2R5LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYm9keS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9