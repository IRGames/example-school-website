!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=117)}([function(e,t,n){"use strict";e.exports=n(258)},function(e,t,n){e.exports=n(251)()},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(102),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),(0,i.default)(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()},function(e,t,n){"use strict";t.__esModule=!0;var r=a(n(221)),o=a(n(217)),i=a(n(59));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,i.default)(t)));e.prototype=(0,o.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(r.default?(0,r.default)(e,t):e.__proto__=t)}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(59),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,i.default)(t))&&"function"!=typeof t?e:t}},function(e,t,n){e.exports={default:n(248),__esModule:!0}},function(e,t){e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,l){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,l],c=0;(u=new Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(85),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(257)},function(e,t){var n=e.exports={version:"2.5.5"};"number"==typeof __e&&(__e=n)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={easeOutFunction:"cubic-bezier(0.23, 1, 0.32, 1)",easeInOutFunction:"cubic-bezier(0.445, 0.05, 0.55, 0.95)",easeOut:function(e,t,n,r){if(r=r||this.easeOutFunction,t&&"[object Array]"===Object.prototype.toString.call(t)){for(var o="",i=0;i<t.length;i++)o&&(o+=","),o+=this.create(e,t[i],n,r);return o}return this.create(e,t,n,r)},create:function(e,t,n,r){return e=e||"450ms",t=t||"all",n=n||"0ms",t+" "+e+" "+(r=r||"linear")+" "+n}}},function(e,t,n){var r=n(62)("wks"),o=n(41),i=n(20).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){var r=n(124);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r=n(31),o=n(104),i=n(60),a=Object.defineProperty;t.f=n(24)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(20),o=n(13),i=n(61),a=n(32),l=n(25),u=function(e,t,n){var s,c,f,d=e&u.F,p=e&u.G,h=e&u.S,m=e&u.P,y=e&u.B,v=e&u.W,b=p?o:o[t]||(o[t]={}),g=b.prototype,x=p?r:h?r[t]:(r[t]||{}).prototype;for(s in p&&(n=t),n)(c=!d&&x&&void 0!==x[s])&&l(b,s)||(f=c?x[s]:n[s],b[s]=p&&"function"!=typeof x[s]?n[s]:y&&c?i(f,r):v&&x[s]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):m&&"function"==typeof f?i(Function.call,f):f,m&&((b.virtual||(b.virtual={}))[s]=f,e&u.R&&g&&!g[s]&&a(g,s,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),u=null,s=0,c=[],f=n(133);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(b(r.parts[a],t))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(b(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:l}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],l={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function h(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function y(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),v(t,e.attrs),h(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=s++;n=u||(u=y(t)),r=k.bind(null,n,a,!1),o=k.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(l=i[a.id]).refs--,r.push(l)}e&&d(p(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete i[l.id]}}}};var g,x=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function k(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1),i=(r=o)&&r.__esModule?r:{default:r};var a=i.default.oneOf(["left","middle","right"]),l=i.default.oneOf(["top","center","bottom"]);t.default={corners:i.default.oneOf(["bottom-left","bottom-right","top-left","top-right"]),horizontal:a,vertical:l,origin:i.default.shape({horizontal:a,vertical:l}),cornersAndCenter:i.default.oneOf(["bottom-center","bottom-left","bottom-right","top-center","top-left","top-right"]),stringOrNumber:i.default.oneOfType([i.default.string,i.default.number]),zDepth:i.default.oneOf([0,1,2,3,4,5])}},function(e,t,n){e.exports=!n(29)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(67),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(n)return[e,t];return e},e.exports=t.default},function(e,t,n){var r=n(97),o=n(64);e.exports=function(e){return r(o(e))}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(30);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){var r=n(18),o=n(35);e.exports=n(24)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(98),o=n(54);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t){e.exports={}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(64);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=n(151),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(154)),o=i(n(26));i(n(77)),i(n(76));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return(0,r.default)(function(e,t){return!(0,o.default)(e,t)})(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertColorToString=a,t.convertHexToRGB=l,t.decomposeColor=u,t.getContrastRatio=function(e,t){var n=s(e),r=s(t),o=(Math.max(n,r)+.05)/(Math.min(n,r)+.05);return Number(o.toFixed(2))},t.getLuminance=s,t.emphasize=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.15;return s(e)>.5?c(e,t):f(e,t)},t.fade=function(e,t){e=u(e),t=i(t,0,1),("rgb"===e.type||"hsl"===e.type)&&(e.type+="a");return e.values[3]=t,a(e)},t.darken=c,t.lighten=f;var r,o=n(2);(r=o)&&r.__esModule;function i(e,t,n){return e<t?t:e>n?n:e}function a(e){var t=e.type,n=e.values;if(t.indexOf("rgb")>-1)for(var r=0;r<3;r++)n[r]=parseInt(n[r]);var o=void 0;return o=t.indexOf("hsl")>-1?e.type+"("+n[0]+", "+n[1]+"%, "+n[2]+"%":e.type+"("+n[0]+", "+n[1]+", "+n[2],4===n.length?o+=", "+e.values[3]+")":o+=")",o}function l(e){if(4===e.length){for(var t="#",n=1;n<e.length;n++)t+=e.charAt(n)+e.charAt(n);e=t}return"rgb("+parseInt(e.substr(1,2),16)+", "+parseInt(e.substr(3,2),16)+", "+parseInt(e.substr(5,2),16)+")"}function u(e){if("#"===e.charAt(0))return u(l(e));var t=e.indexOf("("),n=e.substring(0,t),r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map(function(e){return parseFloat(e)})}}function s(e){if((e=u(e)).type.indexOf("rgb")>-1){var t=e.values.map(function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)});return Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}if(e.type.indexOf("hsl")>-1)return e.values[2]/100}function c(e,t){if(e=u(e),t=i(t,0,1),e.type.indexOf("hsl")>-1)e.values[2]*=1-t;else if(e.type.indexOf("rgb")>-1)for(var n=0;n<3;n++)e.values[n]*=1-t;return a(e)}function f(e,t){if(e=u(e),t=i(t,0,1),e.type.indexOf("hsl")>-1)e.values[2]+=(100-e.values[2])*t;else if(e.type.indexOf("rgb")>-1)for(var n=0;n<3;n++)e.values[n]+=(255-e.values[n])*t;return a(e)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=n(142),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={set:function(e,t,n){e[t]=n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=b(n(11)),o=b(n(10)),i=b(n(7)),a=b(n(3)),l=b(n(4)),u=b(n(6)),s=b(n(5)),c=b(n(8)),f=n(0),d=b(f),p=b(n(1)),h=b(n(46)),m=b(n(82)),y=b(n(149)),v=b(n(144));function b(e){return e&&e.__esModule?e:{default:e}}var g=!1,x=!1,k=!1;var C=function(e){function t(){var e,n,r,o;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=r=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),r.state={isKeyboardFocused:!1},r.handleKeyDown=function(e){r.props.disabled||r.props.disableKeyboardFocus||("enter"===(0,m.default)(e)&&r.state.isKeyboardFocused&&r.handleClick(e),"esc"===(0,m.default)(e)&&r.state.isKeyboardFocused&&r.removeKeyboardFocus(e)),r.props.onKeyDown(e)},r.handleKeyUp=function(e){r.props.disabled||r.props.disableKeyboardFocus||"space"===(0,m.default)(e)&&r.state.isKeyboardFocused&&r.handleClick(e),r.props.onKeyUp(e)},r.handleBlur=function(e){r.cancelFocusTimeout(),r.removeKeyboardFocus(e),r.props.onBlur(e)},r.handleFocus=function(e){e&&e.persist(),r.props.disabled||r.props.disableKeyboardFocus||(r.focusTimeout=setTimeout(function(){k&&(r.setKeyboardFocus(e),k=!1)},150),r.props.onFocus(e))},r.handleClick=function(e){r.cancelFocusTimeout(),r.props.disabled||(k=!1,r.removeKeyboardFocus(e),r.props.onClick(e))},o=n,(0,u.default)(r,o)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentWillMount",value:function(){var e=this.props,t=e.disabled,n=e.disableKeyboardFocus,r=e.keyboardFocused;t||!r||n||this.setState({isKeyboardFocused:!0})}},{key:"componentDidMount",value:function(){!function(){if(!g){var e=document.createElement("style");e.innerHTML="\n      button::-moz-focus-inner,\n      input::-moz-focus-inner {\n        border: 0;\n        padding: 0;\n      }\n    ",document.body.appendChild(e),g=!0}}(),x||(h.default.on(window,"keydown",function(e){k="tab"===(0,m.default)(e)}),x=!0),this.state.isKeyboardFocused&&(this.button.focus(),this.props.onKeyboardFocus(null,!0))}},{key:"componentWillReceiveProps",value:function(e){(e.disabled||e.disableKeyboardFocus)&&this.state.isKeyboardFocused&&(this.setState({isKeyboardFocused:!1}),e.onKeyboardFocus&&e.onKeyboardFocus(null,!1))}},{key:"componentWillUnmount",value:function(){this.focusTimeout&&clearTimeout(this.focusTimeout)}},{key:"isKeyboardFocused",value:function(){return this.state.isKeyboardFocused}},{key:"removeKeyboardFocus",value:function(e){this.state.isKeyboardFocused&&(this.setState({isKeyboardFocused:!1}),this.props.onKeyboardFocus(e,!1))}},{key:"setKeyboardFocus",value:function(e){this.state.isKeyboardFocused||(this.setState({isKeyboardFocused:!0}),this.props.onKeyboardFocus(e,!0))}},{key:"cancelFocusTimeout",value:function(){this.focusTimeout&&(clearTimeout(this.focusTimeout),this.focusTimeout=null)}},{key:"createButtonChildren",value:function(){var e=this.props,t=e.centerRipple,n=e.children,r=e.disabled,o=e.disableFocusRipple,i=e.disableKeyboardFocus,a=e.disableTouchRipple,l=e.focusRippleColor,u=e.focusRippleOpacity,s=e.touchRippleColor,c=e.touchRippleOpacity,f=this.state.isKeyboardFocused,p=!f||r||o||i?void 0:d.default.createElement(y.default,{color:l,opacity:u,show:f,style:{overflow:"hidden"},key:"focusRipple"}),h=r||a?void 0:d.default.createElement(v.default,{centerRipple:t,color:s,opacity:c,key:"touchRipple"},n);return[p,h,h?void 0:n]}},{key:"render",value:function(){var e=this,t=this.props,n=(t.centerRipple,t.children),i=t.containerElement,a=t.disabled,l=(t.disableFocusRipple,t.disableKeyboardFocus),u=(t.disableTouchRipple,t.focusRippleColor,t.focusRippleOpacity,t.href),s=(t.keyboardFocused,t.touchRippleColor,t.touchRippleOpacity,t.onBlur,t.onClick,t.onFocus,t.onKeyUp,t.onKeyDown,t.onKeyboardFocus,t.style),f=t.tabIndex,p=t.type,h=(0,o.default)(t,["centerRipple","children","containerElement","disabled","disableFocusRipple","disableKeyboardFocus","disableTouchRipple","focusRippleColor","focusRippleOpacity","href","keyboardFocused","touchRippleColor","touchRippleOpacity","onBlur","onClick","onFocus","onKeyUp","onKeyDown","onKeyboardFocus","style","tabIndex","type"]),m=this.context.muiTheme,y=m.prepareStyles,v=m.enhancedButton,b=(0,c.default)({border:10,boxSizing:"border-box",display:"inline-block",fontFamily:this.context.muiTheme.baseTheme.fontFamily,WebkitTapHighlightColor:v.tapHighlightColor,cursor:a?"default":"pointer",textDecoration:"none",margin:0,padding:0,outline:"none",fontSize:"inherit",fontWeight:"inherit",position:"relative",verticalAlign:u?"middle":null},s);if(b.backgroundColor||b.background||(b.background="none"),a&&u)return d.default.createElement("span",(0,r.default)({},h,{style:b}),n);var g=(0,r.default)({},h,{style:y(b),ref:function(t){return e.button=t},disabled:a,onBlur:this.handleBlur,onFocus:this.handleFocus,onKeyUp:this.handleKeyUp,onKeyDown:this.handleKeyDown,onClick:this.handleClick,tabIndex:a||l?-1:f});u&&(g.href=u);var x=this.createButtonChildren();return d.default.isValidElement(i)?d.default.cloneElement(i,g,x):(u||"button"!==i||(g.type=p),d.default.createElement(u?"a":i,g,x))}}]),t}(f.Component);C.defaultProps={containerElement:"button",onBlur:function(){},onClick:function(){},onFocus:function(){},onKeyDown:function(){},onKeyUp:function(){},onKeyboardFocus:function(){},tabIndex:0,type:"button"},C.contextTypes={muiTheme:p.default.object.isRequired},C.propTypes={},t.default=C},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=n(158),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={once:function(e,t,n){for(var r=t?t.split(" "):[],o=function e(t){return t.target.removeEventListener(t.type,e),n(t)},i=r.length-1;i>=0;i--)this.on(e,r[i],o)},on:function(e,t,n){e.addEventListener?e.addEventListener(t,n):e.attachEvent("on"+t,function(){n.call(e)})},off:function(e,t,n){e.removeEventListener?e.removeEventListener(t,n):e.detachEvent("on"+t,n)},isKeyboard:function(e){return-1!==["keydown","keypress","keyup"].indexOf(e.type)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"string"==typeof e&&r.test(e)};var r=/-webkit-|-moz-|-ms-/;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.red50="#ffebee",t.red100="#ffcdd2",t.red200="#ef9a9a",t.red300="#e57373",t.red400="#ef5350",t.red500="#f44336",t.red600="#e53935",t.red700="#d32f2f",t.red800="#c62828",t.red900="#b71c1c",t.redA100="#ff8a80",t.redA200="#ff5252",t.redA400="#ff1744",t.redA700="#d50000",t.pink50="#fce4ec",t.pink100="#f8bbd0",t.pink200="#f48fb1",t.pink300="#f06292",t.pink400="#ec407a",t.pink500="#e91e63",t.pink600="#d81b60",t.pink700="#c2185b",t.pink800="#ad1457",t.pink900="#880e4f",t.pinkA100="#ff80ab",t.pinkA200="#ff4081",t.pinkA400="#f50057",t.pinkA700="#c51162",t.purple50="#f3e5f5",t.purple100="#e1bee7",t.purple200="#ce93d8",t.purple300="#ba68c8",t.purple400="#ab47bc",t.purple500="#9c27b0",t.purple600="#8e24aa",t.purple700="#7b1fa2",t.purple800="#6a1b9a",t.purple900="#4a148c",t.purpleA100="#ea80fc",t.purpleA200="#e040fb",t.purpleA400="#d500f9",t.purpleA700="#aa00ff",t.deepPurple50="#ede7f6",t.deepPurple100="#d1c4e9",t.deepPurple200="#b39ddb",t.deepPurple300="#9575cd",t.deepPurple400="#7e57c2",t.deepPurple500="#673ab7",t.deepPurple600="#5e35b1",t.deepPurple700="#512da8",t.deepPurple800="#4527a0",t.deepPurple900="#311b92",t.deepPurpleA100="#b388ff",t.deepPurpleA200="#7c4dff",t.deepPurpleA400="#651fff",t.deepPurpleA700="#6200ea",t.indigo50="#e8eaf6",t.indigo100="#c5cae9",t.indigo200="#9fa8da",t.indigo300="#7986cb",t.indigo400="#5c6bc0",t.indigo500="#3f51b5",t.indigo600="#3949ab",t.indigo700="#303f9f",t.indigo800="#283593",t.indigo900="#1a237e",t.indigoA100="#8c9eff",t.indigoA200="#536dfe",t.indigoA400="#3d5afe",t.indigoA700="#304ffe",t.blue50="#e3f2fd",t.blue100="#bbdefb",t.blue200="#90caf9",t.blue300="#64b5f6",t.blue400="#42a5f5",t.blue500="#2196f3",t.blue600="#1e88e5",t.blue700="#1976d2",t.blue800="#1565c0",t.blue900="#0d47a1",t.blueA100="#82b1ff",t.blueA200="#448aff",t.blueA400="#2979ff",t.blueA700="#2962ff",t.lightBlue50="#e1f5fe",t.lightBlue100="#b3e5fc",t.lightBlue200="#81d4fa",t.lightBlue300="#4fc3f7",t.lightBlue400="#29b6f6",t.lightBlue500="#03a9f4",t.lightBlue600="#039be5",t.lightBlue700="#0288d1",t.lightBlue800="#0277bd",t.lightBlue900="#01579b",t.lightBlueA100="#80d8ff",t.lightBlueA200="#40c4ff",t.lightBlueA400="#00b0ff",t.lightBlueA700="#0091ea",t.cyan50="#e0f7fa",t.cyan100="#b2ebf2",t.cyan200="#80deea",t.cyan300="#4dd0e1",t.cyan400="#26c6da",t.cyan500="#00bcd4",t.cyan600="#00acc1",t.cyan700="#0097a7",t.cyan800="#00838f",t.cyan900="#006064",t.cyanA100="#84ffff",t.cyanA200="#18ffff",t.cyanA400="#00e5ff",t.cyanA700="#00b8d4",t.teal50="#e0f2f1",t.teal100="#b2dfdb",t.teal200="#80cbc4",t.teal300="#4db6ac",t.teal400="#26a69a",t.teal500="#009688",t.teal600="#00897b",t.teal700="#00796b",t.teal800="#00695c",t.teal900="#004d40",t.tealA100="#a7ffeb",t.tealA200="#64ffda",t.tealA400="#1de9b6",t.tealA700="#00bfa5",t.green50="#e8f5e9",t.green100="#c8e6c9",t.green200="#a5d6a7",t.green300="#81c784",t.green400="#66bb6a",t.green500="#4caf50",t.green600="#43a047",t.green700="#388e3c",t.green800="#2e7d32",t.green900="#1b5e20",t.greenA100="#b9f6ca",t.greenA200="#69f0ae",t.greenA400="#00e676",t.greenA700="#00c853",t.lightGreen50="#f1f8e9",t.lightGreen100="#dcedc8",t.lightGreen200="#c5e1a5",t.lightGreen300="#aed581",t.lightGreen400="#9ccc65",t.lightGreen500="#8bc34a",t.lightGreen600="#7cb342",t.lightGreen700="#689f38",t.lightGreen800="#558b2f",t.lightGreen900="#33691e",t.lightGreenA100="#ccff90",t.lightGreenA200="#b2ff59",t.lightGreenA400="#76ff03",t.lightGreenA700="#64dd17",t.lime50="#f9fbe7",t.lime100="#f0f4c3",t.lime200="#e6ee9c",t.lime300="#dce775",t.lime400="#d4e157",t.lime500="#cddc39",t.lime600="#c0ca33",t.lime700="#afb42b",t.lime800="#9e9d24",t.lime900="#827717",t.limeA100="#f4ff81",t.limeA200="#eeff41",t.limeA400="#c6ff00",t.limeA700="#aeea00",t.yellow50="#fffde7",t.yellow100="#fff9c4",t.yellow200="#fff59d",t.yellow300="#fff176",t.yellow400="#ffee58",t.yellow500="#ffeb3b",t.yellow600="#fdd835",t.yellow700="#fbc02d",t.yellow800="#f9a825",t.yellow900="#f57f17",t.yellowA100="#ffff8d",t.yellowA200="#ffff00",t.yellowA400="#ffea00",t.yellowA700="#ffd600",t.amber50="#fff8e1",t.amber100="#ffecb3",t.amber200="#ffe082",t.amber300="#ffd54f",t.amber400="#ffca28",t.amber500="#ffc107",t.amber600="#ffb300",t.amber700="#ffa000",t.amber800="#ff8f00",t.amber900="#ff6f00",t.amberA100="#ffe57f",t.amberA200="#ffd740",t.amberA400="#ffc400",t.amberA700="#ffab00",t.orange50="#fff3e0",t.orange100="#ffe0b2",t.orange200="#ffcc80",t.orange300="#ffb74d",t.orange400="#ffa726",t.orange500="#ff9800",t.orange600="#fb8c00",t.orange700="#f57c00",t.orange800="#ef6c00",t.orange900="#e65100",t.orangeA100="#ffd180",t.orangeA200="#ffab40",t.orangeA400="#ff9100",t.orangeA700="#ff6d00",t.deepOrange50="#fbe9e7",t.deepOrange100="#ffccbc",t.deepOrange200="#ffab91",t.deepOrange300="#ff8a65",t.deepOrange400="#ff7043",t.deepOrange500="#ff5722",t.deepOrange600="#f4511e",t.deepOrange700="#e64a19",t.deepOrange800="#d84315",t.deepOrange900="#bf360c",t.deepOrangeA100="#ff9e80",t.deepOrangeA200="#ff6e40",t.deepOrangeA400="#ff3d00",t.deepOrangeA700="#dd2c00",t.brown50="#efebe9",t.brown100="#d7ccc8",t.brown200="#bcaaa4",t.brown300="#a1887f",t.brown400="#8d6e63",t.brown500="#795548",t.brown600="#6d4c41",t.brown700="#5d4037",t.brown800="#4e342e",t.brown900="#3e2723",t.blueGrey50="#eceff1",t.blueGrey100="#cfd8dc",t.blueGrey200="#b0bec5",t.blueGrey300="#90a4ae",t.blueGrey400="#78909c",t.blueGrey500="#607d8b",t.blueGrey600="#546e7a",t.blueGrey700="#455a64",t.blueGrey800="#37474f",t.blueGrey900="#263238",t.grey50="#fafafa",t.grey100="#f5f5f5",t.grey200="#eeeeee",t.grey300="#e0e0e0",t.grey400="#bdbdbd",t.grey500="#9e9e9e",t.grey600="#757575",t.grey700="#616161",t.grey800="#424242",t.grey900="#212121",t.black="#000000",t.white="#ffffff",t.transparent="rgba(0, 0, 0, 0)",t.fullBlack="rgba(0, 0, 0, 1)",t.darkBlack="rgba(0, 0, 0, 0.87)",t.lightBlack="rgba(0, 0, 0, 0.54)",t.minBlack="rgba(0, 0, 0, 0.26)",t.faintBlack="rgba(0, 0, 0, 0.12)",t.fullWhite="rgba(255, 255, 255, 1)",t.darkWhite="rgba(255, 255, 255, 0.87)",t.lightWhite="rgba(255, 255, 255, 0.54)"},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(20),o=n(13),i=n(57),a=n(52),l=n(18).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||l(t,e,{value:a.f(e)})}},function(e,t,n){t.f=n(15)},function(e,t,n){var r=n(18).f,o=n(25),i=n(15)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(31),o=n(239),i=n(54),a=n(63)("IE_PROTO"),l=function(){},u=function(){var e,t=n(103)("iframe"),r=i.length;for(t.style.display="none",n(236).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;r--;)delete u.prototype[i[r]];return u()};e.exports=Object.create||function(e,t){var n;return null!==e?(l.prototype=r(e),n=new l,l.prototype=null,n[a]=e):n=u(),void 0===t?n:o(n,t)}},function(e,t){e.exports=!0},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){"use strict";t.__esModule=!0;var r=a(n(243)),o=a(n(231)),i="function"==typeof o.default&&"symbol"==typeof r.default?function(e){return typeof e}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":typeof e};function a(e){return e&&e.__esModule?e:{default:e}}t.default="function"==typeof o.default&&"symbol"===i(r.default)?function(e){return void 0===e?"undefined":i(e)}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":void 0===e?"undefined":i(e)}},function(e,t,n){var r=n(30);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(246);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(20),o=r["__core-js_shared__"]||(r["__core-js_shared__"]={});e.exports=function(e){return o[e]||(o[e]={})}},function(e,t,n){var r=n(62)("keys"),o=n(41);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(2),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,i.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):((0,i.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=l(n(73)),i=l(n(72)),a=n(16);function l(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,i){var l=void 0;"string"==typeof e?(l=(0,a.parsePath)(e)).state=t:(void 0===(l=r({},e)).pathname&&(l.pathname=""),l.search?"?"!==l.search.charAt(0)&&(l.search="?"+l.search):l.search="",l.hash?"#"!==l.hash.charAt(0)&&(l.hash="#"+l.hash):l.hash="",void 0!==t&&void 0===l.state&&(l.state=t));try{l.pathname=decodeURI(l.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+l.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(l.key=n),i?l.pathname?"/"!==l.pathname.charAt(0)&&(l.pathname=(0,o.default)(l.pathname,i.pathname)):l.pathname=i.pathname:l.pathname||(l.pathname="/"),l},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,i.default)(e.state,t.state)}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,l,u){if(r(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,l,u],f=0;(s=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),o=a(n(38)),i=a(n(37));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"}))};(l=(0,o.default)(l)).displayName="NavigationMoreVert",l.muiName="SvgIcon",t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.MenuItem=t.IconMenu=void 0;var r=i(n(169)),o=i(n(78));function i(e){return e&&e.__esModule?e:{default:e}}t.IconMenu=r.default,t.MenuItem=o.default,t.default=r.default},function(e,t,n){"use strict";n.r(t);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var i=t.valueOf(),a=n.valueOf();if(i!==t||a!==n)return e(i,a);var l=Object.keys(t),u=Object.keys(n);return l.length===u.length&&l.every(function(r){return e(t[r],n[r])})}return!1}},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],i=t&&t.split("/")||[],a=e&&r(e),l=t&&r(t),u=a||l;if(e&&r(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var s=void 0;if(i.length){var c=i[i.length-1];s="."===c||".."===c||""===c}else s=!1;for(var f=0,d=i.length;d>=0;d--){var p=i[d];"."===p?o(i,d):".."===p?(o(i,d),f++):f&&(o(i,d),f--)}if(!u)for(;f--;f)i.unshift("..");!u||""===i[0]||i[0]&&r(i[0])||i.unshift("");var h=i.join("/");return s&&"/"!==h.substr(-1)&&(h+="/"),h}},function(e,t,n){var r=n(134);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n(147)),i=u(n(0)),a=u(n(1)),l=(u(n(2)),n(146));function u(e){return e&&e.__esModule?e:{default:e}}a.default.any,a.default.func,a.default.node;var s=function(e){function t(n,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,o));return i.performAppear=function(e,t){i.currentlyTransitioningKeys[e]=!0,t.componentWillAppear?t.componentWillAppear(i._handleDoneAppearing.bind(i,e,t)):i._handleDoneAppearing(e,t)},i._handleDoneAppearing=function(e,t){t.componentDidAppear&&t.componentDidAppear(),delete i.currentlyTransitioningKeys[e];var n=(0,l.getChildMapping)(i.props.children);n&&n.hasOwnProperty(e)||i.performLeave(e,t)},i.performEnter=function(e,t){i.currentlyTransitioningKeys[e]=!0,t.componentWillEnter?t.componentWillEnter(i._handleDoneEntering.bind(i,e,t)):i._handleDoneEntering(e,t)},i._handleDoneEntering=function(e,t){t.componentDidEnter&&t.componentDidEnter(),delete i.currentlyTransitioningKeys[e];var n=(0,l.getChildMapping)(i.props.children);n&&n.hasOwnProperty(e)||i.performLeave(e,t)},i.performLeave=function(e,t){i.currentlyTransitioningKeys[e]=!0,t.componentWillLeave?t.componentWillLeave(i._handleDoneLeaving.bind(i,e,t)):i._handleDoneLeaving(e,t)},i._handleDoneLeaving=function(e,t){t.componentDidLeave&&t.componentDidLeave(),delete i.currentlyTransitioningKeys[e];var n=(0,l.getChildMapping)(i.props.children);n&&n.hasOwnProperty(e)?i.keysToEnter.push(e):i.setState(function(t){var n=r({},t.children);return delete n[e],{children:n}})},i.childRefs=Object.create(null),i.state={children:(0,l.getChildMapping)(n.children)},i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){this.currentlyTransitioningKeys={},this.keysToEnter=[],this.keysToLeave=[]},t.prototype.componentDidMount=function(){var e=this.state.children;for(var t in e)e[t]&&this.performAppear(t,this.childRefs[t])},t.prototype.componentWillReceiveProps=function(e){var t=(0,l.getChildMapping)(e.children),n=this.state.children;for(var r in this.setState({children:(0,l.mergeChildMappings)(n,t)}),t){var o=n&&n.hasOwnProperty(r);!t[r]||o||this.currentlyTransitioningKeys[r]||this.keysToEnter.push(r)}for(var i in n){var a=t&&t.hasOwnProperty(i);!n[i]||a||this.currentlyTransitioningKeys[i]||this.keysToLeave.push(i)}},t.prototype.componentDidUpdate=function(){var e=this,t=this.keysToEnter;this.keysToEnter=[],t.forEach(function(t){return e.performEnter(t,e.childRefs[t])});var n=this.keysToLeave;this.keysToLeave=[],n.forEach(function(t){return e.performLeave(t,e.childRefs[t])})},t.prototype.render=function(){var e=this,t=[],n=function(n){var r=e.state.children[n];if(r){var a="string"!=typeof r.ref,l=e.props.childFactory(r),u=function(t){e.childRefs[n]=t};l===r&&a&&(u=(0,o.default)(r.ref,u)),t.push(i.default.cloneElement(l,{key:n,ref:u}))}};for(var a in this.state.children)n(a);var l=r({},this.props);return delete l.transitionLeave,delete l.transitionName,delete l.transitionAppear,delete l.transitionEnter,delete l.childFactory,delete l.transitionLeaveTimeout,delete l.transitionEnterTimeout,delete l.transitionAppearTimeout,delete l.component,i.default.createElement(this.props.component,l,t)},t}(i.default.Component);s.displayName="TransitionGroup",s.propTypes={},s.defaultProps={component:"span",childFactory:function(e){return e}},t.default=s,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(152),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e,t){return t+"("+(0,i.default)(e)+")"}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(153),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){return(0,i.default)("displayName",e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=x(n(11)),o=x(n(10)),i=x(n(7)),a=x(n(3)),l=x(n(4)),u=x(n(6)),s=x(n(5)),c=x(n(8)),f=n(0),d=x(f),p=x(n(1)),h=x(n(12)),m=x(n(26)),y=x(n(80)),v=x(n(155)),b=x(n(150)),g=x(n(84));x(n(23));function x(e){return e&&e.__esModule?e:{default:e}}var k={position:"relative"};var C=function(e){function t(){var e,n,r,o;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=r=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),r.state={open:!1},r.cloneMenuItem=function(e){return d.default.cloneElement(e,{onClick:function(t){e.props.menuItems||r.handleRequestClose(),e.props.onClick&&e.props.onClick(t)}})},r.handleClick=function(e){e.preventDefault(),r.setState({open:!0,anchorEl:h.default.findDOMNode(r)}),r.props.onClick&&r.props.onClick(e)},r.handleRequestClose=function(){r.setState({open:!1,anchorEl:null})},o=n,(0,u.default)(r,o)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.applyFocusState()}},{key:"componentWillReceiveProps",value:function(e){this.state.open&&"none"===e.focusState&&this.handleRequestClose()}},{key:"shouldComponentUpdate",value:function(e,t,n){return!(0,m.default)(this.props,e)||!(0,m.default)(this.state,t)||!(0,m.default)(this.context,n)}},{key:"componentDidUpdate",value:function(){this.applyFocusState()}},{key:"componentWillUnmount",value:function(){this.state.open&&this.setState({open:!1})}},{key:"applyFocusState",value:function(){this.refs.listItem.applyFocusState(this.props.focusState)}},{key:"render",value:function(){var e,t,n,i,a,l,u=this.props,s=u.checked,f=u.children,p=u.desktop,h=u.disabled,m=(u.focusState,u.innerDivStyle),x=u.insetChildren,C=u.leftIcon,w=u.menuItems,_=u.rightIcon,E=u.secondaryText,S=u.style,T=u.animation,O=u.anchorOrigin,M=u.targetOrigin,P=(u.value,(0,o.default)(u,["checked","children","desktop","disabled","focusState","innerDivStyle","insetChildren","leftIcon","menuItems","rightIcon","secondaryText","style","animation","anchorOrigin","targetOrigin","value"])),I=this.context.muiTheme.prepareStyles,R=(e=this.props,t=this.context,n=t.muiTheme.baseTheme.palette.disabledColor,i=t.muiTheme.baseTheme.palette.textColor,a=e.desktop?64:72,l=e.desktop?24:16,{root:{color:e.disabled?n:i,cursor:e.disabled?"default":"pointer",minHeight:e.desktop?"32px":"48px",lineHeight:e.desktop?"32px":"48px",fontSize:e.desktop?15:16,whiteSpace:"nowrap"},innerDivStyle:{paddingLeft:e.leftIcon||e.insetChildren||e.checked?a:l,paddingRight:e.rightIcon?a:l,paddingBottom:0,paddingTop:0},secondaryText:{float:"right"},leftIconDesktop:{margin:0,left:24,top:4},rightIconDesktop:{margin:0,right:24,top:4,fill:t.muiTheme.menuItem.rightIconDesktopFill}}),F=(0,c.default)(R.root,S),j=(0,c.default)(R.innerDivStyle,m),A=C||(s?d.default.createElement(v.default,null):null);if(A){var D=p?(0,c.default)(R.leftIconDesktop,A.props.style):A.props.style;A=d.default.cloneElement(A,{style:D})}var L=void 0;if(_){var N=p?(0,c.default)(R.rightIconDesktop,_.props.style):_.props.style;L=d.default.cloneElement(_,{style:N})}var W=void 0;if(E){var z=d.default.isValidElement(E),B=z?(0,c.default)(R.secondaryText,E.props.style):null;W=z?d.default.cloneElement(E,{style:B}):d.default.createElement("div",{style:I(R.secondaryText)},E)}var U=void 0;return w&&(U=d.default.createElement(y.default,{animation:T,anchorOrigin:O,anchorEl:this.state.anchorEl,open:this.state.open,targetOrigin:M,useLayerForClickAway:!1,onRequestClose:this.handleRequestClose},d.default.createElement(g.default,{desktop:p,disabled:h,style:k},d.default.Children.map(w,this.cloneMenuItem))),P.onClick=this.handleClick),d.default.createElement(b.default,(0,r.default)({},P,{disabled:h,hoverColor:this.context.muiTheme.menuItem.hoverColor,innerDivStyle:j,insetChildren:x,leftIcon:A,ref:"listItem",rightIcon:L,role:"menuitem",style:F}),f,W,U)}}]),t}(f.Component);C.muiName="MenuItem",C.defaultProps={anchorOrigin:{horizontal:"right",vertical:"top"},checked:!1,desktop:!1,disabled:!1,focusState:"none",insetChildren:!1,targetOrigin:{horizontal:"left",vertical:"top"}},C.contextTypes={muiTheme:p.default.object.isRequired},C.propTypes={},t.default=C},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={isDescendant:function(e,t){for(var n=t.parentNode;null!==n;){if(n===e)return!0;n=n.parentNode}return!1},offset:function(e){var t=e.getBoundingClientRect();return{top:t.top+document.body.scrollTop,left:t.left+document.body.scrollLeft}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=x(n(11)),o=x(n(10)),i=x(n(7)),a=x(n(3)),l=x(n(4)),u=x(n(6)),s=x(n(5)),c=x(n(8)),f=n(0),d=x(f),p=x(n(1)),h=x(n(12)),m=x(n(161)),y=x(n(159)),v=(x(n(23)),x(n(45))),b=x(n(157)),g=x(n(156));function x(e){return e&&e.__esModule?e:{default:e}}var k={root:{display:"none"}},C=function(e){function t(e,n){(0,a.default)(this,t);var l=(0,u.default)(this,(t.__proto__||(0,i.default)(t)).call(this,e,n));return l.timeout=null,l.renderLayer=function(){var e=l.props,t=e.animated,n=e.animation,i=(e.anchorEl,e.anchorOrigin,e.autoCloseWhenOffScreen,e.canAutoPosition,e.children),a=(e.onRequestClose,e.style),u=e.targetOrigin,s=(e.useLayerForClickAway,e.scrollableContainer,(0,o.default)(e,["animated","animation","anchorEl","anchorOrigin","autoCloseWhenOffScreen","canAutoPosition","children","onRequestClose","style","targetOrigin","useLayerForClickAway","scrollableContainer"])),f=a;if(!t)return f={position:"fixed",zIndex:l.context.muiTheme.zIndex.popover},l.state.open?d.default.createElement(v.default,(0,r.default)({style:(0,c.default)(f,a)},s),i):null;var p=n||g.default;return d.default.createElement(p,(0,r.default)({targetOrigin:u,style:f},s,{open:l.state.open&&!l.state.closing}),i)},l.componentClickAway=function(){l.requestClose("clickAway")},l.setPlacement=function(e){if(l.state.open&&l.popoverRefs.layer.getLayer()){var t=l.popoverRefs.layer.getLayer().children[0];if(t){var n=l.props,r=n.targetOrigin,o=n.anchorOrigin,i=l.props.anchorEl||l.anchorEl,a=l.getAnchorPosition(i),u=l.getTargetPosition(t),s={top:a[o.vertical]-u[r.vertical],left:a[o.horizontal]-u[r.horizontal]};e&&l.props.autoCloseWhenOffScreen&&l.autoCloseWhenOffScreen(a),l.props.canAutoPosition&&(u=l.getTargetPosition(t),s=l.applyAutoPositionIfNeeded(a,u,r,o,s)),t.style.top=s.top+"px",t.style.left=s.left+"px",t.style.maxHeight=window.innerHeight+"px"}}},l.handleResize=(0,b.default)(l.setPlacement,100),l.handleScroll=(0,b.default)(l.setPlacement.bind(l,!0),50),l.popoverRefs={},l.state={open:e.open,closing:!1},l}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.placementTimeout=setTimeout(this.setPlacement)}},{key:"componentWillReceiveProps",value:function(e){var t=this;if(e.open!==this.props.open)if(e.open)clearTimeout(this.timeout),this.timeout=null,this.anchorEl=e.anchorEl||this.props.anchorEl,this.setState({open:!0,closing:!1});else if(e.animated){if(null!==this.timeout)return;this.setState({closing:!0}),this.timeout=setTimeout(function(){t.setState({open:!1},function(){t.timeout=null})},500)}else this.setState({open:!1})}},{key:"componentDidUpdate",value:function(){clearTimeout(this.placementTimeout),this.placementTimeout=setTimeout(this.setPlacement)}},{key:"componentWillUnmount",value:function(){this.handleResize.cancel(),this.handleScroll.cancel(),this.placementTimeout&&(clearTimeout(this.placementTimeout),this.placementTimeout=null),this.timeout&&(clearTimeout(this.timeout),this.timeout=null)}},{key:"requestClose",value:function(e){this.props.onRequestClose&&this.props.onRequestClose(e)}},{key:"getAnchorPosition",value:function(e){e||(e=h.default.findDOMNode(this));var t=e.getBoundingClientRect(),n={top:t.top,left:t.left,width:e.offsetWidth,height:e.offsetHeight};return n.right=t.right||n.left+n.width,n.bottom=t.bottom||n.top+n.height,n.middle=n.left+(n.right-n.left)/2,n.center=n.top+(n.bottom-n.top)/2,n}},{key:"getTargetPosition",value:function(e){return{top:0,center:e.offsetHeight/2,bottom:e.offsetHeight,left:0,middle:e.offsetWidth/2,right:e.offsetWidth}}},{key:"autoCloseWhenOffScreen",value:function(e){(e.top<0||e.top>window.innerHeight||e.left<0||e.left>window.innerWidth)&&this.requestClose("offScreen")}},{key:"getOverlapMode",value:function(e,t,n){return[e,t].indexOf(n)>=0?"auto":e===t?"inclusive":"exclusive"}},{key:"getPositions",value:function(e,t){var n=(0,r.default)({},e),o=(0,r.default)({},t),i={x:["left","right"].filter(function(e){return e!==o.horizontal}),y:["top","bottom"].filter(function(e){return e!==o.vertical})},a=this.getOverlapMode(n.horizontal,o.horizontal,"middle"),l=this.getOverlapMode(n.vertical,o.vertical,"center");return i.x.splice("auto"===a?0:1,0,"middle"),i.y.splice("auto"===l?0:1,0,"center"),"auto"!==l&&(n.vertical="top"===n.vertical?"bottom":"top","inclusive"===l&&(o.vertical=o.vertical)),"auto"!==a&&(n.horizontal="left"===n.horizontal?"right":"left","inclusive"===l&&(o.horizontal=o.horizontal)),{positions:i,anchorPos:n}}},{key:"applyAutoPositionIfNeeded",value:function(e,t,n,r,o){var i=this.getPositions(r,n),a=i.positions,l=i.anchorPos;if(o.top<0||o.top+t.bottom>window.innerHeight){var u=e[l.vertical]-t[a.y[0]];u+t.bottom<=window.innerHeight?o.top=Math.max(0,u):(u=e[l.vertical]-t[a.y[1]])+t.bottom<=window.innerHeight&&(o.top=Math.max(0,u))}if(o.left<0||o.left+t.right>window.innerWidth){var s=e[l.horizontal]-t[a.x[0]];s+t.right<=window.innerWidth?o.left=Math.max(0,s):(s=e[l.horizontal]-t[a.x[1]])+t.right<=window.innerWidth&&(o.left=Math.max(0,s))}return o}},{key:"render",value:function(){var e=this;return d.default.createElement("div",{style:k.root},d.default.createElement(m.default,{target:this.props.scrollableContainer,onScroll:this.handleScroll,onResize:this.handleResize}),d.default.createElement(y.default,{ref:function(t){return e.popoverRefs.layer=t},open:this.state.open,componentClickAway:this.componentClickAway,useLayerForClickAway:this.props.useLayerForClickAway,render:this.renderLayer}))}}]),t}(f.Component);C.defaultProps={anchorOrigin:{vertical:"bottom",horizontal:"left"},animated:!0,autoCloseWhenOffScreen:!0,canAutoPosition:!0,onRequestClose:function(){},open:!1,scrollableContainer:"window",style:{overflowY:"auto"},targetOrigin:{vertical:"top",horizontal:"left"},useLayerForClickAway:!0,zDepth:1},C.contextTypes={muiTheme:p.default.object.isRequired},C.propTypes={},t.default=C},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=m(n(11)),o=m(n(10)),i=m(n(7)),a=m(n(3)),l=m(n(4)),u=m(n(6)),s=m(n(5)),c=m(n(8)),f=n(0),d=m(f),p=m(n(1)),h=m(n(164));function m(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){return(0,a.default)(this,t),(0,u.default)(this,(t.__proto__||(0,i.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.style,i=(0,o.default)(e,["children","style"]),a=this.context.muiTheme.prepareStyles,l=!1,u=f.Children.toArray(t)[0];(0,f.isValidElement)(u)&&u.type===h.default&&(l=!0);var s={root:{padding:(l?0:8)+"px 0px 8px 0px"}};return d.default.createElement("div",(0,r.default)({},i,{style:a((0,c.default)(s.root,n))}),t)}}]),t}(f.Component);y.contextTypes={muiTheme:p.default.object.isRequired},y.propTypes={},t.default=y},function(e,t){function n(e){if(e&&"object"==typeof e){var t=e.which||e.keyCode||e.charCode;t&&(e=t)}if("number"==typeof e)return a[e];var n,i=String(e);return(n=r[i.toLowerCase()])?n:(n=o[i.toLowerCase()])||(1===i.length?i.charCodeAt(0):void 0)}n.isEventKey=function(e,t){if(e&&"object"==typeof e){var n=e.which||e.keyCode||e.charCode;if(null===n||void 0===n)return!1;if("string"==typeof t){var i;if(i=r[t.toLowerCase()])return i===n;if(i=o[t.toLowerCase()])return i===n}else if("number"==typeof t)return t===n;return!1}};var r=(t=e.exports=n).code=t.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},o=t.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};
/*!
 * Programatically add the following
 */
for(i=97;i<123;i++)r[String.fromCharCode(i)]=i-32;for(var i=48;i<58;i++)r[i-48]=i;for(i=1;i<13;i++)r["f"+i]=i+111;for(i=0;i<10;i++)r["numpad "+i]=i+96;var a=t.names=t.title={};for(i in r)a[r[i]]=i;for(var l in o)r[l]=o[l]},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(92),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){return Array.isArray(e)?e:(0,i.default)(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=k(n(11)),o=k(n(10)),i=k(n(83)),a=k(n(7)),l=k(n(3)),u=k(n(4)),s=k(n(6)),c=k(n(5)),f=k(n(8)),d=n(0),p=k(d),h=k(n(1)),m=k(n(12)),y=k(n(26)),v=k(n(165)),b=k(n(82)),g=(k(n(23)),k(n(81))),x=n(162);function k(e){return e&&e.__esModule?e:{default:e}}var C=function(e){function t(e,n){(0,l.default)(this,t);var r=(0,s.default)(this,(t.__proto__||(0,a.default)(t)).call(this,e,n));w.call(r);var o=r.getFilteredChildren(e.children),i=r.getLastSelectedIndex(e,o),u=e.disableAutoFocus?-1:i>=0?i:0;return-1!==u&&e.onMenuItemFocusChange&&e.onMenuItemFocusChange(null,u),r.state={focusIndex:u,isKeyboardFocused:e.initiallyKeyboardFocused,keyWidth:e.desktop?64:56},r.hotKeyHolder=new x.HotKeyHolder,r}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.props.autoWidth&&this.setWidth(),this.setScollPosition()}},{key:"componentWillReceiveProps",value:function(e){var t=void 0,n=this.getFilteredChildren(e.children);t=!0!==this.props.multiple?this.getLastSelectedIndex(e,n):this.state.focusIndex;var r=e.disableAutoFocus?-1:t>=0?t:0;r!==this.state.focusIndex&&this.props.onMenuItemFocusChange&&this.props.onMenuItemFocusChange(null,r),this.setState({focusIndex:r,keyWidth:e.desktop?64:56})}},{key:"shouldComponentUpdate",value:function(e,t,n){return!(0,y.default)(this.props,e)||!(0,y.default)(this.state,t)||!(0,y.default)(this.context,n)}},{key:"componentDidUpdate",value:function(){this.props.autoWidth&&this.setWidth()}},{key:"getValueLink",value:function(e){return e.valueLink||{value:e.value,requestChange:e.onChange}}},{key:"setKeyboardFocused",value:function(e){this.setState({isKeyboardFocused:e})}},{key:"getFilteredChildren",value:function(e){var t=[];return p.default.Children.forEach(e,function(e){e&&t.push(e)}),t}},{key:"cloneMenuItem",value:function(e,t,n,r){var o=this,i=e.props.disabled,a={};i||this.isChildSelected(e,this.props)&&(0,f.default)(a,n.selectedMenuItem,this.props.selectedMenuItemStyle);var l=(0,f.default)({},e.props.style,this.props.menuItemStyle,a),u={desktop:this.props.desktop,style:l};if(!i){var s=t===this.state.focusIndex,c="none";s&&(c=this.state.isKeyboardFocused?"keyboard-focused":"focused"),(0,f.default)(u,{focusState:c,onClick:function(t){o.handleMenuItemClick(t,e,r),e.props.onClick&&e.props.onClick(t)},ref:s?"focusedMenuItem":null})}return p.default.cloneElement(e,u)}},{key:"decrementKeyboardFocusIndex",value:function(e){var t=this.state.focusIndex;--t<0&&(t=0),this.setFocusIndex(e,t,!0)}},{key:"getMenuItemCount",value:function(e){var t=0;return e.forEach(function(e){var n=e.type&&"Divider"===e.type.muiName,r=e.props.disabled;n||r||t++}),t}},{key:"getLastSelectedIndex",value:function(e,t){var n=this,r=-1,o=0;return t.forEach(function(t){var i=t.type&&"Divider"===t.type.muiName;n.isChildSelected(t,e)&&(r=o),i||o++}),r}},{key:"setFocusIndexStartsWith",value:function(e,t,n){var r=-1;return p.default.Children.forEach(n,function(e,n){if(!(r>=0)){var o=e.props.primaryText;"string"==typeof o&&o.substr(0,t.length).toLowerCase()===t.toLowerCase()&&(r=n)}}),r>=0&&(this.setFocusIndex(e,r,!0),!0)}},{key:"handleMenuItemClick",value:function(e,t,n){var r=this.props.children,o=this.props.multiple,a=this.getValueLink(this.props),l=a.value,u=t.props.value,s=p.default.isValidElement(r)?0:r.indexOf(t);if(this.setFocusIndex(e,s,!1),o){var c=(l=l||[]).indexOf(u),f=l,d=(0,i.default)(f).slice(0);-1===c?d.push(u):d.splice(c,1),a.requestChange(e,d)}else o||u===l||a.requestChange(e,u);this.props.onItemClick(e,t,n)}},{key:"incrementKeyboardFocusIndex",value:function(e,t){var n=this.state.focusIndex,r=this.getMenuItemCount(t)-1;++n>r&&(n=r),this.setFocusIndex(e,n,!0)}},{key:"isChildSelected",value:function(e,t){var n=this.getValueLink(t).value,r=e.props.value;return t.multiple?n&&n.length&&-1!==n.indexOf(r):e.props.hasOwnProperty("value")&&n===r}},{key:"setFocusIndex",value:function(e,t,n){this.props.onMenuItemFocusChange&&this.props.onMenuItemFocusChange(e,t),this.setState({focusIndex:t,isKeyboardFocused:n})}},{key:"setScollPosition",value:function(){var e=this.props.desktop,t=this.refs.focusedMenuItem,n=e?32:48;if(t){var r=m.default.findDOMNode(t).offsetTop-n;r<n&&(r=0),m.default.findDOMNode(this.refs.scrollContainer).scrollTop=r}}},{key:"cancelScrollEvent",value:function(e){return e.stopPropagation(),e.preventDefault(),!1}},{key:"setWidth",value:function(){var e=m.default.findDOMNode(this),t=m.default.findDOMNode(this.refs.list),n=e.offsetWidth,r=this.state.keyWidth,o=1.5*r,i=n/r,a=void 0;(a=(i=i<=1.5?1.5:Math.ceil(i))*r)<o&&(a=o),e.style.width=a+"px",t.style.width=a+"px"}},{key:"render",value:function(){var e=this,t=this.props,n=(t.autoWidth,t.children),i=(t.desktop,t.disableAutoFocus,t.initiallyKeyboardFocused,t.listStyle),a=(t.maxHeight,t.multiple,t.onItemClick,t.onEscKeyDown,t.onMenuItemFocusChange,t.selectedMenuItemStyle,t.menuItemStyle,t.style),l=(t.value,t.valueLink,t.width,(0,o.default)(t,["autoWidth","children","desktop","disableAutoFocus","initiallyKeyboardFocused","listStyle","maxHeight","multiple","onItemClick","onEscKeyDown","onMenuItemFocusChange","selectedMenuItemStyle","menuItemStyle","style","value","valueLink","width"])),u=this.context.muiTheme.prepareStyles,s=function(e,t){var n=e.desktop,r=e.maxHeight,o=e.width,i=t.muiTheme;return{root:{zIndex:i.zIndex.menu,maxHeight:r,overflowY:r?"auto":null},divider:{marginTop:7,marginBottom:8},list:{display:"table-cell",paddingBottom:n?16:8,paddingTop:n?16:8,userSelect:"none",width:o},selectedMenuItem:{color:i.menuItem.selectedTextColor}}}(this.props,this.context),c=(0,f.default)(s.root,a),d=(0,f.default)(s.list,i),h=this.getFilteredChildren(n),m=0,y=p.default.Children.map(h,function(t,n){var r=t.props.disabled,o=t.type?t.type.muiName:"",i=t;switch(o){case"MenuItem":i=e.cloneMenuItem(t,m,s,n);break;case"Divider":i=p.default.cloneElement(t,{style:(0,f.default)({},s.divider,t.props.style)})}return"MenuItem"!==o||r||m++,i});return p.default.createElement(v.default,{onClickAway:this.handleClickAway},p.default.createElement("div",{onKeyDown:this.handleKeyDown,onWheel:this.handleOnWheel,style:u(c),ref:"scrollContainer",role:"presentation"},p.default.createElement(g.default,(0,r.default)({},l,{ref:"list",style:d,role:"menu"}),y)))}}]),t}(d.Component);C.defaultProps={autoWidth:!0,desktop:!1,disableAutoFocus:!1,initiallyKeyboardFocused:!1,maxHeight:null,multiple:!1,onChange:function(){},onEscKeyDown:function(){},onItemClick:function(){},onKeyDown:function(){}},C.contextTypes={muiTheme:h.default.object.isRequired};var w=function(){var e=this;this.handleClickAway=function(t){if(!t.defaultPrevented){var n=e.state.focusIndex;if(!(n<0)){var r=e.getFilteredChildren(e.props.children)[n];r&&r.props.menuItems&&r.props.menuItems.length>0||e.setFocusIndex(t,-1,!1)}}},this.handleKeyDown=function(t){var n=e.getFilteredChildren(e.props.children),r=(0,b.default)(t);switch(r){case"down":t.preventDefault(),e.incrementKeyboardFocusIndex(t,n);break;case"esc":e.props.onEscKeyDown(t);break;case"tab":t.preventDefault(),t.shiftKey?e.decrementKeyboardFocusIndex(t):e.incrementKeyboardFocusIndex(t,n);break;case"up":t.preventDefault(),e.decrementKeyboardFocusIndex(t);break;default:if(r&&1===r.length){var o=e.hotKeyHolder.append(r);e.setFocusIndexStartsWith(t,o,n)&&t.preventDefault()}}e.props.onKeyDown(t)},this.handleOnWheel=function(t){var n=e.refs.scrollContainer;if(!(n.scrollHeight<=n.clientHeight)){var r=n.scrollTop,o=n.scrollHeight,i=n.clientHeight,a=t.deltaY,l=a>0;return l&&a>o-i-r?(n.scrollTop=o,e.cancelScrollEvent(t)):!l&&-a>r?(n.scrollTop=0,e.cancelScrollEvent(t)):void 0}}};C.propTypes={},t.default=C},function(e,t,n){e.exports={default:n(168),__esModule:!0}},function(e,t,n){e.exports={default:n(173),__esModule:!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,i.default)(e)};var r,o=n(184),i=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e instanceof Object&&!Array.isArray(e)},e.exports=t.default},function(e,t,n){"use strict";function r(e,t){-1===e.indexOf(t)&&e.push(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(Array.isArray(t))for(var n=0,o=t.length;n<o;++n)r(e,t[n]);else r(e,t)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,o){for(var i=0,a=e.length;i<a;++i){var l=e[i](t,n,r,o);if(l)return l}},e.exports=t.default},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){e.exports={default:n(213),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(92),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return(0,i.default)(e)}},function(e,t,n){var r=n(40),o=n(35),i=n(28),a=n(60),l=n(25),u=n(104),s=Object.getOwnPropertyDescriptor;t.f=n(24)?s:function(e,t){if(e=i(e),t=a(t,!0),u)try{return s(e,t)}catch(e){}if(l(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(98),o=n(54).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(58),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){var r=n(55);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){var r=n(25),o=n(28),i=n(238)(!1),a=n(63)("IE_PROTO");e.exports=function(e,t){var n,l=o(e),u=0,s=[];for(n in l)n!=a&&r(l,n)&&s.push(n);for(;t.length>u;)r(l,n=t[u++])&&(~i(s,n)||s.push(n));return s}},function(e,t,n){e.exports=n(32)},function(e,t,n){"use strict";var r=n(57),o=n(19),i=n(99),a=n(32),l=n(34),u=n(240),s=n(53),c=n(106),f=n(15)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,m,y,v){u(n,t,h);var b,g,x,k=function(e){if(!d&&e in E)return E[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},C=t+" Iterator",w="values"==m,_=!1,E=e.prototype,S=E[f]||E["@@iterator"]||m&&E[m],T=S||k(m),O=m?w?k("entries"):T:void 0,M="Array"==t&&E.entries||S;if(M&&(x=c(M.call(new e)))!==Object.prototype&&x.next&&(s(x,C,!0),r||"function"==typeof x[f]||a(x,f,p)),w&&S&&"values"!==S.name&&(_=!0,T=function(){return S.call(this)}),r&&!v||!d&&!_&&E[f]||a(E,f,T),l[t]=T,l[C]=p,m)if(b={values:w?T:k("values"),keys:y?T:k("keys"),entries:O},v)for(g in b)g in E||i(E,g,b[g]);else o(o.P+o.F*(d||_),t,b);return b}},function(e,t,n){"use strict";var r=n(241)(!0);n(100)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){e.exports={default:n(245),__esModule:!0}},function(e,t,n){var r=n(30),o=n(20).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){e.exports=!n(24)&&!n(29)(function(){return 7!=Object.defineProperty(n(103)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(19),o=n(13),i=n(29);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(e,t,n){var r=n(25),o=n(36),i=n(63)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,l=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var s in n=Object(arguments[u]))o.call(n,s)&&(l[s]=n[s]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(l[a[c]]=n[a[c]])}}return l}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=n(78),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=f(n(7)),o=f(n(3)),i=f(n(4)),a=f(n(6)),l=f(n(5)),u=n(0),s=f(n(1)),c=f(n(214));function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(){return(0,o.default)(this,t),(0,a.default)(this,(t.__proto__||(0,r.default)(t)).apply(this,arguments))}return(0,l.default)(t,e),(0,i.default)(t,[{key:"getChildContext",value:function(){return{muiTheme:this.props.muiTheme||(0,c.default)()}}},{key:"render",value:function(){return this.props.children}}]),t}(u.Component);d.childContextTypes={muiTheme:s.default.object.isRequired},d.propTypes={},t.default=d},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,l=a&&a(Object);return function u(s,c,f){if("string"!=typeof c){if(l){var d=a(c);d&&d!==l&&u(s,d,f)}var p=r(c);o&&(p=p.concat(o(c)));for(var h=0;h<p.length;++h){var m=p[h];if(!(e[m]||t[m]||f&&f[m])){var y=i(c,m);try{n(s,m,y)}catch(e){}}}return s}return s}}()},function(e,t,n){var r=n(249);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t))},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,l="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(a,p),a=p+f.length,d)l+=d[1];else{var h=e[a],m=n[2],y=n[3],v=n[4],b=n[5],g=n[6],x=n[7];l&&(r.push(l),l="");var k=null!=m&&null!=h&&h!==m,C="+"===g||"*"===g,w="?"===g||"*"===g,_=n[2]||c,E=v||b;r.push({name:y||i++,prefix:m||"",delimiter:_,optional:w,repeat:C,partial:k,asterisk:!!x,pattern:E?s(E):x?".*":"[^"+u(_)+"]+?"})}}return a<e.length&&(l+=e.substr(a)),l&&r.push(l),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function l(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",l=n||{},u=(o||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=l[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!t[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):u(d),!t[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)a+=u(s);else{var d=u(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+d+p+")*"),a+=p=s.optional?s.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=s(n(2)),a=n(16),l=n(66),u=s(n(65));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,s=void 0===n?["/"]:n,f=e.initialIndex,d=void 0===f?0:f,p=e.keyLength,h=void 0===p?6:p,m=(0,u.default)(),y=function(e){o(C,e),C.length=C.entries.length,m.notifyListeners(C.location,C.action)},v=function(){return Math.random().toString(36).substr(2,h)},b=c(d,0,s.length-1),g=s.map(function(e){return"string"==typeof e?(0,l.createLocation)(e,void 0,v()):(0,l.createLocation)(e,void 0,e.key||v())}),x=a.createPath,k=function(e){var n=c(C.index+e,0,C.entries.length-1),r=C.entries[n];m.confirmTransitionTo(r,"POP",t,function(e){e?y({action:"POP",location:r,index:n}):y()})},C={length:g.length,action:"POP",location:g[b],index:b,entries:g,createHref:x,push:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,l.createLocation)(e,n,v(),C.location);m.confirmTransitionTo(o,"PUSH",t,function(e){if(e){var t=C.index+1,n=C.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),y({action:"PUSH",location:o,index:t,entries:n})}})},replace:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,l.createLocation)(e,n,v(),C.location);m.confirmTransitionTo(o,"REPLACE",t,function(e){e&&(C.entries[C.index]=o,y({action:"REPLACE",location:o}))})},go:k,goBack:function(){return k(-1)},goForward:function(){return k(1)},canGo:function(e){var t=C.index+e;return t>=0&&t<C.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return m.setPrompt(e)},listen:function(e){return m.appendListener(e)}};return C}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=c(n(2)),i=c(n(9)),a=n(66),l=n(16),u=c(n(65)),s=n(107);function c(e){return e&&e.__esModule?e:{default:e}}var f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,l.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:l.stripLeadingSlash,decodePath:l.addLeadingSlash},slash:{encodePath:l.addLeadingSlash,decodePath:l.addLeadingSlash}},d=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},p=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(s.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,s.supportsGoWithoutReloadUsingHash)(),c=e.getUserConfirmation,h=void 0===c?s.getConfirmation:c,m=e.hashType,y=void 0===m?"slash":m,v=e.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(e.basename)):"",b=f[y],g=b.encodePath,x=b.decodePath,k=function(){var e=x(d());return(0,o.default)(!v||(0,l.hasBasename)(e,v),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+v+'".'),v&&(e=(0,l.stripBasename)(e,v)),(0,a.createLocation)(e)},C=(0,u.default)(),w=function(e){r(L,e),L.length=t.length,C.notifyListeners(L.location,L.action)},_=!1,E=null,S=function(){var e=d(),t=g(e);if(e!==t)p(t);else{var n=k(),r=L.location;if(!_&&(0,a.locationsAreEqual)(r,n))return;if(E===(0,l.createPath)(n))return;E=null,T(n)}},T=function(e){_?(_=!1,w()):C.confirmTransitionTo(e,"POP",h,function(t){t?w({action:"POP",location:e}):O(e)})},O=function(e){var t=L.location,n=R.lastIndexOf((0,l.createPath)(t));-1===n&&(n=0);var r=R.lastIndexOf((0,l.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(_=!0,F(o))},M=d(),P=g(M);M!==P&&p(P);var I=k(),R=[(0,l.createPath)(I)],F=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},j=0,A=function(e){1===(j+=e)?(0,s.addEventListener)(window,"hashchange",S):0===j&&(0,s.removeEventListener)(window,"hashchange",S)},D=!1,L={length:t.length,action:"POP",location:I,createHref:function(e){return"#"+g(v+(0,l.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,L.location);C.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,l.createPath)(n),r=g(v+t);if(d()!==r){E=t,function(e){window.location.hash=e}(r);var i=R.lastIndexOf((0,l.createPath)(L.location)),a=R.slice(0,-1===i?0:i+1);a.push(t),R=a,w({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),w()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,L.location);C.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,l.createPath)(n),r=g(v+t);d()!==r&&(E=t,p(r));var o=R.indexOf((0,l.createPath)(L.location));-1!==o&&(R[o]=t),w({action:"REPLACE",location:n})}})},go:F,goBack:function(){return F(-1)},goForward:function(){return F(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=C.setPrompt(e);return D||(A(1),D=!0),function(){return D&&(D=!1,A(-1)),t()}},listen:function(e){var t=C.appendListener(e);return A(1),function(){A(-1),t()}}};return L}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=f(n(2)),a=f(n(9)),l=n(66),u=n(16),s=f(n(65)),c=n(107);function f(e){return e&&e.__esModule?e:{default:e}}var d=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(c.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,c.supportsHistory)(),f=!(0,c.supportsPopStateOnHashChange)(),p=e.forceRefresh,h=void 0!==p&&p,m=e.getUserConfirmation,y=void 0===m?c.getConfirmation:m,v=e.keyLength,b=void 0===v?6:v,g=e.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(e.basename)):"",x=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return(0,i.default)(!g||(0,u.hasBasename)(a,g),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+g+'".'),g&&(a=(0,u.stripBasename)(a,g)),(0,l.createLocation)(a,r,n)},k=function(){return Math.random().toString(36).substr(2,b)},C=(0,s.default)(),w=function(e){o(D,e),D.length=t.length,C.notifyListeners(D.location,D.action)},_=function(e){(0,c.isExtraneousPopstateEvent)(e)||T(x(e.state))},E=function(){T(x(d()))},S=!1,T=function(e){S?(S=!1,w()):C.confirmTransitionTo(e,"POP",y,function(t){t?w({action:"POP",location:e}):O(e)})},O=function(e){var t=D.location,n=P.indexOf(t.key);-1===n&&(n=0);var r=P.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(S=!0,R(o))},M=x(d()),P=[M.key],I=function(e){return g+(0,u.createPath)(e)},R=function(e){t.go(e)},F=0,j=function(e){1===(F+=e)?((0,c.addEventListener)(window,"popstate",_),f&&(0,c.addEventListener)(window,"hashchange",E)):0===F&&((0,c.removeEventListener)(window,"popstate",_),f&&(0,c.removeEventListener)(window,"hashchange",E))},A=!1,D={length:t.length,action:"POP",location:M,createHref:I,push:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,l.createLocation)(e,o,k(),D.location);C.confirmTransitionTo(a,"PUSH",y,function(e){if(e){var r=I(a),o=a.key,l=a.state;if(n)if(t.pushState({key:o,state:l},null,r),h)window.location.href=r;else{var u=P.indexOf(D.location.key),s=P.slice(0,-1===u?0:u+1);s.push(a.key),P=s,w({action:"PUSH",location:a})}else(0,i.default)(void 0===l,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,l.createLocation)(e,o,k(),D.location);C.confirmTransitionTo(a,"REPLACE",y,function(e){if(e){var r=I(a),o=a.key,l=a.state;if(n)if(t.replaceState({key:o,state:l},null,r),h)window.location.replace(r);else{var u=P.indexOf(D.location.key);-1!==u&&(P[u]=a.key),w({action:"REPLACE",location:a})}else(0,i.default)(void 0===l,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:R,goBack:function(){return R(-1)},goForward:function(){return R(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=C.setPrompt(e);return A||(j(1),A=!0),function(){return A&&(A=!1,j(-1)),t()}},listen:function(e){var t=C.appendListener(e);return j(1),function(){j(-1),t()}}};return D}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(12),a=n.n(i),l=n(2),u=n.n(l),s=n(1),c=n.n(s),f=n(116),d=n.n(f),p=n(9),h=n.n(p),m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function y(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=y(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},y(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:m({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;h()(null==n||1===o.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){u()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?o.a.Children.only(e):null},t}(o.a.Component);v.propTypes={history:c.a.object.isRequired,children:c.a.node},v.contextTypes={router:c.a.object},v.childContextTypes={router:c.a.object.isRequired};var b=v,g=b;function x(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var k=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=x(this,e.call.apply(e,[this].concat(i))),r.history=d()(r.props),x(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){u()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return o.a.createElement(g,{history:this.history,children:this.props.children})},t}(o.a.Component);k.propTypes={basename:c.a.string,forceRefresh:c.a.bool,getUserConfirmation:c.a.func,keyLength:c.a.number,children:c.a.node};var C=k,w=n(115),_=n.n(w);function E(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var S=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=E(this,e.call.apply(e,[this].concat(i))),r.history=_()(r.props),E(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){u()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return o.a.createElement(g,{history:this.history,children:this.props.children})},t}(o.a.Component);S.propTypes={basename:c.a.string,getUserConfirmation:c.a.func,hashType:c.a.oneOf(["hashbang","noslash","slash"]),children:c.a.node};var T=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function O(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var M=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},P=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=O(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!M(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},O(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);h()(this.context.router,"You should not use <Link> outside a <Router>");var i=this.context.router.history.createHref("string"==typeof t?{pathname:t}:t);return o.a.createElement("a",T({},r,{onClick:this.handleClick,href:i,ref:n}))},t}(o.a.Component);P.propTypes={onClick:c.a.func,target:c.a.string,replace:c.a.bool,to:c.a.oneOfType([c.a.string,c.a.object]).isRequired,innerRef:c.a.oneOfType([c.a.string,c.a.func])},P.defaultProps={replace:!1},P.contextTypes={router:c.a.shape({history:c.a.shape({push:c.a.func.isRequired,replace:c.a.func.isRequired,createHref:c.a.func.isRequired}).isRequired}).isRequired};var I=P,R=n(114),F=n.n(R);function j(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var A=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=j(this,e.call.apply(e,[this].concat(i))),r.history=F()(r.props),j(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){u()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return o.a.createElement(b,{history:this.history,children:this.props.children})},t}(o.a.Component);A.propTypes={initialEntries:c.a.array,initialIndex:c.a.number,getUserConfirmation:c.a.func,keyLength:c.a.number,children:c.a.node};var D=n(113),L=n.n(D),N={},W=0,z=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof t&&(t={path:t});var n=t,r=n.path,o=void 0===r?"/":r,i=n.exact,a=void 0!==i&&i,l=n.strict,u=void 0!==l&&l,s=n.sensitive,c=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=N[n]||(N[n]={});if(r[e])return r[e];var o=[],i={re:L()(e,o,t),keys:o};return W<1e4&&(r[e]=i,W++),i}(o,{end:a,strict:u,sensitive:void 0!==s&&s}),f=c.re,d=c.keys,p=f.exec(e);if(!p)return null;var h=p[0],m=p.slice(1),y=e===h;return a&&!y?null:{path:o,url:"/"===o&&""===h?"/":h,isExact:y,params:d.reduce(function(e,t,n){return e[t.name]=m[n],e},{})}},B=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function U(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var H=function(e){return 0===o.a.Children.count(e)},K=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=U(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},U(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:B({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,i=e.strict,a=e.exact,l=e.sensitive;if(n)return n;h()(t,"You should not use <Route> or withRouter() outside a <Router>");var u=t.route,s=(r||u.location).pathname;return o?z(s,{path:o,strict:i,exact:a,sensitive:l}):u.match},t.prototype.componentWillMount=function(){u()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),u()(!(this.props.component&&this.props.children&&!H(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),u()(!(this.props.render&&this.props.children&&!H(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){u()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),u()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,i=t.render,a=this.context.router,l=a.history,u=a.route,s=a.staticContext,c={match:e,location:this.props.location||u.location,history:l,staticContext:s};return r?e?o.a.createElement(r,c):null:i?e?i(c):null:n?"function"==typeof n?n(c):H(n)?null:o.a.Children.only(n):null},t}(o.a.Component);K.propTypes={computedMatch:c.a.object,path:c.a.string,exact:c.a.bool,strict:c.a.bool,sensitive:c.a.bool,component:c.a.func,render:c.a.func,children:c.a.oneOfType([c.a.func,c.a.node]),location:c.a.object},K.contextTypes={router:c.a.shape({history:c.a.object.isRequired,route:c.a.object.isRequired,staticContext:c.a.object})},K.childContextTypes={router:c.a.object.isRequired};var V=K,q=V,G=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},$="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var Y=function(e){var t=e.to,n=e.exact,r=e.strict,i=e.location,a=e.activeClassName,l=e.className,u=e.activeStyle,s=e.style,c=e.isActive,f=e.ariaCurrent,d=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","ariaCurrent"]);return o.a.createElement(q,{path:"object"===(void 0===t?"undefined":$(t))?t.pathname:t,exact:n,strict:r,location:i,children:function(e){var n=e.location,r=e.match,i=!!(c?c(r,n):r);return o.a.createElement(I,G({to:t,className:i?[l,a].filter(function(e){return e}).join(" "):l,style:i?G({},s,u):s,"aria-current":i&&f},d))}})};Y.propTypes={to:I.propTypes.to,exact:c.a.bool,strict:c.a.bool,location:c.a.object,activeClassName:c.a.string,className:c.a.string,activeStyle:c.a.object,style:c.a.object,isActive:c.a.func,ariaCurrent:c.a.oneOf(["page","step","location","true"])},Y.defaultProps={activeClassName:"active",ariaCurrent:"true"};var Q=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){h()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(o.a.Component);Q.propTypes={when:c.a.bool,message:c.a.oneOfType([c.a.func,c.a.string]).isRequired},Q.defaultProps={when:!0},Q.contextTypes={router:c.a.shape({history:c.a.shape({block:c.a.func.isRequired}).isRequired}).isRequired};var X=n(73),Z=n(72),J=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ee=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=J({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(X.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},te=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(Z.default)(e.state,t.state)};"undefined"==typeof window||!window.document||window.document.createElement,"function"==typeof Symbol&&Symbol.iterator,Object.assign,Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign;var ne=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){h()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=ee(e.to),n=ee(this.props.to);te(t,n)?u()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.perform=function(){var e=this.context.router.history,t=this.props,n=t.push,r=t.to;n?e.push(r):e.replace(r)},t.prototype.render=function(){return null},t}(o.a.Component);ne.propTypes={push:c.a.bool,from:c.a.string,to:c.a.oneOfType([c.a.string,c.a.object]).isRequired},ne.defaultProps={push:!1},ne.contextTypes={router:c.a.shape({history:c.a.shape({push:c.a.func.isRequired,replace:c.a.func.isRequired}).isRequired,staticContext:c.a.object}).isRequired};var re=n(16),oe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function ie(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ae=function(e,t){return e?oe({},t,{pathname:Object(re.addLeadingSlash)(e)+t.pathname}):t},le=function(e){return"string"==typeof e?Object(re.parsePath)(e):(n=(t=e).pathname,r=void 0===n?"/":n,o=t.search,i=void 0===o?"":o,a=t.hash,l=void 0===a?"":a,{pathname:r,search:"?"===i?"":i,hash:"#"===l?"":l});var t,n,r,o,i,a,l},ue=function(e){return"string"==typeof e?e:Object(re.createPath)(e)},se=function(e){return function(){h()(!1,"You cannot %s with <StaticRouter>",e)}},ce=function(){},fe=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=ie(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return Object(re.addLeadingSlash)(r.props.basename+ue(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=ae(n,le(e)),o.url=ue(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=ae(n,le(e)),o.url=ue(o.location)},r.handleListen=function(){return ce},r.handleBlock=function(){return ce},ie(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){u()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),i={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Object(re.addLeadingSlash)(e);return 0!==t.pathname.indexOf(n)?t:oe({},t,{pathname:t.pathname.substr(n.length)})}(t,le(n)),push:this.handlePush,replace:this.handleReplace,go:se("go"),goBack:se("goBack"),goForward:se("goForward"),listen:this.handleListen,block:this.handleBlock};return o.a.createElement(b,oe({},r,{history:i}))},t}(o.a.Component);fe.propTypes={basename:c.a.string,context:c.a.object.isRequired,location:c.a.oneOfType([c.a.string,c.a.object])},fe.defaultProps={basename:"",location:"/"},fe.childContextTypes={router:c.a.object.isRequired};var de=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){h()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){u()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),u()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,i=void 0;return o.a.Children.forEach(t,function(t){if(o.a.isValidElement(t)){var a=t.props,l=a.path,u=a.exact,s=a.strict,c=a.sensitive,f=a.from,d=l||f;null==r&&(i=t,r=d?z(n.pathname,{path:d,exact:u,strict:s,sensitive:c}):e.match)}}),r?o.a.cloneElement(i,{location:n,computedMatch:r}):null},t}(o.a.Component);de.contextTypes={router:c.a.shape({route:c.a.object.isRequired}).isRequired},de.propTypes={children:c.a.node,location:c.a.object};n(112),Object.assign;for(var pe=n(111),he=n.n(pe),me=n(71),ye=n.n(me),ve=n(42),be=n.n(ve),ge=n(70),xe=n.n(ge),ke=(n(74),n(132),n(110)),Ce=n.n(ke),we=[{address:"/pages/calendars",name:"Calendars"},{address:"/pages/our-schools",name:"Our Schools"},{address:"/pages/school-board",name:"School Board"},{address:"/pages/student-parent-resources",name:"Parents/Students"},{address:"/pages/staff-resources",name:"Staff Resources"},{address:"/pages/employment",name:"Employment"},{address:"/",name:"Homepage"}],_e=[],Ee=0;Ee<we.length;Ee++)_e.push(o.a.createElement(I,{className:"link ",to:we[Ee].address},o.a.createElement(Ce.a,{primaryText:we[Ee].name})));var Se=[];for(Ee=0;Ee<we.length;Ee++)Se.push(o.a.createElement("div",null,o.a.createElement(I,{to:we[Ee].address},o.a.createElement("div",{className:"button"},we[Ee].name))));var Te=[];for(Ee=0;Ee<we.length;Ee++)Te.push(o.a.createElement(I,{to:we[Ee].address},o.a.createElement("div",{className:"button-fixed"},we[Ee].name)));Te.push(o.a.createElement("br",null));class Oe extends r.Component{constructor(e){super(e)}mobileRender(){return o.a.createElement("div",{className:this.props.headerMobile},o.a.createElement("img",{src:"../../../../resources/logo.png",className:"image"}),o.a.createElement("div",{className:"header-mobile-title"},"MSAD 58"),o.a.createElement(ye.a,{className:"icon",iconButtonElement:o.a.createElement(be.a,null,o.a.createElement(xe.a,null))},_e))}computerRender(){return this.props.fixHeader?o.a.createElement("div",{className:"header-landscape-fixed"},o.a.createElement("div",{className:"button-grid"},o.a.createElement("div",{className:"picture"},o.a.createElement("img",{className:"image",src:"../../../../resources/logo.png"})),Te)):o.a.createElement("div",{className:"header-landscape"},o.a.createElement("div",{className:"button-grid"},o.a.createElement("div",null),Se))}render(){return this.props.showMobile?this.mobileRender():this.computerRender()}}n(130);var Me=()=>o.a.createElement("div",{className:"footer"},"© 2018 -");n(128);var Pe=()=>o.a.createElement("div",{className:"background"});n(17);class Ie extends r.Component{constructor(e){super(e)}render(){return o.a.createElement("div",{className:"page"},"Calendars ",o.a.createElement("br",null),"Calendars ",o.a.createElement("br",null),"Calendars ",o.a.createElement("br",null),"Calendars ",o.a.createElement("br",null),"Calendars ",o.a.createElement("br",null),"Calendars ",o.a.createElement("br",null),"Calendars ",o.a.createElement("br",null),"Calendars ",o.a.createElement("br",null),"Calendars ",o.a.createElement("br",null),"Calendars ",o.a.createElement("br",null),"Calendars ",o.a.createElement("br",null),"Calendars ",o.a.createElement("br",null),"Calendars ",o.a.createElement("br",null))}}class Re extends r.Component{constructor(e){super(e)}render(){return o.a.createElement("div",null)}}class Fe extends r.Component{constructor(e){super(e)}render(){return o.a.createElement("div",null)}}class je extends r.Component{constructor(e){super(e)}render(){return o.a.createElement("div",null)}}class Ae extends r.Component{constructor(e){super(e)}render(){return o.a.createElement("div",null,"STUFF")}}class De extends r.Component{constructor(e){super(e)}render(){return o.a.createElement("div",null,"1 ",o.a.createElement("br",null),"2 ",o.a.createElement("br",null),"3 ",o.a.createElement("br",null),"4 ",o.a.createElement("br",null),"5 ",o.a.createElement("br",null),"6 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"v 7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null),"7 ",o.a.createElement("br",null))}}class Le extends r.Component{constructor(e){super(e)}render(){return o.a.createElement("div",null,o.a.createElement(Oe,{headerMobile:this.props.headerMobile,showMobile:this.props.showMobile,fixHeader:!0}),o.a.createElement(q,{path:"/pages/calendars",render:()=>o.a.createElement(Ie,null)}),o.a.createElement(q,{path:"/pages/our-schools",render:()=>o.a.createElement(Re,null)}),o.a.createElement(q,{path:"/pages/school-board",render:()=>o.a.createElement(Fe,null)}),o.a.createElement(q,{path:"/pages/student-parent-resources",render:()=>o.a.createElement(je,null)}),o.a.createElement(q,{path:"/pages/staff-resources",render:()=>o.a.createElement(Ae,null)}),o.a.createElement(q,{path:"/pages/employment",render:()=>o.a.createElement(De,null)}))}}n(123);var Ne=()=>o.a.createElement("div",{className:"title-container title-grid-container"},o.a.createElement("div",{className:"background1"},o.a.createElement("img",{className:"title-image",src:"../../../../resources/logo.png"})),o.a.createElement("div",null),o.a.createElement("i",{className:"title"},"Empowering learners ",o.a.createElement("br",null),"to invent their future"));n(121);class We extends r.Component{constructor(e){super(e)}render(){return o.a.createElement("div",null,o.a.createElement(Ne,null),o.a.createElement(Oe,{headerMobile:this.props.headerMobile,showMobile:this.props.showMobile,fixHeader:this.props.fixHeader}),o.a.createElement("div",{className:"page"},"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),o.a.createElement("hr",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"    HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"    HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"    HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"    HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null),"    HOMEPAGE ",o.a.createElement("br",null),"THIS ",o.a.createElement("br",null),"IS ",o.a.createElement("br",null),"THE ",o.a.createElement("br",null),"HOMEPAGE ",o.a.createElement("br",null)))}}n(119);var ze=0;class Be extends r.Component{constructor(e){super(e),this.bodyRef=o.a.createRef(),this.handleResize=this.handleResize.bind(this),this.handleScroll=this.handleScroll.bind(this),this.state={showMobile:!1,fixHeader:!1,headerMobile:"header-mobile",headerLandscape:"header-landscape"}}componentDidMount(){window.addEventListener("resize",this.handleResize),this.bodyRef.current.addEventListener("scroll",this.handleScroll),window.innerWidth<700&&this.setState({showMobile:!0})}handleScroll(){ze=this.bodyRef.current.scrollTop,!this.state.fixHeader&&ze>=330&&this.setState({fixHeader:!0,headerMobile:"header-mobile-fixed"}),this.state.fixHeader&&ze<330&&this.setState({fixHeader:!1,headerMobile:"header-mobile"})}handleResize(){!this.state.showMobile&&window.innerWidth<800&&this.setState({showMobile:!0}),this.state.showMobile&&window.innerWidth>800&&this.setState({showMobile:!1})}render(){return o.a.createElement(C,null,o.a.createElement("div",{className:"body",ref:this.bodyRef},o.a.createElement(q,{exact:!0,path:"/",render:()=>o.a.createElement(We,{showMobile:this.state.showMobile,headerMobile:this.state.headerMobile,fixHeader:this.state.fixHeader})}),o.a.createElement(q,{path:"/pages/",render:()=>o.a.createElement(Le,{showMobile:this.state.showMobile,headerMobile:this.state.headerMobile})})))}}class Ue extends r.Component{constructor(e){super(e)}render(){return o.a.createElement(he.a,null,o.a.createElement(C,null,o.a.createElement("div",null,o.a.createElement(Pe,null),o.a.createElement(Be,null),o.a.createElement(Me,null))))}}a.a.render(o.a.createElement(()=>o.a.createElement(Ue,null),null),document.getElementById("root"))},function(e,t,n){(e.exports=n(22)(!1)).push([e.i,".body {\n  width:  100%;\n  height: 100%;\n  overflow: scroll;\n}\n",""])},function(e,t,n){var r=n(118);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(22)(!1)).push([e.i,"",""])},function(e,t,n){var r=n(120);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(22)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Oswald);",""]),t.push([e.i,".title{\n  align-self: left;\n}\n\n.title-image {\n  top: 0px;\n  left: 0px;\n  object-fit: cover;\n  height: 260px;\n  width: 280px;\n  position: relative;\n}\n\n.title-container{\n  font-family: 'Oswald', sans-serif;\n  color: #000000;\n  font-size: 5vw;\n  height: 330px - 1vw;\n  width: 100%;\n  top: 0px;\n  left: 0px;\n}\n\n.title-grid-container{\n  display: grid;\n  grid-template-columns: 40% 2% 58%;\n}\n\n.background1{\n  text-align: center;\n}\n",""])},function(e,t,n){var r=n(122);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(22)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Oswald);",""]),t.push([e.i,".page {\n  color: #000000;\n  margin: 6em;\n  font-family: 'Oswald', sans-serif;\n}\n",""])},function(e,t,n){e.exports=n.p+"fcd3dbe838df96769c77a182dfdd780d.png"},function(e,t){e.exports=function(e){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},function(e,t,n){var r=n(126);(e.exports=n(22)(!1)).push([e.i,".background {\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  z-index: -2;\n  position: absolute;\n  background-image: url("+r(n(125))+");\n  background-size: cover;\n  filter: blur(5px);\n}\n",""])},function(e,t,n){var r=n(127);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(22)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Oswald);",""]),t.push([e.i,".footer {\n  background: radial-gradient(farthest-corner at 10% 2%, #ffffb3, #ffff66);\n  color: black;\n  position: fixed;\n  left: 0px;\n  width: 100%;\n  bottom: 0%;\n  border-style: solid;\n  border-image: linear-gradient(red, yellow);\n}\n",""])},function(e,t,n){var r=n(129);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(21)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=b(n(11)),o=b(n(10)),i=b(n(7)),a=b(n(3)),l=b(n(4)),u=b(n(6)),s=b(n(5)),c=b(n(8)),f=n(0),d=b(f),p=b(n(1)),h=b(n(14)),m=n(39),y=b(n(44)),v=b(n(45));function b(e){return e&&e.__esModule?e:{default:e}}var g=function(e){function t(){var e,n,r,o;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=r=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),r.state={hovered:!1,keyboardFocused:!1,touched:!1,initialZDepth:0,zDepth:0},r.handleMouseDown=function(e){0===e.button&&r.setState({zDepth:r.state.initialZDepth+1}),r.props.onMouseDown&&r.props.onMouseDown(e)},r.handleMouseUp=function(e){r.setState({zDepth:r.state.initialZDepth}),r.props.onMouseUp&&r.props.onMouseUp(e)},r.handleMouseLeave=function(e){r.state.keyboardFocused||r.setState({zDepth:r.state.initialZDepth,hovered:!1}),r.props.onMouseLeave&&r.props.onMouseLeave(e)},r.handleMouseEnter=function(e){r.state.keyboardFocused||r.state.touched||r.setState({hovered:!0}),r.props.onMouseEnter&&r.props.onMouseEnter(e)},r.handleTouchStart=function(e){r.setState({touched:!0,zDepth:r.state.initialZDepth+1}),r.props.onTouchStart&&r.props.onTouchStart(e)},r.handleTouchEnd=function(e){r.setState({touched:!0,zDepth:r.state.initialZDepth}),r.props.onTouchEnd&&r.props.onTouchEnd(e)},r.handleKeyboardFocus=function(e,t){var n=t&&!r.props.disabled?r.state.initialZDepth+1:r.state.initialZDepth;r.setState({zDepth:n,keyboardFocused:t})},o=n,(0,u.default)(r,o)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentWillMount",value:function(){var e=this.props.disabled?0:1;this.setState({zDepth:e,initialZDepth:e})}},{key:"componentWillReceiveProps",value:function(e){var t=e.disabled?0:1,n={zDepth:t,initialZDepth:t};e.disabled&&(n.hovered=!1),this.setState(n)}},{key:"render",value:function(){var e=this.props,t=(e.backgroundColor,e.buttonStyle),n=e.children,i=e.className,a=e.disabled,l=(e.disabledBackgroundColor,e.disabledLabelColor,e.fullWidth,e.icon),u=e.label,s=(e.labelColor,e.labelPosition),p=e.labelStyle,b=e.overlayStyle,g=(e.primary,e.rippleStyle),x=(e.secondary,e.style),k=(0,o.default)(e,["backgroundColor","buttonStyle","children","className","disabled","disabledBackgroundColor","disabledLabelColor","fullWidth","icon","label","labelColor","labelPosition","labelStyle","overlayStyle","primary","rippleStyle","secondary","style"]),C=this.context.muiTheme.prepareStyles,w=function(e,t,n){var r=t.muiTheme,o=r.baseTheme,i=r.button,a=r.raisedButton,l=r.borderRadius,u=e.disabled,s=e.disabledBackgroundColor,c=e.disabledLabelColor,f=e.fullWidth,d=e.icon,p=e.label,y=e.labelPosition,v=e.primary,b=e.secondary,g=e.style,x=v||b?.4:.08,k=a.color,C=a.textColor;u?(k=s||a.disabledColor,C=c||a.disabledTextColor):v?(k=a.primaryColor,C=a.primaryTextColor):b?(k=a.secondaryColor,C=a.secondaryTextColor):(e.backgroundColor&&(k=e.backgroundColor),e.labelColor&&(C=e.labelColor));var w=g&&g.height||i.height;return{root:{display:"inline-block",transition:h.default.easeOut(),minWidth:f?"100%":i.minWidth},button:{height:w,lineHeight:w+"px",width:"100%",padding:0,borderRadius:l,transition:h.default.easeOut(),backgroundColor:k,textAlign:"center"},label:{position:"relative",opacity:1,fontSize:a.fontSize,letterSpacing:0,textTransform:a.textTransform||i.textTransform||"uppercase",fontWeight:a.fontWeight,margin:0,userSelect:"none",paddingLeft:d&&"before"!==y?8:o.spacing.desktopGutterLess,paddingRight:d&&"before"===y?8:o.spacing.desktopGutterLess,color:C},icon:{verticalAlign:"middle",marginLeft:p&&"before"!==y?12:0,marginRight:p&&"before"===y?12:0},overlay:{height:w,borderRadius:l,backgroundColor:(n.keyboardFocused||n.hovered)&&!u&&(0,m.fade)(C,x),transition:h.default.easeOut(),top:0},ripple:{color:C,opacity:v||b?.16:.1}}}(this.props,this.context,this.state),_=(0,c.default)({},w.ripple,g),E=a?{}:{onMouseDown:this.handleMouseDown,onMouseUp:this.handleMouseUp,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd,onKeyboardFocus:this.handleKeyboardFocus},S=u&&d.default.createElement("span",{style:C((0,c.default)(w.label,p)),key:"labelElement"},u),T=l&&(0,f.cloneElement)(l,{color:l.props.color||w.label.color,style:(0,c.default)(w.icon,l.props.style),key:"iconCloned"}),O="before"===s?[S,T,n]:[n,T,S];return d.default.createElement(v.default,{className:i,style:(0,c.default)(w.root,x),zDepth:this.state.zDepth},d.default.createElement(y.default,(0,r.default)({},k,E,{ref:"container",disabled:a,style:(0,c.default)(w.button,t),focusRippleColor:_.color,touchRippleColor:_.color,focusRippleOpacity:_.opacity,touchRippleOpacity:_.opacity}),d.default.createElement("div",{ref:"overlay",style:C((0,c.default)(w.overlay,b))},O)))}}]),t}(f.Component);g.muiName="RaisedButton",g.defaultProps={disabled:!1,labelPosition:"after",fullWidth:!1,primary:!1,secondary:!1},g.contextTypes={muiTheme:p.default.object.isRequired},g.propTypes={},t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=n(131),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){(t=e.exports=n(22)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Oswald);",""]),t.push([e.i,".header-mobile-title {\n  font-family: 'Oswald', sans-serif;\n  font-size: 40px;\n  color: black;\n  display: inline-block;\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n}\n\n.button-grid {\n  display: grid;\n  grid-template-columns: 12.5% 12.5% 12.5% 12.5% 12.5% 12.5% 12.5% 12.5%;\n}\n\n.picture {\n  grid-column-start: 1;\n  grid-column-end: 2;\n  grid-row-start: 1;\n  grid-row-end: 3;\n}\n\n.header-mobile-fixed {\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 3.8em;\n  background-color: white;\n  position: fixed;\n  opacity: 0.75;\n}\n\n.header-mobile {\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 3.8em;\n  background-color: white;\n  position: relative;\n}\n\n.header-landscape {\n  background: #000293;\n\n  /*\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 3.8em;\n  position: relative;\n  text-align: center;\n  display: block;\n  */\n}\n\n.header-landscape-fixed {\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 3.8em;\n  position: fixed;\n  opacity: 0.75;\n  text-align: center;\n  background: #000293;\n  display: block;\n}\n\n.link {\n  margin: 15px;\n  padding: 15px 15px 15px 15px;\n}\n\n.icon {\n  top: 0px;\n  float: right;\n}\n\n.image {\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.button{\n  font-family: 'Oswald', sans-serif;\n  font-size: 20px;\n  padding: 4px;\n  border: 3px solid #000293;\n  background: #000293;\n  color: #d1cd02;\n  transition: all .2s ease-in-out;\n  margin: 5px;\n  border-radius: 10px;\n  height: auto;\n  width:  80%;\n  text-align: center;\n  display: inline-block;\n  opacity: 0.6;\n}\n\n.button:hover {\n  border: 1px solid #333;\n  color: #d1cd02;\n  border-radius: 30px;\n  cursor:  pointer;\n  opacity: 1;\n}\n\n.button-fixed{\n  font-family: 'Oswald', sans-serif;\n  font-size: 18px;\n  padding: 3px;\n  border: 2px solid #000293;\n  background: #000293;\n  color: #d1cd02;\n  transition: all .2s ease-in-out;\n  margin: 5px;\n  border-radius: 10px;\n  height: auto;\n  width:  150px;\n  text-align: center;\n  display: inline-block;\n}\n\n.button-fixed:hover {\n  border: 1px solid #333;\n  color: #d1cd02;\n  border-radius: 30px;\n  cursor:  pointer;\n}\n\nhr {\n  width: 60%;\n  margin-left: auto;\n  margin-right: auto;\n}\n",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=a(r),i=(a(n(1)),a(n(81)));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){var t=e.children,n=e.open,a=e.nestedLevel,l=e.style;return n?o.default.createElement(i.default,{style:l},r.Children.map(t,function(e){return(0,r.isValidElement)(e)?(0,r.cloneElement)(e,{nestedLevel:a+1}):e})):null};l.propTypes={},t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),o=a(n(38)),i=a(n(37));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"}))};(l=(0,o.default)(l)).displayName="NavigationExpandMore",l.muiName="SvgIcon",t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),o=a(n(38)),i=a(n(37));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"}))};(l=(0,o.default)(l)).displayName="NavigationExpandLess",l.muiName="SvgIcon",t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.extendChildren=function(e,t,n){return i.default.Children.map(e,function(e){if(!i.default.isValidElement(e))return e;var r="function"==typeof t?t(e):t,o="function"==typeof n?n(e):n||e.props.children;return i.default.cloneElement(e,r,o)})};var r,o=n(0),i=(r=o)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=m(n(11)),o=m(n(10)),i=m(n(7)),a=m(n(3)),l=m(n(4)),u=m(n(6)),s=m(n(5)),c=m(n(8)),f=n(0),d=m(f),p=m(n(1)),h=m(n(14));function m(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){var e,n,r,o;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=r=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),r.state={offsetWidth:null},o=n,(0,u.default)(r,o)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.setRippleSize(),this.setTooltipPosition()}},{key:"componentWillReceiveProps",value:function(){this.setTooltipPosition()}},{key:"componentDidUpdate",value:function(){this.setRippleSize()}},{key:"setRippleSize",value:function(){var e=this.refs.ripple,t=this.refs.tooltip,n=parseInt(t.offsetWidth,10)/("center"===this.props.horizontalPosition?2:1),r=parseInt(t.offsetHeight,10),o=Math.ceil(2*Math.sqrt(Math.pow(r,2)+Math.pow(n,2)));this.props.show?(e.style.height=o+"px",e.style.width=o+"px"):(e.style.width="0px",e.style.height="0px")}},{key:"setTooltipPosition",value:function(){this.setState({offsetWidth:this.refs.tooltip.offsetWidth})}},{key:"render",value:function(){var e=this.props,t=(e.horizontalPosition,e.label),n=(e.show,e.touch,e.verticalPosition,(0,o.default)(e,["horizontalPosition","label","show","touch","verticalPosition"])),i=this.context.muiTheme.prepareStyles,a=function(e,t,n){var r=e.verticalPosition,o=e.horizontalPosition,i=e.touch?10:0,a=e.touch?-20:-10,l="bottom"===r?14+i:-14-i,u=t.muiTheme,s=u.baseTheme,c=u.zIndex,f=u.tooltip,d=u.borderRadius;return{root:{position:"absolute",fontFamily:s.fontFamily,fontSize:"10px",lineHeight:"22px",padding:"0 8px",zIndex:c.tooltip,color:f.color,overflow:"hidden",top:-1e4,borderRadius:d,userSelect:"none",opacity:0,right:"left"===o?12:null,left:"center"===o?(n.offsetWidth-48)/2*-1:"right"===o?12:null,transition:h.default.easeOut("0ms","top","450ms")+", "+h.default.easeOut("450ms","transform","0ms")+", "+h.default.easeOut("450ms","opacity","0ms")},label:{position:"relative",whiteSpace:"nowrap"},ripple:{position:"absolute",left:"center"===o?"50%":"left"===o?"100%":"0%",top:"bottom"===r?0:"100%",transform:"translate(-50%, -50%)",borderRadius:"50%",backgroundColor:"transparent",transition:h.default.easeOut("0ms","width","450ms")+", "+h.default.easeOut("0ms","height","450ms")+", "+h.default.easeOut("450ms","backgroundColor","0ms")},rootWhenShown:{top:"top"===r?a:36,opacity:f.opacity,transform:"translate(0px, "+l+"px)",transition:h.default.easeOut("0ms","top","0ms")+", "+h.default.easeOut("450ms","transform","0ms")+", "+h.default.easeOut("450ms","opacity","0ms")},rootWhenTouched:{fontSize:"14px",lineHeight:"32px",padding:"0 16px"},rippleWhenShown:{backgroundColor:f.rippleBackgroundColor,transition:h.default.easeOut("450ms","width","0ms")+", "+h.default.easeOut("450ms","height","0ms")+", "+h.default.easeOut("450ms","backgroundColor","0ms")}}}(this.props,this.context,this.state);return d.default.createElement("div",(0,r.default)({},n,{ref:"tooltip",style:i((0,c.default)(a.root,this.props.show&&a.rootWhenShown,this.props.touch&&a.rootWhenTouched,this.props.style))}),d.default.createElement("div",{ref:"ripple",style:i((0,c.default)(a.ripple,this.props.show&&a.rippleWhenShown))}),d.default.createElement("span",{style:i(a.label)},t))}}]),t}(f.Component);y.contextTypes={muiTheme:p.default.object.isRequired},y.propTypes={},t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=m(n(11)),o=m(n(10)),i=m(n(7)),a=m(n(3)),l=m(n(4)),u=m(n(6)),s=m(n(5)),c=m(n(8)),f=n(0),d=m(f),p=m(n(1)),h=m(n(14));function m(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){var e,n,r,o;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=r=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),r.state={hovered:!1},r.handleMouseLeave=function(e){void 0!==r.props.hoverColor&&r.setState({hovered:!1}),r.props.onMouseLeave&&r.props.onMouseLeave(e)},r.handleMouseEnter=function(e){void 0!==r.props.hoverColor&&r.setState({hovered:!0}),r.props.onMouseEnter&&r.props.onMouseEnter(e)},o=n,(0,u.default)(r,o)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.props,t=(e.hoverColor,e.onMouseLeave,e.onMouseEnter,e.style),n=(0,o.default)(e,["hoverColor","onMouseLeave","onMouseEnter","style"]),i=this.context.muiTheme.prepareStyles,a=function(e,t,n){var r=e.color,o=e.hoverColor,i=t.muiTheme.baseTheme,a=r||i.palette.textColor,l=o||a;return{root:{color:n.hovered?l:a,position:"relative",fontSize:i.spacing.iconSize,display:"inline-block",userSelect:"none",transition:h.default.easeOut()}}}(this.props,this.context,this.state);return d.default.createElement("span",(0,r.default)({},n,{onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,style:i((0,c.default)(a.root,t))}))}}]),t}(f.Component);y.muiName="FontIcon",y.defaultProps={onMouseEnter:function(){},onMouseLeave:function(){}},y.contextTypes={muiTheme:p.default.object.isRequired},y.propTypes={},t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=n(140),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=g(n(11)),o=g(n(10)),i=g(n(7)),a=g(n(3)),l=g(n(4)),u=g(n(6)),s=g(n(5)),c=g(n(8)),f=n(0),d=g(f),p=g(n(1)),h=g(n(14)),m=(g(n(23)),g(n(44))),y=g(n(141)),v=g(n(139)),b=n(138);function g(e){return e&&e.__esModule?e:{default:e}}var x=function(e){function t(){var e,n,r,o;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=r=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),r.state={hovered:!1,isKeyboardFocused:!1,touch:!1,tooltipShown:!1},r.handleBlur=function(e){r.hideTooltip(),r.props.onBlur&&r.props.onBlur(e)},r.handleFocus=function(e){r.showTooltip(),r.props.onFocus&&r.props.onFocus(e)},r.handleMouseLeave=function(e){r.button.isKeyboardFocused()||r.hideTooltip(),r.setState({hovered:!1}),r.props.onMouseLeave&&r.props.onMouseLeave(e)},r.handleMouseOut=function(e){r.props.disabled&&r.hideTooltip(),r.props.onMouseOut&&r.props.onMouseOut(e)},r.handleMouseEnter=function(e){r.showTooltip(),r.state.touch||r.setState({hovered:!0}),r.props.onMouseEnter&&r.props.onMouseEnter(e)},r.handleTouchStart=function(e){r.setState({touch:!0}),r.props.onTouchStart&&r.props.onTouchStart(e)},r.handleKeyboardFocus=function(e,t){var n=r.props,o=n.disabled,i=n.onFocus,a=n.onBlur,l=n.onKeyboardFocus;t&&!o?(r.showTooltip(),i&&i(e)):(r.hideTooltip(),a&&a(e)),r.setState({isKeyboardFocused:t}),l&&l(e,t)},o=n,(0,u.default)(r,o)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentWillReceiveProps",value:function(e){e.disabled&&this.setState({hovered:!1})}},{key:"setKeyboardFocus",value:function(){this.button.setKeyboardFocus()}},{key:"showTooltip",value:function(){this.props.tooltip&&this.setState({tooltipShown:!0})}},{key:"hideTooltip",value:function(){this.props.tooltip&&this.setState({tooltipShown:!1})}},{key:"render",value:function(){var e,t,n=this,i=this.props,a=i.disabled,l=i.hoveredStyle,u=i.disableTouchRipple,s=i.children,f=i.iconClassName,p=i.style,g=i.tooltip,x=i.tooltipPosition,k=i.tooltipStyles,C=i.touch,w=i.iconStyle,_=(0,o.default)(i,["disabled","hoveredStyle","disableTouchRipple","children","iconClassName","style","tooltip","tooltipPosition","tooltipStyles","touch","iconStyle"]),E=void 0,S=(this.props,e=this.context,t=e.muiTheme.baseTheme,{root:{boxSizing:"border-box",overflow:"visible",transition:h.default.easeOut(),padding:t.spacing.iconSize/2,width:2*t.spacing.iconSize,height:2*t.spacing.iconSize,fontSize:0},tooltip:{boxSizing:"border-box"},disabled:{color:t.palette.disabledColor,fill:t.palette.disabledColor,cursor:"default"}}),T=x.split("-"),O=(this.state.hovered||this.state.isKeyboardFocused)&&!a,M=(0,c.default)(S.root,p,O?l:{}),P=g?d.default.createElement(v.default,{label:g,show:this.state.tooltipShown,touch:C,style:(0,c.default)(S.tooltip,k),verticalPosition:T[0],horizontalPosition:T[1]}):null;if(f){var I=w.iconHoverColor,R=(0,o.default)(w,["iconHoverColor"]);E=d.default.createElement(y.default,{className:f,hoverColor:a?null:I,style:(0,c.default)({},a&&S.disabled,R),color:this.context.muiTheme.baseTheme.palette.textColor},s)}var F=a?(0,c.default)({},w,S.disabled):w;return d.default.createElement(m.default,(0,r.default)({ref:function(e){return n.button=e}},_,{centerRipple:!0,disabled:a,onTouchStart:this.handleTouchStart,style:M,disableTouchRipple:u,onBlur:this.handleBlur,onFocus:this.handleFocus,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,onMouseOut:this.handleMouseOut,onKeyboardFocus:this.handleKeyboardFocus}),P,E,(0,b.extendChildren)(s,{style:F}))}}]),t}(f.Component);x.muiName="IconButton",x.defaultProps={disabled:!1,disableTouchRipple:!1,iconStyle:{},tooltipPosition:"bottom-center",touch:!1},x.contextTypes={muiTheme:p.default.object.isRequired},x.propTypes={},t.default=x},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=b(n(11)),o=b(n(10)),i=b(n(7)),a=b(n(3)),l=b(n(4)),u=b(n(6)),s=b(n(5)),c=b(n(8)),f=n(0),d=b(f),p=b(n(1)),h=b(n(12)),m=b(n(26)),y=b(n(43)),v=b(n(14));function b(e){return e&&e.__esModule?e:{default:e}}var g=function(e){function t(){return(0,a.default)(this,t),(0,u.default)(this,(t.__proto__||(0,i.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"shouldComponentUpdate",value:function(e){return!(0,m.default)(this.props,e)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.enterTimer),clearTimeout(this.leaveTimer)}},{key:"componentWillAppear",value:function(e){this.initializeAnimation(e)}},{key:"componentWillEnter",value:function(e){this.initializeAnimation(e)}},{key:"componentDidAppear",value:function(){this.animate()}},{key:"componentDidEnter",value:function(){this.animate()}},{key:"componentWillLeave",value:function(e){h.default.findDOMNode(this).style.opacity=0;var t=this.props.aborted?0:2e3;this.enterTimer=setTimeout(e,t)}},{key:"animate",value:function(){var e=h.default.findDOMNode(this).style,t=v.default.easeOut("2s","opacity")+", "+v.default.easeOut("1s","transform");y.default.set(e,"transition",t),y.default.set(e,"transform","scale(1)")}},{key:"initializeAnimation",value:function(e){var t=h.default.findDOMNode(this).style;t.opacity=this.props.opacity,y.default.set(t,"transform","scale(0)"),this.leaveTimer=setTimeout(e,0)}},{key:"render",value:function(){var e=this.props,t=(e.aborted,e.color),n=(e.opacity,e.style),i=(e.touchGenerated,(0,o.default)(e,["aborted","color","opacity","style","touchGenerated"])),a=this.context.muiTheme.prepareStyles,l=(0,c.default)({position:"absolute",top:0,left:0,height:"100%",width:"100%",borderRadius:"50%",backgroundColor:t},n);return d.default.createElement("div",(0,r.default)({},i,{style:a(l)}))}}]),t}(f.Component);g.defaultProps={opacity:.1,aborted:!1},g.contextTypes={muiTheme:p.default.object.isRequired},g.propTypes={},t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=b(n(93)),o=b(n(7)),i=b(n(3)),a=b(n(4)),l=b(n(6)),u=b(n(5)),s=b(n(83)),c=b(n(8)),f=n(0),d=b(f),p=b(n(1)),h=b(n(12)),m=b(n(75)),y=b(n(79)),v=b(n(143));function b(e){return e&&e.__esModule?e:{default:e}}var g=function(e){return(0,s.default)(e).slice(1)},x=function(e){function t(e,n){(0,i.default)(this,t);var a=(0,l.default)(this,(t.__proto__||(0,o.default)(t)).call(this,e,n));return a.handleMouseDown=function(e){0===e.button&&a.start(e,!1)},a.handleMouseUp=function(){a.end()},a.handleMouseLeave=function(){a.end()},a.handleTouchStart=function(e){e.stopPropagation(),a.props.abortOnScroll&&e.touches&&(a.startListeningForScrollAbort(e),a.startTime=Date.now()),a.start(e,!0)},a.handleTouchEnd=function(){a.end()},a.handleTouchMove=function(e){if(Math.abs(Date.now()-a.startTime)>300)a.stopListeningForScrollAbort();else{var t=Math.abs(e.touches[0].clientY-a.firstTouchY),n=Math.abs(e.touches[0].clientX-a.firstTouchX);if(t>6||n>6){var o=a.state.ripples,i=o[0],l=d.default.cloneElement(i,{aborted:!0});o=g(o),o=[].concat((0,r.default)(o),[l]),a.setState({ripples:o},function(){a.end()})}}},a.ignoreNextMouseDown=!1,a.state={hasRipples:!1,nextKey:0,ripples:[]},a}return(0,u.default)(t,e),(0,a.default)(t,[{key:"start",value:function(e,t){var n=this.context.muiTheme.ripple;if(!this.ignoreNextMouseDown||t){var o=this.state.ripples;o=[].concat((0,r.default)(o),[d.default.createElement(v.default,{key:this.state.nextKey,style:this.props.centerRipple?{}:this.getRippleStyle(e),color:this.props.color||n.color,opacity:this.props.opacity,touchGenerated:t})]),this.ignoreNextMouseDown=t,this.setState({hasRipples:!0,nextKey:this.state.nextKey+1,ripples:o})}else this.ignoreNextMouseDown=!1}},{key:"end",value:function(){var e=this.state.ripples;this.setState({ripples:g(e)}),this.props.abortOnScroll&&this.stopListeningForScrollAbort()}},{key:"startListeningForScrollAbort",value:function(e){this.firstTouchY=e.touches[0].clientY,this.firstTouchX=e.touches[0].clientX,document.body.addEventListener("touchmove",this.handleTouchMove)}},{key:"stopListeningForScrollAbort",value:function(){document.body.removeEventListener("touchmove",this.handleTouchMove)}},{key:"getRippleStyle",value:function(e){var t=h.default.findDOMNode(this),n=t.offsetHeight,r=t.offsetWidth,o=y.default.offset(t),i=e.touches&&e.touches.length,a=i?e.touches[0].pageX:e.pageX,l=i?e.touches[0].pageY:e.pageY,u=a-o.left,s=l-o.top,c=this.calcDiag(u,s),f=this.calcDiag(r-u,s),d=this.calcDiag(r-u,n-s),p=this.calcDiag(u,n-s),m=Math.max(c,f,d,p),v=2*m;return{directionInvariant:!0,height:v,width:v,top:s-m,left:u-m}}},{key:"calcDiag",value:function(e,t){return Math.sqrt(e*e+t*t)}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.style,r=this.state,o=r.hasRipples,i=r.ripples,a=this.context.muiTheme.prepareStyles,l=void 0;if(o){var u=(0,c.default)({height:"100%",width:"100%",position:"absolute",top:0,left:0,overflow:"hidden",pointerEvents:"none",zIndex:1},n);l=d.default.createElement(m.default,{style:a(u)},i)}return d.default.createElement("div",{onMouseUp:this.handleMouseUp,onMouseDown:this.handleMouseDown,onMouseLeave:this.handleMouseLeave,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd},l,t)}}]),t}(f.Component);x.defaultProps={abortOnScroll:!0},x.contextTypes={muiTheme:p.default.object.isRequired},x.propTypes={},t.default=x},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=v(n(11)),o=v(n(10)),i=v(n(7)),a=v(n(3)),l=v(n(4)),u=v(n(6)),s=v(n(5)),c=v(n(8)),f=n(0),d=v(f),p=v(n(1)),h=v(n(12)),m=v(n(43)),y=v(n(14));function v(e){return e&&e.__esModule?e:{default:e}}var b=function(e){function t(){return(0,a.default)(this,t),(0,u.default)(this,(t.__proto__||(0,i.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentWillUnmount",value:function(){clearTimeout(this.enterTimer),clearTimeout(this.leaveTimer)}},{key:"componentWillAppear",value:function(e){this.initializeAnimation(e)}},{key:"componentWillEnter",value:function(e){this.initializeAnimation(e)}},{key:"componentDidAppear",value:function(){this.animate()}},{key:"componentDidEnter",value:function(){this.animate()}},{key:"componentWillLeave",value:function(e){var t=h.default.findDOMNode(this).style;t.opacity="0",m.default.set(t,"transform","scale("+this.props.minScale+")"),this.leaveTimer=setTimeout(e,450)}},{key:"animate",value:function(){var e=h.default.findDOMNode(this).style;e.opacity="1",m.default.set(e,"transform","scale("+this.props.maxScale+")")}},{key:"initializeAnimation",value:function(e){var t=h.default.findDOMNode(this).style;t.opacity="0",m.default.set(t,"transform","scale(0)"),this.enterTimer=setTimeout(e,this.props.enterDelay)}},{key:"render",value:function(){var e=this.props,t=e.children,n=(e.enterDelay,e.maxScale,e.minScale,e.style),i=(0,o.default)(e,["children","enterDelay","maxScale","minScale","style"]),a=this.context.muiTheme.prepareStyles,l=(0,c.default)({},{position:"absolute",height:"100%",width:"100%",top:0,left:0,transition:y.default.easeOut(null,["transform","opacity"])},n);return d.default.createElement("div",(0,r.default)({},i,{style:a(l)}),t)}}]),t}(f.Component);b.defaultProps={enterDelay:0,maxScale:1,minScale:0},b.contextTypes={muiTheme:p.default.object.isRequired},b.propTypes={},t.default=b},function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=function(e){if(!e)return e;var t={};return r.Children.map(e,function(e){return e}).forEach(function(e){t[e.key]=e}),t},t.mergeChildMappings=function(e,t){function n(n){return t.hasOwnProperty(n)?t[n]:e[n]}e=e||{},t=t||{};var r={},o=[];for(var i in e)t.hasOwnProperty(i)?o.length&&(r[i]=o,o=[]):o.push(i);var a=void 0,l={};for(var u in t){if(r.hasOwnProperty(u))for(a=0;a<r[u].length;a++){var s=r[u][a];l[r[u][a]]=n(s)}l[u]=n(u)}for(a=0;a<o.length;a++)l[o[a]]=n(o[a]);return l};var r=n(0)},function(e,t){e.exports=function(){for(var e=arguments.length,t=[],n=0;n<e;n++)t[n]=arguments[n];if(0!==(t=t.filter(function(e){return null!=e})).length)return 1===t.length?t[0]:t.reduce(function(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=y(n(11)),o=y(n(10)),i=y(n(7)),a=y(n(3)),l=y(n(4)),u=y(n(6)),s=y(n(5)),c=y(n(8)),f=n(0),d=y(f),p=y(n(1)),h=y(n(75)),m=y(n(145));function y(e){return e&&e.__esModule?e:{default:e}}var v=function(e){function t(){return(0,a.default)(this,t),(0,u.default)(this,(t.__proto__||(0,i.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.childStyle,i=e.enterDelay,a=e.maxScale,l=e.minScale,u=e.style,s=(0,o.default)(e,["children","childStyle","enterDelay","maxScale","minScale","style"]),f=this.context.muiTheme.prepareStyles,p=(0,c.default)({},{position:"relative",height:"100%"},u),y=d.default.Children.map(t,function(e){return d.default.createElement(m.default,{key:e.key,enterDelay:i,maxScale:a,minScale:l,style:n},e)});return d.default.createElement(h.default,(0,r.default)({},s,{style:f(p),component:"div"}),y)}}]),t}(f.Component);v.defaultProps={enterDelay:0},v.contextTypes={muiTheme:p.default.object.isRequired},v.propTypes={},t.default=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=v(n(7)),o=v(n(3)),i=v(n(4)),a=v(n(6)),l=v(n(5)),u=v(n(8)),s=n(0),c=v(s),f=v(n(1)),d=v(n(12)),p=v(n(26)),h=v(n(43)),m=v(n(14)),y=v(n(148));function v(e){return e&&e.__esModule?e:{default:e}}var b=750,g=function(e){function t(){var e,n,i,l;(0,o.default)(this,t);for(var u=arguments.length,s=Array(u),c=0;c<u;c++)s[c]=arguments[c];return n=i=(0,a.default)(this,(e=t.__proto__||(0,r.default)(t)).call.apply(e,[this].concat(s))),i.pulsate=function(){var e=d.default.findDOMNode(i.refs.innerCircle);if(e){var t="scale(1)"===(e.style.transform||"scale(1)")?"scale(0.85)":"scale(1)";h.default.set(e.style,"transform",t),i.timeout=setTimeout(i.pulsate,b)}},l=n,(0,a.default)(i,l)}return(0,l.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){this.props.show&&(this.setRippleSize(),this.pulsate())}},{key:"shouldComponentUpdate",value:function(e,t){return!(0,p.default)(this.props,e)||!(0,p.default)(this.state,t)}},{key:"componentDidUpdate",value:function(){this.props.show?(this.setRippleSize(),this.pulsate()):this.timeout&&clearTimeout(this.timeout)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeout)}},{key:"getRippleElement",value:function(e){var t=e.color,n=e.innerStyle,r=e.opacity,o=this.context.muiTheme,i=o.prepareStyles,a=o.ripple,l=(0,u.default)({position:"absolute",height:"100%",width:"100%",borderRadius:"50%",opacity:r||.16,backgroundColor:t||a.color,transition:m.default.easeOut(b+"ms","transform",null,m.default.easeInOutFunction)},n);return c.default.createElement("div",{ref:"innerCircle",style:i((0,u.default)({},l))})}},{key:"setRippleSize",value:function(){var e=d.default.findDOMNode(this.refs.innerCircle),t=e.offsetHeight,n=e.offsetWidth,r=Math.max(t,n),o=0;-1!==e.style.top.indexOf("px",e.style.top.length-2)&&(o=parseInt(e.style.top)),e.style.height=r+"px",e.style.top=t/2-r/2+o+"px"}},{key:"render",value:function(){var e=this.props,t=e.show,n=e.style,r=(0,u.default)({height:"100%",width:"100%",position:"absolute",top:0,left:0},n),o=t?this.getRippleElement(this.props):null;return c.default.createElement(y.default,{maxScale:.85,style:r},o)}}]),t}(s.Component);g.contextTypes={muiTheme:f.default.object.isRequired},g.propTypes={},t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=w(n(10)),o=w(n(11)),i=w(n(7)),a=w(n(3)),l=w(n(4)),u=w(n(6)),s=w(n(5)),c=w(n(8)),f=n(0),d=w(f),p=w(n(1)),h=w(n(12)),m=w(n(26)),y=n(39),v=w(n(14)),b=w(n(44)),g=w(n(42)),x=w(n(137)),k=w(n(136)),C=w(n(135));function w(e){return e&&e.__esModule?e:{default:e}}var _=function(e){function t(){var e,n,r,l;(0,a.default)(this,t);for(var s=arguments.length,c=Array(s),f=0;f<s;f++)c[f]=arguments[f];return n=r=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(c))),r.state={hovered:!1,isKeyboardFocused:!1,open:!1,rightIconButtonHovered:!1,rightIconButtonKeyboardFocused:!1,touch:!1},r.handleKeyboardFocus=function(e,t){r.setState({isKeyboardFocused:t}),r.props.onKeyboardFocus(e,t)},r.handleMouseEnter=function(e){r.state.touch||r.setState({hovered:!0}),r.props.onMouseEnter(e)},r.handleMouseLeave=function(e){r.setState({hovered:!1}),r.props.onMouseLeave(e)},r.handleClick=function(e){r.props.onClick&&r.props.onClick(e),r.props.primaryTogglesNestedList&&r.handleNestedListToggle(e)},r.handleNestedListToggle=function(e){r.props.leftCheckbox&&e.preventDefault(),e.stopPropagation(),null===r.props.open?r.setState({open:!r.state.open},function(){r.props.onNestedListToggle(r)}):r.props.onNestedListToggle((0,o.default)({},r,{state:{open:!r.state.open}}))},r.handleRightIconButtonKeyboardFocus=function(e,t){t&&r.setState({isKeyboardFocused:!1,rightIconButtonKeyboardFocused:t});var n=r.props.rightIconButton;n&&n.props.onKeyboardFocus&&n.props.onKeyboardFocus(e,t)},r.handleRightIconButtonMouseLeave=function(e){var t=r.props.rightIconButton;r.setState({rightIconButtonHovered:!1}),t&&t.props.onMouseLeave&&t.props.onMouseLeave(e)},r.handleRightIconButtonMouseEnter=function(e){var t=r.props.rightIconButton;r.setState({rightIconButtonHovered:!0}),t&&t.props.onMouseEnter&&t.props.onMouseEnter(e)},r.handleRightIconButtonMouseUp=function(e){var t=r.props.rightIconButton;e.stopPropagation(),t&&t.props.onMouseUp&&t.props.onMouseUp(e)},r.handleRightIconButtonClick=function(e){var t=r.props.rightIconButton;e.stopPropagation(),t&&t.props.onClick&&t.props.onClick(e)},r.handleTouchStart=function(e){r.setState({touch:!0}),r.props.onTouchStart(e)},r.handleTouchEnd=function(e){r.setState({touch:!0}),r.props.onTouchEnd(e)},l=n,(0,u.default)(r,l)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentWillMount",value:function(){this.setState({open:null===this.props.open?!0===this.props.initiallyOpen:this.props.open})}},{key:"componentWillReceiveProps",value:function(e){null!==e.open&&this.setState({open:e.open}),e.disabled&&this.state.hovered&&this.setState({hovered:!1})}},{key:"shouldComponentUpdate",value:function(e,t,n){return!(0,m.default)(this.props,e)||!(0,m.default)(this.state,t)||!(0,m.default)(this.context,n)}},{key:"applyFocusState",value:function(e){if(this.button){var t=h.default.findDOMNode(this.button);switch(e){case"none":t.blur();break;case"focused":t.focus();break;case"keyboard-focused":this.button.setKeyboardFocus(),t.focus()}}}},{key:"createDisabledElement",value:function(e,t,n){var r=this.props,i=r.innerDivStyle,a=r.style,l=(0,c.default)({},e.root,e.innerDiv,i,a);return d.default.createElement("div",(0,o.default)({},n,{style:this.context.muiTheme.prepareStyles(l)}),t)}},{key:"createLabelElement",value:function(e,t,n){var r=this.props,i=r.innerDivStyle,a=r.style,l=(0,c.default)({},e.root,e.innerDiv,i,e.label,a);return d.default.createElement("label",(0,o.default)({},n,{style:this.context.muiTheme.prepareStyles(l)}),t)}},{key:"createTextElement",value:function(e,t,n){var r=this.context.muiTheme.prepareStyles;if(d.default.isValidElement(t)){var o=(0,c.default)({},e,t.props.style);return"string"==typeof t.type&&(o=r(o)),d.default.cloneElement(t,{key:n,style:o})}return d.default.createElement("div",{key:n,style:r(e)},t)}},{key:"pushElement",value:function(e,t,n,r){if(t){var i=(0,c.default)({},n,t.props.style);e.push(d.default.cloneElement(t,(0,o.default)({key:e.length,style:i},r)))}}},{key:"render",value:function(){var e=this,t=this.props,n=t.autoGenerateNestedIndicator,i=t.children,a=t.containerElement,l=t.disabled,u=t.disableKeyboardFocus,s=(t.hoverColor,t.initiallyOpen,t.innerDivStyle),f=(t.insetChildren,t.leftAvatar),p=t.leftCheckbox,h=t.leftIcon,m=t.nestedItems,w=t.nestedLevel,_=t.nestedListStyle,E=(t.onKeyboardFocus,t.isKeyboardFocused,t.onMouseEnter,t.onMouseLeave,t.onNestedListToggle,t.onTouchStart,t.onClick,t.rightAvatar),S=t.rightIcon,T=t.rightIconButton,O=t.rightToggle,M=t.primaryText,P=t.primaryTogglesNestedList,I=t.secondaryText,R=(t.secondaryTextLines,t.style),F=(0,r.default)(t,["autoGenerateNestedIndicator","children","containerElement","disabled","disableKeyboardFocus","hoverColor","initiallyOpen","innerDivStyle","insetChildren","leftAvatar","leftCheckbox","leftIcon","nestedItems","nestedLevel","nestedListStyle","onKeyboardFocus","isKeyboardFocused","onMouseEnter","onMouseLeave","onNestedListToggle","onTouchStart","onClick","rightAvatar","rightIcon","rightIconButton","rightToggle","primaryText","primaryTogglesNestedList","secondaryText","secondaryTextLines","style"]),j=this.context.muiTheme.prepareStyles,A=function(e,t,n){var r=e.autoGenerateNestedIndicator,o=e.insetChildren,i=e.leftAvatar,a=e.leftCheckbox,l=e.leftIcon,u=e.nestedItems,s=e.nestedLevel,c=e.rightAvatar,f=e.rightIcon,d=e.rightIconButton,p=e.rightToggle,h=e.secondaryText,m=e.secondaryTextLines,b=t.muiTheme,g=b.listItem,x=b.baseTheme.palette.textColor,k=e.hoverColor||(0,y.fade)(x,.1),C=!h&&(i||c),w=!h&&!(i||c),_=h&&1===m,E=h&&m>1;return{root:{backgroundColor:!(void 0!==e.isKeyboardFocused?e:n).isKeyboardFocused&&!n.hovered||n.rightIconButtonHovered||n.rightIconButtonKeyboardFocused?null:k,color:x,display:"block",fontSize:16,lineHeight:"16px",position:"relative",transition:v.default.easeOut()},innerDiv:{marginLeft:s*g.nestedLevelDepth,paddingLeft:l||i||a||o?72:16,paddingRight:f||c||d||u.length&&r?56:p?72:16,paddingBottom:C?20:16,paddingTop:w||E?16:20,position:"relative"},icons:{height:24,width:24,display:"block",position:"absolute",top:_?12:C?4:0,margin:12},leftIcon:{left:4},rightIcon:{right:4},avatars:{position:"absolute",top:C?8:16},label:{cursor:"pointer"},leftAvatar:{left:16},rightAvatar:{right:16},leftCheckbox:{position:"absolute",display:"block",width:24,top:_?24:C?16:12,left:16},primaryText:{},rightIconButton:{position:"absolute",display:"block",top:_?12:C?4:0,right:4},rightToggle:{position:"absolute",display:"block",width:54,top:_?25:C?17:13,right:8},secondaryText:{fontSize:14,lineHeight:E?"18px":"16px",height:E?36:16,margin:0,marginTop:4,color:g.secondaryTextColor,overflow:"hidden",textOverflow:"ellipsis",whiteSpace:E?null:"nowrap",display:E?"-webkit-box":null,WebkitLineClamp:E?2:null,WebkitBoxOrient:E?"vertical":null}}}(this.props,this.context,this.state),D=[i];if(h){var L={color:h.props.color||this.context.muiTheme.listItem.leftIconColor};this.pushElement(D,h,(0,c.default)({},A.icons,A.leftIcon),L)}if(S){var N={color:S.props.color||this.context.muiTheme.listItem.rightIconColor};this.pushElement(D,S,(0,c.default)({},A.icons,A.rightIcon),N)}f&&this.pushElement(D,f,(0,c.default)({},A.avatars,A.leftAvatar)),E&&this.pushElement(D,E,(0,c.default)({},A.avatars,A.rightAvatar)),p&&this.pushElement(D,p,(0,c.default)({},A.leftCheckbox));var W=m.length&&n&&!(E||S||T||O);if(T||W){var z=T,B={onKeyboardFocus:this.handleRightIconButtonKeyboardFocus,onMouseEnter:this.handleRightIconButtonMouseEnter,onMouseLeave:this.handleRightIconButtonMouseLeave,onClick:this.handleRightIconButtonClick,onMouseDown:this.handleRightIconButtonMouseUp,onMouseUp:this.handleRightIconButtonMouseUp};W&&(z=this.state.open?d.default.createElement(g.default,null,d.default.createElement(x.default,null)):d.default.createElement(g.default,null,d.default.createElement(k.default,null)),B.onClick=this.handleNestedListToggle),this.pushElement(D,z,(0,c.default)({},A.rightIconButton),B)}if(O&&this.pushElement(D,O,(0,c.default)({},A.rightToggle)),M){var U=this.createTextElement(A.primaryText,M,"primaryText");D.push(U)}if(I){var H=this.createTextElement(A.secondaryText,I,"secondaryText");D.push(H)}var K=m.length?d.default.createElement(C.default,{nestedLevel:w,open:this.state.open,style:_},m):void 0,V=!P&&(p||O);return d.default.createElement("div",null,V?this.createLabelElement(A,D,F):l?this.createDisabledElement(A,D,F):d.default.createElement(b.default,(0,o.default)({containerElement:a},F,{disableKeyboardFocus:u||this.state.rightIconButtonKeyboardFocused,onKeyboardFocus:this.handleKeyboardFocus,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd,onClick:this.handleClick,disabled:l,ref:function(t){return e.button=t},style:(0,c.default)({},A.root,R)}),d.default.createElement("div",{style:j((0,c.default)(A.innerDiv,s))},D)),K)}}]),t}(f.Component);_.muiName="ListItem",_.defaultProps={autoGenerateNestedIndicator:!0,containerElement:"span",disableKeyboardFocus:!1,disabled:!1,initiallyOpen:!1,insetChildren:!1,nestedItems:[],nestedLevel:0,onKeyboardFocus:function(){},onMouseEnter:function(){},onMouseLeave:function(){},onNestedListToggle:function(){},onTouchEnd:function(){},onTouchStart:function(){},open:null,primaryTogglesNestedList:!1,secondaryTextLines:1},_.contextTypes={muiTheme:p.default.object.isRequired},_.propTypes={},t.default=_},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=m(n(11)),o=m(n(10)),i=m(n(7)),a=m(n(3)),l=m(n(4)),u=m(n(6)),s=m(n(5)),c=m(n(8)),f=n(0),d=m(f),p=m(n(1)),h=m(n(14));function m(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){var e,n,r,o;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=r=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),r.state={hovered:!1},r.handleMouseLeave=function(e){r.setState({hovered:!1}),r.props.onMouseLeave(e)},r.handleMouseEnter=function(e){r.setState({hovered:!0}),r.props.onMouseEnter(e)},o=n,(0,u.default)(r,o)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.color,i=e.hoverColor,a=(e.onMouseEnter,e.onMouseLeave,e.style),l=e.viewBox,u=(0,o.default)(e,["children","color","hoverColor","onMouseEnter","onMouseLeave","style","viewBox"]),s=this.context.muiTheme,f=s.svgIcon,p=s.prepareStyles,m=n||"currentColor",y=i||m,v=(0,c.default)({display:"inline-block",color:f.color,fill:this.state.hovered?y:m,height:24,width:24,userSelect:"none",transition:h.default.easeOut()},a);return d.default.createElement("svg",(0,r.default)({},u,{onMouseEnter:this.handleMouseEnter,onMouseLeave:this.handleMouseLeave,style:p(v),viewBox:l}),t)}}]),t}(f.Component);y.muiName="SvgIcon",y.defaultProps={onMouseEnter:function(){},onMouseLeave:function(){},viewBox:"0 0 24 24"},y.contextTypes={muiTheme:p.default.object.isRequired},y.propTypes={},t.default=y},function(e,t,n){"use strict";t.__esModule=!0;t.default=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":void 0}},function(e,t,n){"use strict";t.__esModule=!0;t.default=function(e,t){return function(n){return n[e]=t,n}}},function(e,t,n){"use strict";t.__esModule=!0;var r=n(0);o(n(77)),o(n(76));function o(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return function(t){var n=(0,r.createFactory)(t);return function(t){function r(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,t.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,t),r.prototype.shouldComponentUpdate=function(t){return e(this.props,t)},r.prototype.render=function(){return n(this.props)},r}(r.Component)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),o=a(n(38)),i=a(n(37));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){return r.default.createElement(i.default,e,r.default.createElement("path",{d:"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"}))};(l=(0,o.default)(l)).displayName="NavigationCheck",l.muiName="SvgIcon",t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=h(n(7)),o=h(n(3)),i=h(n(4)),a=h(n(6)),l=h(n(5)),u=h(n(8)),s=h(n(14)),c=n(0),f=h(c),d=h(n(1)),p=(h(n(23)),h(n(45)));function h(e){return e&&e.__esModule?e:{default:e}}var m=function(e){function t(){var e,n,i,l;(0,o.default)(this,t);for(var u=arguments.length,s=Array(u),c=0;c<u;c++)s[c]=arguments[c];return n=i=(0,a.default)(this,(e=t.__proto__||(0,r.default)(t)).call.apply(e,[this].concat(s))),i.state={open:!1},l=n,(0,a.default)(i,l)}return(0,l.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){this.setState({open:!0})}},{key:"componentWillReceiveProps",value:function(e){this.setState({open:e.open})}},{key:"render",value:function(){var e,t,n,r,o,i,a,l=this.props,c=l.className,d=l.style,h=l.zDepth,m=this.context.muiTheme.prepareStyles,y=(e=this.props,t=this.context,n=this.state,r=e.targetOrigin,o=n.open,i=t.muiTheme,a=r.horizontal.replace("middle","vertical"),{root:{position:"fixed",zIndex:i.zIndex.popover,opacity:o?1:0,transform:o?"scale(1, 1)":"scale(0, 0)",transformOrigin:a+" "+r.vertical,transition:s.default.easeOut("250ms",["transform","opacity"]),maxHeight:"100%"},horizontal:{maxHeight:"100%",overflowY:"auto",transform:o?"scaleX(1)":"scaleX(0)",opacity:o?1:0,transformOrigin:a+" "+r.vertical,transition:s.default.easeOut("250ms",["transform","opacity"])},vertical:{opacity:o?1:0,transform:o?"scaleY(1)":"scaleY(0)",transformOrigin:a+" "+r.vertical,transition:s.default.easeOut("500ms",["transform","opacity"])}});return f.default.createElement(p.default,{style:(0,u.default)(y.root,d),zDepth:h,className:c},f.default.createElement("div",{style:m(y.horizontal)},f.default.createElement("div",{style:m(y.vertical)},this.props.children)))}}]),t}(c.Component);m.defaultProps={style:{},zDepth:1},m.contextTypes={muiTheme:d.default.object.isRequired},m.propTypes={},t.default=m},function(e,t,n){(function(t){var n="Expected a function",r=NaN,o="[object Symbol]",i=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,l=/^0b[01]+$/i,u=/^0o[0-7]+$/i,s=parseInt,c="object"==typeof t&&t&&t.Object===Object&&t,f="object"==typeof self&&self&&self.Object===Object&&self,d=c||f||Function("return this")(),p=Object.prototype.toString,h=Math.max,m=Math.min,y=function(){return d.Date.now()};function v(e,t,r){var o,i,a,l,u,s,c=0,f=!1,d=!1,p=!0;if("function"!=typeof e)throw new TypeError(n);function v(t){var n=o,r=i;return o=i=void 0,c=t,l=e.apply(r,n)}function x(e){var n=e-s;return void 0===s||n>=t||n<0||d&&e-c>=a}function k(){var e=y();if(x(e))return C(e);u=setTimeout(k,function(e){var n=t-(e-s);return d?m(n,a-(e-c)):n}(e))}function C(e){return u=void 0,p&&o?v(e):(o=i=void 0,l)}function w(){var e=y(),n=x(e);if(o=arguments,i=this,s=e,n){if(void 0===u)return function(e){return c=e,u=setTimeout(k,t),f?v(e):l}(s);if(d)return u=setTimeout(k,t),v(s)}return void 0===u&&(u=setTimeout(k,t)),l}return t=g(t)||0,b(r)&&(f=!!r.leading,a=(d="maxWait"in r)?h(g(r.maxWait)||0,t):a,p="trailing"in r?!!r.trailing:p),w.cancel=function(){void 0!==u&&clearTimeout(u),c=0,o=s=i=u=void 0},w.flush=function(){return void 0===u?l:C(y())},w}function b(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function g(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&p.call(e)==o}(e))return r;if(b(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=b(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(i,"");var n=l.test(e);return n||u.test(e)?s(e.slice(2),n?2:8):a.test(e)?r:+e}e.exports=function(e,t,r){var o=!0,i=!0;if("function"!=typeof e)throw new TypeError(n);return b(r)&&(o="leading"in r?!!r.leading:o,i="trailing"in r?!!r.trailing:i),v(e,t,{leading:o,maxWait:t,trailing:i})}}).call(this,n(91))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=m(n(11)),o=m(n(10)),i=m(n(7)),a=m(n(3)),l=m(n(4)),u=m(n(6)),s=m(n(5)),c=m(n(8)),f=n(0),d=m(f),p=m(n(1)),h=(m(n(23)),m(n(14)));function m(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){return(0,a.default)(this,t),(0,u.default)(this,(t.__proto__||(0,i.default)(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,l.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=(e.circle,e.rounded,e.style),i=(e.transitionEnabled,e.zDepth,(0,o.default)(e,["children","circle","rounded","style","transitionEnabled","zDepth"])),a=this.context.muiTheme.prepareStyles,l=function(e,t){var n=e.rounded,r=e.circle,o=e.transitionEnabled,i=e.zDepth,a=t.muiTheme,l=a.baseTheme,u=a.paper,s=a.borderRadius;return{root:{color:u.color,backgroundColor:u.backgroundColor,transition:o&&h.default.easeOut(),boxSizing:"border-box",fontFamily:l.fontFamily,WebkitTapHighlightColor:"rgba(0,0,0,0)",boxShadow:u.zDepthShadows[i-1],borderRadius:r?"50%":n?s:"0px"}}}(this.props,this.context);return d.default.createElement("div",(0,r.default)({},i,{style:a((0,c.default)(l.root,n))}),t)}}]),t}(f.Component);y.defaultProps={circle:!1,rounded:!0,transitionEnabled:!0,zDepth:1},y.contextTypes={muiTheme:p.default.object.isRequired},y.propTypes={},t.default=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=d(n(7)),o=d(n(3)),i=d(n(4)),a=d(n(6)),l=d(n(5)),u=n(0),s=d(n(1)),c=n(12),f=d(n(79));function d(e){return e&&e.__esModule?e:{default:e}}var p=function(e){function t(){var e,n,i,l;(0,o.default)(this,t);for(var u=arguments.length,s=Array(u),c=0;c<u;c++)s[c]=arguments[c];return n=i=(0,a.default)(this,(e=t.__proto__||(0,r.default)(t)).call.apply(e,[this].concat(s))),i.onClickAway=function(e){if(!e.defaultPrevented&&i.props.componentClickAway&&i.props.open){var t=i.layer;(e.target!==t&&e.target===window||document.documentElement.contains(e.target)&&!f.default.isDescendant(t,e.target))&&i.props.componentClickAway(e)}},l=n,(0,a.default)(i,l)}return(0,l.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){this.renderLayer()}},{key:"componentDidUpdate",value:function(){this.renderLayer()}},{key:"componentWillUnmount",value:function(){this.unrenderLayer()}},{key:"getLayer",value:function(){return this.layer}},{key:"unrenderLayer",value:function(){this.layer&&(this.props.useLayerForClickAway?(this.layer.style.position="relative",this.layer.removeEventListener("click",this.onClickAway)):window.removeEventListener("click",this.onClickAway),(0,c.unmountComponentAtNode)(this.layer),document.body.removeChild(this.layer),this.layer=null)}},{key:"renderLayer",value:function(){var e=this,t=this.props,n=t.open,r=t.render;if(n){this.layer||(this.layer=document.createElement("div"),document.body.appendChild(this.layer),this.props.useLayerForClickAway?(this.layer.addEventListener("click",this.onClickAway),this.layer.style.position="fixed",this.layer.style.top=0,this.layer.style.bottom=0,this.layer.style.left=0,this.layer.style.right=0,this.layer.style.zIndex=this.context.muiTheme.zIndex.layer):setTimeout(function(){window.addEventListener("click",e.onClickAway)},0));var o=r();this.layerElement=(0,c.unstable_renderSubtreeIntoContainer)(this,o,this.layer)}else this.unrenderLayer()}},{key:"render",value:function(){return null}}]),t}(u.Component);p.defaultProps={useLayerForClickAway:!0},p.contextTypes={muiTheme:s.default.object.isRequired},p.propTypes={},t.default=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.passiveOption=void 0;var r,o=n(102),i=(r=o)&&r.__esModule?r:{default:r};var a;t.passiveOption=(a=null,function(){if(null!==a)return a;var e,t,n,r=!1;try{window.addEventListener("test",null,(e={},t="passive",n={get:function(){r=!0}},(0,i.default)(e,t,n)))}catch(e){}return a=r,r}());t.default={}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=m(n(7)),o=m(n(3)),i=m(n(4)),a=m(n(6)),l=m(n(5)),u=m(n(59)),s=m(n(86)),c=m(n(10)),f=m(n(85));t.withOptions=function(e,t){return{handler:e,options:v(t)}};var d=m(n(0)),p=(m(n(1)),m(n(67))),h=(m(n(2)),n(160));function m(e){return e&&e.__esModule?e:{default:e}}var y={capture:!1,passive:!1};function v(e){return(0,f.default)({},y,e)}function b(e,t,n){var r=[e,t];return r.push(h.passiveOption?n:n.capture),r}function g(e,t,n,r){e.addEventListener.apply(e,b(t,n,r))}function x(e,t,n,r){e.removeEventListener.apply(e,b(t,n,r))}var k=function(e){function t(){return(0,o.default)(this,t),(0,a.default)(this,(t.__proto__||(0,r.default)(t)).apply(this,arguments))}return(0,l.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){this.addListeners()}},{key:"shouldComponentUpdate",value:function(e){return!(0,p.default)(this.props,e)}},{key:"componentWillUpdate",value:function(){this.removeListeners()}},{key:"componentDidUpdate",value:function(){this.addListeners()}},{key:"componentWillUnmount",value:function(){this.removeListeners()}},{key:"addListeners",value:function(){this.applyListeners(g)}},{key:"removeListeners",value:function(){this.applyListeners(x)}},{key:"applyListeners",value:function(e){var t=this.props.target;if(t){var n=t;"string"==typeof t&&(n=window[t]),function(e,t){e.children,e.target;var n=(0,c.default)(e,["children","target"]);(0,s.default)(n).forEach(function(e){if("on"===e.substring(0,2)){var r=n[e],o=void 0===r?"undefined":(0,u.default)(r),i="object"===o;if(i||"function"===o){var a="capture"===e.substr(-7).toLowerCase(),l=e.substring(2).toLowerCase();l=a?l.substring(0,l.length-7):l,i?t(l,r.handler,r.options):t(l,r,v({capture:a}))}}})}(this.props,e.bind(null,n))}}},{key:"render",value:function(){return this.props.children||null}}]),t}(d.default.Component);k.propTypes={},t.default=k},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HotKeyHolder=void 0;var r=i(n(3)),o=i(n(4));function i(e){return e&&e.__esModule?e:{default:e}}t.HotKeyHolder=function(){function e(){var t=this;(0,r.default)(this,e),this.clear=function(){t.timerId=null,t.lastKeys=null}}return(0,o.default)(e,[{key:"append",value:function(e){return clearTimeout(this.timerId),this.timerId=setTimeout(this.clear,500),this.lastKeys=(this.lastKeys||"")+e}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(11)),o=u(n(10)),i=u(n(8)),a=u(n(0)),l=u(n(1));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e,t){var n=e.children,l=e.inset,u=e.style,s=(0,o.default)(e,["children","inset","style"]),c=t.muiTheme,f=c.prepareStyles,d=c.subheader,p={root:{boxSizing:"border-box",color:d.color,fontSize:14,fontWeight:d.fontWeight,lineHeight:"48px",paddingLeft:l?72:16,width:"100%"}};return a.default.createElement("div",(0,r.default)({},s,{style:f((0,i.default)(p.root,u))}),n)};s.muiName="Subheader",s.propTypes={},s.defaultProps={inset:!1},s.contextTypes={muiTheme:l.default.object.isRequired},t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=n(163),i=(r=o)&&r.__esModule?r:{default:r};t.default=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=f(n(7)),o=f(n(3)),i=f(n(4)),a=f(n(6)),l=f(n(5)),u=n(0),s=(f(n(1)),f(n(12))),c=f(n(46));function f(e){return e&&e.__esModule?e:{default:e}}var d=function e(t,n){return null!==n&&(t===n||e(t,n.parentNode))},p=["mouseup","touchend"],h=function(e){return p.forEach(function(t){return c.default.on(document,t,e)})},m=function(e){return p.forEach(function(t){return c.default.off(document,t,e)})},y=function(e){function t(){var e,n,i,l;(0,o.default)(this,t);for(var u=arguments.length,c=Array(u),f=0;f<u;f++)c[f]=arguments[f];return n=i=(0,a.default)(this,(e=t.__proto__||(0,r.default)(t)).call.apply(e,[this].concat(c))),i.handleClickAway=function(e){if(!e.defaultPrevented&&i.isCurrentlyMounted){var t=s.default.findDOMNode(i);document.documentElement.contains(e.target)&&!d(t,e.target)&&i.props.onClickAway(e)}},l=n,(0,a.default)(i,l)}return(0,l.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){this.isCurrentlyMounted=!0,this.props.onClickAway&&h(this.handleClickAway)}},{key:"componentDidUpdate",value:function(e){e.onClickAway!==this.props.onClickAway&&(m(this.handleClickAway),this.props.onClickAway&&h(this.handleClickAway))}},{key:"componentWillUnmount",value:function(){this.isCurrentlyMounted=!1,m(this.handleClickAway)}},{key:"render",value:function(){return this.props.children}}]),t}(u.Component);y.propTypes={},t.default=y},function(e,t,n){"use strict";var r=n(33),o=n(50),i=n(40),a=n(36),l=n(97),u=Object.assign;e.exports=!u||n(29)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=u({},e)[n]||Object.keys(u({},t)).join("")!=r})?function(e,t){for(var n=a(e),u=arguments.length,s=1,c=o.f,f=i.f;u>s;)for(var d,p=l(arguments[s++]),h=c?r(p).concat(c(p)):r(p),m=h.length,y=0;m>y;)f.call(p,d=h[y++])&&(n[d]=p[d]);return n}:u},function(e,t,n){var r=n(19);r(r.S+r.F,"Object",{assign:n(166)})},function(e,t,n){n(167),e.exports=n(13).Object.assign},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=b(n(11)),o=b(n(10)),i=b(n(7)),a=b(n(3)),l=b(n(4)),u=b(n(6)),s=b(n(5)),c=b(n(8)),f=n(0),d=b(f),p=b(n(1)),h=b(n(12)),m=b(n(46)),y=(b(n(23)),b(n(84))),v=b(n(80));b(n(2));function b(e){return e&&e.__esModule?e:{default:e}}var g=function(e){function t(){var e,n,r,o;(0,a.default)(this,t);for(var l=arguments.length,s=Array(l),c=0;c<l;c++)s[c]=arguments[c];return n=r=(0,u.default)(this,(e=t.__proto__||(0,i.default)(t)).call.apply(e,[this].concat(s))),r.state={menuInitiallyKeyboardFocused:!1,open:!1},r.handleItemClick=function(e,t){if(0!==r.props.clickCloseDelay&&!t.props.hasOwnProperty("menuItems")){var n=m.default.isKeyboard(e);r.timerCloseId=setTimeout(function(){r.close(n?"enter":"itemTap",n)},r.props.clickCloseDelay)}r.props.onItemClick(e,t)},r.handleRequestClose=function(e){r.close(e)},r.handleEscKeyDownMenu=function(e){r.close("escape",e)},o=n,(0,u.default)(r,o)}return(0,s.default)(t,e),(0,l.default)(t,[{key:"componentWillReceiveProps",value:function(e){null!=e.open&&this.setState({open:e.open,anchorEl:this.refs.iconMenuContainer})}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timerCloseId)}},{key:"isOpen",value:function(){return this.state.open}},{key:"close",value:function(e,t){var n=this;this.state.open&&(null!==this.props.open?this.props.onRequestChange(!1,e):this.setState({open:!1},function(){if(t){var e=n.refs.iconButton;h.default.findDOMNode(e).focus(),e.setKeyboardFocus()}}))}},{key:"open",value:function(e,t){if(null!==this.props.open)return this.props.onRequestChange(!0,e),this.setState({menuInitiallyKeyboardFocused:m.default.isKeyboard(t),anchorEl:t.currentTarget});this.setState({open:!0,menuInitiallyKeyboardFocused:m.default.isKeyboard(t),anchorEl:t.currentTarget})}},{key:"render",value:function(){var e=this,t=this.props,n=t.anchorOrigin,i=t.className,a=t.animated,l=t.animation,u=t.iconButtonElement,s=t.iconStyle,f=(t.onItemClick,t.onKeyboardFocus),p=t.onMouseDown,h=t.onMouseLeave,b=t.onMouseEnter,g=t.onMouseUp,x=(t.onRequestChange,t.onClick),k=t.listStyle,C=t.menuStyle,w=t.style,_=t.targetOrigin,E=(t.clickCloseDelay,t.useLayerForClickAway),S=(0,o.default)(t,["anchorOrigin","className","animated","animation","iconButtonElement","iconStyle","onItemClick","onKeyboardFocus","onMouseDown","onMouseLeave","onMouseEnter","onMouseUp","onRequestChange","onClick","listStyle","menuStyle","style","targetOrigin","clickCloseDelay","useLayerForClickAway"]),T=this.context.muiTheme.prepareStyles,O=this.state,M=O.open,P=O.anchorEl,I={display:"inline-block",position:"relative"},R={position:"relative"},F=(0,c.default)(I,w),j=(0,c.default)(R,C),A={onKeyboardFocus:f,onClick:function(t){e.open(m.default.isKeyboard(t)?"keyboard":"iconTap",t),u.props.onClick&&u.props.onClick(t)},ref:"iconButton"};(s||u.props.iconStyle)&&(A.iconStyle=s?(0,c.default)({},s,u.props.iconStyle):u.props.iconStyle);var D=d.default.cloneElement(u,A),L=d.default.createElement(y.default,(0,r.default)({},S,{initiallyKeyboardFocused:this.state.menuInitiallyKeyboardFocused,onEscKeyDown:this.handleEscKeyDownMenu,onItemClick:this.handleItemClick,style:j,listStyle:k}),this.props.children);return d.default.createElement("div",{ref:"iconMenuContainer",className:i,onMouseDown:p,onMouseLeave:h,onMouseEnter:b,onMouseUp:g,onClick:x,style:T(F)},D,d.default.createElement(v.default,{anchorOrigin:n,targetOrigin:_,open:M,anchorEl:P,childContextTypes:this.constructor.childContextTypes,useLayerForClickAway:E,onRequestClose:this.handleRequestClose,animated:a,animation:l,context:this.context},L))}}]),t}(f.Component);g.muiName="IconMenu",g.defaultProps={anchorOrigin:{vertical:"top",horizontal:"left"},animated:!0,multiple:!1,open:null,onItemClick:function(){},onKeyboardFocus:function(){},onMouseDown:function(){},onMouseLeave:function(){},onMouseEnter:function(){},onMouseUp:function(){},onRequestChange:function(){},onClick:function(){},targetOrigin:{vertical:"top",horizontal:"left"},clickCloseDelay:200,useLayerForClickAway:!1},g.contextTypes={muiTheme:p.default.object.isRequired},g.propTypes={},t.default=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(3),i=(r=o)&&r.__esModule?r:{default:r},a=n(49);t.default=new function e(){(0,i.default)(this,e),this.textFullBlack=a.fullBlack,this.textDarkBlack=a.darkBlack,this.textLightBlack=a.lightBlack,this.textMinBlack=a.minBlack,this.textFullWhite=a.fullWhite,this.textDarkWhite=a.darkWhite,this.textLightWhite=a.lightWhite,this.fontWeightLight=300,this.fontWeightNormal=400,this.fontWeightMedium=500,this.fontStyleButtonFontSize=14}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(0===t.length)return function(e){return e};if(1===t.length)return t[0];return t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}},function(e,t,n){var r=n(36),o=n(33);n(105)("keys",function(){return function(e){return o(r(e))}})},function(e,t,n){n(172),e.exports=n(13).Object.keys},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(86),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){if(e.isRtl)return function(e){if(!0===e.directionInvariant)return e;var t={right:"left",left:"right",marginRight:"marginLeft",marginLeft:"marginRight",paddingRight:"paddingLeft",paddingLeft:"paddingRight",borderRight:"borderLeft",borderLeft:"borderRight"},n={};return(0,i.default)(e).forEach(function(r){var o=e[r],i=r;switch(t.hasOwnProperty(r)&&(i=t[r]),r){case"float":case"textAlign":"right"===o?o="left":"left"===o&&(o="right");break;case"direction":"ltr"===o?o="rtl":"rtl"===o&&(o="ltr");break;case"transform":if(!o)break;var u=void 0;(u=o.match(a))&&(o=o.replace(u[0],u[1]+-parseFloat(u[4]))),(u=o.match(l))&&(o=o.replace(u[0],u[1]+-parseFloat(u[4])+u[5]+u[6]?", "+(-parseFloat(u[7])+u[8]):""));break;case"transformOrigin":if(!o)break;o.indexOf("right")>-1?o=o.replace("right","left"):o.indexOf("left")>-1&&(o=o.replace("left","right"))}n[i]=o}),n}};var a=/((^|\s)translate(3d|X)?\()(\-?[\d]+)/,l=/((^|\s)skew(x|y)?\()\s*(\-?[\d]+)(deg|rad|grad)(,\s*(\-?[\d]+)(deg|rad|grad))?/},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){0};var r,o=n(2);(r=o)&&r.__esModule},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,a){if("string"==typeof t&&l.hasOwnProperty(e)){var s=function(e,t){if((0,o.default)(e))return e;for(var n=e.split(/,(?![^()]*(?:\([^()]*\))?\))/g),i=0,a=n.length;i<a;++i){var l=n[i],s=[l];for(var c in t){var f=(0,r.default)(c);if(l.indexOf(f)>-1&&"order"!==f)for(var d=t[c],p=0,h=d.length;p<h;++p)s.unshift(l.replace(f,u[d[p]]+f))}n[i]=s.join(",")}return n.join(",")}(t,a),c=s.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(e){return!/-moz-|-ms-/.test(e)}).join(",");if(e.indexOf("Webkit")>-1)return c;var f=s.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(e){return!/-webkit-|-ms-/.test(e)}).join(",");return e.indexOf("Moz")>-1?f:(n["Webkit"+(0,i.default)(e)]=c,n["Moz"+(0,i.default)(e)]=f,s)}};var r=a(n(87)),o=a(n(47)),i=a(n(48));function a(e){return e&&e.__esModule?e:{default:e}}var l={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},u={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(o.hasOwnProperty(e)&&i.hasOwnProperty(t))return r.map(function(e){return e+t})};var r=["-webkit-","-moz-",""],o={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},i={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&l.test(t))return a.map(function(e){return e+t})};var r,o=n(47),i=(r=o)&&r.__esModule?r:{default:r};var a=["-webkit-","-moz-",""],l=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?n.WebkitBoxOrient="vertical":n.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?n.WebkitBoxDirection="reverse":n.WebkitBoxDirection="normal");o.hasOwnProperty(e)&&(n[o[e]]=r[t]||t)};var r={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple"},o={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){o.hasOwnProperty(e)&&(n[o[e]]=r[t]||t)};var r={"space-around":"distribute","space-between":"justify","flex-start":"start","flex-end":"end"},o={alignContent:"msFlexLinePack",alignSelf:"msFlexItemAlign",alignItems:"msFlexAlign",justifyContent:"msFlexPack",order:"msFlexOrder",flexGrow:"msFlexPositive",flexShrink:"msFlexNegative",flexBasis:"msFlexPreferredSize"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("display"===e&&r.hasOwnProperty(t))return r[t]};var r={flex:["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex","flex"],"inline-flex":["-webkit-inline-box","-moz-inline-box","-ms-inline-flexbox","-webkit-inline-flex","inline-flex"]};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,i.default)(t)&&t.indexOf("calc(")>-1)return a.map(function(e){return t.replace(/calc\(/g,e+"calc(")})};var r,o=n(47),i=(r=o)&&r.__esModule?r:{default:r};var a=["-webkit-","-moz-",""];e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(182)),o=c(n(181)),i=c(n(180)),a=c(n(179)),l=c(n(178)),u=c(n(177)),s=c(n(176));function c(e){return e&&e.__esModule?e:{default:e}}t.default={plugins:[r.default,o.default,i.default,a.default,l.default,u.default,s.default],prefixMap:{transform:["Webkit","ms"],transformOrigin:["Webkit","ms"],transformOriginX:["Webkit","ms"],transformOriginY:["Webkit","ms"],backfaceVisibility:["Webkit"],perspective:["Webkit"],perspectiveOrigin:["Webkit"],transformStyle:["Webkit"],transformOriginZ:["Webkit"],animation:["Webkit"],animationDelay:["Webkit"],animationDirection:["Webkit"],animationFillMode:["Webkit"],animationDuration:["Webkit"],animationIterationCount:["Webkit"],animationName:["Webkit"],animationPlayState:["Webkit"],animationTimingFunction:["Webkit"],appearance:["Webkit","Moz"],userSelect:["Webkit","Moz","ms"],fontKerning:["Webkit"],textEmphasisPosition:["Webkit"],textEmphasis:["Webkit"],textEmphasisStyle:["Webkit"],textEmphasisColor:["Webkit"],boxDecorationBreak:["Webkit"],clipPath:["Webkit"],maskImage:["Webkit"],maskMode:["Webkit"],maskRepeat:["Webkit"],maskPosition:["Webkit"],maskClip:["Webkit"],maskOrigin:["Webkit"],maskSize:["Webkit"],maskComposite:["Webkit"],mask:["Webkit"],maskBorderSource:["Webkit"],maskBorderMode:["Webkit"],maskBorderSlice:["Webkit"],maskBorderWidth:["Webkit"],maskBorderOutset:["Webkit"],maskBorderRepeat:["Webkit"],maskBorder:["Webkit"],maskType:["Webkit"],textDecorationStyle:["Webkit","Moz"],textDecorationSkip:["Webkit","Moz"],textDecorationLine:["Webkit","Moz"],textDecorationColor:["Webkit","Moz"],filter:["Webkit"],fontFeatureSettings:["Webkit","Moz"],breakAfter:["Webkit","Moz","ms"],breakBefore:["Webkit","Moz","ms"],breakInside:["Webkit","Moz","ms"],columnCount:["Webkit","Moz"],columnFill:["Webkit","Moz"],columnGap:["Webkit","Moz"],columnRule:["Webkit","Moz"],columnRuleColor:["Webkit","Moz"],columnRuleStyle:["Webkit","Moz"],columnRuleWidth:["Webkit","Moz"],columns:["Webkit","Moz"],columnSpan:["Webkit","Moz"],columnWidth:["Webkit","Moz"],flex:["Webkit","ms"],flexBasis:["Webkit"],flexDirection:["Webkit","ms"],flexGrow:["Webkit"],flexFlow:["Webkit","ms"],flexShrink:["Webkit"],flexWrap:["Webkit","ms"],alignContent:["Webkit"],alignItems:["Webkit"],alignSelf:["Webkit"],justifyContent:["Webkit"],order:["Webkit"],transitionDelay:["Webkit"],transitionDuration:["Webkit"],transitionProperty:["Webkit"],transitionTimingFunction:["Webkit"],backdropFilter:["Webkit"],scrollSnapType:["Webkit","ms"],scrollSnapPointsX:["Webkit","ms"],scrollSnapPointsY:["Webkit","ms"],scrollSnapDestination:["Webkit","ms"],scrollSnapCoordinate:["Webkit","ms"],shapeImageThreshold:["Webkit"],shapeImageMargin:["Webkit"],shapeImageOutside:["Webkit"],hyphens:["Webkit","Moz","ms"],flowInto:["Webkit","ms"],flowFrom:["Webkit","ms"],regionFragment:["Webkit","ms"],boxSizing:["Moz"],textAlignLast:["Moz"],tabSize:["Moz"],wrapFlow:["ms"],wrapThrough:["ms"],wrapMargin:["ms"],touchAction:["ms"],gridTemplateColumns:["ms"],gridTemplateRows:["ms"],gridTemplateAreas:["ms"],gridTemplate:["ms"],gridAutoColumns:["ms"],gridAutoRows:["ms"],gridAutoFlow:["ms"],grid:["ms"],gridRowStart:["ms"],gridColumnStart:["ms"],gridRowEnd:["ms"],gridRow:["ms"],gridColumn:["ms"],gridColumnEnd:["ms"],gridColumnGap:["ms"],gridRowGap:["ms"],gridArea:["ms"],gridGap:["ms"],textSizeAdjust:["Webkit","ms"],borderImage:["Webkit"],borderImageOutset:["Webkit"],borderImageRepeat:["Webkit"],borderImageSlice:["Webkit"],borderImageSource:["Webkit"],borderImageWidth:["Webkit"]}}},function(e,t,n){"use strict";var r=/[A-Z]/g,o=/^ms-/,i={};e.exports=function(e){return e in i?i[e]:i[e]=e.replace(r,"-$&").toLowerCase().replace(o,"-ms-")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){var o=r.cssPrefix,u=r.keepUnprefixed,s=r.requiresPrefix;if("string"==typeof t&&a.hasOwnProperty(e)){l||(l=Object.keys(s).map(function(e){return(0,i.default)(e)}));var c=t.split(/,(?![^()]*(?:\([^()]*\))?\))/g);return l.forEach(function(e){c.forEach(function(t,n){t.indexOf(e)>-1&&"order"!==e&&(c[n]=t.replace(e,o+e)+(u?","+t:""))})}),c.join(",")}};var r,o=n(87),i=(r=o)&&r.__esModule?r:{default:r};var a={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},l=void 0;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){var o=r.cssPrefix,u=r.keepUnprefixed;if(a.hasOwnProperty(e)&&l.hasOwnProperty(t))return(0,i.default)(o+t,t,u)};var r,o=n(27),i=(r=o)&&r.__esModule?r:{default:r};var a={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},l={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){var o=r.browserName,l=r.browserVersion,u=r.cssPrefix,s=r.keepUnprefixed;if("string"==typeof t&&a.test(t)&&("firefox"===o&&l<16||"chrome"===o&&l<26||("safari"===o||"ios_saf"===o)&&l<7||("opera"===o||"op_mini"===o)&&l<12.1||"android"===o&&l<4.4||"and_uc"===o))return(0,i.default)(u+t,t,s)};var r,o=n(27),i=(r=o)&&r.__esModule?r:{default:r};var a=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){var o=r.browserName,s=r.browserVersion,c=r.cssPrefix,f=r.keepUnprefixed,d=r.requiresPrefix;if((u.indexOf(e)>-1||"display"===e&&"string"==typeof t&&t.indexOf("flex")>-1)&&("firefox"===o&&s<22||"chrome"===o&&s<21||("safari"===o||"ios_saf"===o)&&s<=6.1||"android"===o&&s<4.4||"and_uc"===o)){if(delete d[e],f||Array.isArray(n[e])||delete n[e],"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?n.WebkitBoxOrient="vertical":n.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?n.WebkitBoxDirection="reverse":n.WebkitBoxDirection="normal"),"display"===e&&a.hasOwnProperty(t))return(0,i.default)(c+a[t],t,f);l.hasOwnProperty(e)&&(n[l[e]]=a[t]||t)}};var r,o=n(27),i=(r=o)&&r.__esModule?r:{default:r};var a={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple",flex:"box","inline-flex":"inline-box"},l={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines"},u=Object.keys(l).concat(["alignContent","alignSelf","order","flexGrow","flexShrink","flexBasis","flexDirection"]);e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){var o=r.browserName,u=r.browserVersion,s=r.cssPrefix,c=r.keepUnprefixed,f=r.requiresPrefix;if((l.hasOwnProperty(e)||"display"===e&&"string"==typeof t&&t.indexOf("flex")>-1)&&("ie_mob"===o||"ie"===o)&&10===u){if(delete f[e],c||Array.isArray(n[e])||delete n[e],"display"===e&&a.hasOwnProperty(t))return(0,i.default)(s+a[t],t,c);l.hasOwnProperty(e)&&(n[l[e]]=a[t]||t)}};var r,o=n(27),i=(r=o)&&r.__esModule?r:{default:r};var a={"space-around":"distribute","space-between":"justify","flex-start":"start","flex-end":"end",flex:"flexbox","inline-flex":"inline-flexbox"},l={alignContent:"msFlexLinePack",alignSelf:"msFlexItemAlign",alignItems:"msFlexAlign",justifyContent:"msFlexPack",order:"msFlexOrder",flexGrow:"msFlexPositive",flexShrink:"msFlexNegative",flexBasis:"msFlexPreferredSize"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){var o=r.browserName,l=r.browserVersion,u=r.cssPrefix,s=r.keepUnprefixed;if("display"===e&&a[t]&&("chrome"===o&&l<29&&l>20||("safari"===o||"ios_saf"===o)&&l<9&&l>6||"opera"===o&&(15===l||16===l)))return(0,i.default)(u+t,t,s)};var r,o=n(27),i=(r=o)&&r.__esModule?r:{default:r};var a={flex:!0,"inline-flex":!0};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){var o=r.browserName,a=r.browserVersion,l=r.cssPrefix,u=r.keepUnprefixed;if("string"==typeof t&&t.indexOf("calc(")>-1&&("firefox"===o&&a<15||"chrome"===o&&a<25||"safari"===o&&a<6.1||"ios_saf"===o&&a<7))return(0,i.default)(t.replace(/calc\(/g,l+"calc("),t,u)};var r,o=n(27),i=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(191)),o=c(n(190)),i=c(n(189)),a=c(n(188)),l=c(n(187)),u=c(n(186)),s=c(n(185));function c(e){return e&&e.__esModule?e:{default:e}}t.default={plugins:[r.default,o.default,i.default,a.default,l.default,u.default,s.default],prefixMap:{chrome:{transform:35,transformOrigin:35,transformOriginX:35,transformOriginY:35,backfaceVisibility:35,perspective:35,perspectiveOrigin:35,transformStyle:35,transformOriginZ:35,animation:42,animationDelay:42,animationDirection:42,animationFillMode:42,animationDuration:42,animationIterationCount:42,animationName:42,animationPlayState:42,animationTimingFunction:42,appearance:60,userSelect:53,fontKerning:32,textEmphasisPosition:60,textEmphasis:60,textEmphasisStyle:60,textEmphasisColor:60,boxDecorationBreak:60,clipPath:54,maskImage:60,maskMode:60,maskRepeat:60,maskPosition:60,maskClip:60,maskOrigin:60,maskSize:60,maskComposite:60,mask:60,maskBorderSource:60,maskBorderMode:60,maskBorderSlice:60,maskBorderWidth:60,maskBorderOutset:60,maskBorderRepeat:60,maskBorder:60,maskType:60,textDecorationStyle:56,textDecorationSkip:56,textDecorationLine:56,textDecorationColor:56,filter:52,fontFeatureSettings:47,breakAfter:49,breakBefore:49,breakInside:49,columnCount:49,columnFill:49,columnGap:49,columnRule:49,columnRuleColor:49,columnRuleStyle:49,columnRuleWidth:49,columns:49,columnSpan:49,columnWidth:49},safari:{flex:8,flexBasis:8,flexDirection:8,flexGrow:8,flexFlow:8,flexShrink:8,flexWrap:8,alignContent:8,alignItems:8,alignSelf:8,justifyContent:8,order:8,transition:6,transitionDelay:6,transitionDuration:6,transitionProperty:6,transitionTimingFunction:6,transform:8,transformOrigin:8,transformOriginX:8,transformOriginY:8,backfaceVisibility:8,perspective:8,perspectiveOrigin:8,transformStyle:8,transformOriginZ:8,animation:8,animationDelay:8,animationDirection:8,animationFillMode:8,animationDuration:8,animationIterationCount:8,animationName:8,animationPlayState:8,animationTimingFunction:8,appearance:10.1,userSelect:10.1,backdropFilter:10.1,fontKerning:9,scrollSnapType:10,scrollSnapPointsX:10,scrollSnapPointsY:10,scrollSnapDestination:10,scrollSnapCoordinate:10,textEmphasisPosition:7,textEmphasis:7,textEmphasisStyle:7,textEmphasisColor:7,boxDecorationBreak:10.1,clipPath:10.1,maskImage:10.1,maskMode:10.1,maskRepeat:10.1,maskPosition:10.1,maskClip:10.1,maskOrigin:10.1,maskSize:10.1,maskComposite:10.1,mask:10.1,maskBorderSource:10.1,maskBorderMode:10.1,maskBorderSlice:10.1,maskBorderWidth:10.1,maskBorderOutset:10.1,maskBorderRepeat:10.1,maskBorder:10.1,maskType:10.1,textDecorationStyle:10.1,textDecorationSkip:10.1,textDecorationLine:10.1,textDecorationColor:10.1,shapeImageThreshold:10,shapeImageMargin:10,shapeImageOutside:10,filter:9,hyphens:10.1,flowInto:10.1,flowFrom:10.1,breakBefore:8,breakAfter:8,breakInside:8,regionFragment:10.1,columnCount:8,columnFill:8,columnGap:8,columnRule:8,columnRuleColor:8,columnRuleStyle:8,columnRuleWidth:8,columns:8,columnSpan:8,columnWidth:8},firefox:{appearance:55,userSelect:55,boxSizing:28,textAlignLast:48,textDecorationStyle:35,textDecorationSkip:35,textDecorationLine:35,textDecorationColor:35,tabSize:55,hyphens:42,fontFeatureSettings:33,breakAfter:51,breakBefore:51,breakInside:51,columnCount:51,columnFill:51,columnGap:51,columnRule:51,columnRuleColor:51,columnRuleStyle:51,columnRuleWidth:51,columns:51,columnSpan:51,columnWidth:51},opera:{flex:16,flexBasis:16,flexDirection:16,flexGrow:16,flexFlow:16,flexShrink:16,flexWrap:16,alignContent:16,alignItems:16,alignSelf:16,justifyContent:16,order:16,transform:22,transformOrigin:22,transformOriginX:22,transformOriginY:22,backfaceVisibility:22,perspective:22,perspectiveOrigin:22,transformStyle:22,transformOriginZ:22,animation:29,animationDelay:29,animationDirection:29,animationFillMode:29,animationDuration:29,animationIterationCount:29,animationName:29,animationPlayState:29,animationTimingFunction:29,appearance:45,userSelect:40,fontKerning:19,textEmphasisPosition:45,textEmphasis:45,textEmphasisStyle:45,textEmphasisColor:45,boxDecorationBreak:45,clipPath:41,maskImage:45,maskMode:45,maskRepeat:45,maskPosition:45,maskClip:45,maskOrigin:45,maskSize:45,maskComposite:45,mask:45,maskBorderSource:45,maskBorderMode:45,maskBorderSlice:45,maskBorderWidth:45,maskBorderOutset:45,maskBorderRepeat:45,maskBorder:45,maskType:45,textDecorationStyle:43,textDecorationSkip:43,textDecorationLine:43,textDecorationColor:43,filter:39,fontFeatureSettings:34,breakAfter:36,breakBefore:36,breakInside:36,columnCount:36,columnFill:36,columnGap:36,columnRule:36,columnRuleColor:36,columnRuleStyle:36,columnRuleWidth:36,columns:36,columnSpan:36,columnWidth:36},ie:{flex:10,flexDirection:10,flexFlow:10,flexWrap:10,transform:9,transformOrigin:9,transformOriginX:9,transformOriginY:9,userSelect:11,wrapFlow:11,wrapThrough:11,wrapMargin:11,scrollSnapType:11,scrollSnapPointsX:11,scrollSnapPointsY:11,scrollSnapDestination:11,scrollSnapCoordinate:11,touchAction:10,hyphens:11,flowInto:11,flowFrom:11,breakBefore:11,breakAfter:11,breakInside:11,regionFragment:11,gridTemplateColumns:11,gridTemplateRows:11,gridTemplateAreas:11,gridTemplate:11,gridAutoColumns:11,gridAutoRows:11,gridAutoFlow:11,grid:11,gridRowStart:11,gridColumnStart:11,gridRowEnd:11,gridRow:11,gridColumn:11,gridColumnEnd:11,gridColumnGap:11,gridRowGap:11,gridArea:11,gridGap:11,textSizeAdjust:11},edge:{userSelect:15,wrapFlow:15,wrapThrough:15,wrapMargin:15,scrollSnapType:15,scrollSnapPointsX:15,scrollSnapPointsY:15,scrollSnapDestination:15,scrollSnapCoordinate:15,hyphens:15,flowInto:15,flowFrom:15,breakBefore:15,breakAfter:15,breakInside:15,regionFragment:15,gridTemplateColumns:15,gridTemplateRows:15,gridTemplateAreas:15,gridTemplate:15,gridAutoColumns:15,gridAutoRows:15,gridAutoFlow:15,grid:15,gridRowStart:15,gridColumnStart:15,gridRowEnd:15,gridRow:15,gridColumn:15,gridColumnEnd:15,gridColumnGap:15,gridRowGap:15,gridArea:15,gridGap:15},ios_saf:{flex:8.1,flexBasis:8.1,flexDirection:8.1,flexGrow:8.1,flexFlow:8.1,flexShrink:8.1,flexWrap:8.1,alignContent:8.1,alignItems:8.1,alignSelf:8.1,justifyContent:8.1,order:8.1,transition:6,transitionDelay:6,transitionDuration:6,transitionProperty:6,transitionTimingFunction:6,transform:8.1,transformOrigin:8.1,transformOriginX:8.1,transformOriginY:8.1,backfaceVisibility:8.1,perspective:8.1,perspectiveOrigin:8.1,transformStyle:8.1,transformOriginZ:8.1,animation:8.1,animationDelay:8.1,animationDirection:8.1,animationFillMode:8.1,animationDuration:8.1,animationIterationCount:8.1,animationName:8.1,animationPlayState:8.1,animationTimingFunction:8.1,appearance:10,userSelect:10,backdropFilter:10,fontKerning:10,scrollSnapType:10,scrollSnapPointsX:10,scrollSnapPointsY:10,scrollSnapDestination:10,scrollSnapCoordinate:10,boxDecorationBreak:10,clipPath:10,maskImage:10,maskMode:10,maskRepeat:10,maskPosition:10,maskClip:10,maskOrigin:10,maskSize:10,maskComposite:10,mask:10,maskBorderSource:10,maskBorderMode:10,maskBorderSlice:10,maskBorderWidth:10,maskBorderOutset:10,maskBorderRepeat:10,maskBorder:10,maskType:10,textSizeAdjust:10,textDecorationStyle:10,textDecorationSkip:10,textDecorationLine:10,textDecorationColor:10,shapeImageThreshold:10,shapeImageMargin:10,shapeImageOutside:10,filter:9,hyphens:10,flowInto:10,flowFrom:10,breakBefore:8.1,breakAfter:8.1,breakInside:8.1,regionFragment:10,columnCount:8.1,columnFill:8.1,columnGap:8.1,columnRule:8.1,columnRuleColor:8.1,columnRuleStyle:8.1,columnRuleWidth:8.1,columns:8.1,columnSpan:8.1,columnWidth:8.1},android:{borderImage:4.2,borderImageOutset:4.2,borderImageRepeat:4.2,borderImageSlice:4.2,borderImageSource:4.2,borderImageWidth:4.2,flex:4.2,flexBasis:4.2,flexDirection:4.2,flexGrow:4.2,flexFlow:4.2,flexShrink:4.2,flexWrap:4.2,alignContent:4.2,alignItems:4.2,alignSelf:4.2,justifyContent:4.2,order:4.2,transition:4.2,transitionDelay:4.2,transitionDuration:4.2,transitionProperty:4.2,transitionTimingFunction:4.2,transform:4.4,transformOrigin:4.4,transformOriginX:4.4,transformOriginY:4.4,backfaceVisibility:4.4,perspective:4.4,perspectiveOrigin:4.4,transformStyle:4.4,transformOriginZ:4.4,animation:4.4,animationDelay:4.4,animationDirection:4.4,animationFillMode:4.4,animationDuration:4.4,animationIterationCount:4.4,animationName:4.4,animationPlayState:4.4,animationTimingFunction:4.4,appearance:53,userSelect:53,fontKerning:4.4,textEmphasisPosition:53,textEmphasis:53,textEmphasisStyle:53,textEmphasisColor:53,boxDecorationBreak:53,clipPath:53,maskImage:53,maskMode:53,maskRepeat:53,maskPosition:53,maskClip:53,maskOrigin:53,maskSize:53,maskComposite:53,mask:53,maskBorderSource:53,maskBorderMode:53,maskBorderSlice:53,maskBorderWidth:53,maskBorderOutset:53,maskBorderRepeat:53,maskBorder:53,maskType:53,filter:4.4,fontFeatureSettings:4.4,breakAfter:53,breakBefore:53,breakInside:53,columnCount:53,columnFill:53,columnGap:53,columnRule:53,columnRuleColor:53,columnRuleStyle:53,columnRuleWidth:53,columns:53,columnSpan:53,columnWidth:53},and_chr:{appearance:56,textEmphasisPosition:56,textEmphasis:56,textEmphasisStyle:56,textEmphasisColor:56,boxDecorationBreak:56,maskImage:56,maskMode:56,maskRepeat:56,maskPosition:56,maskClip:56,maskOrigin:56,maskSize:56,maskComposite:56,mask:56,maskBorderSource:56,maskBorderMode:56,maskBorderSlice:56,maskBorderWidth:56,maskBorderOutset:56,maskBorderRepeat:56,maskBorder:56,maskType:56,textDecorationStyle:56,textDecorationSkip:56,textDecorationLine:56,textDecorationColor:56},and_uc:{flex:11,flexBasis:11,flexDirection:11,flexGrow:11,flexFlow:11,flexShrink:11,flexWrap:11,alignContent:11,alignItems:11,alignSelf:11,justifyContent:11,order:11,transition:11,transitionDelay:11,transitionDuration:11,transitionProperty:11,transitionTimingFunction:11,transform:11,transformOrigin:11,transformOriginX:11,transformOriginY:11,backfaceVisibility:11,perspective:11,perspectiveOrigin:11,transformStyle:11,transformOriginZ:11,animation:11,animationDelay:11,animationDirection:11,animationFillMode:11,animationDuration:11,animationIterationCount:11,animationName:11,animationPlayState:11,animationTimingFunction:11,appearance:11,userSelect:11,fontKerning:11,textEmphasisPosition:11,textEmphasis:11,textEmphasisStyle:11,textEmphasisColor:11,maskImage:11,maskMode:11,maskRepeat:11,maskPosition:11,maskClip:11,maskOrigin:11,maskSize:11,maskComposite:11,mask:11,maskBorderSource:11,maskBorderMode:11,maskBorderSlice:11,maskBorderWidth:11,maskBorderOutset:11,maskBorderRepeat:11,maskBorder:11,maskType:11,textSizeAdjust:11,filter:11,hyphens:11,flowInto:11,flowFrom:11,breakBefore:11,breakAfter:11,breakInside:11,regionFragment:11,fontFeatureSettings:11,columnCount:11,columnFill:11,columnGap:11,columnRule:11,columnRuleColor:11,columnRuleStyle:11,columnRuleWidth:11,columns:11,columnSpan:11,columnWidth:11},op_mini:{}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if("chrome"===e&&t<43||("safari"===e||"ios_saf"===e)&&t<9||"opera"===e&&t<30||"android"===e&&t<=4.4||"and_uc"===e)return n+"keyframes";return"keyframes"},e.exports=t.default},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t,n){var r;r=function(){var e=!0;function t(t){function n(e){var n=t.match(e);return n&&n.length>1&&n[1]||""}function r(e){var n=t.match(e);return n&&n.length>1&&n[2]||""}var o,i=n(/(ipod|iphone|ipad)/i).toLowerCase(),a=!/like android/i.test(t)&&/android/i.test(t),l=/nexus\s*[0-6]\s*/i.test(t),u=!l&&/nexus\s*[0-9]+/i.test(t),s=/CrOS/.test(t),c=/silk/i.test(t),f=/sailfish/i.test(t),d=/tizen/i.test(t),p=/(web|hpw)os/i.test(t),h=/windows phone/i.test(t),m=(/SamsungBrowser/i.test(t),!h&&/windows/i.test(t)),y=!i&&!c&&/macintosh/i.test(t),v=!a&&!f&&!d&&!p&&/linux/i.test(t),b=r(/edg([ea]|ios)\/(\d+(\.\d+)?)/i),g=n(/version\/(\d+(\.\d+)?)/i),x=/tablet/i.test(t)&&!/tablet pc/i.test(t),k=!x&&/[^-]mobi/i.test(t),C=/xbox/i.test(t);/opera/i.test(t)?o={name:"Opera",opera:e,version:g||n(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)}:/opr\/|opios/i.test(t)?o={name:"Opera",opera:e,version:n(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i)||g}:/SamsungBrowser/i.test(t)?o={name:"Samsung Internet for Android",samsungBrowser:e,version:g||n(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)}:/coast/i.test(t)?o={name:"Opera Coast",coast:e,version:g||n(/(?:coast)[\s\/](\d+(\.\d+)?)/i)}:/yabrowser/i.test(t)?o={name:"Yandex Browser",yandexbrowser:e,version:g||n(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)}:/ucbrowser/i.test(t)?o={name:"UC Browser",ucbrowser:e,version:n(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)}:/mxios/i.test(t)?o={name:"Maxthon",maxthon:e,version:n(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)}:/epiphany/i.test(t)?o={name:"Epiphany",epiphany:e,version:n(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)}:/puffin/i.test(t)?o={name:"Puffin",puffin:e,version:n(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)}:/sleipnir/i.test(t)?o={name:"Sleipnir",sleipnir:e,version:n(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)}:/k-meleon/i.test(t)?o={name:"K-Meleon",kMeleon:e,version:n(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)}:h?(o={name:"Windows Phone",osname:"Windows Phone",windowsphone:e},b?(o.msedge=e,o.version=b):(o.msie=e,o.version=n(/iemobile\/(\d+(\.\d+)?)/i))):/msie|trident/i.test(t)?o={name:"Internet Explorer",msie:e,version:n(/(?:msie |rv:)(\d+(\.\d+)?)/i)}:s?o={name:"Chrome",osname:"Chrome OS",chromeos:e,chromeBook:e,chrome:e,version:n(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)}:/edg([ea]|ios)/i.test(t)?o={name:"Microsoft Edge",msedge:e,version:b}:/vivaldi/i.test(t)?o={name:"Vivaldi",vivaldi:e,version:n(/vivaldi\/(\d+(\.\d+)?)/i)||g}:f?o={name:"Sailfish",osname:"Sailfish OS",sailfish:e,version:n(/sailfish\s?browser\/(\d+(\.\d+)?)/i)}:/seamonkey\//i.test(t)?o={name:"SeaMonkey",seamonkey:e,version:n(/seamonkey\/(\d+(\.\d+)?)/i)}:/firefox|iceweasel|fxios/i.test(t)?(o={name:"Firefox",firefox:e,version:n(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)},/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(t)&&(o.firefoxos=e,o.osname="Firefox OS")):c?o={name:"Amazon Silk",silk:e,version:n(/silk\/(\d+(\.\d+)?)/i)}:/phantom/i.test(t)?o={name:"PhantomJS",phantom:e,version:n(/phantomjs\/(\d+(\.\d+)?)/i)}:/slimerjs/i.test(t)?o={name:"SlimerJS",slimer:e,version:n(/slimerjs\/(\d+(\.\d+)?)/i)}:/blackberry|\bbb\d+/i.test(t)||/rim\stablet/i.test(t)?o={name:"BlackBerry",osname:"BlackBerry OS",blackberry:e,version:g||n(/blackberry[\d]+\/(\d+(\.\d+)?)/i)}:p?(o={name:"WebOS",osname:"WebOS",webos:e,version:g||n(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)},/touchpad\//i.test(t)&&(o.touchpad=e)):/bada/i.test(t)?o={name:"Bada",osname:"Bada",bada:e,version:n(/dolfin\/(\d+(\.\d+)?)/i)}:d?o={name:"Tizen",osname:"Tizen",tizen:e,version:n(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i)||g}:/qupzilla/i.test(t)?o={name:"QupZilla",qupzilla:e,version:n(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i)||g}:/chromium/i.test(t)?o={name:"Chromium",chromium:e,version:n(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i)||g}:/chrome|crios|crmo/i.test(t)?o={name:"Chrome",chrome:e,version:n(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)}:a?o={name:"Android",version:g}:/safari|applewebkit/i.test(t)?(o={name:"Safari",safari:e},g&&(o.version=g)):i?(o={name:"iphone"==i?"iPhone":"ipad"==i?"iPad":"iPod"},g&&(o.version=g)):o=/googlebot/i.test(t)?{name:"Googlebot",googlebot:e,version:n(/googlebot\/(\d+(\.\d+))/i)||g}:{name:n(/^(.*)\/(.*) /),version:r(/^(.*)\/(.*) /)},!o.msedge&&/(apple)?webkit/i.test(t)?(/(apple)?webkit\/537\.36/i.test(t)?(o.name=o.name||"Blink",o.blink=e):(o.name=o.name||"Webkit",o.webkit=e),!o.version&&g&&(o.version=g)):!o.opera&&/gecko\//i.test(t)&&(o.name=o.name||"Gecko",o.gecko=e,o.version=o.version||n(/gecko\/(\d+(\.\d+)?)/i)),o.windowsphone||!a&&!o.silk?!o.windowsphone&&i?(o[i]=e,o.ios=e,o.osname="iOS"):y?(o.mac=e,o.osname="macOS"):C?(o.xbox=e,o.osname="Xbox"):m?(o.windows=e,o.osname="Windows"):v&&(o.linux=e,o.osname="Linux"):(o.android=e,o.osname="Android");var w="";o.windows?w=function(e){switch(e){case"NT":return"NT";case"XP":return"XP";case"NT 5.0":return"2000";case"NT 5.1":return"XP";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}}(n(/Windows ((NT|XP)( \d\d?.\d)?)/i)):o.windowsphone?w=n(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i):o.mac?w=(w=n(/Mac OS X (\d+([_\.\s]\d+)*)/i)).replace(/[_\s]/g,"."):i?w=(w=n(/os (\d+([_\s]\d+)*) like mac os x/i)).replace(/[_\s]/g,"."):a?w=n(/android[ \/-](\d+(\.\d+)*)/i):o.webos?w=n(/(?:web|hpw)os\/(\d+(\.\d+)*)/i):o.blackberry?w=n(/rim\stablet\sos\s(\d+(\.\d+)*)/i):o.bada?w=n(/bada\/(\d+(\.\d+)*)/i):o.tizen&&(w=n(/tizen[\/\s](\d+(\.\d+)*)/i)),w&&(o.osversion=w);var _=!o.windows&&w.split(".")[0];return x||u||"ipad"==i||a&&(3==_||_>=4&&!k)||o.silk?o.tablet=e:(k||"iphone"==i||"ipod"==i||a||l||o.blackberry||o.webos||o.bada)&&(o.mobile=e),o.msedge||o.msie&&o.version>=10||o.yandexbrowser&&o.version>=15||o.vivaldi&&o.version>=1||o.chrome&&o.version>=20||o.samsungBrowser&&o.version>=4||o.firefox&&o.version>=20||o.safari&&o.version>=6||o.opera&&o.version>=10||o.ios&&o.osversion&&o.osversion.split(".")[0]>=6||o.blackberry&&o.version>=10.1||o.chromium&&o.version>=20?o.a=e:o.msie&&o.version<10||o.chrome&&o.version<20||o.firefox&&o.version<20||o.safari&&o.version<6||o.opera&&o.version<10||o.ios&&o.osversion&&o.osversion.split(".")[0]<6||o.chromium&&o.version<20?o.c=e:o.x=e,o}var n=t("undefined"!=typeof navigator&&navigator.userAgent||"");function r(e){return e.split(".").length}function o(e,t){var n,r=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(n=0;n<e.length;n++)r.push(t(e[n]));return r}function i(e){for(var t=Math.max(r(e[0]),r(e[1])),n=o(e,function(e){var n=t-r(e);return o((e+=new Array(n+1).join(".0")).split("."),function(e){return new Array(20-e.length).join("0")+e}).reverse()});--t>=0;){if(n[0][t]>n[1][t])return 1;if(n[0][t]!==n[1][t])return-1;if(0===t)return 0}}function a(e,r,o){var a=n;"string"==typeof r&&(o=r,r=void 0),void 0===r&&(r=!1),o&&(a=t(o));var l=""+a.version;for(var u in e)if(e.hasOwnProperty(u)&&a[u]){if("string"!=typeof e[u])throw new Error("Browser version in the minVersion map should be a string: "+u+": "+String(e));return i([l,e[u]])<0}return r}return n.test=function(e){for(var t=0;t<e.length;++t){var r=e[t];if("string"==typeof r&&r in n)return!0}return!1},n.isUnsupportedBrowser=a,n.compareVersions=i,n.check=function(e,t,n){return!a(e,t,n)},n._detect=t,n.detect=t,n},void 0!==e&&e.exports?e.exports=r():n(194)("bowser",r)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=i.default._detect(e);t.yandexbrowser&&(t=i.default._detect(e.replace(/YaBrowser\/[0-9.]*/,"")));for(var n in a)if(t.hasOwnProperty(n)){var r=a[n];t.jsPrefix=r,t.cssPrefix="-"+r.toLowerCase()+"-";break}t.browserName=function(e){if(e.firefox)return"firefox";if(e.mobile||e.tablet){if(e.ios)return"ios_saf";if(e.android)return"android";if(e.opera)return"op_mini"}for(var t in l)if(e.hasOwnProperty(t))return l[t]}(t),t.version?t.browserVersion=parseFloat(t.version):t.browserVersion=parseInt(parseFloat(t.osversion),10);t.osVersion=parseFloat(t.osversion),"ios_saf"===t.browserName&&t.browserVersion>t.osVersion&&(t.browserVersion=t.osVersion);"android"===t.browserName&&t.chrome&&t.browserVersion>37&&(t.browserName="and_chr");"android"===t.browserName&&t.osVersion<5&&(t.browserVersion=t.osVersion);"android"===t.browserName&&t.samsungBrowser&&(t.browserName="and_chr",t.browserVersion=44);return t};var r,o=n(195),i=(r=o)&&r.__esModule?r:{default:r};var a={chrome:"Webkit",safari:"Webkit",ios:"Webkit",android:"Webkit",phantom:"Webkit",opera:"Webkit",webos:"Webkit",blackberry:"Webkit",bada:"Webkit",tizen:"Webkit",chromium:"Webkit",vivaldi:"Webkit",firefox:"Moz",seamoney:"Moz",sailfish:"Moz",msie:"ms",msedge:"ms"},l={chrome:"chrome",chromium:"chrome",safari:"safari",firfox:"firefox",msedge:"edge",opera:"opera",vivaldi:"opera",msie:"ie"};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.default=function(e){var t=e.prefixMap,n=e.plugins,c=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e};return function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var r="undefined"!=typeof navigator?navigator.userAgent:void 0;if(this._userAgent=n.userAgent||r,this._keepUnprefixed=n.keepUnprefixed||!1,this._userAgent&&(this._browserInfo=(0,o.default)(this._userAgent)),!this._browserInfo||!this._browserInfo.cssPrefix)return this._useFallback=!0,!1;this.prefixedKeyframes=(0,i.default)(this._browserInfo.browserName,this._browserInfo.browserVersion,this._browserInfo.cssPrefix);var a=this._browserInfo.browserName&&t[this._browserInfo.browserName];if(a){for(var l in this._requiresPrefix={},a)a[l]>=this._browserInfo.browserVersion&&(this._requiresPrefix[l]=!0);this._hasPropsRequiringPrefix=Object.keys(this._requiresPrefix).length>0}else this._useFallback=!0;this._metaData={browserVersion:this._browserInfo.browserVersion,browserName:this._browserInfo.browserName,cssPrefix:this._browserInfo.cssPrefix,jsPrefix:this._browserInfo.jsPrefix,keepUnprefixed:this._keepUnprefixed,requiresPrefix:this._requiresPrefix}}return r(e,[{key:"prefix",value:function(e){return this._useFallback?c(e):this._hasPropsRequiringPrefix?this._prefixStyle(e):e}},{key:"_prefixStyle",value:function(e){for(var t in e){var r=e[t];if((0,u.default)(r))e[t]=this.prefix(r);else if(Array.isArray(r)){for(var o=[],i=0,c=r.length;i<c;++i){var f=(0,s.default)(n,t,r[i],e,this._metaData);(0,l.default)(o,f||r[i])}o.length>0&&(e[t]=o)}else{var d=(0,s.default)(n,t,r,e,this._metaData);d&&(e[t]=d),this._requiresPrefix.hasOwnProperty(t)&&(e[this._browserInfo.jsPrefix+(0,a.default)(t)]=r,this._keepUnprefixed||delete e[t])}}return e}}],[{key:"prefixAll",value:function(e){return c(e)}}]),e}()};var o=c(n(196)),i=c(n(193)),a=c(n(48)),l=c(n(89)),u=c(n(88)),s=c(n(90));function c(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(e.hasOwnProperty(t))for(var r=e[t],o=0,a=r.length;o<a;++o)n[r[o]+(0,i.default)(t)]=n[t]};var r,o=n(48),i=(r=o)&&r.__esModule?r:{default:r};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.prefixMap,n=e.plugins;return function e(l){for(var u in l){var s=l[u];if((0,a.default)(s))l[u]=e(s);else if(Array.isArray(s)){for(var c=[],f=0,d=s.length;f<d;++f){var p=(0,o.default)(n,u,s[f],l,t);(0,i.default)(c,p||s[f])}c.length>0&&(l[u]=c)}else{var h=(0,o.default)(n,u,s,l,t);h&&(l[u]=h),(0,r.default)(t,u,l)}}return l}};var r=l(n(198)),o=l(n(90)),i=l(n(89)),a=l(n(88));function l(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t="undefined"!=typeof navigator,n=e.userAgent;void 0===n&&t&&(n=navigator.userAgent),void 0!==n||u||(u=!0);var l=(0,r.default)(a.default);if(!1===n)return null;if("all"===n||void 0===n)return function(e){var n=-1!==["flex","inline-flex"].indexOf(e.display),r=l(e);if(n){var o=r.display;r.display=t?o[o.length-1]:o.join("; display: ")}return r};var s=new((0,o.default)(i.default,l))({userAgent:n});return function(e){return s.prefix(e)}};var r=l(n(199)),o=l(n(197)),i=l(n(192)),a=l(n(183));l(n(2));function l(e){return e&&e.__esModule?e:{default:e}}var u=!1},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={menu:1e3,appBar:1100,drawerOverlay:1200,drawer:1300,dialogOverlay:1400,dialog:1500,layer:2e3,popover:2100,snackbar:2900,tooltip:3e3}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={iconSize:24,desktopGutter:24,desktopGutterMore:32,desktopGutterLess:16,desktopGutterMini:8,desktopKeylineIncrement:64,desktopDropDownMenuItemHeight:32,desktopDropDownMenuFontSize:15,desktopDrawerMenuItemHeight:48,desktopSubheaderHeight:48,desktopToolbarHeight:56}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(49),i=n(39),a=n(202),l=(r=a)&&r.__esModule?r:{default:r};t.default={spacing:l.default,fontFamily:"Roboto, sans-serif",borderRadius:2,palette:{primary1Color:o.cyan500,primary2Color:o.cyan700,primary3Color:o.grey400,accent1Color:o.pinkA200,accent2Color:o.grey100,accent3Color:o.grey500,textColor:o.darkBlack,secondaryTextColor:(0,i.fade)(o.darkBlack,.54),alternateTextColor:o.white,canvasColor:o.white,borderColor:o.grey300,disabledColor:(0,i.fade)(o.darkBlack,.3),pickerHeaderColor:o.cyan500,clockCircleColor:(0,i.fade)(o.darkBlack,.07),shadowColor:o.fullBlack}}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){(function(e,n){var r=200,o="__lodash_hash_undefined__",i=800,a=16,l=9007199254740991,u="[object Arguments]",s="[object AsyncFunction]",c="[object Function]",f="[object GeneratorFunction]",d="[object Null]",p="[object Object]",h="[object Proxy]",m="[object Undefined]",y=/^\[object .+?Constructor\]$/,v=/^(?:0|[1-9]\d*)$/,b={};b["[object Float32Array]"]=b["[object Float64Array]"]=b["[object Int8Array]"]=b["[object Int16Array]"]=b["[object Int32Array]"]=b["[object Uint8Array]"]=b["[object Uint8ClampedArray]"]=b["[object Uint16Array]"]=b["[object Uint32Array]"]=!0,b[u]=b["[object Array]"]=b["[object ArrayBuffer]"]=b["[object Boolean]"]=b["[object DataView]"]=b["[object Date]"]=b["[object Error]"]=b[c]=b["[object Map]"]=b["[object Number]"]=b[p]=b["[object RegExp]"]=b["[object Set]"]=b["[object String]"]=b["[object WeakMap]"]=!1;var g="object"==typeof e&&e&&e.Object===Object&&e,x="object"==typeof self&&self&&self.Object===Object&&self,k=g||x||Function("return this")(),C="object"==typeof t&&t&&!t.nodeType&&t,w=C&&"object"==typeof n&&n&&!n.nodeType&&n,_=w&&w.exports===C,E=_&&g.process,S=function(){try{return E&&E.binding&&E.binding("util")}catch(e){}}(),T=S&&S.isTypedArray;function O(e,t){return"__proto__"==t?void 0:e[t]}var M,P,I,R=Array.prototype,F=Function.prototype,j=Object.prototype,A=k["__core-js_shared__"],D=F.toString,L=j.hasOwnProperty,N=(M=/[^.]+$/.exec(A&&A.keys&&A.keys.IE_PROTO||""))?"Symbol(src)_1."+M:"",W=j.toString,z=D.call(Object),B=RegExp("^"+D.call(L).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),U=_?k.Buffer:void 0,H=k.Symbol,K=k.Uint8Array,V=U?U.allocUnsafe:void 0,q=(P=Object.getPrototypeOf,I=Object,function(e){return P(I(e))}),G=Object.create,$=j.propertyIsEnumerable,Y=R.splice,Q=H?H.toStringTag:void 0,X=function(){try{var e=Ce(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),Z=U?U.isBuffer:void 0,J=Math.max,ee=Date.now,te=Ce(k,"Map"),ne=Ce(Object,"create"),re=function(){function e(){}return function(t){if(!Fe(t))return{};if(G)return G(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();function oe(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ie(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ae(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function le(e){var t=this.__data__=new ie(e);this.size=t.size}function ue(e,t){var n=Oe(e),r=!n&&Te(e),o=!n&&!r&&Pe(e),i=!n&&!r&&!o&&Ae(e),a=n||r||o||i,l=a?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],u=l.length;for(var s in e)!t&&!L.call(e,s)||a&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||we(s,u))||l.push(s);return l}function se(e,t,n){(void 0===n||Se(e[t],n))&&(void 0!==n||t in e)||de(e,t,n)}function ce(e,t,n){var r=e[t];L.call(e,t)&&Se(r,n)&&(void 0!==n||t in e)||de(e,t,n)}function fe(e,t){for(var n=e.length;n--;)if(Se(e[n][0],t))return n;return-1}function de(e,t,n){"__proto__"==t&&X?X(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}oe.prototype.clear=function(){this.__data__=ne?ne(null):{},this.size=0},oe.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},oe.prototype.get=function(e){var t=this.__data__;if(ne){var n=t[e];return n===o?void 0:n}return L.call(t,e)?t[e]:void 0},oe.prototype.has=function(e){var t=this.__data__;return ne?void 0!==t[e]:L.call(t,e)},oe.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=ne&&void 0===t?o:t,this},ie.prototype.clear=function(){this.__data__=[],this.size=0},ie.prototype.delete=function(e){var t=this.__data__,n=fe(t,e);return!(n<0||(n==t.length-1?t.pop():Y.call(t,n,1),--this.size,0))},ie.prototype.get=function(e){var t=this.__data__,n=fe(t,e);return n<0?void 0:t[n][1]},ie.prototype.has=function(e){return fe(this.__data__,e)>-1},ie.prototype.set=function(e,t){var n=this.__data__,r=fe(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},ae.prototype.clear=function(){this.size=0,this.__data__={hash:new oe,map:new(te||ie),string:new oe}},ae.prototype.delete=function(e){var t=ke(this,e).delete(e);return this.size-=t?1:0,t},ae.prototype.get=function(e){return ke(this,e).get(e)},ae.prototype.has=function(e){return ke(this,e).has(e)},ae.prototype.set=function(e,t){var n=ke(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},le.prototype.clear=function(){this.__data__=new ie,this.size=0},le.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},le.prototype.get=function(e){return this.__data__.get(e)},le.prototype.has=function(e){return this.__data__.has(e)},le.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ie){var o=n.__data__;if(!te||o.length<r-1)return o.push([e,t]),this.size=++n.size,this;n=this.__data__=new ae(o)}return n.set(e,t),this.size=n.size,this};var pe,he=function(e,t,n){for(var r=-1,o=Object(e),i=n(e),a=i.length;a--;){var l=i[pe?a:++r];if(!1===t(o[l],l,o))break}return e};function me(e){return null==e?void 0===e?m:d:Q&&Q in Object(e)?function(e){var t=L.call(e,Q),n=e[Q];try{e[Q]=void 0;var r=!0}catch(e){}var o=W.call(e);r&&(t?e[Q]=n:delete e[Q]);return o}(e):function(e){return W.call(e)}(e)}function ye(e){return je(e)&&me(e)==u}function ve(e){return!(!Fe(e)||N&&N in e)&&(Ie(e)?B:y).test(function(e){if(null!=e){try{return D.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}function be(e){if(!Fe(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t=_e(e),n=[];for(var r in e)("constructor"!=r||!t&&L.call(e,r))&&n.push(r);return n}function ge(e,t,n,r,o){e!==t&&he(t,function(i,a){if(Fe(i))o||(o=new le),function(e,t,n,r,o,i,a){var l=O(e,n),u=O(t,n),s=a.get(u);if(s)return void se(e,n,s);var c=i?i(l,u,n+"",e,t,a):void 0,f=void 0===c;if(f){var d=Oe(u),h=!d&&Pe(u),m=!d&&!h&&Ae(u);c=u,d||h||m?Oe(l)?c=l:je(x=l)&&Me(x)?c=function(e,t){var n=-1,r=e.length;t||(t=Array(r));for(;++n<r;)t[n]=e[n];return t}(l):h?(f=!1,c=function(e,t){if(t)return e.slice();var n=e.length,r=V?V(n):new e.constructor(n);return e.copy(r),r}(u,!0)):m?(f=!1,y=u,v=!0?(b=y.buffer,g=new b.constructor(b.byteLength),new K(g).set(new K(b)),g):y.buffer,c=new y.constructor(v,y.byteOffset,y.length)):c=[]:function(e){if(!je(e)||me(e)!=p)return!1;var t=q(e);if(null===t)return!0;var n=L.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&D.call(n)==z}(u)||Te(u)?(c=l,Te(l)?c=function(e){return function(e,t,n,r){var o=!n;n||(n={});var i=-1,a=t.length;for(;++i<a;){var l=t[i],u=r?r(n[l],e[l],l,n,e):void 0;void 0===u&&(u=e[l]),o?de(n,l,u):ce(n,l,u)}return n}(e,De(e))}(l):(!Fe(l)||r&&Ie(l))&&(c=function(e){return"function"!=typeof e.constructor||_e(e)?{}:re(q(e))}(u))):f=!1}var y,v,b,g;var x;f&&(a.set(u,c),o(c,u,r,i,a),a.delete(u));se(e,n,c)}(e,t,a,n,ge,r,o);else{var l=r?r(O(e,a),i,a+"",e,t,o):void 0;void 0===l&&(l=i),se(e,a,l)}},De)}function xe(e,t){return Ee(function(e,t,n){return t=J(void 0===t?e.length-1:t,0),function(){for(var r=arguments,o=-1,i=J(r.length-t,0),a=Array(i);++o<i;)a[o]=r[t+o];o=-1;for(var l=Array(t+1);++o<t;)l[o]=r[o];return l[t]=n(a),function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}(e,this,l)}}(e,t,We),e+"")}function ke(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Ce(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return ve(n)?n:void 0}function we(e,t){var n=typeof e;return!!(t=null==t?l:t)&&("number"==n||"symbol"!=n&&v.test(e))&&e>-1&&e%1==0&&e<t}function _e(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||j)}var Ee=function(e){var t=0,n=0;return function(){var r=ee(),o=a-(r-n);if(n=r,o>0){if(++t>=i)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(X?function(e,t){return X(e,"toString",{configurable:!0,enumerable:!1,value:(n=t,function(){return n}),writable:!0});var n}:We);function Se(e,t){return e===t||e!=e&&t!=t}var Te=ye(function(){return arguments}())?ye:function(e){return je(e)&&L.call(e,"callee")&&!$.call(e,"callee")},Oe=Array.isArray;function Me(e){return null!=e&&Re(e.length)&&!Ie(e)}var Pe=Z||function(){return!1};function Ie(e){if(!Fe(e))return!1;var t=me(e);return t==c||t==f||t==s||t==h}function Re(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=l}function Fe(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function je(e){return null!=e&&"object"==typeof e}var Ae=T?function(e){return function(t){return e(t)}}(T):function(e){return je(e)&&Re(e.length)&&!!b[me(e)]};function De(e){return Me(e)?ue(e,!0):be(e)}var Le,Ne=(Le=function(e,t,n){ge(e,t,n)},xe(function(e,t){var n=-1,r=t.length,o=r>1?t[r-1]:void 0,i=r>2?t[2]:void 0;for(o=Le.length>3&&"function"==typeof o?(r--,o):void 0,i&&function(e,t,n){if(!Fe(n))return!1;var r=typeof t;return!!("number"==r?Me(n)&&we(t,n.length):"string"==r&&t in n)&&Se(n[t],e)}(t[0],t[1],i)&&(o=r<3?void 0:o,r=1),e=Object(e);++n<r;){var a=t[n];a&&Le(e,a,n,o)}return e}));function We(e){return e}n.exports=Ne}).call(this,n(91),n(204)(e))},function(e,t,n){var r=n(15)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},e(i)}catch(e){}return n}},function(e,t,n){var r=n(55),o=n(15)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,n){var r=n(207),o=n(15)("iterator"),i=n(34);e.exports=n(13).getIteratorMethod=function(e){if(void 0!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t,n){"use strict";var r=n(18),o=n(35);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){var r=n(34),o=n(15)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},function(e,t,n){var r=n(31);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t,n){"use strict";var r=n(61),o=n(19),i=n(36),a=n(211),l=n(210),u=n(96),s=n(209),c=n(208);o(o.S+o.F*!n(206)(function(e){Array.from(e)}),"Array",{from:function(e){var t,n,o,f,d=i(e),p="function"==typeof this?this:Array,h=arguments.length,m=h>1?arguments[1]:void 0,y=void 0!==m,v=0,b=c(d);if(y&&(m=r(m,h>2?arguments[2]:void 0,2)),void 0==b||p==Array&&l(b))for(n=new p(t=u(d.length));t>v;v++)s(n,v,y?m(d[v],v):d[v]);else for(f=b.call(d),n=new p;!(o=f.next()).done;v++)s(n,v,y?a(f,m,[o.value,v],!0):o.value);return n.length=v,n}})},function(e,t,n){n(101),n(212),e.exports=n(13).Array.from},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=h(n(93));t.default=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),h=1;h<t;h++)n[h-1]=arguments[h];var m=e=o.default.apply(void 0,[{zIndex:l.default,isRtl:!1,userAgent:void 0},a.default,e].concat(n)),y=m.spacing,v=m.fontFamily,b=m.palette,g={spacing:y,fontFamily:v,palette:b};e=(0,o.default)({appBar:{color:b.primary1Color,textColor:b.alternateTextColor,height:y.desktopKeylineIncrement,titleFontWeight:d.default.fontWeightNormal,padding:y.desktopGutter},avatar:{color:b.canvasColor,backgroundColor:(0,i.emphasize)(b.canvasColor,.26)},badge:{color:b.alternateTextColor,textColor:b.textColor,primaryColor:b.primary1Color,primaryTextColor:b.alternateTextColor,secondaryColor:b.accent1Color,secondaryTextColor:b.alternateTextColor,fontWeight:d.default.fontWeightMedium},bottomNavigation:{backgroundColor:b.canvasColor,unselectedColor:(0,i.fade)(b.textColor,.54),selectedColor:b.primary1Color,height:56,unselectedFontSize:12,selectedFontSize:14},button:{height:36,minWidth:88,iconButtonSize:2*y.iconSize},card:{titleColor:(0,i.fade)(b.textColor,.87),subtitleColor:(0,i.fade)(b.textColor,.54),fontWeight:d.default.fontWeightMedium},cardMedia:{color:p.darkWhite,overlayContentBackground:p.lightBlack,titleColor:p.darkWhite,subtitleColor:p.lightWhite},cardText:{textColor:b.textColor},checkbox:{boxColor:b.textColor,checkedColor:b.primary1Color,requiredColor:b.primary1Color,disabledColor:b.disabledColor,labelColor:b.textColor,labelDisabledColor:b.disabledColor},chip:{backgroundColor:(0,i.emphasize)(b.canvasColor,.12),deleteIconColor:(0,i.fade)(b.textColor,.26),textColor:(0,i.fade)(b.textColor,.87),fontSize:14,fontWeight:d.default.fontWeightNormal,shadow:"0 1px 6px "+(0,i.fade)(b.shadowColor,.12)+",\n        0 1px 4px "+(0,i.fade)(b.shadowColor,.12)},datePicker:{color:b.primary1Color,textColor:b.alternateTextColor,calendarTextColor:b.textColor,selectColor:b.primary2Color,selectTextColor:b.alternateTextColor,calendarYearBackgroundColor:b.canvasColor,headerColor:b.pickerHeaderColor||b.primary1Color},dialog:{titleFontSize:22,bodyFontSize:16,bodyColor:(0,i.fade)(b.textColor,.6)},dropDownMenu:{accentColor:b.borderColor},enhancedButton:{tapHighlightColor:p.transparent},flatButton:{color:p.transparent,buttonFilterColor:"#999999",disabledTextColor:(0,i.fade)(b.textColor,.3),textColor:b.textColor,primaryTextColor:b.primary1Color,secondaryTextColor:b.accent1Color,fontSize:d.default.fontStyleButtonFontSize,fontWeight:d.default.fontWeightMedium},floatingActionButton:{buttonSize:56,miniSize:40,color:b.primary1Color,iconColor:b.alternateTextColor,secondaryColor:b.accent1Color,secondaryIconColor:b.alternateTextColor,disabledTextColor:b.disabledColor,disabledColor:(0,i.emphasize)(b.canvasColor,.12)},gridTile:{textColor:p.white},icon:{color:b.canvasColor,backgroundColor:b.primary1Color},inkBar:{backgroundColor:b.accent1Color},drawer:{width:4*y.desktopKeylineIncrement,color:b.canvasColor},listItem:{nestedLevelDepth:18,secondaryTextColor:b.secondaryTextColor,leftIconColor:p.grey600,rightIconColor:p.grey600},menu:{backgroundColor:b.canvasColor,containerBackgroundColor:b.canvasColor},menuItem:{dataHeight:32,height:48,hoverColor:(0,i.fade)(b.textColor,.1),padding:y.desktopGutter,selectedTextColor:b.accent1Color,rightIconDesktopFill:p.grey600},menuSubheader:{padding:y.desktopGutter,borderColor:b.borderColor,textColor:b.primary1Color},overlay:{backgroundColor:p.lightBlack},paper:{color:b.textColor,backgroundColor:b.canvasColor,zDepthShadows:[[1,6,.12,1,4,.12],[3,10,.16,3,10,.23],[10,30,.19,6,10,.23],[14,45,.25,10,18,.22],[19,60,.3,15,20,.22]].map(function(e){return"0 "+e[0]+"px "+e[1]+"px "+(0,i.fade)(b.shadowColor,e[2])+",\n         0 "+e[3]+"px "+e[4]+"px "+(0,i.fade)(b.shadowColor,e[5])})},radioButton:{borderColor:b.textColor,backgroundColor:b.alternateTextColor,checkedColor:b.primary1Color,requiredColor:b.primary1Color,disabledColor:b.disabledColor,size:24,labelColor:b.textColor,labelDisabledColor:b.disabledColor},raisedButton:{color:b.alternateTextColor,textColor:b.textColor,primaryColor:b.primary1Color,primaryTextColor:b.alternateTextColor,secondaryColor:b.accent1Color,secondaryTextColor:b.alternateTextColor,disabledColor:(0,i.darken)(b.alternateTextColor,.1),disabledTextColor:(0,i.fade)(b.textColor,.3),fontSize:d.default.fontStyleButtonFontSize,fontWeight:d.default.fontWeightMedium},refreshIndicator:{strokeColor:b.borderColor,loadingStrokeColor:b.primary1Color},ripple:{color:(0,i.fade)(b.textColor,.87)},slider:{trackSize:2,trackColor:b.primary3Color,trackColorSelected:b.accent3Color,handleSize:12,handleSizeDisabled:8,handleSizeActive:18,handleColorZero:b.primary3Color,handleFillColor:b.alternateTextColor,selectionColor:b.primary1Color,rippleColor:b.primary1Color},snackbar:{textColor:b.alternateTextColor,backgroundColor:b.textColor,actionColor:b.accent1Color},subheader:{color:(0,i.fade)(b.textColor,.54),fontWeight:d.default.fontWeightMedium},stepper:{backgroundColor:"transparent",hoverBackgroundColor:(0,i.fade)(p.black,.06),iconColor:b.primary1Color,hoveredIconColor:p.grey700,inactiveIconColor:p.grey500,textColor:(0,i.fade)(p.black,.87),disabledTextColor:(0,i.fade)(p.black,.26),connectorLineColor:p.grey400},svgIcon:{color:b.textColor},table:{backgroundColor:b.canvasColor},tableFooter:{borderColor:b.borderColor,textColor:b.accent3Color},tableHeader:{borderColor:b.borderColor},tableHeaderColumn:{textColor:b.accent3Color,height:56,spacing:24},tableRow:{hoverColor:b.accent2Color,stripeColor:(0,i.fade)((0,i.lighten)(b.primary1Color,.5),.4),selectedColor:b.borderColor,textColor:b.textColor,borderColor:b.borderColor,height:48},tableRowColumn:{height:48,spacing:24},tabs:{backgroundColor:b.primary1Color,textColor:(0,i.fade)(b.alternateTextColor,.7),selectedTextColor:b.alternateTextColor},textField:{textColor:b.textColor,hintColor:b.disabledColor,floatingLabelColor:b.disabledColor,disabledTextColor:b.disabledColor,errorColor:p.red500,focusColor:b.primary1Color,backgroundColor:"transparent",borderColor:b.borderColor},timePicker:{color:b.alternateTextColor,textColor:b.alternateTextColor,accentColor:b.primary1Color,clockColor:b.textColor,clockCircleColor:b.clockCircleColor,headerColor:b.pickerHeaderColor||b.primary1Color,selectColor:b.primary2Color,selectTextColor:b.alternateTextColor},toggle:{thumbOnColor:b.primary1Color,thumbOffColor:b.accent2Color,thumbDisabledColor:b.borderColor,thumbRequiredColor:b.primary1Color,trackOnColor:(0,i.fade)(b.primary1Color,.5),trackOffColor:b.primary3Color,trackDisabledColor:b.primary3Color,labelColor:b.textColor,labelDisabledColor:b.disabledColor,trackRequiredColor:(0,i.fade)(b.primary1Color,.5)},toolbar:{color:(0,i.fade)(b.textColor,.54),hoverColor:(0,i.fade)(b.textColor,.87),backgroundColor:(0,i.darken)(b.accent2Color,.05),height:56,titleFontSize:20,iconColor:(0,i.fade)(b.textColor,.4),separatorColor:(0,i.fade)(b.textColor,.175),menuHoverColor:(0,i.fade)(b.textColor,.1)},tooltip:{color:p.white,rippleBackgroundColor:p.grey700,opacity:.9}},e,{baseTheme:g,rawTheme:g});var x=[u.default,c.default,s.default].map(function(t){return t(e)}).filter(function(e){return e});return e.prepareStyles=f.default.apply(void 0,(0,r.default)(x)),e};var o=h(n(205)),i=n(39),a=h(n(203)),l=h(n(201)),u=h(n(200)),s=h(n(175)),c=h(n(174)),f=h(n(171)),d=h(n(170)),p=n(49);function h(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){var r=n(19);r(r.S,"Object",{create:n(56)})},function(e,t,n){n(215);var r=n(13).Object;e.exports=function(e,t){return r.create(e,t)}},function(e,t,n){e.exports={default:n(216),__esModule:!0}},function(e,t,n){var r=n(30),o=n(31),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(61)(Function.call,n(94).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t,n){var r=n(19);r(r.S,"Object",{setPrototypeOf:n(218).set})},function(e,t,n){n(219),e.exports=n(13).Object.setPrototypeOf},function(e,t,n){e.exports={default:n(220),__esModule:!0}},function(e,t,n){n(51)("observable")},function(e,t,n){n(51)("asyncIterator")},function(e,t){},function(e,t,n){var r=n(28),o=n(95).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(r(e))}},function(e,t,n){var r=n(55);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(33),o=n(50),i=n(40);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var a,l=n(e),u=i.f,s=0;l.length>s;)u.call(e,a=l[s++])&&t.push(a);return t}},function(e,t,n){var r=n(41)("meta"),o=n(30),i=n(25),a=n(18).f,l=0,u=Object.isExtensible||function(){return!0},s=!n(29)(function(){return u(Object.preventExtensions({}))}),c=function(e){a(e,r,{value:{i:"O"+ ++l,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!u(e))return"F";if(!t)return"E";c(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!u(e))return!0;if(!t)return!1;c(e)}return e[r].w},onFreeze:function(e){return s&&f.NEED&&u(e)&&!i(e,r)&&c(e),e}}},function(e,t,n){"use strict";var r=n(20),o=n(25),i=n(24),a=n(19),l=n(99),u=n(228).KEY,s=n(29),c=n(62),f=n(53),d=n(41),p=n(15),h=n(52),m=n(51),y=n(227),v=n(226),b=n(31),g=n(30),x=n(28),k=n(60),C=n(35),w=n(56),_=n(225),E=n(94),S=n(18),T=n(33),O=E.f,M=S.f,P=_.f,I=r.Symbol,R=r.JSON,F=R&&R.stringify,j=p("_hidden"),A=p("toPrimitive"),D={}.propertyIsEnumerable,L=c("symbol-registry"),N=c("symbols"),W=c("op-symbols"),z=Object.prototype,B="function"==typeof I,U=r.QObject,H=!U||!U.prototype||!U.prototype.findChild,K=i&&s(function(){return 7!=w(M({},"a",{get:function(){return M(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=O(z,t);r&&delete z[t],M(e,t,n),r&&e!==z&&M(z,t,r)}:M,V=function(e){var t=N[e]=w(I.prototype);return t._k=e,t},q=B&&"symbol"==typeof I.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof I},G=function(e,t,n){return e===z&&G(W,t,n),b(e),t=k(t,!0),b(n),o(N,t)?(n.enumerable?(o(e,j)&&e[j][t]&&(e[j][t]=!1),n=w(n,{enumerable:C(0,!1)})):(o(e,j)||M(e,j,C(1,{})),e[j][t]=!0),K(e,t,n)):M(e,t,n)},$=function(e,t){b(e);for(var n,r=y(t=x(t)),o=0,i=r.length;i>o;)G(e,n=r[o++],t[n]);return e},Y=function(e){var t=D.call(this,e=k(e,!0));return!(this===z&&o(N,e)&&!o(W,e))&&(!(t||!o(this,e)||!o(N,e)||o(this,j)&&this[j][e])||t)},Q=function(e,t){if(e=x(e),t=k(t,!0),e!==z||!o(N,t)||o(W,t)){var n=O(e,t);return!n||!o(N,t)||o(e,j)&&e[j][t]||(n.enumerable=!0),n}},X=function(e){for(var t,n=P(x(e)),r=[],i=0;n.length>i;)o(N,t=n[i++])||t==j||t==u||r.push(t);return r},Z=function(e){for(var t,n=e===z,r=P(n?W:x(e)),i=[],a=0;r.length>a;)!o(N,t=r[a++])||n&&!o(z,t)||i.push(N[t]);return i};B||(l((I=function(){if(this instanceof I)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(n){this===z&&t.call(W,n),o(this,j)&&o(this[j],e)&&(this[j][e]=!1),K(this,e,C(1,n))};return i&&H&&K(z,e,{configurable:!0,set:t}),V(e)}).prototype,"toString",function(){return this._k}),E.f=Q,S.f=G,n(95).f=_.f=X,n(40).f=Y,n(50).f=Z,i&&!n(57)&&l(z,"propertyIsEnumerable",Y,!0),h.f=function(e){return V(p(e))}),a(a.G+a.W+a.F*!B,{Symbol:I});for(var J="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;J.length>ee;)p(J[ee++]);for(var te=T(p.store),ne=0;te.length>ne;)m(te[ne++]);a(a.S+a.F*!B,"Symbol",{for:function(e){return o(L,e+="")?L[e]:L[e]=I(e)},keyFor:function(e){if(!q(e))throw TypeError(e+" is not a symbol!");for(var t in L)if(L[t]===e)return t},useSetter:function(){H=!0},useSimple:function(){H=!1}}),a(a.S+a.F*!B,"Object",{create:function(e,t){return void 0===t?w(e):$(w(e),t)},defineProperty:G,defineProperties:$,getOwnPropertyDescriptor:Q,getOwnPropertyNames:X,getOwnPropertySymbols:Z}),R&&a(a.S+a.F*(!B||s(function(){var e=I();return"[null]"!=F([e])||"{}"!=F({a:e})||"{}"!=F(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(g(t)||void 0!==e)&&!q(e))return v(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!q(t))return t}),r[1]=t,F.apply(R,r)}}),I.prototype[A]||n(32)(I.prototype,A,I.prototype.valueOf),f(I,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){n(229),n(224),n(223),n(222),e.exports=n(13).Symbol},function(e,t,n){e.exports={default:n(230),__esModule:!0}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t){e.exports=function(){}},function(e,t,n){"use strict";var r=n(233),o=n(232),i=n(34),a=n(28);e.exports=n(100)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){n(234);for(var r=n(20),o=n(32),i=n(34),a=n(15)("toStringTag"),l="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),u=0;u<l.length;u++){var s=l[u],c=r[s],f=c&&c.prototype;f&&!f[a]&&o(f,a,s),i[s]=i.Array}},function(e,t,n){var r=n(20).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(58),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(28),o=n(96),i=n(237);e.exports=function(e){return function(t,n,a){var l,u=r(t),s=o(u.length),c=i(a,s);if(e&&n!=n){for(;s>c;)if((l=u[c++])!=l)return!0}else for(;s>c;c++)if((e||c in u)&&u[c]===n)return e||c||0;return!e&&-1}}},function(e,t,n){var r=n(18),o=n(31),i=n(33);e.exports=n(24)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),l=a.length,u=0;l>u;)r.f(e,n=a[u++],t[n]);return e}},function(e,t,n){"use strict";var r=n(56),o=n(35),i=n(53),a={};n(32)(a,n(15)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(58),o=n(64);e.exports=function(e){return function(t,n){var i,a,l=String(o(t)),u=r(n),s=l.length;return u<0||u>=s?e?"":void 0:(i=l.charCodeAt(u))<55296||i>56319||u+1===s||(a=l.charCodeAt(u+1))<56320||a>57343?e?l.charAt(u):i:e?l.slice(u,u+2):a-56320+(i-55296<<10)+65536}}},function(e,t,n){n(101),n(235),e.exports=n(52).f("iterator")},function(e,t,n){e.exports={default:n(242),__esModule:!0}},function(e,t,n){var r=n(19);r(r.S+r.F*!n(24),"Object",{defineProperty:n(18).f})},function(e,t,n){n(244);var r=n(13).Object;e.exports=function(e,t,n){return r.defineProperty(e,t,n)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(36),o=n(106);n(105)("getPrototypeOf",function(){return function(e){return o(r(e))}})},function(e,t,n){n(247),e.exports=n(13).Object.getPrototypeOf},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(68),o=n(69),i=n(250);e.exports=function(){function e(e,t,n,r,a,l){l!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(252);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(253);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(69),o=n(0),i=n(256),a=n(109),l=n(68),u=n(255),s=n(67),c=n(254),f=n(108);function d(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||d("227");var p={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,l,u){(function(e,t,n,r,o,i,a,l,u){this._hasCaughtError=!1,this._caughtError=null;var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(p,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,l,u){if(p.invokeGuardedCallback.apply(this,arguments),p.hasCaughtError()){var s=p.clearCaughtError();p._hasRethrowError||(p._hasRethrowError=!0,p._rethrowError=s)}},rethrowCaughtError:function(){return function(){if(p._hasRethrowError){var e=p._rethrowError;throw p._rethrowError=null,p._hasRethrowError=!1,e}}.apply(p,arguments)},hasCaughtError:function(){return p._hasCaughtError},clearCaughtError:function(){if(p._hasCaughtError){var e=p._caughtError;return p._caughtError=null,p._hasCaughtError=!1,e}d("198")}};var h=null,m={};function y(){if(h)for(var e in m){var t=m[e],n=h.indexOf(e);if(-1<n||d("96",e),!b[n])for(var r in t.extractEvents||d("97",e),b[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,l=r;g.hasOwnProperty(l)&&d("99",l),g[l]=i;var u=i.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&v(u[o],a,l);o=!0}else i.registrationName?(v(i.registrationName,a,l),o=!0):o=!1;o||d("98",r,e)}}}function v(e,t,n){x[e]&&d("100",e),x[e]=t,k[e]=t.eventTypes[n].dependencies}var b=[],g={},x={},k={};function C(e){h&&d("101"),h=Array.prototype.slice.call(e),y()}function w(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&d("102",t),m[t]=r,n=!0)}n&&y()}var _=Object.freeze({plugins:b,eventNameDispatchConfigs:g,registrationNameModules:x,registrationNameDependencies:k,possibleRegistrationNames:null,injectEventPluginOrder:C,injectEventPluginsByName:w}),E=null,S=null,T=null;function O(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=T(r),p.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function M(e,t){return null==t&&d("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function P(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var I=null;function R(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)O(e,t,n[o],r[o]);else n&&O(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function F(e){return R(e,!0)}function j(e){return R(e,!1)}var A={injectEventPluginOrder:C,injectEventPluginsByName:w};function D(e,t){var n=e.stateNode;if(!n)return null;var r=E(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&d("231",t,typeof n),n)}function L(e,t){null!==e&&(I=M(I,e)),e=I,I=null,e&&(P(e,t?F:j),I&&d("95"),p.rethrowCaughtError())}function N(e,t,n,r){for(var o=null,i=0;i<b.length;i++){var a=b[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=M(o,a))}L(o,!1)}var W=Object.freeze({injection:A,getListener:D,runEventsInBatch:L,runExtractedEventsInBatch:N}),z=Math.random().toString(36).slice(2),B="__reactInternalInstance$"+z,U="__reactEventHandlers$"+z;function H(e){if(e[B])return e[B];for(;!e[B];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[B]).tag||6===e.tag?e:null}function K(e){if(5===e.tag||6===e.tag)return e.stateNode;d("33")}function V(e){return e[U]||null}var q=Object.freeze({precacheFiberNode:function(e,t){t[B]=e},getClosestInstanceFromNode:H,getInstanceFromNode:function(e){return!(e=e[B])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:K,getFiberCurrentPropsFromNode:V,updateFiberProps:function(e,t){e[U]=t}});function G(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){for(var r=[];e;)r.push(e),e=G(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Y(e,t,n){(t=D(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=M(n._dispatchListeners,t),n._dispatchInstances=M(n._dispatchInstances,e))}function Q(e){e&&e.dispatchConfig.phasedRegistrationNames&&$(e._targetInst,Y,e)}function X(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;$(t=t?G(t):null,Y,e)}}function Z(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=D(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=M(n._dispatchListeners,t),n._dispatchInstances=M(n._dispatchInstances,e))}function J(e){e&&e.dispatchConfig.registrationName&&Z(e._targetInst,null,e)}function ee(e){P(e,Q)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,l=o;l;l=G(l))a++;l=0;for(var u=i;u;u=G(u))l++;for(;0<a-l;)o=G(o),a--;for(;0<l-a;)i=G(i),l--;for(;a--;){if(o===i||o===i.alternate)break e;o=G(o),i=G(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=G(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=G(r);for(r=0;r<o.length;r++)Z(o[r],"bubbled",e);for(e=n.length;0<e--;)Z(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){P(e,X)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){P(e,J)}}),re=null;function oe(){return!re&&i.canUseDOM&&(re="textContent"in document.documentElement?"textContent":"innerText"),re}var ie={_root:null,_startText:null,_fallbackText:null};function ae(){if(ie._fallbackText)return ie._fallbackText;var e,t,n=ie._startText,r=n.length,o=le(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ie._fallbackText=o.slice(e,1<t?1-t:void 0),ie._fallbackText}function le(){return"value"in ie._root?ie._root.value:ie._root[oe()]}var ue="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),se={type:null,target:null,currentTarget:l.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ce(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?l.thatReturnsTrue:l.thatReturnsFalse,this.isPropagationStopped=l.thatReturnsFalse,this}function fe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function de(e){e instanceof this||d("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function pe(e){e.eventPool=[],e.getPooled=fe,e.release=de}a(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=l.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=l.thatReturnsTrue)},persist:function(){this.isPersistent=l.thatReturnsTrue},isPersistent:l.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<ue.length;t++)this[ue[t]]=null}}),ce.Interface=se,ce.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,pe(n),n},pe(ce);var he=ce.extend({data:null}),me=ce.extend({data:null}),ye=[9,13,27,32],ve=i.canUseDOM&&"CompositionEvent"in window,be=null;i.canUseDOM&&"documentMode"in document&&(be=document.documentMode);var ge=i.canUseDOM&&"TextEvent"in window&&!be,xe=i.canUseDOM&&(!ve||be&&8<be&&11>=be),ke=String.fromCharCode(32),Ce={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},we=!1;function _e(e,t){switch(e){case"topKeyUp":return-1!==ye.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Se=!1;var Te={eventTypes:Ce,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ve)e:{switch(e){case"topCompositionStart":o=Ce.compositionStart;break e;case"topCompositionEnd":o=Ce.compositionEnd;break e;case"topCompositionUpdate":o=Ce.compositionUpdate;break e}o=void 0}else Se?_e(e,n)&&(o=Ce.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=Ce.compositionStart);return o?(xe&&(Se||o!==Ce.compositionStart?o===Ce.compositionEnd&&Se&&(i=ae()):(ie._root=r,ie._startText=le(),Se=!0)),o=he.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ee(n))&&(o.data=i),ee(o),i=o):i=null,(e=ge?function(e,t){switch(e){case"topCompositionEnd":return Ee(t);case"topKeyPress":return 32!==t.which?null:(we=!0,ke);case"topTextInput":return(e=t.data)===ke&&we?null:e;default:return null}}(e,n):function(e,t){if(Se)return"topCompositionEnd"===e||!ve&&_e(e,t)?(e=ae(),ie._root=null,ie._startText=null,ie._fallbackText=null,Se=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return xe?null:t.data;default:return null}}(e,n))?((t=me.getPooled(Ce.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Oe=null,Me={injectFiberControlledHostComponent:function(e){Oe=e}},Pe=null,Ie=null;function Re(e){if(e=S(e)){Oe&&"function"==typeof Oe.restoreControlledState||d("194");var t=E(e.stateNode);Oe.restoreControlledState(e.stateNode,e.type,t)}}function Fe(e){Pe?Ie?Ie.push(e):Ie=[e]:Pe=e}function je(){return null!==Pe||null!==Ie}function Ae(){if(Pe){var e=Pe,t=Ie;if(Ie=Pe=null,Re(e),t)for(e=0;e<t.length;e++)Re(t[e])}}var De=Object.freeze({injection:Me,enqueueStateRestore:Fe,needsStateRestore:je,restoreStateIfNeeded:Ae});function Le(e,t){return e(t)}function Ne(e,t,n){return e(t,n)}function We(){}var ze=!1;function Be(e,t){if(ze)return e(t);ze=!0;try{return Le(e,t)}finally{ze=!1,je()&&(We(),Ae())}}var Ue={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function He(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ue[e.type]:"textarea"===t}function Ke(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ve(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function qe(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ge(e){e._valueTracker||(e._valueTracker=function(e){var t=qe(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=qe(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ye=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Qe="function"==typeof Symbol&&Symbol.for,Xe=Qe?Symbol.for("react.element"):60103,Ze=Qe?Symbol.for("react.call"):60104,Je=Qe?Symbol.for("react.return"):60105,et=Qe?Symbol.for("react.portal"):60106,tt=Qe?Symbol.for("react.fragment"):60107,nt=Qe?Symbol.for("react.strict_mode"):60108,rt=Qe?Symbol.for("react.provider"):60109,ot=Qe?Symbol.for("react.context"):60110,it=Qe?Symbol.for("react.async_mode"):60111,at=Qe?Symbol.for("react.forward_ref"):60112,lt="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||void 0===e?null:"function"==typeof(e=lt&&e[lt]||e["@@iterator"])?e:null}function st(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Ze:return"ReactCall";case Je:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case at:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function ct(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=st(e),i=null;n&&(i=st(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,dt={},pt={};function ht(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var mt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){mt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];mt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){mt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){mt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){mt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){mt[e]=new ht(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){mt[e]=new ht(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){mt[e]=new ht(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){mt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var yt=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function bt(e,t,n,r){var o=mt.hasOwnProperty(t)?mt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!pt.hasOwnProperty(e)||!dt.hasOwnProperty(e)&&(ft.test(e)?pt[e]=!0:(dt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function gt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Et(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function kt(e,t){null!=(t=t.checked)&&bt(e,"checked",t,!1)}function Ct(e,t){kt(e,t);var n=Et(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?_t(e,t.type,n):t.hasOwnProperty("defaultValue")&&_t(e,t.type,Et(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function wt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function _t(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Et(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(yt,vt);mt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(yt,vt);mt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(yt,vt);mt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),mt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var St={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Tt(e,t,n){return(e=ce.getPooled(St.change,e,t,n)).type="change",Fe(n),ee(e),e}var Ot=null,Mt=null;function Pt(e){L(e,!1)}function It(e){if($e(K(e)))return e}function Rt(e,t){if("topChange"===e)return t}var Ft=!1;function jt(){Ot&&(Ot.detachEvent("onpropertychange",At),Mt=Ot=null)}function At(e){"value"===e.propertyName&&It(Mt)&&Be(Pt,e=Tt(Mt,e,Ke(e)))}function Dt(e,t,n){"topFocus"===e?(jt(),Mt=n,(Ot=t).attachEvent("onpropertychange",At)):"topBlur"===e&&jt()}function Lt(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return It(Mt)}function Nt(e,t){if("topClick"===e)return It(t)}function Wt(e,t){if("topInput"===e||"topChange"===e)return It(t)}i.canUseDOM&&(Ft=Ve("input")&&(!document.documentMode||9<document.documentMode));var zt={eventTypes:St,_isInputEventSupported:Ft,extractEvents:function(e,t,n,r){var o=t?K(t):window,i=void 0,a=void 0,l=o.nodeName&&o.nodeName.toLowerCase();if("select"===l||"input"===l&&"file"===o.type?i=Rt:He(o)?Ft?i=Wt:(i=Lt,a=Dt):(l=o.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Nt),i&&(i=i(e,t)))return Tt(i,n,r);a&&a(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&_t(o,"number",o.value)}},Bt=ce.extend({view:null,detail:null}),Ut={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Ht(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ut[e])&&!!t[e]}function Kt(){return Ht}var Vt=Bt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Kt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),qt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Gt={eventTypes:qt,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?H(t):null):e=null,e===t)return null;var i=null==e?o:K(e);o=null==t?o:K(t);var a=Vt.getPooled(qt.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=Vt.getPooled(qt.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,te(a,n,e,t),[a,n]}};function $t(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Yt(e){return!!(e=e._reactInternalFiber)&&2===$t(e)}function Qt(e){2!==$t(e)&&d("188")}function Xt(e){var t=e.alternate;if(!t)return 3===(t=$t(e))&&d("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return Qt(o),e;if(a===r)return Qt(o),t;a=a.sibling}d("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var l=o.child;l;){if(l===n){a=!0,n=o,r=i;break}if(l===r){a=!0,r=o,n=i;break}l=l.sibling}if(!a){for(l=i.child;l;){if(l===n){a=!0,n=i,r=o;break}if(l===r){a=!0,r=i,n=o;break}l=l.sibling}a||d("189")}}n.alternate!==r&&d("190")}return 3!==n.tag&&d("188"),n.stateNode.current===n?e:t}function Zt(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Jt=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=Bt.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=Bt.extend({key:function(e){if(e.key){var t=rn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?on[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Kt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ln=Vt.extend({dataTransfer:null}),un=Bt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Kt}),sn=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),cn=Vt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},dn={};function pn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},fn[e]=t,dn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){pn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){pn(e,!1)});var hn={eventTypes:fn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=dn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=dn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Vt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=ln;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=un;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Jt;break;case"topTransitionEnd":e=sn;break;case"topScroll":e=Bt;break;case"topWheel":e=cn;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=ce}return ee(t=e.getPooled(o,t,n,r)),t}},mn=hn.isInteractiveTopLevelEventType,yn=[];function vn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=H(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],N(e.topLevelType,t,e.nativeEvent,Ke(e.nativeEvent))}var bn=!0;function gn(e){bn=!!e}function xn(e,t,n){if(!n)return null;e=(mn(e)?Cn:wn).bind(null,e),n.addEventListener(t,e,!1)}function kn(e,t,n){if(!n)return null;e=(mn(e)?Cn:wn).bind(null,e),n.addEventListener(t,e,!0)}function Cn(e,t){Ne(wn,e,t)}function wn(e,t){if(bn){var n=Ke(t);if(null!==(n=H(n))&&"number"==typeof n.tag&&2!==$t(n)&&(n=null),yn.length){var r=yn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Be(vn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>yn.length&&yn.push(e)}}}var _n=Object.freeze({get _enabled(){return bn},setEnabled:gn,isEnabled:function(){return bn},trapBubbledEvent:xn,trapCapturedEvent:kn,dispatchEvent:wn});function En(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var Sn={animationend:En("Animation","AnimationEnd"),animationiteration:En("Animation","AnimationIteration"),animationstart:En("Animation","AnimationStart"),transitionend:En("Transition","TransitionEnd")},Tn={},On={};function Mn(e){if(Tn[e])return Tn[e];if(!Sn[e])return e;var t,n=Sn[e];for(t in n)if(n.hasOwnProperty(t)&&t in On)return Tn[e]=n[t];return e}i.canUseDOM&&(On=document.createElement("div").style,"AnimationEvent"in window||(delete Sn.animationend.animation,delete Sn.animationiteration.animation,delete Sn.animationstart.animation),"TransitionEvent"in window||delete Sn.transitionend.transition);var Pn={topAnimationEnd:Mn("animationend"),topAnimationIteration:Mn("animationiteration"),topAnimationStart:Mn("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:Mn("transitionend"),topWheel:"wheel"},In={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Rn={},Fn=0,jn="_reactListenersID"+(""+Math.random()).slice(2);function An(e){return Object.prototype.hasOwnProperty.call(e,jn)||(e[jn]=Fn++,Rn[e[jn]]={}),Rn[e[jn]]}function Dn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Ln(e,t){var n,r=Dn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Dn(r)}}function Nn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Wn=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,zn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Bn=null,Un=null,Hn=null,Kn=!1;function Vn(e,t){if(Kn||null==Bn||Bn!==u())return null;var n=Bn;return"selectionStart"in n&&Nn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Hn&&s(Hn,n)?null:(Hn=n,(e=ce.getPooled(zn.select,Un,e,t)).type="select",e.target=Bn,ee(e),e)}var qn={eventTypes:zn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=An(i),o=k.onSelect;for(var a=0;a<o.length;a++){var l=o[a];if(!i.hasOwnProperty(l)||!i[l]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?K(t):window,e){case"topFocus":(He(i)||"true"===i.contentEditable)&&(Bn=i,Un=t,Hn=null);break;case"topBlur":Hn=Un=Bn=null;break;case"topMouseDown":Kn=!0;break;case"topContextMenu":case"topMouseUp":return Kn=!1,Vn(n,r);case"topSelectionChange":if(Wn)break;case"topKeyDown":case"topKeyUp":return Vn(n,r)}return null}};function Gn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function $n(e,t,n){var r=e.alternate;return null===r?((r=new Gn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Yn(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case tt:return Qn(e.children,t,n,o);case it:i=11,t|=3;break;case nt:i=11,t|=2;break;case Ze:i=7;break;case Je:i=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case rt:i=13;break;case ot:i=12;break;case at:i=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;d("130",null==r?r:typeof r,"")}else d("130",null==r?r:typeof r,"")}return(t=new Gn(i,e,o,t)).type=r,t.expirationTime=n,t}function Qn(e,t,n,r){return(e=new Gn(10,e,r,t)).expirationTime=n,e}function Xn(e,t,n){return(e=new Gn(6,e,null,t)).expirationTime=n,e}function Zn(e,t,n){return(t=new Gn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}A.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),E=q.getFiberCurrentPropsFromNode,S=q.getInstanceFromNode,T=q.getNodeFromInstance,A.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:Gt,ChangeEventPlugin:zt,SelectEventPlugin:qn,BeforeInputEventPlugin:Te});var Jn=null,er=null;function tr(e){return function(t){try{return e(t)}catch(e){}}}function nr(e){"function"==typeof Jn&&Jn(e)}function rr(e){"function"==typeof er&&er(e)}function or(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ir(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ar=void 0,lr=void 0;function ur(e){ar=lr=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=or(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=or(null)):e=null,ar=n,lr=e!==n?e:null}function sr(e,t){ur(e),e=ar;var n=lr;null===n?ir(e,t):null===e.last||null===n.last?(ir(e,t),ir(n,t)):(ir(e,t),n.last=t)}function cr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function fr(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var l=!0,u=n.first,s=!1;null!==u;){var c=u.expirationTime;if(c>i){var f=n.expirationTime;(0===f||f>c)&&(n.expirationTime=c),s||(s=!0,n.baseState=e)}else s||(n.first=u.next,null===n.first&&(n.last=null)),u.isReplace?(e=cr(u,r,e,o),l=!0):(c=cr(u,r,e,o))&&(e=l?a({},e,c):a(e,c),l=!1),u.isForced&&(n.hasForceUpdate=!0),null!==u.callback&&(null===(c=n.callbackList)&&(c=n.callbackList=[]),c.push(u)),null!==u.capturedValue&&(null===(c=n.capturedValues)?n.capturedValues=[u.capturedValue]:c.push(u.capturedValue));u=u.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),s||(n.baseState=e),e}function dr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&d("191",o),o.call(t)}}var pr=Array.isArray;function hr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&d("110"),r=n.stateNode),r||d("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&d("148"),n._owner||d("254",e)}return e}function mr(e,t){"textarea"!==e.type&&d("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function yr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=$n(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Xn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function u(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=hr(e,t,n),r.return=e,r):((r=Yn(n,e.mode,r)).ref=hr(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Zn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function c(e,t,n,r,i){return null===t||10!==t.tag?((t=Qn(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Xe:return(n=Yn(t,e.mode,n)).ref=hr(e,null,t),n.return=e,n;case et:return(t=Zn(t,e.mode,n)).return=e,t}if(pr(t)||ut(t))return(t=Qn(t,e.mode,n,null)).return=e,t;mr(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Xe:return n.key===o?n.type===tt?c(e,t,n.props.children,r,o):u(e,t,n,r):null;case et:return n.key===o?s(e,t,n,r):null}if(pr(n)||ut(n))return null!==o?null:c(e,t,n,r,null);mr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Xe:return e=e.get(null===r.key?n:r.key)||null,r.type===tt?c(t,e,r.props.children,o,r.key):u(t,e,r,o);case et:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(pr(r)||ut(r))return c(t,e=e.get(n)||null,r,o,null);mr(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,d=a,m=a=0,y=null;null!==d&&m<l.length;m++){d.index>m?(y=d,d=null):y=d.sibling;var v=p(o,d,l[m],u);if(null===v){null===d&&(d=y);break}e&&d&&null===v.alternate&&t(o,d),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v,d=y}if(m===l.length)return n(o,d),s;if(null===d){for(;m<l.length;m++)(d=f(o,l[m],u))&&(a=i(d,a,m),null===c?s=d:c.sibling=d,c=d);return s}for(d=r(o,d);m<l.length;m++)(y=h(d,o,m,l[m],u))&&(e&&null!==y.alternate&&d.delete(null===y.key?m:y.key),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y);return e&&d.forEach(function(e){return t(o,e)}),s}function y(o,a,l,u){var s=ut(l);"function"!=typeof s&&d("150"),null==(l=s.call(l))&&d("151");for(var c=s=null,m=a,y=a=0,v=null,b=l.next();null!==m&&!b.done;y++,b=l.next()){m.index>y?(v=m,m=null):v=m.sibling;var g=p(o,m,b.value,u);if(null===g){m||(m=v);break}e&&m&&null===g.alternate&&t(o,m),a=i(g,a,y),null===c?s=g:c.sibling=g,c=g,m=v}if(b.done)return n(o,m),s;if(null===m){for(;!b.done;y++,b=l.next())null!==(b=f(o,b.value,u))&&(a=i(b,a,y),null===c?s=b:c.sibling=b,c=b);return s}for(m=r(o,m);!b.done;y++,b=l.next())null!==(b=h(m,o,y,b.value,u))&&(e&&null!==b.alternate&&m.delete(null===b.key?y:b.key),a=i(b,a,y),null===c?s=b:c.sibling=b,c=b);return e&&m.forEach(function(e){return t(o,e)}),s}return function(e,r,i,l){"object"==typeof i&&null!==i&&i.type===tt&&null===i.key&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case Xe:e:{var s=i.key;for(u=r;null!==u;){if(u.key===s){if(10===u.tag?i.type===tt:u.type===i.type){n(e,u.sibling),(r=o(u,i.type===tt?i.props.children:i.props,l)).ref=hr(e,u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===tt?((r=Qn(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Yn(i,e.mode,l)).ref=hr(e,r,i),l.return=e,e=l)}return a(e);case et:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],l)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Zn(i,e.mode,l)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i,l)).return=e,e=r):(n(e,r),(r=Xn(i,e.mode,l)).return=e,e=r),a(e);if(pr(i))return m(e,r,i,l);if(ut(i))return y(e,r,i,l);if(u&&mr(e,i),void 0===i)switch(e.tag){case 2:case 1:d("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var vr=yr(!0),br=yr(!1);function gr(e,t,n,r,o,i,l){function u(e,t,n){c(e,t,n,t.expirationTime)}function c(e,t,n,r){t.child=null===e?br(t,null,n,r):vr(t,e.child,n,r)}function p(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,i){if(p(e,t),!n&&!o)return r&&O(t,!1),v(e,t);n=t.stateNode,Ye.current=t;var a=o?null:n.render();return t.effectTag|=1,o&&(c(e,t,null,i),t.child=null),c(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,r&&O(t,!0),t.child}function m(e){var t=e.stateNode;t.pendingContext?T(e,t.pendingContext,t.pendingContext!==t.context):t.context&&T(e,t.context,!1),k(e,t.containerInfo)}function y(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function v(e,t){if(null!==e&&t.child!==e.child&&d("153"),null!==t.child){var n=$n(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$n(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var b=e.shouldSetTextContent,g=e.shouldDeprioritizeSubtree,x=t.pushHostContext,k=t.pushHostContainer,C=r.pushProvider,w=n.getMaskedContext,_=n.getUnmaskedContext,E=n.hasContextChanged,S=n.pushContextProvider,T=n.pushTopLevelContextObject,O=n.invalidateContextProvider,M=o.enterHydrationState,P=o.resetHydrationState,I=o.tryToClaimNextHydratableInstance,R=(e=function(e,t,n,r,o){function i(e,t,n,r,o,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!(e.prototype&&e.prototype.isPureReactComponent&&s(t,n)&&s(r,o))}function l(e,t){t.updater=v,e.stateNode=t,t._reactInternalFiber=e}function u(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&v.enqueueReplaceState(t,t.state,null)}function c(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var d=e.cacheContext,p=e.getMaskedContext,h=e.getUnmaskedContext,m=e.isContextConsumer,y=e.hasContextChanged,v={isMounted:Yt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);sr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);sr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);sr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:l,callGetDerivedStateFromProps:c,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=m(e),i=o?p(e,r):f,u=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return l(e,n),e.memoizedState=u,null!==(t=c(e,0,t,u))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),o&&d(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,i=e.pendingProps,a=h(e);o.props=i,o.state=e.memoizedState,o.refs=f,o.context=p(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&v.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=fr(r,e,n,o,i,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,l=e.stateNode;l.props=e.memoizedProps,l.state=e.memoizedState;var s=e.memoizedProps,f=e.pendingProps,d=l.context,m=h(e);m=p(e,m),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(s!==f||d!==m)&&u(e,l,f,m),d=e.memoizedState,t=null!==e.updateQueue?fr(null,e,e.updateQueue,l,f,t):d;var v=void 0;if(s!==f&&(v=c(e,0,f,t)),null!==v&&void 0!==v){t=null===t||void 0===t?v:a({},t,v);var b=e.updateQueue;null!==b&&(b.baseState=a({},b.baseState,v))}return s!==f||d!==t||y()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((s=i(e,s,f,d,t,m))?(n||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(e.effectTag|=4)):("function"==typeof l.componentDidMount&&(e.effectTag|=4),r(e,f),o(e,t)),l.props=f,l.state=t,l.context=m,s):("function"==typeof l.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var l=t.type,s=t.stateNode;s.props=t.memoizedProps,s.state=t.memoizedState;var f=t.memoizedProps,d=t.pendingProps,m=s.context,v=h(t);v=p(t,v),(l="function"==typeof l.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(f!==d||m!==v)&&u(t,s,d,v),m=t.memoizedState,n=null!==t.updateQueue?fr(e,t,t.updateQueue,s,d,n):m;var b=void 0;if(f!==d&&(b=c(t,0,d,n)),null!==b&&void 0!==b){n=null===n||void 0===n?b:a({},n,b);var g=t.updateQueue;null!==g&&(g.baseState=a({},g.baseState,b))}return f!==d||m!==n||y()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((b=i(t,f,d,m,n,v))?(l||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(d,n,v),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(d,n,v)),"function"==typeof s.componentDidUpdate&&(t.effectTag|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof s.componentDidUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),r(t,d),o(t,n)),s.props=d,s.state=n,s.context=v,b):("function"!=typeof s.componentDidUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,l,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,F=e.callGetDerivedStateFromProps,j=e.constructClassInstance,A=e.mountClassInstance,D=e.resumeMountClassInstance,L=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:m(t);break;case 2:S(t);break;case 4:k(t,t.stateNode.containerInfo);break;case 13:C(t)}return null}switch(t.tag){case 0:null!==e&&d("155");var r=t.type,o=t.pendingProps,i=_(t);return r=r(o,i=w(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=F(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=a({},t.memoizedState,o))),o=S(t),R(t,r),A(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,u(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,E()||t.memoizedProps!==n?(r=_(t),o=o(n,r=w(t,r)),t.effectTag|=1,u(e,t,o),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 2:o=S(t),null===e?null===t.stateNode?(j(t,t.pendingProps),A(t,n),r=!0):r=D(t,n):r=L(e,t,n),i=!1;var l=t.updateQueue;return null!==l&&null!==l.capturedValues&&(i=r=!0),h(e,t,r,o,i,n);case 3:e:if(m(t),r=t.updateQueue,null!==r){if(i=t.memoizedState,o=fr(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){P(),e=v(e,t);break e}r=o.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&M(t)?(t.effectTag|=2,t.child=br(t,null,r,n)):(P(),u(e,t,r)),t.memoizedState=o,e=t.child}else P(),e=v(e,t);return e;case 5:return x(t),null===e&&I(t),o=t.type,l=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,E()||l!==r||((l=1&t.mode&&g(o,r))&&(t.expirationTime=1073741823),l&&1073741823===n)?(l=r.children,b(o,r)?l=null:i&&b(o,i)&&(t.effectTag|=16),p(e,t),1073741823!==n&&1&t.mode&&g(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(u(e,t,l),t.memoizedProps=r,e=t.child)):e=v(e,t),e;case 6:return null===e&&I(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,E()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?br(t,t.stateNode,r,n):vr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return k(t,t.stateNode.containerInfo),o=t.pendingProps,E()||t.memoizedProps!==o?(null===e?t.child=vr(t,null,o,n):u(e,t,o),t.memoizedProps=o,e=t.child):e=v(e,t),e;case 14:return u(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,E()||t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 11:return n=t.pendingProps.children,E()||null!==n&&t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps;if(!E()&&i===o)return t.stateNode=0,C(t),v(e,t);var a=o.value;if(t.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return t.stateNode=0,C(t),v(e,t);a=0}else{var l=i.value;if(l===a&&(0!==l||1/l==1/a)||l!=l&&a!=a){if(i.children===o.children)return t.stateNode=0,C(t),v(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,a):1073741823,0==(a|=0)){if(i.children===o.children)return t.stateNode=0,C(t),v(e,t)}else y(t,r,a,n)}return t.stateNode=a,C(t),u(e,t,o.children),t.child}(e,t,n);case 12:e:{r=t.type,i=t.pendingProps,l=t.memoizedProps,o=r._currentValue;var s=r._changedBits;if(E()||0!==s||l!==i){t.memoizedProps=i;var c=i.unstable_observedBits;if(void 0!==c&&null!==c||(c=1073741823),t.stateNode=c,0!=(s&c))y(t,r,s,n);else if(l===i){e=v(e,t);break e}u(e,t,n=(n=i.children)(o)),e=t.child}else e=v(e,t)}return e;default:d("156")}}}}function xr(e,t){var n=t.source;null===t.stack&&ct(n),null!==n&&st(n),t=t.value,null!==e&&2===e.tag&&st(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var kr={};function Cr(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)j(e),e=e.return;te=null,ne=0,ee=null,ie=!1}function n(e){return null!==ae&&ae.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=I(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ie=!0;break}e=n}else{if(null!==(e=F(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=P(e.alternate,e,ne);return null===t&&(t=r(e)),Ye.current=null,t}function i(e,n,i){J&&d("243"),J=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=$n((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==ee&&!_();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){a=!0,E(e);break}var l=(i=ee).return;if(null===l){a=!0,E(e);break}R(l,i,e),ee=r(i)}break}return J=!1,a||null!==ee?null:ie?(e.pendingCommitExpirationTime=n,e.current.alternate):void d("262")}function l(e,t,n,r){sr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:ct(e)},next:null}),c(t,r)}function u(e,t){e:{J&&!oe&&d("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){l(e,r,t,1),e=void 0;break e}break;case 3:l(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&l(e,e,t,1),e=void 0}return e}function s(e){return e=0!==Z?Z:J?oe?1:ne:1&e.mode?ke?10*(1+((p()+15)/10|0)):25*(1+((p()+500)/25|0)):1,ke&&(0===he||e>he)&&(he=e),e}function c(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!J&&0!==ne&&n<ne&&t(),J&&!oe&&te===r||y(r,n),_e>we&&d("185")}e=e.return}n=void 0}return n}function p(){return Q=K()-Y,2+(Q/10|0)}function h(e,t,n,r,o){var i=Z;Z=1;try{return e(t,n,r,o)}finally{Z=i}}function m(e){if(0!==se){if(e>se)return;q(ce)}var t=K()-Y;se=e,ce=V(b,{timeout:10*(e-2)-t})}function y(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===ue?(le=ue=e,e.nextScheduledRoot=e):(ue=ue.nextScheduledRoot=e).nextScheduledRoot=le;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(ge?xe&&(de=e,pe=1,C(e,1,!1)):1===t?g():m(t))}function v(){var e=0,t=null;if(null!==ue)for(var n=ue,r=le;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===ue)&&d("244"),r===r.nextScheduledRoot){le=ue=r.nextScheduledRoot=null;break}if(r===le)le=o=r.nextScheduledRoot,ue.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ue){(ue=n).nextScheduledRoot=le,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===ue)break;n=r,r=r.nextScheduledRoot}}null!==(n=de)&&n===t&&1===e?_e++:_e=0,de=t,pe=e}function b(e){x(0,!0,e)}function g(){x(1,!1,null)}function x(e,t,n){if(be=n,v(),t)for(;null!==de&&0!==pe&&(0===e||e>=pe)&&(!me||p()>=pe);)C(de,pe,!me),v();else for(;null!==de&&0!==pe&&(0===e||e>=pe);)C(de,pe,!1),v();null!==be&&(se=0,ce=-1),0!==pe&&m(pe),be=null,me=!1,k()}function k(){if(_e=0,null!==Ce){var e=Ce;Ce=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ye||(ye=!0,ve=e)}}}if(ye)throw e=ve,ve=null,ye=!1,e}function C(e,t,n){fe&&d("245"),fe=!0,n?null!==(n=e.finishedWork)?w(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(_()?e.finishedWork=n:w(e,n,t))):null!==(n=e.finishedWork)?w(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&w(e,n,t)),fe=!1}function w(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Ce?Ce=[r]:Ce.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=J=!0,(n=t.stateNode).current===t&&d("177"),0===(r=n.pendingCommitExpirationTime)&&d("261"),n.pendingCommitExpirationTime=0;var o=p();if(Ye.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;for(G(n.containerInfo),re=i;null!==re;){var a=!1,l=void 0;try{for(;null!==re;)2048&re.effectTag&&A(re.alternate,re),re=re.nextEffect}catch(e){a=!0,l=e}a&&(null===re&&d("178"),u(re,l),null!==re&&(re=re.nextEffect))}for(re=i;null!==re;){a=!1,l=void 0;try{for(;null!==re;){var s=re.effectTag;if(16&s&&D(re),128&s){var c=re.alternate;null!==c&&H(c)}switch(14&s){case 2:L(re),re.effectTag&=-3;break;case 6:L(re),re.effectTag&=-3,W(re.alternate,re);break;case 4:W(re.alternate,re);break;case 8:N(re)}re=re.nextEffect}}catch(e){a=!0,l=e}a&&(null===re&&d("178"),u(re,l),null!==re&&(re=re.nextEffect))}for($(n.containerInfo),n.current=t,re=i;null!==re;){s=!1,c=void 0;try{for(i=n,a=o,l=r;null!==re;){var f=re.effectTag;36&f&&z(i,re.alternate,re,a,l),256&f&&B(re,E),128&f&&U(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){s=!0,c=e}s&&(null===re&&d("178"),u(re,c),null!==re&&(re=re.nextEffect))}J=oe=!1,nr(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function _(){return!(null===be||be.timeRemaining()>Ee)&&(me=!0)}function E(e){null===de&&d("246"),de.remainingExpirationTime=0,ye||(ye=!0,ve=e)}var S=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),T=function(e,t){function n(e){return e===kr&&d("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var i=t.push,a=t.pop,l=e(kr),u=e(kr),s=e(kr);return{getHostContext:function(){return n(l.current)},getRootHostContainer:function(){return n(s.current)},popHostContainer:function(e){a(l,e),a(u,e),a(s,e)},popHostContext:function(e){u.current===e&&(a(l,e),a(u,e))},pushHostContainer:function(e,t){i(s,t,e),i(u,e,e),i(l,kr,e),t=o(t),a(l,e),i(l,t,e)},pushHostContext:function(e){var t=n(s.current),o=n(l.current);o!==(t=r(o,e.type,t))&&(i(u,e,e),i(l,t,e))}}}(e,S),O=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||d("108",st(e)||"Unknown",o);return a({},t,n)}var o=e.createCursor,i=e.push,l=e.pop,u=o(f),s=o(!1),c=f;return{getUnmaskedContext:function(e){return n(e)?c:u.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return f;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&t(e,n,a),a},hasContextChanged:function(){return s.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(l(s,e),l(u,e))},popTopLevelContextObject:function(e){l(s,e),l(u,e)},pushTopLevelContextObject:function(e,t,n){null!=u.cursor&&d("168"),i(u,t,e),i(s,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,c=u.current,i(u,t,e),i(s,s.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||d("169"),t){var o=r(e,c);n.__reactInternalMemoizedMergedChildContext=o,l(s,e),l(u,e),i(u,o,e)}else l(s,e);i(s,t,e)},findCurrentUnmaskedContext:function(e){for((2!==$t(e)||2!==e.tag)&&d("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||d("171")}return e.stateNode.context}}}(S);S=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;r(o,e),r(i,e),r(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(S);var M=function(e){function t(e,t){var n=new Gn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){d("175")},prepareToHydrateHostTextInstance:function(){d("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,l=e.getNextHydratableSibling,u=e.getFirstHydratableChild,s=e.hydrateInstance,c=e.hydrateTextInstance,f=null,p=null,h=!1;return{enterHydrationState:function(e){return p=u(e.stateNode.containerInfo),f=e,h=!0},resetHydrationState:function(){p=f=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=p;if(r){if(!n(e,r)){if(!(r=l(r))||!n(e,r))return e.effectTag|=2,h=!1,void(f=e);t(f,p)}f=e,p=u(r)}else e.effectTag|=2,h=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=s(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return c(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=p;n;)t(e,n),n=l(n);return r(e),p=f?l(e.stateNode):null,!0}}}(e),P=gr(e,T,O,S,M,c,s).beginWork,I=function(e,t,n,r,o){function i(e){e.effectTag|=4}var a=e.createInstance,l=e.createTextInstance,u=e.appendInitialChild,s=e.finalizeInitialChildren,c=e.prepareUpdate,f=e.persistence,p=t.getRootHostContainer,h=t.popHostContext,m=t.getHostContext,y=t.popHostContainer,v=n.popContextProvider,b=n.popTopLevelContextObject,g=r.popProvider,x=o.prepareToHydrateHostInstance,k=o.prepareToHydrateHostTextInstance,C=o.popHydrationState,w=void 0,_=void 0,E=void 0;return e.mutation?(w=function(){},_=function(e,t,n){(t.updateQueue=n)&&i(t)},E=function(e,t,n,r){n!==r&&i(t)}):d(f?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return v(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return y(t),b(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(C(t),t.effectTag&=-3),w(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=p();var o=t.type;if(null!==e&&null!=t.stateNode){var f=e.memoizedProps,S=t.stateNode,T=m();S=c(S,o,f,r,n,T),_(e,t,S,o,f,r,n,T),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&d("166"),null;if(e=m(),C(t))x(t,n,e)&&i(t);else{f=a(o,r,n,e,t);e:for(T=t.child;null!==T;){if(5===T.tag||6===T.tag)u(f,T.stateNode);else if(4!==T.tag&&null!==T.child){T.child.return=T,T=T.child;continue}if(T===t)break;for(;null===T.sibling;){if(null===T.return||T.return===t)break e;T=T.return}T.sibling.return=T.return,T=T.sibling}s(f,o,r,n,e)&&i(t),t.stateNode=f}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)E(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&d("166"),null;e=p(),n=m(),C(t)?k(t)&&i(t):t.stateNode=l(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||d("165"),t.tag=8,o=[];e:for((f=t.stateNode)&&(f.return=t);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)d("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===t)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),t.child=vr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return y(t),w(t),null;case 13:return g(t),null;case 12:return null;case 0:d("167");default:d("156")}}}}(e,T,O,S,M).completeWork,R=(T=function(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,l=t.popContextProvider,u=t.popTopLevelContextObject,s=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:ct(t)};do{switch(e.tag){case 3:return ur(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){ur(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:l(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),u(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return s(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:l(e);break;case 3:i(e),u(e);break;case 5:a(e);break;case 4:i(e);break;case 13:s(e)}}}}(T,O,S,0,n)).throwException,F=T.unwindWork,j=T.unwindInterruptedWork,A=(T=function(e,t,n,r,o){function i(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(rr(e),e.tag){case 2:i(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:i(e);break;case 7:l(e.stateNode);break;case 4:f&&s(e)}}function l(e){for(var t=e;;)if(a(t),null===t.child||f&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function u(e){return 5===e.tag||3===e.tag||4===e.tag}function s(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&d("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)l(t),o?C(r,t.stateNode):k(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var c=e.getPublicInstance,f=e.mutation;e=e.persistence,f||d(e?"235":"236");var p=f.commitMount,h=f.commitUpdate,m=f.resetTextContent,y=f.commitTextUpdate,v=f.appendChild,b=f.appendChildToContainer,g=f.insertBefore,x=f.insertInContainerBefore,k=f.removeChild,C=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:d("163")}},commitResetTextContent:function(e){m(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(u(t)){var n=t;break e}t=t.return}d("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:d("161")}16&n.effectTag&&(m(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||u(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?x(t,o.stateNode,n):g(t,o.stateNode,n):r?b(t,o.stateNode):v(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){s(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&h(n,i,o,e,r,t)}break;case 6:null===t.stateNode&&d("162"),n=t.memoizedProps,y(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:d("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&dr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=c(n.child.stateNode);break;case 2:e=n.child.stateNode}dr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&p(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:d("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&d("264");var i=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<i.length;n++){var a=(r=i[n]).value,l=r.stack;xr(e,r),t.componentDidCatch(a,{componentStack:null!==l?l:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&d("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)xr(e,r=i[n]),t(r.value);break;default:d("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=c(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,u,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,D=T.commitResetTextContent,L=T.commitPlacement,N=T.commitDeletion,W=T.commitWork,z=T.commitLifeCycles,B=T.commitErrorLogging,U=T.commitAttachRef,H=T.commitDetachRef,K=e.now,V=e.scheduleDeferredCallback,q=e.cancelDeferredCallback,G=e.prepareForCommit,$=e.resetAfterCommit,Y=K(),Q=Y,X=0,Z=0,J=!1,ee=null,te=null,ne=0,re=null,oe=!1,ie=!1,ae=null,le=null,ue=null,se=0,ce=-1,fe=!1,de=null,pe=0,he=0,me=!1,ye=!1,ve=null,be=null,ge=!1,xe=!1,ke=!1,Ce=null,we=1e3,_e=0,Ee=1;return{recalculateCurrentTime:p,computeExpirationForFiber:s,scheduleWork:c,requestWork:y,flushRoot:function(e,t){fe&&d("253"),de=e,pe=t,C(e,t,!1),g(),k()},batchedUpdates:function(e,t){var n=ge;ge=!0;try{return e(t)}finally{(ge=n)||fe||g()}},unbatchedUpdates:function(e,t){if(ge&&!xe){xe=!0;try{return e(t)}finally{xe=!1}}return e(t)},flushSync:function(e,t){fe&&d("187");var n=ge;ge=!0;try{return h(e,t)}finally{ge=n,g()}},flushControlled:function(e){var t=ge;ge=!0;try{h(e)}finally{(ge=t)||fe||x(1,!1,null)}},deferredUpdates:function(e){var t=Z;Z=25*(1+((p()+500)/25|0));try{return e()}finally{Z=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(ke)return e(t,n);ge||fe||0===he||(x(he,!1,null),he=0);var r=ke,o=ge;ge=ke=!0;try{return e(t,n)}finally{ke=r,(ge=o)||fe||g()}},flushInteractiveUpdates:function(){fe||0===he||(x(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((p()+500)/25|0));return e<=X&&(e=X+1),X=e},legacyContext:O}}function wr(e){function t(e,t,n,r,o,a){if(r=t.current,n){n=n._reactInternalFiber;var l=u(n);n=s(n)?c(n,l):l}else n=f;return null===t.context?t.context=n:t.pendingContext=n,sr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(r,o),o}var n=e.getPublicInstance,r=(e=Cr(e)).recalculateCurrentTime,o=e.computeExpirationForFiber,i=e.scheduleWork,l=e.legacyContext,u=l.findCurrentUnmaskedContext,s=l.isContextProvider,c=l.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new Gn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,i,a){var l=n.current;return t(e,n,i,r(),l=o(l),a)},updateContainerAtExpirationTime:function(e,n,o,i,a){return t(e,n,o,r(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?d("188"):d("268",Object.keys(e))),null===(e=Zt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Jn=tr(function(e){return t.onCommitFiberRoot(n,e)}),er=tr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=Zt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var _r=Object.freeze({default:wr}),Er=_r&&wr||_r,Sr=Er.default?Er.default:Er;var Tr="object"==typeof performance&&"function"==typeof performance.now,Or=void 0;Or=Tr?function(){return performance.now()}:function(){return Date.now()};var Mr=void 0,Pr=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Ir=null,Rr=!1,Fr=-1,jr=!1,Ar=0,Dr=33,Lr=33,Nr=void 0;Nr=Tr?{didTimeout:!1,timeRemaining:function(){var e=Ar-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Ar-Date.now();return 0<e?e:0}};var Wr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Wr){if(Rr=!1,e=Or(),0>=Ar-e){if(!(-1!==Fr&&Fr<=e))return void(jr||(jr=!0,requestAnimationFrame(zr)));Nr.didTimeout=!0}else Nr.didTimeout=!1;Fr=-1,e=Ir,Ir=null,null!==e&&e(Nr)}},!1);var zr=function(e){jr=!1;var t=e-Ar+Lr;t<Lr&&Dr<Lr?(8>t&&(t=8),Lr=t<Dr?Dr:t):Dr=t,Ar=e+Lr,Rr||(Rr=!0,window.postMessage(Wr,"*"))};Mr=function(e,t){return Ir=e,null!=t&&"number"==typeof t.timeout&&(Fr=Or()+t.timeout),jr||(jr=!0,requestAnimationFrame(zr)),0},Pr=function(){Ir=null,Rr=!1,Fr=-1}}else Mr=window.requestIdleCallback,Pr=window.cancelIdleCallback;else Mr=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Pr=function(e){clearTimeout(e)};function Br(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Ur(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Hr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Kr(e,t){return null!=t.dangerouslySetInnerHTML&&d("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Vr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&d("92"),Array.isArray(t)&&(1>=t.length||d("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function qr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Gr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var $r={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Yr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Qr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Yr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Xr,Zr=void 0,Jr=(Xr=function(e,t){if(e.namespaceURI!==$r.svg||"innerHTML"in e)e.innerHTML=t;else{for((Zr=Zr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Zr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Xr(e,t)})}:Xr);function eo(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var to={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||to.hasOwnProperty(o)&&to[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(to).forEach(function(e){no.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),to[t]=to[e]})});var oo=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function io(e,t,n){t&&(oo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&d("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&d("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||d("61")),null!=t.style&&"object"!=typeof t.style&&d("62",n()))}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var lo=l.thatReturns("");function uo(e,t){var n=An(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=k[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?kn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(kn("topFocus","focus",e),kn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(Ve("cancel",!0)&&kn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(Ve("close",!0)&&kn("topClose","close",e),n.topClose=!0):Pn.hasOwnProperty(o)&&xn(o,Pn[o],e),n[o]=!0)}}function so(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===$r.html&&(r=Yr(e)),r===$r.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function co(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=ao(t,n);switch(t){case"iframe":case"object":xn("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in In)In.hasOwnProperty(i)&&xn(i,In[i],e);i=n;break;case"source":xn("topError","error",e),i=n;break;case"img":case"image":case"link":xn("topError","error",e),xn("topLoad","load",e),i=n;break;case"form":xn("topReset","reset",e),xn("topSubmit","submit",e),i=n;break;case"details":xn("topToggle","toggle",e),i=n;break;case"input":xt(e,n),i=gt(e,n),xn("topInvalid","invalid",e),uo(r,"onChange");break;case"option":i=Br(e,n);break;case"select":Hr(e,n),i=a({},n,{value:void 0}),xn("topInvalid","invalid",e),uo(r,"onChange");break;case"textarea":Vr(e,n),i=Kr(e,n),xn("topInvalid","invalid",e),uo(r,"onChange");break;default:i=n}io(t,i,lo);var u,s=i;for(u in s)if(s.hasOwnProperty(u)){var c=s[u];"style"===u?ro(e,c):"dangerouslySetInnerHTML"===u?null!=(c=c?c.__html:void 0)&&Jr(e,c):"children"===u?"string"==typeof c?("textarea"!==t||""!==c)&&eo(e,c):"number"==typeof c&&eo(e,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(x.hasOwnProperty(u)?null!=c&&uo(r,u):null!=c&&bt(e,u,c,o))}switch(t){case"input":Ge(e),wt(e,n);break;case"textarea":Ge(e),Gr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Ur(e,!!n.multiple,t,!1):null!=n.defaultValue&&Ur(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=l)}}function po(e,t,n,r,o){var i=null;switch(t){case"input":n=gt(e,n),r=gt(e,r),i=[];break;case"option":n=Br(e,n),r=Br(e,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=Kr(e,n),r=Kr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=l)}io(t,r,lo),t=e=void 0;var u=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var s=n[e];for(t in s)s.hasOwnProperty(t)&&(u||(u={}),u[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(x.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var c=r[e];if(s=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==s&&(null!=c||null!=s))if("style"===e)if(s){for(t in s)!s.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(u||(u={}),u[t]="");for(t in c)c.hasOwnProperty(t)&&s[t]!==c[t]&&(u||(u={}),u[t]=c[t])}else u||(i||(i=[]),i.push(e,u)),u=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(i=i||[]).push(e,""+c)):"children"===e?s===c||"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(x.hasOwnProperty(e)?(null!=c&&uo(o,e),i||s===c||(i=[])):(i=i||[]).push(e,c))}return u&&(i=i||[]).push("style",u),i}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&kt(e,o),ao(n,r),r=ao(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],l=t[i+1];"style"===a?ro(e,l):"dangerouslySetInnerHTML"===a?Jr(e,l):"children"===a?eo(e,l):bt(e,a,l,r)}switch(n){case"input":Ct(e,o);break;case"textarea":qr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Ur(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Ur(e,!!o.multiple,o.defaultValue,!0):Ur(e,!!o.multiple,o.multiple?[]:"",!1))}}function mo(e,t,n,r,o){switch(t){case"iframe":case"object":xn("topLoad","load",e);break;case"video":case"audio":for(var i in In)In.hasOwnProperty(i)&&xn(i,In[i],e);break;case"source":xn("topError","error",e);break;case"img":case"image":case"link":xn("topError","error",e),xn("topLoad","load",e);break;case"form":xn("topReset","reset",e),xn("topSubmit","submit",e);break;case"details":xn("topToggle","toggle",e);break;case"input":xt(e,n),xn("topInvalid","invalid",e),uo(o,"onChange");break;case"select":Hr(e,n),xn("topInvalid","invalid",e),uo(o,"onChange");break;case"textarea":Vr(e,n),xn("topInvalid","invalid",e),uo(o,"onChange")}for(var a in io(t,n,lo),r=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):x.hasOwnProperty(a)&&null!=i&&uo(o,a));switch(t){case"input":Ge(e),wt(e,n);break;case"textarea":Ge(e),Gr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=l)}return r}function yo(e,t){return e.nodeValue!==t}var vo=Object.freeze({createElement:so,createTextNode:co,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:mo,diffHydratedText:yo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Ct(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=V(r);o||d("90"),$e(r),Ct(r,o)}}}break;case"textarea":qr(e,n);break;case"select":null!=(t=n.value)&&Ur(e,!!n.multiple,t,!1)}}});Me.injectFiberControlledHostComponent(vo);var bo=null,go=null;function xo(e){this._expirationTime=Eo.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function ko(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Co(e,t,n){this._internalRoot=Eo.createContainer(e,t,n)}function wo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function _o(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}xo.prototype.render=function(e){this._defer||d("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new ko;return Eo.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},xo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},xo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||d("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&d("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Eo.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},xo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},ko.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ko.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&d("191",n),n()}}},Co.prototype.render=function(e,t){var n=this._internalRoot,r=new ko;return null!==(t=void 0===t?null:t)&&r.then(t),Eo.updateContainer(e,n,null,r._onCommit),r},Co.prototype.unmount=function(e){var t=this._internalRoot,n=new ko;return null!==(e=void 0===e?null:e)&&n.then(e),Eo.updateContainer(null,t,null,n._onCommit),n},Co.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new ko;return null!==(n=void 0===n?null:n)&&o.then(n),Eo.updateContainer(t,r,e,o._onCommit),o},Co.prototype.createBatch=function(){var e=new xo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var Eo=Sr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Qr(null,"");break;default:e=Qr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Qr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){bo=bn;var e=u();if(Nn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,l=-1,s=0,c=0,f=e,d=null;t:for(;;){for(var p;f!==t||0!==r&&3!==f.nodeType||(a=i+r),f!==o||0!==n&&3!==f.nodeType||(l=i+n),3===f.nodeType&&(i+=f.nodeValue.length),null!==(p=f.firstChild);)d=f,f=p;for(;;){if(f===e)break t;if(d===t&&++s===r&&(a=i),d===o&&++c===n&&(l=i),null!==(p=f.nextSibling))break;d=(f=d).parentNode}f=p}t=-1===a||-1===l?null:{start:a,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;go={focusedElem:e,selectionRange:t},gn(!1)},resetAfterCommit:function(){var e=go,t=u(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&c(document.documentElement,n)){if(Nn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[oe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=Ln(n,e);var i=Ln(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}go=null,gn(bo),bo=null},createInstance:function(e,t,n,r,o){return(e=so(e,t,n,r))[B]=o,e[U]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),_o(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=co(e,t))[B]=r,e},now:Or,mutation:{commitMount:function(e,t,n){_o(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[U]=o,ho(e,t,n,r,o)},resetTextContent:function(e){eo(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[B]=i,e[U]=n,mo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[B]=n,yo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Mr,cancelDeferredCallback:Pr}),So=Eo;function To(e,t,n,r,o){wo(n)||d("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=Eo.getPublicRootInstance(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Co(e,!1,t)}(n,r),"function"==typeof o){var l=o;o=function(){var e=Eo.getPublicRootInstance(i._internalRoot);l.call(e)}}Eo.unbatchedUpdates(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Eo.getPublicRootInstance(i._internalRoot)}function Oo(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return wo(t)||d("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Le=So.batchedUpdates,Ne=So.interactiveUpdates,We=So.flushInteractiveUpdates;var Mo={createPortal:Oo,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:Eo.findHostInstance(e)},hydrate:function(e,t,n){return To(null,e,t,!0,n)},render:function(e,t,n){return To(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&d("38"),To(e,t,n,!1,r)},unmountComponentAtNode:function(e){return wo(e)||d("40"),!!e._reactRootContainer&&(Eo.unbatchedUpdates(function(){To(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Oo.apply(void 0,arguments)},unstable_batchedUpdates:Eo.batchedUpdates,unstable_deferredUpdates:Eo.deferredUpdates,flushSync:Eo.flushSync,unstable_flushControlled:Eo.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:W,EventPluginRegistry:_,EventPropagators:ne,ReactControlledComponent:De,ReactDOMComponentTree:q,ReactDOMEventListener:_n},unstable_createRoot:function(e,t){return new Co(e,!0,null!=t&&!0===t.hydrate)}};Eo.injectIntoDevTools({findFiberByHostInstance:H,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var Po=Object.freeze({default:Mo}),Io=Po&&Mo||Po;e.exports=Io.default?Io.default:Io},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(109),o=n(69),i=n(108),a=n(68),l="function"==typeof Symbol&&Symbol.for,u=l?Symbol.for("react.element"):60103,s=l?Symbol.for("react.portal"):60106,c=l?Symbol.for("react.fragment"):60107,f=l?Symbol.for("react.strict_mode"):60108,d=l?Symbol.for("react.provider"):60109,p=l?Symbol.for("react.context"):60110,h=l?Symbol.for("react.async_mode"):60111,m=l?Symbol.for("react.forward_ref"):60112,y="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function g(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||b}function x(){}function k(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||b}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=g.prototype;var C=k.prototype=new x;C.constructor=k,r(C,g.prototype),C.isPureReactComponent=!0;var w={current:null},_=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)_.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:u,type:e,key:i,ref:a,props:o,_owner:w.current}}function T(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var O=/\/+/g,M=[];function P(e,t,n,r){if(M.length){var o=M.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>M.length&&M.push(e)}function R(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case u:case s:i=!0}}if(i)return n(r,e,""===t?"."+F(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var l=t+F(o=e[a],a);i+=R(o,l,n,r)}else if(null===e||void 0===e?l=null:l="function"==typeof(l=y&&e[y]||e["@@iterator"])?l:null,"function"==typeof l)for(e=l.call(e),a=0;!(o=e.next()).done;)i+=R(o=o.value,l=t+F(o,a++),n,r);else"object"===o&&v("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function F(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function j(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?D(e,r,n,a.thatReturnsArgument):null!=e&&(T(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n,e={$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function D(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(O,"$&/")+"/"),t=P(t,i,r,o),null==e||R(e,"",A,t),I(t)}var L={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return D(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=P(null,null,t,n),null==e||R(e,"",j,t),I(t)},count:function(e){return null==e?0:R(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return D(e,t,null,a.thatReturnsArgument),t},only:function(e){return T(e)||v("143"),e}},createRef:function(){return{current:null}},Component:g,PureComponent:k,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:p,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:m,render:e}},Fragment:c,StrictMode:f,unstable_AsyncMode:h,createElement:S,cloneElement:function(e,t,n){(null===e||void 0===e)&&v("267",e);var o=void 0,i=r({},e.props),a=e.key,l=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,s=w.current),void 0!==t.key&&(a=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)_.call(t,o)&&!E.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:u,type:e.type,key:a,ref:l,props:i,_owner:s}},createFactory:function(e){var t=S.bind(null,e);return t.type=e,t},isValidElement:T,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:w,assign:r}},N=Object.freeze({default:L}),W=N&&L||N;e.exports=W.default?W.default:W}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NpbXBsZS1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ludmFyaWFudC9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9zdHlsZXMvdHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9zdHlsZXMvcGFnZXMuY3NzPzgwMWMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvdXRpbHMvcHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9nZXRQcmVmaXhlZFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvU3ZnSWNvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjb21wb3NlL3B1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3V0aWxzL2NvbG9yTWFuaXB1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9JY29uQnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS91dGlscy9hdXRvUHJlZml4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9pbnRlcm5hbC9FbmhhbmNlZEJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvUGFwZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3V0aWxzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWluLWpzLXV0aWxzL2xpYi9pc1ByZWZpeGVkVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9jYXBpdGFsaXplU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9zdHlsZXMvY29sb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9zdmctaWNvbnMvbmF2aWdhdGlvbi9tb3JlLXZlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL0ljb25NZW51L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvc3R5bGVzL2hlYWRlci5jc3M/ZDRiNCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS93cmFwRGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zZXREaXNwbGF5TmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvTWVudUl0ZW0vTWVudUl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3V0aWxzL2RvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvUG9wb3Zlci9Qb3BvdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9MaXN0L0xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2tleWNvZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy90b0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9NZW51L01lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1pbi1qcy11dGlscy9saWIvaHlwaGVuYXRlUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL2FkZE5ld1ZhbHVlc09ubHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9wcmVmaXhWYWx1ZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvRE9NVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9NZW51SXRlbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvc3R5bGVzL011aVRoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0Jyb3dzZXJSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvSGFzaFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9MaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTmF2TGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL1BhdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9oZWFkZXIvbGlua3MuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9oZWFkZXIvSGVhZGVyLmpzeCIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvZm9vdGVyL0Zvb3Rlci5qc3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL2JhY2tncm91bmQvQmFja2dyb3VuZC5qc3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL2JvZHkvcGFnZXMvQ2FsZW5kYXJzL0NhbGVuZGFycy5qc3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL2JvZHkvcGFnZXMvT3VyLVNjaG9vbHMvT3VyLVNjaG9vbHMuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9ib2R5L3BhZ2VzL1NjaG9vbC1Cb2FyZC9TY2hvb2wtQm9hcmQuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9ib2R5L3BhZ2VzL1N0dWRlbnQtUGFyZW50LVJlc291cmNlcy9TdHVkZW50LVBhcmVudC1SZXNvdXJjZXMuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9ib2R5L3BhZ2VzL1N0YWZmLVJlc291cmNlcy9TdGFmZi1SZXNvdXJjZXMuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9ib2R5L3BhZ2VzL0VtcGxveW1lbnQvRW1wbG95bWVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL2JvZHkvcGFnZXMvUGFnZXMuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9ib2R5L1RpdGxlLmpzeCIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvYm9keS9wYWdlcy9Ib21lcGFnZS9Ib21lcGFnZS5qc3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL2JvZHkvQm9keS5qc3giLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9BcHAuanN4Iiwid2VicGFjazovLy8uL2NsaWVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvc3R5bGVzL2JvZHkuY3NzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9zdHlsZXMvYm9keS5jc3M/ZTUyZCIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvc3R5bGVzL2hvbWVwYWdlLmNzcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvc3R5bGVzL2hvbWVwYWdlLmNzcz9hNDRjIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9zdHlsZXMvdGl0bGUuY3NzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9zdHlsZXMvdGl0bGUuY3NzPzlmM2MiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL3N0eWxlcy9wYWdlcy5jc3MiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2JhY2tncm91bmQucG5nIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi91cmwvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9zdHlsZXMvYmFja2dyb3VuZC5jc3MiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL3N0eWxlcy9iYWNrZ3JvdW5kLmNzcz8zOTNlIiwid2VicGFjazovLy8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9zdHlsZXMvZm9vdGVyLmNzcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvc3R5bGVzL2Zvb3Rlci5jc3M/NTAyZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvUmFpc2VkQnV0dG9uL1JhaXNlZEJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvUmFpc2VkQnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL3N0eWxlcy9oZWFkZXIuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9MaXN0L05lc3RlZExpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2V4cGFuZC1tb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9zdmctaWNvbnMvbmF2aWdhdGlvbi9leHBhbmQtbGVzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvdXRpbHMvY2hpbGRVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvaW50ZXJuYWwvVG9vbHRpcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvRm9udEljb24vRm9udEljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL0ZvbnRJY29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9JY29uQnV0dG9uL0ljb25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2ludGVybmFsL0NpcmNsZVJpcHBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvaW50ZXJuYWwvVG91Y2hSaXBwbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL2ludGVybmFsL1NjYWxlSW5DaGlsZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoYWluLWZ1bmN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9pbnRlcm5hbC9TY2FsZUluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9pbnRlcm5hbC9Gb2N1c1JpcHBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvTGlzdC9MaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvU3ZnSWNvbi9TdmdJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWNvbXBvc2UvZ2V0RGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zZXRTdGF0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zaG91bGRVcGRhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2NoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9Qb3BvdmVyL1BvcG92ZXJBbmltYXRpb25EZWZhdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gudGhyb3R0bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL1BhcGVyL1BhcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9pbnRlcm5hbC9SZW5kZXJUb0xheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9saWIvc3VwcG9ydHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWV2ZW50LWxpc3RlbmVyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvTWVudS9tZW51VXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL1N1YmhlYWRlci9TdWJoZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL1N1YmhlYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvaW50ZXJuYWwvQ2xpY2tBd2F5TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL0ljb25NZW51L0ljb25NZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9zdHlsZXMvdHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjb21wb3NlL2NvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS91dGlscy9ydGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3V0aWxzL2NhbGxPbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3NpemluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2dyYWRpZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL3BsdWdpbnMvZmxleGJveE9sZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZsZXhib3hJRS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZsZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9jYWxjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS91dGlscy9hdXRvcHJlZml4ZXJTdGF0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h5cGhlbmF0ZS1zdHlsZS1uYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvc2l6aW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2dyYWRpZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2ZsZXhib3hPbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvZmxleGJveElFLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2ZsZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL3BsdWdpbnMvY2FsYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvdXRpbHMvYXV0b3ByZWZpeGVyRHluYW1pYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL2dldFByZWZpeGVkS2V5ZnJhbWVzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9hbWQtZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib3dzZXIvc3JjL2Jvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3V0aWxzL2dldEJyb3dzZXJJbmZvcm1hdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvY3JlYXRlUHJlZml4ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lubGluZS1zdHlsZS1wcmVmaXhlci91dGlscy9wcmVmaXhQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9jcmVhdGVQcmVmaXhlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvdXRpbHMvYXV0b3ByZWZpeGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9zdHlsZXMvekluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC11aS9zdHlsZXMvc3BhY2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtdWkvc3R5bGVzL2Jhc2VUaGVtZXMvbGlnaHRCYXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLm1lcmdlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hdGVyaWFsLXVpL3N0eWxlcy9nZXRNdWlUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzVGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwidmFsdWUiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImRlZmF1bHQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwib2JqIiwiX2RlZmluZVByb3BlcnR5IiwiX2RlZmluZVByb3BlcnR5MiIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJ3cml0YWJsZSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9zZXRQcm90b3R5cGVPZjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NyZWF0ZTIiLCJfdHlwZW9mMyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiX3R5cGVvZjIiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhIiwiYiIsImUiLCJmIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJFcnJvciIsImFyZ3MiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsImtleXMiLCJpbmRleE9mIiwiX2Fzc2lnbiIsIl9hc3NpZ24yIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnIiLCJjb25zb2xlIiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCJlYXNlT3V0RnVuY3Rpb24iLCJlYXNlSW5PdXRGdW5jdGlvbiIsImVhc2VPdXQiLCJkdXJhdGlvbiIsImRlbGF5IiwiZWFzZUZ1bmN0aW9uIiwidGhpcyIsInRvU3RyaW5nIiwidHJhbnNpdGlvbnMiLCJjcmVhdGUiLCJzdG9yZSIsInVpZCIsIlN5bWJvbCIsIlVTRV9TWU1CT0wiLCJhZGRMZWFkaW5nU2xhc2giLCJwYXRoIiwiY2hhckF0Iiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdWJzdHIiLCJoYXNCYXNlbmFtZSIsInByZWZpeCIsIlJlZ0V4cCIsInRlc3QiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwic2xpY2UiLCJwYXJzZVBhdGgiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc2giLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsImNyZWF0ZVBhdGgiLCJsb2NhdGlvbiIsImNvbnRlbnQiLCJvcHRpb25zIiwiaG1yIiwidHJhbnNmb3JtIiwiaW5zZXJ0SW50byIsImxvY2FscyIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiTyIsIlAiLCJBdHRyaWJ1dGVzIiwiZ2xvYmFsIiwiY3R4IiwiaGlkZSIsImhhcyIsIiRleHBvcnQiLCJ0eXBlIiwib3duIiwib3V0IiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJJU19CSU5EIiwiQiIsIklTX1dSQVAiLCJXIiwiZXhwUHJvdG8iLCJDIiwiYXBwbHkiLCJGdW5jdGlvbiIsInZpcnR1YWwiLCJSIiwiVSIsIndpbmRvdyIsIk1hdGgiLCJfX2ciLCJmbiIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJpdGVtIiwiZG9tU3R5bGUiLCJpZCIsInJlZnMiLCJqIiwicGFydHMiLCJwdXNoIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJsaXN0IiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4Iiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwiYWRkQXR0cnMiLCJlbCIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJ1cGRhdGUiLCJyZW1vdmUiLCJyZXN1bHQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImJpbmQiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwiYnRvYSIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiYmxvYiIsIm9sZFNyYyIsImhyZWYiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJpbmRleCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImpvaW4iLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsInVzZVNvdXJjZU1hcCIsIm1hcCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY29uY2F0IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX3Byb3BUeXBlcyIsIl9wcm9wVHlwZXMyIiwiaG9yaXpvbnRhbCIsIm9uZU9mIiwidmVydGljYWwiLCJjb3JuZXJzIiwib3JpZ2luIiwic2hhcGUiLCJjb3JuZXJzQW5kQ2VudGVyIiwic3RyaW5nT3JOdW1iZXIiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJudW1iZXIiLCJ6RGVwdGgiLCJpdCIsIl9zaGFsbG93RXF1YWwiLCJfc2hhbGxvd0VxdWFsMiIsInByZWZpeGVkVmFsdWUiLCJrZWVwVW5wcmVmaXhlZCIsIklPYmplY3QiLCJkZWZpbmVkIiwiZXhlYyIsImlzT2JqZWN0IiwiY3JlYXRlRGVzYyIsIiRrZXlzIiwiZW51bUJ1Z0tleXMiLCJiaXRtYXAiLCJfU3ZnSWNvbiIsIl9TdmdJY29uMiIsIl9zaG91bGRVcGRhdGUyIiwiQmFzZUNvbXBvbmVudCIsIm5leHRQcm9wcyIsImhvYyIsImNvbnZlcnRDb2xvclRvU3RyaW5nIiwiY29udmVydEhleFRvUkdCIiwiZGVjb21wb3NlQ29sb3IiLCJnZXRDb250cmFzdFJhdGlvIiwiZm9yZWdyb3VuZCIsImJhY2tncm91bmQiLCJsdW1BIiwiZ2V0THVtaW5hbmNlIiwibHVtQiIsImNvbnRyYXN0UmF0aW8iLCJtYXgiLCJtaW4iLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiZW1waGFzaXplIiwiY29sb3IiLCJjb2VmZmljaWVudCIsImRhcmtlbiIsImxpZ2h0ZW4iLCJmYWRlIiwiY2xhbXAiLCJ2YWx1ZXMiLCJfd2FybmluZyIsInBhcnNlSW50IiwiY29sb3JTdHJpbmciLCJleHRlbmRlZENvbG9yIiwibWFya2VyIiwic3Vic3RyaW5nIiwic3BsaXQiLCJwYXJzZUZsb2F0IiwicmdiIiwidmFsIiwicG93IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJweCIsInJhbmRvbSIsIl9JY29uQnV0dG9uIiwiX0ljb25CdXR0b24yIiwic2V0IiwiX2V4dGVuZHMzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyIsIl9nZXRQcm90b3R5cGVPZjIiLCJfY2xhc3NDYWxsQ2hlY2szIiwiX2NyZWF0ZUNsYXNzMyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyIsIl9pbmhlcml0czMiLCJfc2ltcGxlQXNzaWduMiIsIl9yZWFjdCIsIl9yZWFjdDIiLCJfZXZlbnRzMiIsIl9rZXljb2RlMiIsIl9Gb2N1c1JpcHBsZTIiLCJfVG91Y2hSaXBwbGUyIiwic3R5bGVJbmplY3RlZCIsImxpc3RlbmluZyIsInRhYlByZXNzZWQiLCJFbmhhbmNlZEJ1dHRvbiIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiQXJyYXkiLCJfa2V5Iiwic3RhdGUiLCJpc0tleWJvYXJkRm9jdXNlZCIsImhhbmRsZUtleURvd24iLCJldmVudCIsImRpc2FibGVkIiwiZGlzYWJsZUtleWJvYXJkRm9jdXMiLCJoYW5kbGVDbGljayIsInJlbW92ZUtleWJvYXJkRm9jdXMiLCJvbktleURvd24iLCJoYW5kbGVLZXlVcCIsIm9uS2V5VXAiLCJoYW5kbGVCbHVyIiwiY2FuY2VsRm9jdXNUaW1lb3V0Iiwib25CbHVyIiwiaGFuZGxlRm9jdXMiLCJwZXJzaXN0IiwiZm9jdXNUaW1lb3V0Iiwic2V0VGltZW91dCIsInNldEtleWJvYXJkRm9jdXMiLCJvbkZvY3VzIiwib25DbGljayIsIl9wcm9wcyIsImtleWJvYXJkRm9jdXNlZCIsInNldFN0YXRlIiwiaW5uZXJIVE1MIiwiYm9keSIsImluamVjdFN0eWxlIiwib24iLCJidXR0b24iLCJmb2N1cyIsIm9uS2V5Ym9hcmRGb2N1cyIsImNsZWFyVGltZW91dCIsIl9wcm9wczIiLCJjZW50ZXJSaXBwbGUiLCJjaGlsZHJlbiIsImRpc2FibGVGb2N1c1JpcHBsZSIsImRpc2FibGVUb3VjaFJpcHBsZSIsImZvY3VzUmlwcGxlQ29sb3IiLCJmb2N1c1JpcHBsZU9wYWNpdHkiLCJ0b3VjaFJpcHBsZUNvbG9yIiwidG91Y2hSaXBwbGVPcGFjaXR5IiwiZm9jdXNSaXBwbGUiLCJvcGFjaXR5Iiwic2hvdyIsIm92ZXJmbG93IiwidG91Y2hSaXBwbGUiLCJfdGhpczIiLCJfcHJvcHMzIiwiY29udGFpbmVyRWxlbWVudCIsInRhYkluZGV4Iiwib3RoZXIiLCJfY29udGV4dCRtdWlUaGVtZSIsImNvbnRleHQiLCJtdWlUaGVtZSIsInByZXBhcmVTdHlsZXMiLCJlbmhhbmNlZEJ1dHRvbiIsIm1lcmdlZFN0eWxlcyIsImJvcmRlciIsImJveFNpemluZyIsImRpc3BsYXkiLCJmb250RmFtaWx5IiwiYmFzZVRoZW1lIiwiV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3IiLCJ0YXBIaWdobGlnaHRDb2xvciIsImN1cnNvciIsInRleHREZWNvcmF0aW9uIiwibWFyZ2luIiwicGFkZGluZyIsIm91dGxpbmUiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJwb3NpdGlvbiIsInZlcnRpY2FsQWxpZ24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJidXR0b25Qcm9wcyIsInJlZiIsIm5vZGUiLCJidXR0b25DaGlsZHJlbiIsImNyZWF0ZUJ1dHRvbkNoaWxkcmVuIiwiaXNWYWxpZEVsZW1lbnQiLCJjbG9uZUVsZW1lbnQiLCJDb21wb25lbnQiLCJkZWZhdWx0UHJvcHMiLCJjb250ZXh0VHlwZXMiLCJpc1JlcXVpcmVkIiwicHJvcFR5cGVzIiwiX1BhcGVyIiwiX1BhcGVyMiIsIm9uY2UiLCJjYWxsYmFjayIsInR5cGVBcnJheSIsInJlY3Vyc2l2ZUZ1bmN0aW9uIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsIm9mZiIsImRldGFjaEV2ZW50IiwiaXNLZXlib2FyZCIsInJlZ2V4Iiwic3RyIiwidG9VcHBlckNhc2UiLCJyZWQ1MCIsInJlZDEwMCIsInJlZDIwMCIsInJlZDMwMCIsInJlZDQwMCIsInJlZDUwMCIsInJlZDYwMCIsInJlZDcwMCIsInJlZDgwMCIsInJlZDkwMCIsInJlZEExMDAiLCJyZWRBMjAwIiwicmVkQTQwMCIsInJlZEE3MDAiLCJwaW5rNTAiLCJwaW5rMTAwIiwicGluazIwMCIsInBpbmszMDAiLCJwaW5rNDAwIiwicGluazUwMCIsInBpbms2MDAiLCJwaW5rNzAwIiwicGluazgwMCIsInBpbms5MDAiLCJwaW5rQTEwMCIsInBpbmtBMjAwIiwicGlua0E0MDAiLCJwaW5rQTcwMCIsInB1cnBsZTUwIiwicHVycGxlMTAwIiwicHVycGxlMjAwIiwicHVycGxlMzAwIiwicHVycGxlNDAwIiwicHVycGxlNTAwIiwicHVycGxlNjAwIiwicHVycGxlNzAwIiwicHVycGxlODAwIiwicHVycGxlOTAwIiwicHVycGxlQTEwMCIsInB1cnBsZUEyMDAiLCJwdXJwbGVBNDAwIiwicHVycGxlQTcwMCIsImRlZXBQdXJwbGU1MCIsImRlZXBQdXJwbGUxMDAiLCJkZWVwUHVycGxlMjAwIiwiZGVlcFB1cnBsZTMwMCIsImRlZXBQdXJwbGU0MDAiLCJkZWVwUHVycGxlNTAwIiwiZGVlcFB1cnBsZTYwMCIsImRlZXBQdXJwbGU3MDAiLCJkZWVwUHVycGxlODAwIiwiZGVlcFB1cnBsZTkwMCIsImRlZXBQdXJwbGVBMTAwIiwiZGVlcFB1cnBsZUEyMDAiLCJkZWVwUHVycGxlQTQwMCIsImRlZXBQdXJwbGVBNzAwIiwiaW5kaWdvNTAiLCJpbmRpZ28xMDAiLCJpbmRpZ28yMDAiLCJpbmRpZ28zMDAiLCJpbmRpZ280MDAiLCJpbmRpZ281MDAiLCJpbmRpZ282MDAiLCJpbmRpZ283MDAiLCJpbmRpZ284MDAiLCJpbmRpZ285MDAiLCJpbmRpZ29BMTAwIiwiaW5kaWdvQTIwMCIsImluZGlnb0E0MDAiLCJpbmRpZ29BNzAwIiwiYmx1ZTUwIiwiYmx1ZTEwMCIsImJsdWUyMDAiLCJibHVlMzAwIiwiYmx1ZTQwMCIsImJsdWU1MDAiLCJibHVlNjAwIiwiYmx1ZTcwMCIsImJsdWU4MDAiLCJibHVlOTAwIiwiYmx1ZUExMDAiLCJibHVlQTIwMCIsImJsdWVBNDAwIiwiYmx1ZUE3MDAiLCJsaWdodEJsdWU1MCIsImxpZ2h0Qmx1ZTEwMCIsImxpZ2h0Qmx1ZTIwMCIsImxpZ2h0Qmx1ZTMwMCIsImxpZ2h0Qmx1ZTQwMCIsImxpZ2h0Qmx1ZTUwMCIsImxpZ2h0Qmx1ZTYwMCIsImxpZ2h0Qmx1ZTcwMCIsImxpZ2h0Qmx1ZTgwMCIsImxpZ2h0Qmx1ZTkwMCIsImxpZ2h0Qmx1ZUExMDAiLCJsaWdodEJsdWVBMjAwIiwibGlnaHRCbHVlQTQwMCIsImxpZ2h0Qmx1ZUE3MDAiLCJjeWFuNTAiLCJjeWFuMTAwIiwiY3lhbjIwMCIsImN5YW4zMDAiLCJjeWFuNDAwIiwiY3lhbjUwMCIsImN5YW42MDAiLCJjeWFuNzAwIiwiY3lhbjgwMCIsImN5YW45MDAiLCJjeWFuQTEwMCIsImN5YW5BMjAwIiwiY3lhbkE0MDAiLCJjeWFuQTcwMCIsInRlYWw1MCIsInRlYWwxMDAiLCJ0ZWFsMjAwIiwidGVhbDMwMCIsInRlYWw0MDAiLCJ0ZWFsNTAwIiwidGVhbDYwMCIsInRlYWw3MDAiLCJ0ZWFsODAwIiwidGVhbDkwMCIsInRlYWxBMTAwIiwidGVhbEEyMDAiLCJ0ZWFsQTQwMCIsInRlYWxBNzAwIiwiZ3JlZW41MCIsImdyZWVuMTAwIiwiZ3JlZW4yMDAiLCJncmVlbjMwMCIsImdyZWVuNDAwIiwiZ3JlZW41MDAiLCJncmVlbjYwMCIsImdyZWVuNzAwIiwiZ3JlZW44MDAiLCJncmVlbjkwMCIsImdyZWVuQTEwMCIsImdyZWVuQTIwMCIsImdyZWVuQTQwMCIsImdyZWVuQTcwMCIsImxpZ2h0R3JlZW41MCIsImxpZ2h0R3JlZW4xMDAiLCJsaWdodEdyZWVuMjAwIiwibGlnaHRHcmVlbjMwMCIsImxpZ2h0R3JlZW40MDAiLCJsaWdodEdyZWVuNTAwIiwibGlnaHRHcmVlbjYwMCIsImxpZ2h0R3JlZW43MDAiLCJsaWdodEdyZWVuODAwIiwibGlnaHRHcmVlbjkwMCIsImxpZ2h0R3JlZW5BMTAwIiwibGlnaHRHcmVlbkEyMDAiLCJsaWdodEdyZWVuQTQwMCIsImxpZ2h0R3JlZW5BNzAwIiwibGltZTUwIiwibGltZTEwMCIsImxpbWUyMDAiLCJsaW1lMzAwIiwibGltZTQwMCIsImxpbWU1MDAiLCJsaW1lNjAwIiwibGltZTcwMCIsImxpbWU4MDAiLCJsaW1lOTAwIiwibGltZUExMDAiLCJsaW1lQTIwMCIsImxpbWVBNDAwIiwibGltZUE3MDAiLCJ5ZWxsb3c1MCIsInllbGxvdzEwMCIsInllbGxvdzIwMCIsInllbGxvdzMwMCIsInllbGxvdzQwMCIsInllbGxvdzUwMCIsInllbGxvdzYwMCIsInllbGxvdzcwMCIsInllbGxvdzgwMCIsInllbGxvdzkwMCIsInllbGxvd0ExMDAiLCJ5ZWxsb3dBMjAwIiwieWVsbG93QTQwMCIsInllbGxvd0E3MDAiLCJhbWJlcjUwIiwiYW1iZXIxMDAiLCJhbWJlcjIwMCIsImFtYmVyMzAwIiwiYW1iZXI0MDAiLCJhbWJlcjUwMCIsImFtYmVyNjAwIiwiYW1iZXI3MDAiLCJhbWJlcjgwMCIsImFtYmVyOTAwIiwiYW1iZXJBMTAwIiwiYW1iZXJBMjAwIiwiYW1iZXJBNDAwIiwiYW1iZXJBNzAwIiwib3JhbmdlNTAiLCJvcmFuZ2UxMDAiLCJvcmFuZ2UyMDAiLCJvcmFuZ2UzMDAiLCJvcmFuZ2U0MDAiLCJvcmFuZ2U1MDAiLCJvcmFuZ2U2MDAiLCJvcmFuZ2U3MDAiLCJvcmFuZ2U4MDAiLCJvcmFuZ2U5MDAiLCJvcmFuZ2VBMTAwIiwib3JhbmdlQTIwMCIsIm9yYW5nZUE0MDAiLCJvcmFuZ2VBNzAwIiwiZGVlcE9yYW5nZTUwIiwiZGVlcE9yYW5nZTEwMCIsImRlZXBPcmFuZ2UyMDAiLCJkZWVwT3JhbmdlMzAwIiwiZGVlcE9yYW5nZTQwMCIsImRlZXBPcmFuZ2U1MDAiLCJkZWVwT3JhbmdlNjAwIiwiZGVlcE9yYW5nZTcwMCIsImRlZXBPcmFuZ2U4MDAiLCJkZWVwT3JhbmdlOTAwIiwiZGVlcE9yYW5nZUExMDAiLCJkZWVwT3JhbmdlQTIwMCIsImRlZXBPcmFuZ2VBNDAwIiwiZGVlcE9yYW5nZUE3MDAiLCJicm93bjUwIiwiYnJvd24xMDAiLCJicm93bjIwMCIsImJyb3duMzAwIiwiYnJvd240MDAiLCJicm93bjUwMCIsImJyb3duNjAwIiwiYnJvd243MDAiLCJicm93bjgwMCIsImJyb3duOTAwIiwiYmx1ZUdyZXk1MCIsImJsdWVHcmV5MTAwIiwiYmx1ZUdyZXkyMDAiLCJibHVlR3JleTMwMCIsImJsdWVHcmV5NDAwIiwiYmx1ZUdyZXk1MDAiLCJibHVlR3JleTYwMCIsImJsdWVHcmV5NzAwIiwiYmx1ZUdyZXk4MDAiLCJibHVlR3JleTkwMCIsImdyZXk1MCIsImdyZXkxMDAiLCJncmV5MjAwIiwiZ3JleTMwMCIsImdyZXk0MDAiLCJncmV5NTAwIiwiZ3JleTYwMCIsImdyZXk3MDAiLCJncmV5ODAwIiwiZ3JleTkwMCIsImJsYWNrIiwid2hpdGUiLCJ0cmFuc3BhcmVudCIsImZ1bGxCbGFjayIsImRhcmtCbGFjayIsImxpZ2h0QmxhY2siLCJtaW5CbGFjayIsImZhaW50QmxhY2siLCJmdWxsV2hpdGUiLCJkYXJrV2hpdGUiLCJsaWdodFdoaXRlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiTElCUkFSWSIsIndrc0V4dCIsIiRTeW1ib2wiLCJkZWYiLCJUQUciLCJ0YWciLCJzdGF0IiwiZFBzIiwiSUVfUFJPVE8iLCJFbXB0eSIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwiX2l0ZXJhdG9yMiIsIl9zeW1ib2wyIiwiX3R5cGVvZiIsInZhbHVlT2YiLCJhRnVuY3Rpb24iLCJ0aGF0Iiwic2hhcmVkIiwiX3dhcm5pbmcyIiwicHJvbXB0IiwibGlzdGVuZXJzIiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJhY3Rpb24iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwibm90aWZ5TGlzdGVuZXJzIiwibG9jYXRpb25zQXJlRXF1YWwiLCJjcmVhdGVMb2NhdGlvbiIsIl9leHRlbmRzIiwiYXNzaWduIiwiX3Jlc29sdmVQYXRobmFtZTIiLCJfdmFsdWVFcXVhbDIiLCJfUGF0aFV0aWxzIiwiY3VycmVudExvY2F0aW9uIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJpcyIsIngiLCJ5Iiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJhcmciLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInZhbGlkYXRlRm9ybWF0IiwiX3B1cmUyIiwiTmF2aWdhdGlvbk1vcmVWZXJ0IiwiZGlzcGxheU5hbWUiLCJtdWlOYW1lIiwiTWVudUl0ZW0iLCJJY29uTWVudSIsIl9JY29uTWVudTMiLCJfTWVudUl0ZW0zIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIml0ZXJhdG9yIiwidmFsdWVFcXVhbCIsImlzQXJyYXkiLCJldmVyeSIsImFUeXBlIiwiYVZhbHVlIiwiYlZhbHVlIiwiYUtleXMiLCJiS2V5cyIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJrIiwicG9wIiwidG8iLCJmcm9tIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiaGFzVHJhaWxpbmdTbGFzaCIsImxhc3QiLCJ1cCIsInVuc2hpZnQiLCJfY2hhaW5GdW5jdGlvbjIiLCJfQ2hpbGRNYXBwaW5nIiwiYW55IiwiZnVuYyIsIlRyYW5zaXRpb25Hcm91cCIsIl9SZWFjdCRDb21wb25lbnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInBlcmZvcm1BcHBlYXIiLCJjb21wb25lbnQiLCJjdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5cyIsImNvbXBvbmVudFdpbGxBcHBlYXIiLCJfaGFuZGxlRG9uZUFwcGVhcmluZyIsImNvbXBvbmVudERpZEFwcGVhciIsImN1cnJlbnRDaGlsZE1hcHBpbmciLCJnZXRDaGlsZE1hcHBpbmciLCJwZXJmb3JtTGVhdmUiLCJwZXJmb3JtRW50ZXIiLCJjb21wb25lbnRXaWxsRW50ZXIiLCJfaGFuZGxlRG9uZUVudGVyaW5nIiwiY29tcG9uZW50RGlkRW50ZXIiLCJjb21wb25lbnRXaWxsTGVhdmUiLCJfaGFuZGxlRG9uZUxlYXZpbmciLCJjb21wb25lbnREaWRMZWF2ZSIsImtleXNUb0VudGVyIiwibmV3Q2hpbGRyZW4iLCJjaGlsZFJlZnMiLCJzZXRQcm90b3R5cGVPZiIsIl9pbmhlcml0cyIsImNvbXBvbmVudFdpbGxNb3VudCIsImtleXNUb0xlYXZlIiwiY29tcG9uZW50RGlkTW91bnQiLCJpbml0aWFsQ2hpbGRNYXBwaW5nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRDaGlsZE1hcHBpbmciLCJwcmV2Q2hpbGRNYXBwaW5nIiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiaGFzUHJldiIsImhhc05leHQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJyZW5kZXIiLCJfdGhpczMiLCJjaGlsZHJlblRvUmVuZGVyIiwiX2xvb3AiLCJjaGlsZCIsImlzQ2FsbGJhY2tSZWYiLCJmYWN0b3J5Q2hpbGQiLCJjaGlsZEZhY3RvcnkiLCJ0cmFuc2l0aW9uTGVhdmUiLCJ0cmFuc2l0aW9uTmFtZSIsInRyYW5zaXRpb25BcHBlYXIiLCJ0cmFuc2l0aW9uRW50ZXIiLCJ0cmFuc2l0aW9uTGVhdmVUaW1lb3V0IiwidHJhbnNpdGlvbkVudGVyVGltZW91dCIsInRyYW5zaXRpb25BcHBlYXJUaW1lb3V0IiwiX2dldERpc3BsYXlOYW1lIiwiX2dldERpc3BsYXlOYW1lMiIsImhvY05hbWUiLCJfc2V0U3RhdGljIiwiX3NldFN0YXRpYzIiLCJfcmVhY3REb20yIiwiX1BvcG92ZXIyIiwiX2NoZWNrMiIsIl9MaXN0SXRlbTIiLCJfTWVudTIiLCJuZXN0ZWRNZW51U3R5bGUiLCJjbG9uZU1lbnVJdGVtIiwibWVudUl0ZW1zIiwiaGFuZGxlUmVxdWVzdENsb3NlIiwicHJldmVudERlZmF1bHQiLCJhbmNob3JFbCIsImZpbmRET01Ob2RlIiwiYXBwbHlGb2N1c1N0YXRlIiwiZm9jdXNTdGF0ZSIsIm5leHRTdGF0ZSIsIm5leHRDb250ZXh0IiwibGlzdEl0ZW0iLCJkaXNhYmxlZENvbG9yIiwidGV4dENvbG9yIiwiaW5kZW50Iiwic2lkZVBhZGRpbmciLCJjaGVja2VkIiwiZGVza3RvcCIsImlubmVyRGl2U3R5bGUiLCJpbnNldENoaWxkcmVuIiwibGVmdEljb24iLCJyaWdodEljb24iLCJzZWNvbmRhcnlUZXh0IiwiYW5pbWF0aW9uIiwiYW5jaG9yT3JpZ2luIiwidGFyZ2V0T3JpZ2luIiwicGFsZXR0ZSIsInJvb3QiLCJtaW5IZWlnaHQiLCJsaW5lSGVpZ2h0Iiwid2hpdGVTcGFjZSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdUb3AiLCJmbG9hdCIsImxlZnRJY29uRGVza3RvcCIsImxlZnQiLCJ0b3AiLCJyaWdodEljb25EZXNrdG9wIiwicmlnaHQiLCJmaWxsIiwibWVudUl0ZW0iLCJyaWdodEljb25EZXNrdG9wRmlsbCIsIm1lcmdlZFJvb3RTdHlsZXMiLCJtZXJnZWRJbm5lckRpdlN0eWxlcyIsImxlZnRJY29uRWxlbWVudCIsIm1lcmdlZExlZnRJY29uU3R5bGVzIiwicmlnaHRJY29uRWxlbWVudCIsIm1lcmdlZFJpZ2h0SWNvblN0eWxlcyIsInNlY29uZGFyeVRleHRFbGVtZW50Iiwic2Vjb25kYXJ5VGV4dElzQW5FbGVtZW50IiwibWVyZ2VkU2Vjb25kYXJ5VGV4dFN0eWxlcyIsImNoaWxkTWVudVBvcG92ZXIiLCJ1c2VMYXllckZvckNsaWNrQXdheSIsIm9uUmVxdWVzdENsb3NlIiwiQ2hpbGRyZW4iLCJob3ZlckNvbG9yIiwicm9sZSIsImlzRGVzY2VuZGFudCIsInBhcmVudCIsIm9mZnNldCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiX3JlYWN0RXZlbnRMaXN0ZW5lcjIiLCJfUmVuZGVyVG9MYXllcjIiLCJfbG9kYXNoMiIsIl9Qb3BvdmVyQW5pbWF0aW9uRGVmYXVsdDIiLCJQb3BvdmVyIiwidGltZW91dCIsInJlbmRlckxheWVyIiwiX3RoaXMkcHJvcHMiLCJhbmltYXRlZCIsImF1dG9DbG9zZVdoZW5PZmZTY3JlZW4iLCJjYW5BdXRvUG9zaXRpb24iLCJzY3JvbGxhYmxlQ29udGFpbmVyIiwic3R5bGVSb290IiwiekluZGV4IiwicG9wb3ZlciIsIkFuaW1hdGlvbiIsImNsb3NpbmciLCJjb21wb25lbnRDbGlja0F3YXkiLCJyZXF1ZXN0Q2xvc2UiLCJzZXRQbGFjZW1lbnQiLCJzY3JvbGxpbmciLCJwb3BvdmVyUmVmcyIsImxheWVyIiwiZ2V0TGF5ZXIiLCJ0YXJnZXRFbCIsIl90aGlzJHByb3BzMiIsImFuY2hvciIsImdldEFuY2hvclBvc2l0aW9uIiwiZ2V0VGFyZ2V0UG9zaXRpb24iLCJ0YXJnZXRQb3NpdGlvbiIsImFwcGx5QXV0b1Bvc2l0aW9uSWZOZWVkZWQiLCJtYXhIZWlnaHQiLCJpbm5lckhlaWdodCIsImhhbmRsZVJlc2l6ZSIsImhhbmRsZVNjcm9sbCIsInBsYWNlbWVudFRpbWVvdXQiLCJjYW5jZWwiLCJyZWFzb24iLCJ3aWR0aCIsIm9mZnNldFdpZHRoIiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiYm90dG9tIiwibWlkZGxlIiwiY2VudGVyIiwiYW5jaG9yUG9zaXRpb24iLCJpbm5lcldpZHRoIiwibWVkaWFuIiwidCIsInBvc2l0aW9ucyIsIm92ZXJsYXAiLCJnZXRPdmVybGFwTW9kZSIsImFuY2hvclBvcyIsIl9nZXRQb3NpdGlvbnMiLCJnZXRQb3NpdGlvbnMiLCJuZXdUb3AiLCJuZXdMZWZ0Iiwib25TY3JvbGwiLCJvblJlc2l6ZSIsIm92ZXJmbG93WSIsIl9TdWJoZWFkZXIyIiwiTGlzdCIsImhhc1N1YmhlYWRlciIsInRvQXJyYXkiLCJrZXlDb2RlIiwic2VhcmNoSW5wdXQiLCJoYXNLZXlDb2RlIiwid2hpY2giLCJjaGFyQ29kZSIsIm5hbWVzIiwiZm91bmROYW1lZEtleSIsIlN0cmluZyIsImNvZGVzIiwidG9Mb3dlckNhc2UiLCJhbGlhc2VzIiwiY2hhckNvZGVBdCIsImlzRXZlbnRLZXkiLCJuYW1lT3JDb2RlIiwiY29kZSIsImJhY2tzcGFjZSIsInRhYiIsImVudGVyIiwic2hpZnQiLCJjdHJsIiwiYWx0IiwicGF1c2UvYnJlYWsiLCJjYXBzIGxvY2siLCJlc2MiLCJzcGFjZSIsInBhZ2UgdXAiLCJwYWdlIGRvd24iLCJlbmQiLCJob21lIiwiZG93biIsImluc2VydCIsImRlbGV0ZSIsImNvbW1hbmQiLCJsZWZ0IGNvbW1hbmQiLCJyaWdodCBjb21tYW5kIiwibnVtcGFkICoiLCJudW1wYWQgKyIsIm51bXBhZCAtIiwibnVtcGFkIC4iLCJudW1wYWQgLyIsIm51bSBsb2NrIiwic2Nyb2xsIGxvY2siLCJteSBjb21wdXRlciIsIm15IGNhbGN1bGF0b3IiLCI7IiwiPSIsIiwiLCItIiwiLiIsIi8iLCJgIiwiWyIsIlxcIiwiXSIsIiciLCJ3aW5kb3dzIiwi4oenIiwi4oylIiwi4oyDIiwi4oyYIiwiY3RsIiwiY29udHJvbCIsIm9wdGlvbiIsInBhdXNlIiwiYnJlYWsiLCJjYXBzIiwicmV0dXJuIiwiZXNjYXBlIiwic3BjIiwic3BhY2ViYXIiLCJwZ3VwIiwicGdkbiIsImlucyIsImRlbCIsImNtZCIsImZyb21DaGFyQ29kZSIsInRpdGxlIiwiYWxpYXMiLCJfZnJvbSIsIl9mcm9tMiIsImFyciIsIl90b0FycmF5MyIsIl9DbGlja0F3YXlMaXN0ZW5lcjIiLCJfTGlzdDIiLCJfbWVudVV0aWxzIiwiTWVudSIsIl9pbml0aWFsaXNlUHJvcHMiLCJmaWx0ZXJlZENoaWxkcmVuIiwiZ2V0RmlsdGVyZWRDaGlsZHJlbiIsInNlbGVjdGVkSW5kZXgiLCJnZXRMYXN0U2VsZWN0ZWRJbmRleCIsIm5ld0ZvY3VzSW5kZXgiLCJkaXNhYmxlQXV0b0ZvY3VzIiwib25NZW51SXRlbUZvY3VzQ2hhbmdlIiwiZm9jdXNJbmRleCIsImluaXRpYWxseUtleWJvYXJkRm9jdXNlZCIsImtleVdpZHRoIiwiaG90S2V5SG9sZGVyIiwiSG90S2V5SG9sZGVyIiwiYXV0b1dpZHRoIiwic2V0V2lkdGgiLCJzZXRTY29sbFBvc2l0aW9uIiwibXVsdGlwbGUiLCJ2YWx1ZUxpbmsiLCJyZXF1ZXN0Q2hhbmdlIiwib25DaGFuZ2UiLCJjaGlsZEluZGV4IiwiY2hpbGRJc0Rpc2FibGVkIiwic2VsZWN0ZWRDaGlsZFN0eWxlcyIsImlzQ2hpbGRTZWxlY3RlZCIsInNlbGVjdGVkTWVudUl0ZW0iLCJzZWxlY3RlZE1lbnVJdGVtU3R5bGUiLCJtZXJnZWRDaGlsZFN0eWxlcyIsIm1lbnVJdGVtU3R5bGUiLCJleHRyYVByb3BzIiwiaXNGb2N1c2VkIiwiaGFuZGxlTWVudUl0ZW1DbGljayIsInNldEZvY3VzSW5kZXgiLCJtZW51SXRlbUNvdW50IiwiY2hpbGRJc0FEaXZpZGVyIiwibWVudUl0ZW1JbmRleCIsImZvdW5kSW5kZXgiLCJwcmltYXJ5VGV4dCIsImdldFZhbHVlTGluayIsIm1lbnVWYWx1ZSIsIml0ZW1WYWx1ZSIsIml0ZW1JbmRleCIsIl9tZW51VmFsdWUiLCJuZXdNZW51VmFsdWUiLCJvbkl0ZW1DbGljayIsIm1heEluZGV4IiwiZ2V0TWVudUl0ZW1Db3VudCIsImNoaWxkVmFsdWUiLCJuZXdJbmRleCIsImZvY3VzZWRNZW51SXRlbSIsIm1lbnVJdGVtSGVpZ2h0Iiwib2Zmc2V0VG9wIiwic2Nyb2xsQ29udGFpbmVyIiwic3RvcFByb3BhZ2F0aW9uIiwibGlzdEVsIiwiZWxXaWR0aCIsIm1pbldpZHRoIiwia2V5SW5jcmVtZW50cyIsIm5ld1dpZHRoIiwiX3RoaXM0IiwibGlzdFN0eWxlIiwib25Fc2NLZXlEb3duIiwibWVudSIsImRpdmlkZXIiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJ1c2VyU2VsZWN0Iiwic2VsZWN0ZWRUZXh0Q29sb3IiLCJnZXRTdHlsZXMiLCJtZXJnZWRMaXN0U3R5bGVzIiwiY2hpbGROYW1lIiwibmV3Q2hpbGQiLCJvbkNsaWNrQXdheSIsImhhbmRsZUNsaWNrQXdheSIsIm9uV2hlZWwiLCJoYW5kbGVPbldoZWVsIiwiX3RoaXM1IiwiZGVmYXVsdFByZXZlbnRlZCIsImZvY3VzZWRJdGVtIiwiaW5jcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4Iiwic2hpZnRLZXkiLCJkZWNyZW1lbnRLZXlib2FyZEZvY3VzSW5kZXgiLCJob3RLZXlzIiwiYXBwZW5kIiwic2V0Rm9jdXNJbmRleFN0YXJ0c1dpdGgiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJ3aGVlbERlbHRhIiwiZGVsdGFZIiwiaXNEZWx0YVBvc2l0aXZlIiwiY2FuY2VsU2Nyb2xsRXZlbnQiLCJfaHlwaGVuYXRlU3R5bGVOYW1lMiIsIl9oeXBoZW5hdGVTdHlsZU5hbWUiLCJhZGRJZk5ldyIsImxlbiIsInBsdWdpbnMiLCJtZXRhRGF0YSIsInByb2Nlc3NlZFZhbHVlIiwiZyIsImV2YWwiLCJhcnIyIiwicElFIiwidG9JT2JqZWN0IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidG9JbnRlZ2VyIiwiY29mIiwiYXJyYXlJbmRleE9mIiwicmVkZWZpbmUiLCJJdGVyYXRvcnMiLCIkaXRlckNyZWF0ZSIsInNldFRvU3RyaW5nVGFnIiwiZ2V0UHJvdG90eXBlT2YiLCJJVEVSQVRPUiIsIkJVR0dZIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJOQU1FIiwibmV4dCIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJtZXRob2RzIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwicHJvdG8iLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsImVudHJpZXMiLCIkYXQiLCJpdGVyYXRlZCIsIl90IiwiX2kiLCJwb2ludCIsImRvbmUiLCJmYWlscyIsIktFWSIsImV4cCIsInRvT2JqZWN0IiwiT2JqZWN0UHJvdG8iLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJtZXNzYWdlIiwiY29uZmlybSIsInN1cHBvcnRzSGlzdG9yeSIsInVhIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsInN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UiLCJzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsIl9NZW51SXRlbSIsIl9NZW51SXRlbTIiLCJfZ2V0TXVpVGhlbWUyIiwiTXVpVGhlbWVQcm92aWRlciIsImNoaWxkQ29udGV4dFR5cGVzIiwiUkVBQ1RfU1RBVElDUyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiZmFjdG9yeSIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXJzZSIsImNvbXBpbGUiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJlc2NhcGVkIiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsInBhdHRlcm4iLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsIm1hdGNoZXMiLCJvcHRzIiwiZGF0YSIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsImF0dGFjaEtleXMiLCJyZSIsImZsYWdzIiwic2Vuc2l0aXZlIiwic3RyaWN0Iiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsIm1hdGNoIiwicmVnZXhwVG9SZWdleHAiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJfTG9jYXRpb25VdGlscyIsIl9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJ0cmFuc2l0aW9uTWFuYWdlciIsImNyZWF0ZUtleSIsImVudHJ5IiwiY3JlYXRlSHJlZiIsImdvIiwibmV4dEluZGV4Iiwib2siLCJuZXh0RW50cmllcyIsImdvQmFjayIsImdvRm9yd2FyZCIsImNhbkdvIiwiYmxvY2siLCJsaXN0ZW4iLCJfaW52YXJpYW50MiIsIl9ET01VdGlscyIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsImdldEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiZ2xvYmFsSGlzdG9yeSIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiYmFzZW5hbWUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJnZXRET01Mb2NhdGlvbiIsImZvcmNlTmV4dFBvcCIsImlnbm9yZVBhdGgiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJoYW5kbGVQb3AiLCJyZXZlcnRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImluaXRpYWxMb2NhdGlvbiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsInB1c2hIYXNoUGF0aCIsInByZXZJbmRleCIsIm5leHRQYXRocyIsInVuYmxvY2siLCJ1bmxpc3RlbiIsImdldEhpc3RvcnlTdGF0ZSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiaGFuZGxlUG9wU3RhdGUiLCJhbGxLZXlzIiwicHVzaFN0YXRlIiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJSb3V0ZXJfUm91dGVyIiwiUm91dGVyIiwiY29tcHV0ZU1hdGNoIiwiZ2V0Q2hpbGRDb250ZXh0Iiwicm91dGVyIiwidXJsIiwicGFyYW1zIiwiaXNFeGFjdCIsImludmFyaWFudF9icm93c2VyX2RlZmF1bHQiLCJyZWFjdF9kZWZhdWx0IiwiY291bnQiLCJicm93c2VyX2RlZmF1bHQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIm9ubHkiLCJwcm9wX3R5cGVzX2RlZmF1bHQiLCJlc19Sb3V0ZXIiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JvdXRlciIsIkJyb3dzZXJSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkJyb3dzZXJSb3V0ZXJfQnJvd3NlclJvdXRlciIsIkJyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnlfZGVmYXVsdCIsIkJyb3dzZXJSb3V0ZXJfaW5oZXJpdHMiLCJib29sIiwiZXNfQnJvd3NlclJvdXRlciIsIkhhc2hSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkhhc2hSb3V0ZXJfSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXIiLCJIYXNoUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiY3JlYXRlSGFzaEhpc3RvcnlfZGVmYXVsdCIsIkhhc2hSb3V0ZXJfaW5oZXJpdHMiLCJMaW5rX2V4dGVuZHMiLCJMaW5rX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJpc01vZGlmaWVkRXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsIkxpbmtfTGluayIsIkxpbmsiLCJMaW5rX2NsYXNzQ2FsbENoZWNrIiwiTGlua19pbmhlcml0cyIsImlubmVyUmVmIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXNfTGluayIsIk1lbW9yeVJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTWVtb3J5Um91dGVyX01lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlcl9jbGFzc0NhbGxDaGVjayIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfZGVmYXVsdCIsIk1lbW9yeVJvdXRlcl9pbmhlcml0cyIsImFycmF5IiwicGF0dGVybkNhY2hlIiwiY2FjaGVDb3VudCIsImVzX21hdGNoUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkcGF0aCIsIl9vcHRpb25zJGV4YWN0IiwiZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsImNhY2hlIiwiY29tcGlsZWRQYXR0ZXJuIiwicGF0aF90b19yZWdleHBfZGVmYXVsdCIsIm1hdGNoUGF0aF9jb21waWxlUGF0aCIsInJlZHVjZSIsIlJvdXRlX2V4dGVuZHMiLCJSb3V0ZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUm91dGVfaXNFbXB0eUNoaWxkcmVuIiwiUm91dGVfUm91dGUiLCJSb3V0ZSIsIlJvdXRlX2NsYXNzQ2FsbENoZWNrIiwiUm91dGVfaW5oZXJpdHMiLCJjb21wdXRlZE1hdGNoIiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImVzX1JvdXRlIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZSIsIk5hdkxpbmtfZXh0ZW5kcyIsIk5hdkxpbmtfTmF2TGluayIsImFjdGl2ZUNsYXNzTmFtZSIsImNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiZ2V0SXNBY3RpdmUiLCJhcmlhQ3VycmVudCIsInJlc3QiLCJOYXZMaW5rX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX3JlZjIiLCJhcmlhLWN1cnJlbnQiLCJQcm9tcHRfUHJvbXB0IiwiUHJvbXB0IiwiUHJvbXB0X2NsYXNzQ2FsbENoZWNrIiwiUHJvbXB0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJQcm9tcHRfaW5oZXJpdHMiLCJlbmFibGUiLCJkaXNhYmxlIiwid2hlbiIsIkxvY2F0aW9uVXRpbHNfZXh0ZW5kcyIsIkxvY2F0aW9uVXRpbHNfY3JlYXRlTG9jYXRpb24iLCJyZXNvbHZlX3BhdGhuYW1lIiwiTG9jYXRpb25VdGlsc19sb2NhdGlvbnNBcmVFcXVhbCIsInZhbHVlX2VxdWFsIiwiUmVkaXJlY3RfUmVkaXJlY3QiLCJSZWRpcmVjdCIsIlJlZGlyZWN0X2NsYXNzQ2FsbENoZWNrIiwiUmVkaXJlY3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZGlyZWN0X2luaGVyaXRzIiwiaXNTdGF0aWMiLCJwZXJmb3JtIiwicHJldlByb3BzIiwicHJldlRvIiwibmV4dFRvIiwiU3RhdGljUm91dGVyX2V4dGVuZHMiLCJTdGF0aWNSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN0YXRpY1JvdXRlcl9hZGRCYXNlbmFtZSIsIlBhdGhVdGlscyIsIlN0YXRpY1JvdXRlcl9jcmVhdGVMb2NhdGlvbiIsIl9vYmplY3QkcGF0aG5hbWUiLCJfb2JqZWN0JHNlYXJjaCIsIl9vYmplY3QkaGFzaCIsIlN0YXRpY1JvdXRlcl9jcmVhdGVVUkwiLCJTdGF0aWNSb3V0ZXJfc3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJub29wIiwiU3RhdGljUm91dGVyX1N0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlciIsIlN0YXRpY1JvdXRlcl9jbGFzc0NhbGxDaGVjayIsImhhbmRsZVB1c2giLCJoYW5kbGVSZXBsYWNlIiwiaGFuZGxlTGlzdGVuIiwiaGFuZGxlQmxvY2siLCJTdGF0aWNSb3V0ZXJfaW5oZXJpdHMiLCJTdGF0aWNSb3V0ZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJTdGF0aWNSb3V0ZXJfc3RyaXBCYXNlbmFtZSIsIlN3aXRjaF9Td2l0Y2giLCJTd2l0Y2giLCJTd2l0Y2hfY2xhc3NDYWxsQ2hlY2siLCJTd2l0Y2hfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN3aXRjaF9pbmhlcml0cyIsImVsZW1lbnQiLCJfZWxlbWVudCRwcm9wcyIsInBhdGhQcm9wIiwicGFnZXMiLCJhZGRyZXNzIiwibGlua3MiLCJNZW51SXRlbV9kZWZhdWx0IiwiYnV0dG9ucyIsImZpeGVkQnV0dG9ucyIsIkhlYWRlcl9IZWFkZXIiLCJyZWFjdCIsInN1cGVyIiwibW9iaWxlUmVuZGVyIiwiaGVhZGVyTW9iaWxlIiwiSWNvbk1lbnVfZGVmYXVsdCIsImljb25CdXR0b25FbGVtZW50IiwiSWNvbkJ1dHRvbl9kZWZhdWx0IiwibW9yZV92ZXJ0X2RlZmF1bHQiLCJjb21wdXRlclJlbmRlciIsImZpeEhlYWRlciIsInNob3dNb2JpbGUiLCJmb290ZXJfRm9vdGVyIiwiYmFja2dyb3VuZF9CYWNrZ3JvdW5kIiwiQ2FsZW5kYXJzX0NvbnRlbnQiLCJPdXJfU2Nob29sc19Db250ZW50IiwiU2Nob29sX0JvYXJkX0NvbnRlbnQiLCJTdHVkZW50X1BhcmVudF9SZXNvdXJjZXNfQ29udGVudCIsIlN0YWZmX1Jlc291cmNlc19Db250ZW50IiwiRW1wbG95bWVudF9FbXBsb3ltZW50IiwiUGFnZXNfUGFnZXMiLCJib2R5X1RpdGxlIiwiSG9tZXBhZ2VfQ29udGVudCIsIkJvZHlfc2Nyb2xsIiwiQm9keV9Cb2R5IiwiYm9keVJlZiIsImNyZWF0ZVJlZiIsImhlYWRlckxhbmRzY2FwZSIsImN1cnJlbnQiLCJBcHBfQXBwIiwiTXVpVGhlbWVQcm92aWRlcl9kZWZhdWx0IiwicmVhY3RfZG9tX2RlZmF1bHQiLCJnZXRFbGVtZW50QnlJZCIsIl90cmFuc2l0aW9uczIiLCJfY29sb3JNYW5pcHVsYXRvciIsIl9FbmhhbmNlZEJ1dHRvbjIiLCJSYWlzZWRCdXR0b24iLCJob3ZlcmVkIiwidG91Y2hlZCIsImluaXRpYWxaRGVwdGgiLCJoYW5kbGVNb3VzZURvd24iLCJvbk1vdXNlRG93biIsImhhbmRsZU1vdXNlVXAiLCJvbk1vdXNlVXAiLCJoYW5kbGVNb3VzZUxlYXZlIiwib25Nb3VzZUxlYXZlIiwiaGFuZGxlTW91c2VFbnRlciIsIm9uTW91c2VFbnRlciIsImhhbmRsZVRvdWNoU3RhcnQiLCJvblRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsIm9uVG91Y2hFbmQiLCJoYW5kbGVLZXlib2FyZEZvY3VzIiwiYnV0dG9uU3R5bGUiLCJpY29uIiwiZGlzYWJsZWRCYWNrZ3JvdW5kQ29sb3IiLCJkaXNhYmxlZExhYmVsQ29sb3IiLCJmdWxsV2lkdGgiLCJsYWJlbCIsImxhYmVsUG9zaXRpb24iLCJsYWJlbENvbG9yIiwibGFiZWxTdHlsZSIsIm92ZXJsYXlTdHlsZSIsInJpcHBsZVN0eWxlIiwicHJpbWFyeSIsInNlY29uZGFyeSIsInJhaXNlZEJ1dHRvbiIsImJvcmRlclJhZGl1cyIsImFtb3VudCIsImRpc2FibGVkVGV4dENvbG9yIiwicHJpbWFyeUNvbG9yIiwicHJpbWFyeVRleHRDb2xvciIsInNlY29uZGFyeUNvbG9yIiwic2Vjb25kYXJ5VGV4dENvbG9yIiwiYnV0dG9uSGVpZ2h0IiwidHJhbnNpdGlvbiIsInRleHRBbGlnbiIsImxldHRlclNwYWNpbmciLCJ0ZXh0VHJhbnNmb3JtIiwic3BhY2luZyIsImRlc2t0b3BHdXR0ZXJMZXNzIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0Iiwib3ZlcmxheSIsInJpcHBsZSIsIm1lcmdlZFJpcHBsZVN0eWxlcyIsImJ1dHRvbkV2ZW50SGFuZGxlcnMiLCJsYWJlbEVsZW1lbnQiLCJpY29uQ2xvbmVkIiwiZW5oYW5jZWRCdXR0b25DaGlsZHJlbiIsIl9SYWlzZWRCdXR0b24iLCJfUmFpc2VkQnV0dG9uMiIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsInRyaW0iLCIkMSIsIk5lc3RlZExpc3QiLCJuZXN0ZWRMZXZlbCIsIk5hdmlnYXRpb25FeHBhbmRNb3JlIiwiTmF2aWdhdGlvbkV4cGFuZExlc3MiLCJleHRlbmRDaGlsZHJlbiIsImV4dGVuZGVkUHJvcHMiLCJleHRlbmRlZENoaWxkcmVuIiwibmV3UHJvcHMiLCJUb29sdGlwIiwic2V0UmlwcGxlU2l6ZSIsInNldFRvb2x0aXBQb3NpdGlvbiIsInRvb2x0aXAiLCJ0b29sdGlwV2lkdGgiLCJob3Jpem9udGFsUG9zaXRpb24iLCJ0b29sdGlwSGVpZ2h0IiwicmlwcGxlRGlhbWV0ZXIiLCJzcXJ0IiwidG91Y2giLCJ2ZXJ0aWNhbFBvc2l0aW9uIiwidG91Y2hNYXJnaW5PZmZzZXQiLCJ0b3VjaE9mZnNldFRvcCIsInJvb3RXaGVuU2hvd24iLCJyb290V2hlblRvdWNoZWQiLCJyaXBwbGVXaGVuU2hvd24iLCJyaXBwbGVCYWNrZ3JvdW5kQ29sb3IiLCJGb250SWNvbiIsIm9mZkNvbG9yIiwib25Db2xvciIsImljb25TaXplIiwiX0ZvbnRJY29uIiwiX0ZvbnRJY29uMiIsIl9Ub29sdGlwMiIsIl9jaGlsZFV0aWxzIiwiSWNvbkJ1dHRvbiIsInRvb2x0aXBTaG93biIsImhpZGVUb29sdGlwIiwic2hvd1Rvb2x0aXAiLCJoYW5kbGVNb3VzZU91dCIsIm9uTW91c2VPdXQiLCJob3ZlcmVkU3R5bGUiLCJpY29uQ2xhc3NOYW1lIiwidG9vbHRpcFBvc2l0aW9uUHJvcCIsInRvb2x0aXBQb3NpdGlvbiIsInRvb2x0aXBTdHlsZXMiLCJpY29uU3R5bGUiLCJmb250aWNvbiIsInRvb2x0aXBFbGVtZW50IiwiaWNvbkhvdmVyQ29sb3IiLCJpY29uU3R5bGVGb250SWNvbiIsImNoaWxkcmVuU3R5bGUiLCJfYXV0b1ByZWZpeDIiLCJDaXJjbGVSaXBwbGUiLCJlbnRlclRpbWVyIiwibGVhdmVUaW1lciIsImluaXRpYWxpemVBbmltYXRpb24iLCJhbmltYXRlIiwicmVtb3ZlQWZ0ZXIiLCJhYm9ydGVkIiwidHJhbnNpdGlvblZhbHVlIiwidG91Y2hHZW5lcmF0ZWQiLCJfdG9Db25zdW1hYmxlQXJyYXkzIiwiX1RyYW5zaXRpb25Hcm91cDIiLCJfZG9tMiIsIl9DaXJjbGVSaXBwbGUyIiwiVG91Y2hSaXBwbGUiLCJzdGFydCIsImFib3J0T25TY3JvbGwiLCJ0b3VjaGVzIiwic3RhcnRMaXN0ZW5pbmdGb3JTY3JvbGxBYm9ydCIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJoYW5kbGVUb3VjaE1vdmUiLCJhYnMiLCJzdG9wTGlzdGVuaW5nRm9yU2Nyb2xsQWJvcnQiLCJjbGllbnRZIiwiZmlyc3RUb3VjaFkiLCJkZWx0YVgiLCJjbGllbnRYIiwiZmlyc3RUb3VjaFgiLCJjdXJyZW50UmlwcGxlcyIsInJpcHBsZXMiLCJhYm9ydGVkUmlwcGxlIiwiaWdub3JlTmV4dE1vdXNlRG93biIsImhhc1JpcHBsZXMiLCJuZXh0S2V5IiwiaXNSaXBwbGVUb3VjaEdlbmVyYXRlZCIsInRoZW1lIiwiZ2V0UmlwcGxlU3R5bGUiLCJlbEhlaWdodCIsImlzVG91Y2hFdmVudCIsInBhZ2VYIiwicGFnZVkiLCJwb2ludGVyWCIsInBvaW50ZXJZIiwidG9wTGVmdERpYWciLCJjYWxjRGlhZyIsInRvcFJpZ2h0RGlhZyIsImJvdFJpZ2h0RGlhZyIsImJvdExlZnREaWFnIiwicmlwcGxlUmFkaXVzIiwicmlwcGxlU2l6ZSIsImRpcmVjdGlvbkludmFyaWFudCIsIl9zdGF0ZSIsInJpcHBsZUdyb3VwIiwicG9pbnRlckV2ZW50cyIsIlNjYWxlSW5DaGlsZCIsIm1pblNjYWxlIiwibWF4U2NhbGUiLCJlbnRlckRlbGF5IiwicHJldiIsImdldFZhbHVlRm9yS2V5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwiY2hpbGRNYXBwaW5nIiwicGVuZGluZ05leHRLZXkiLCJfU2NhbGVJbkNoaWxkMiIsIlNjYWxlSW4iLCJjaGlsZFN0eWxlIiwiX1NjYWxlSW4yIiwicHVsc2F0ZUR1cmF0aW9uIiwiRm9jdXNSaXBwbGUiLCJwdWxzYXRlIiwiaW5uZXJDaXJjbGUiLCJuZXh0U2NhbGUiLCJpbm5lclN0eWxlIiwiaW5uZXJTdHlsZXMiLCJzaXplIiwib2xkVG9wIiwiZ2V0UmlwcGxlRWxlbWVudCIsIl9leHBhbmRMZXNzMiIsIl9leHBhbmRNb3JlMiIsIl9OZXN0ZWRMaXN0MiIsIkxpc3RJdGVtIiwicmlnaHRJY29uQnV0dG9uSG92ZXJlZCIsInJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXNlZCIsInByaW1hcnlUb2dnbGVzTmVzdGVkTGlzdCIsImhhbmRsZU5lc3RlZExpc3RUb2dnbGUiLCJsZWZ0Q2hlY2tib3giLCJvbk5lc3RlZExpc3RUb2dnbGUiLCJoYW5kbGVSaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzIiwiaWNvbkJ1dHRvbiIsInJpZ2h0SWNvbkJ1dHRvbiIsImhhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlTGVhdmUiLCJoYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZUVudGVyIiwiaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcCIsImhhbmRsZVJpZ2h0SWNvbkJ1dHRvbkNsaWNrIiwiaW5pdGlhbGx5T3BlbiIsImJ1dHRvbkVsIiwiYmx1ciIsImNvbnRlbnRDaGlsZHJlbiIsImFkZGl0aW9uYWxQcm9wcyIsIm1lcmdlZERpdlN0eWxlcyIsImlubmVyRGl2IiwibWVyZ2VkTGFiZWxTdHlsZXMiLCJiYXNlU3R5bGVzIiwiYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yIiwibGVmdEF2YXRhciIsIm5lc3RlZEl0ZW1zIiwibmVzdGVkTGlzdFN0eWxlIiwicmlnaHRBdmF0YXIiLCJyaWdodFRvZ2dsZSIsInNlY29uZGFyeVRleHRMaW5lcyIsInNpbmdsZUF2YXRhciIsInNpbmdsZU5vQXZhdGFyIiwidHdvTGluZSIsInRocmVlTGluZSIsIm5lc3RlZExldmVsRGVwdGgiLCJpY29ucyIsImF2YXRhcnMiLCJ0ZXh0T3ZlcmZsb3ciLCJXZWJraXRMaW5lQ2xhbXAiLCJXZWJraXRCb3hPcmllbnQiLCJsZWZ0SWNvbkNvbG9yIiwicHVzaEVsZW1lbnQiLCJfYWRkaXRpb25hbFByb3BzIiwicmlnaHRJY29uQ29sb3IiLCJuZWVkc05lc3RlZEluZGljYXRvciIsInJpZ2h0SWNvbkJ1dHRvbkVsZW1lbnQiLCJyaWdodEljb25CdXR0b25IYW5kbGVycyIsInByaW1hcnlUZXh0RWxlbWVudCIsImNyZWF0ZVRleHRFbGVtZW50IiwibmVzdGVkTGlzdCIsInNpbXBsZUxhYmVsIiwiY3JlYXRlTGFiZWxFbGVtZW50IiwiY3JlYXRlRGlzYWJsZWRFbGVtZW50IiwiU3ZnSWNvbiIsInZpZXdCb3giLCJzdmdJY29uIiwiY3JlYXRlRmFjdG9yeSIsIlNob3VsZFVwZGF0ZSIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIk5hdmlnYXRpb25DaGVjayIsIlBvcG92ZXJBbmltYXRpb25EZWZhdWx0IiwidHJhbnNmb3JtT3JpZ2luIiwiRlVOQ19FUlJPUl9URVhUIiwiTkFOIiwic3ltYm9sVGFnIiwicmVUcmltIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJvYmplY3RUb1N0cmluZyIsIm5hdGl2ZU1heCIsIm5hdGl2ZU1pbiIsImRlYm91bmNlIiwid2FpdCIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsInRyYWlsaW5nIiwiaW52b2tlRnVuYyIsInRpbWUiLCJ0aGlzQXJnIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0aW1lckV4cGlyZWQiLCJ0cmFpbGluZ0VkZ2UiLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImxlYWRpbmdFZGdlIiwidG9OdW1iZXIiLCJmbHVzaCIsImlzT2JqZWN0TGlrZSIsImlzU3ltYm9sIiwiaXNCaW5hcnkiLCJQYXBlciIsImNpcmNsZSIsInJvdW5kZWQiLCJ0cmFuc2l0aW9uRW5hYmxlZCIsInBhcGVyIiwiYm94U2hhZG93IiwiekRlcHRoU2hhZG93cyIsIl9yZWFjdERvbSIsIlJlbmRlclRvTGF5ZXIiLCJkb2N1bWVudEVsZW1lbnQiLCJjb250YWlucyIsInVucmVuZGVyTGF5ZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwibGF5ZXJFbGVtZW50IiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJwYXNzaXZlT3B0aW9uIiwiYXR0ciIsInN1cHBvcnRzUGFzc2l2ZU9wdGlvbiIsIl9rZXlzMiIsIndpdGhPcHRpb25zIiwiaGFuZGxlciIsIm1lcmdlRGVmYXVsdEV2ZW50T3B0aW9ucyIsIl9zdXBwb3J0cyIsImRlZmF1bHRFdmVudE9wdGlvbnMiLCJwYXNzaXZlIiwiZ2V0RXZlbnRMaXN0ZW5lckFyZ3MiLCJldmVudE5hbWUiLCJFdmVudExpc3RlbmVyIiwiYWRkTGlzdGVuZXJzIiwicmVtb3ZlTGlzdGVuZXJzIiwiYXBwbHlMaXN0ZW5lcnMiLCJvbk9yT2ZmIiwiaXRlcmF0ZWUiLCJldmVudFByb3BzIiwicHJvcCIsImZvckVhY2hMaXN0ZW5lciIsImNsZWFyIiwibGFzdEtleXMiLCJTdWJoZWFkZXIiLCJpbnNldCIsInN1YmhlYWRlciIsIl9TdWJoZWFkZXIiLCJjbGlja0F3YXlFdmVudHMiLCJ1bmJpbmQiLCJDbGlja0F3YXlMaXN0ZW5lciIsImlzQ3VycmVudGx5TW91bnRlZCIsImdldEtleXMiLCJnT1BTIiwiJGFzc2lnbiIsIkEiLCJLIiwiVCIsImFMZW4iLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwibWVudUluaXRpYWxseUtleWJvYXJkRm9jdXNlZCIsImhhbmRsZUl0ZW1DbGljayIsImNsaWNrQ2xvc2VEZWxheSIsInRpbWVyQ2xvc2VJZCIsImhhbmRsZUVzY0tleURvd25NZW51IiwiaWNvbk1lbnVDb250YWluZXIiLCJvblJlcXVlc3RDaGFuZ2UiLCJjdXJyZW50VGFyZ2V0IiwibWVudVN0eWxlIiwibWVyZ2VkTWVudVN0eWxlcyIsImljb25CdXR0b25Qcm9wcyIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY29sb3JzIiwiVHlwb2dyYXBoeSIsInRleHRGdWxsQmxhY2siLCJ0ZXh0RGFya0JsYWNrIiwidGV4dExpZ2h0QmxhY2siLCJ0ZXh0TWluQmxhY2siLCJ0ZXh0RnVsbFdoaXRlIiwidGV4dERhcmtXaGl0ZSIsInRleHRMaWdodFdoaXRlIiwiZm9udFdlaWdodExpZ2h0IiwiZm9udFdlaWdodE5vcm1hbCIsImZvbnRXZWlnaHRNZWRpdW0iLCJmb250U3R5bGVCdXR0b25Gb250U2l6ZSIsImZ1bmNzIiwiX2tleXMiLCJpc1J0bCIsImZsaXBwZWRBdHRyaWJ1dGVzIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJMZWZ0IiwibmV3U3R5bGUiLCJhdHRyaWJ1dGUiLCJyZVRyYW5zbGF0ZSIsInJlU2tldyIsInByb3BlcnR5UHJlZml4TWFwIiwicHJvcGVydGllcyIsIm91dHB1dFZhbHVlIiwiX2lzUHJlZml4ZWRWYWx1ZTIiLCJtdWx0aXBsZVZhbHVlcyIsInNpbmdsZVZhbHVlIiwiZGFzaENhc2VQcm9wZXJ0eSIsIl9oeXBoZW5hdGVQcm9wZXJ0eTIiLCJwcmVmaXhlcyIsInBMZW4iLCJwcmVmaXhNYXBwaW5nIiwicHJlZml4VmFsdWUiLCJ3ZWJraXRPdXRwdXQiLCJtb3pPdXRwdXQiLCJfY2FwaXRhbGl6ZVN0cmluZzIiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJXZWJraXRUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvblByb3BlcnR5IiwiTW96VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb25Qcm9wZXJ0eSIsIldlYmtpdCIsIk1veiIsIm1zIiwibWF4V2lkdGgiLCJjb2x1bW5XaWR0aCIsIm1pbi1jb250ZW50IiwibWF4LWNvbnRlbnQiLCJmaWxsLWF2YWlsYWJsZSIsImZpdC1jb250ZW50IiwiY29udGFpbi1mbG9hdHMiLCJfaXNQcmVmaXhlZFZhbHVlIiwiV2Via2l0Qm94RGlyZWN0aW9uIiwiYWx0ZXJuYXRpdmVQcm9wcyIsImFsdGVybmF0aXZlVmFsdWVzIiwic3BhY2UtYXJvdW5kIiwic3BhY2UtYmV0d2VlbiIsImZsZXgtc3RhcnQiLCJmbGV4LWVuZCIsIndyYXAtcmV2ZXJzZSIsIndyYXAiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJmbGV4V3JhcCIsImFsaWduQ29udGVudCIsImFsaWduU2VsZiIsIm9yZGVyIiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZmxleEJhc2lzIiwiZmxleCIsImlubGluZS1mbGV4IiwiX2NhbGMyIiwiX2ZsZXgyIiwiX2ZsZXhib3hJRTIiLCJfZmxleGJveE9sZDIiLCJfZ3JhZGllbnQyIiwiX3NpemluZzIiLCJfdHJhbnNpdGlvbjIiLCJwcmVmaXhNYXAiLCJ0cmFuc2Zvcm1PcmlnaW5YIiwidHJhbnNmb3JtT3JpZ2luWSIsImJhY2tmYWNlVmlzaWJpbGl0eSIsInBlcnNwZWN0aXZlIiwicGVyc3BlY3RpdmVPcmlnaW4iLCJ0cmFuc2Zvcm1TdHlsZSIsInRyYW5zZm9ybU9yaWdpbloiLCJhbmltYXRpb25EZWxheSIsImFuaW1hdGlvbkRpcmVjdGlvbiIsImFuaW1hdGlvbkZpbGxNb2RlIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFuaW1hdGlvbk5hbWUiLCJhbmltYXRpb25QbGF5U3RhdGUiLCJhbmltYXRpb25UaW1pbmdGdW5jdGlvbiIsImFwcGVhcmFuY2UiLCJmb250S2VybmluZyIsInRleHRFbXBoYXNpc1Bvc2l0aW9uIiwidGV4dEVtcGhhc2lzIiwidGV4dEVtcGhhc2lzU3R5bGUiLCJ0ZXh0RW1waGFzaXNDb2xvciIsImJveERlY29yYXRpb25CcmVhayIsImNsaXBQYXRoIiwibWFza0ltYWdlIiwibWFza01vZGUiLCJtYXNrUmVwZWF0IiwibWFza1Bvc2l0aW9uIiwibWFza0NsaXAiLCJtYXNrT3JpZ2luIiwibWFza1NpemUiLCJtYXNrQ29tcG9zaXRlIiwibWFzayIsIm1hc2tCb3JkZXJTb3VyY2UiLCJtYXNrQm9yZGVyTW9kZSIsIm1hc2tCb3JkZXJTbGljZSIsIm1hc2tCb3JkZXJXaWR0aCIsIm1hc2tCb3JkZXJPdXRzZXQiLCJtYXNrQm9yZGVyUmVwZWF0IiwibWFza0JvcmRlciIsIm1hc2tUeXBlIiwidGV4dERlY29yYXRpb25TdHlsZSIsInRleHREZWNvcmF0aW9uU2tpcCIsInRleHREZWNvcmF0aW9uTGluZSIsInRleHREZWNvcmF0aW9uQ29sb3IiLCJmb250RmVhdHVyZVNldHRpbmdzIiwiYnJlYWtBZnRlciIsImJyZWFrQmVmb3JlIiwiYnJlYWtJbnNpZGUiLCJjb2x1bW5Db3VudCIsImNvbHVtbkZpbGwiLCJjb2x1bW5HYXAiLCJjb2x1bW5SdWxlIiwiY29sdW1uUnVsZUNvbG9yIiwiY29sdW1uUnVsZVN0eWxlIiwiY29sdW1uUnVsZVdpZHRoIiwiY29sdW1ucyIsImNvbHVtblNwYW4iLCJmbGV4RGlyZWN0aW9uIiwiZmxleEZsb3ciLCJ0cmFuc2l0aW9uRGVsYXkiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24iLCJiYWNrZHJvcEZpbHRlciIsInNjcm9sbFNuYXBUeXBlIiwic2Nyb2xsU25hcFBvaW50c1giLCJzY3JvbGxTbmFwUG9pbnRzWSIsInNjcm9sbFNuYXBEZXN0aW5hdGlvbiIsInNjcm9sbFNuYXBDb29yZGluYXRlIiwic2hhcGVJbWFnZVRocmVzaG9sZCIsInNoYXBlSW1hZ2VNYXJnaW4iLCJzaGFwZUltYWdlT3V0c2lkZSIsImh5cGhlbnMiLCJmbG93SW50byIsImZsb3dGcm9tIiwicmVnaW9uRnJhZ21lbnQiLCJ0ZXh0QWxpZ25MYXN0IiwidGFiU2l6ZSIsIndyYXBGbG93Iiwid3JhcFRocm91Z2giLCJ3cmFwTWFyZ2luIiwidG91Y2hBY3Rpb24iLCJncmlkVGVtcGxhdGVDb2x1bW5zIiwiZ3JpZFRlbXBsYXRlUm93cyIsImdyaWRUZW1wbGF0ZUFyZWFzIiwiZ3JpZFRlbXBsYXRlIiwiZ3JpZEF1dG9Db2x1bW5zIiwiZ3JpZEF1dG9Sb3dzIiwiZ3JpZEF1dG9GbG93IiwiZ3JpZCIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW5TdGFydCIsImdyaWRSb3dFbmQiLCJncmlkUm93IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uR2FwIiwiZ3JpZFJvd0dhcCIsImdyaWRBcmVhIiwiZ3JpZEdhcCIsInRleHRTaXplQWRqdXN0IiwiYm9yZGVySW1hZ2UiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlUmVwZWF0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlU291cmNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsInVwcGVyY2FzZVBhdHRlcm4iLCJtc1BhdHRlcm4iLCJjc3NQcmVmaXgiLCJyZXF1aXJlc1ByZWZpeCIsInJlcXVpcmVzUHJlZml4RGFzaENhc2VkIiwiX2h5cGhlbmF0ZVByb3BlcnR5IiwiX2dldFByZWZpeGVkVmFsdWUyIiwiX2dldFByZWZpeGVkVmFsdWUiLCJicm93c2VyTmFtZSIsImJyb3dzZXJWZXJzaW9uIiwiY2hyb21lIiwic2FmYXJpIiwiZmlyZWZveCIsIm9wZXJhIiwiaWUiLCJlZGdlIiwiaW9zX3NhZiIsImFuZHJvaWQiLCJhbmRfY2hyIiwiYW5kX3VjIiwib3BfbWluaSIsImRlZmluaXRpb24iLCJkZXRlY3QiLCJnZXRGaXJzdE1hdGNoIiwiZ2V0U2Vjb25kTWF0Y2giLCJpb3NkZXZpY2UiLCJuZXh1c01vYmlsZSIsIm5leHVzVGFibGV0IiwiY2hyb21lb3MiLCJzaWxrIiwic2FpbGZpc2giLCJ0aXplbiIsIndlYm9zIiwid2luZG93c3Bob25lIiwibWFjIiwibGludXgiLCJlZGdlVmVyc2lvbiIsInZlcnNpb25JZGVudGlmaWVyIiwidGFibGV0IiwibW9iaWxlIiwieGJveCIsInNhbXN1bmdCcm93c2VyIiwiY29hc3QiLCJ5YW5kZXhicm93c2VyIiwidWNicm93c2VyIiwibWF4dGhvbiIsImVwaXBoYW55IiwicHVmZmluIiwic2xlaXBuaXIiLCJrTWVsZW9uIiwib3NuYW1lIiwibXNlZGdlIiwibXNpZSIsImNocm9tZUJvb2siLCJ2aXZhbGRpIiwic2VhbW9ua2V5IiwiZmlyZWZveG9zIiwicGhhbnRvbSIsInNsaW1lciIsImJsYWNrYmVycnkiLCJ0b3VjaHBhZCIsImJhZGEiLCJxdXB6aWxsYSIsImNocm9taXVtIiwiZ29vZ2xlYm90IiwiYmxpbmsiLCJ3ZWJraXQiLCJnZWNrbyIsImlvcyIsIm9zVmVyc2lvbiIsImdldFdpbmRvd3NWZXJzaW9uIiwib3N2ZXJzaW9uIiwib3NNYWpvclZlcnNpb24iLCJib3dzZXIiLCJnZXRWZXJzaW9uUHJlY2lzaW9uIiwiY29tcGFyZVZlcnNpb25zIiwidmVyc2lvbnMiLCJwcmVjaXNpb24iLCJjaHVua3MiLCJjaHVuayIsInJldmVyc2UiLCJpc1Vuc3VwcG9ydGVkQnJvd3NlciIsIm1pblZlcnNpb25zIiwic3RyaWN0TW9kZSIsIl9ib3dzZXIiLCJicm93c2VyIiwiYnJvd3Nlckxpc3QiLCJicm93c2VySXRlbSIsImNoZWNrIiwiX2RldGVjdCIsImJyb3dzZXJJbmZvIiwiX2Jvd3NlcjIiLCJwcmVmaXhCeUJyb3dzZXIiLCJqc1ByZWZpeCIsImJyb3dzZXJCeUNhbkl1c2VBbGlhcyIsImdldEJyb3dzZXJOYW1lIiwic2VhbW9uZXkiLCJmaXJmb3giLCJfY3JlYXRlQ2xhc3MiLCJmYWxsYmFjayIsIlByZWZpeGVyIiwiZGVmYXVsdFVzZXJBZ2VudCIsIl91c2VyQWdlbnQiLCJfa2VlcFVucHJlZml4ZWQiLCJfYnJvd3NlckluZm8iLCJfZ2V0QnJvd3NlckluZm9ybWF0aW9uMiIsIl91c2VGYWxsYmFjayIsInByZWZpeGVkS2V5ZnJhbWVzIiwiX2dldFByZWZpeGVkS2V5ZnJhbWVzMiIsInByZWZpeERhdGEiLCJfcmVxdWlyZXNQcmVmaXgiLCJfaGFzUHJvcHNSZXF1aXJpbmdQcmVmaXgiLCJfbWV0YURhdGEiLCJfcHJlZml4U3R5bGUiLCJfaXNPYmplY3QyIiwiY29tYmluZWRWYWx1ZSIsIl9wcmVmaXhWYWx1ZTIiLCJfYWRkTmV3VmFsdWVzT25seTIiLCJfcHJvY2Vzc2VkVmFsdWUiLCJwcmVmaXhQcm9wZXJ0aWVzIiwicmVxdWlyZWRQcmVmaXhlcyIsIl9jYXBpdGFsaXplU3RyaW5nIiwicHJlZml4QWxsIiwiX3ByZWZpeFByb3BlcnR5MiIsImlzQ2xpZW50IiwiaGFzV2FybmVkQWJvdXRVc2VyQWdlbnQiLCJfY3JlYXRlUHJlZml4ZXIyIiwiX2F1dG9wcmVmaXhlclN0YXRpYzIiLCJpc0ZsZXgiLCJzdHlsZVByZWZpeGVkIiwicHJlZml4ZXIiLCJfY3JlYXRlUHJlZml4ZXI0IiwiX2F1dG9wcmVmaXhlckR5bmFtaWMyIiwiYXBwQmFyIiwiZHJhd2VyT3ZlcmxheSIsImRyYXdlciIsImRpYWxvZ092ZXJsYXkiLCJkaWFsb2ciLCJzbmFja2JhciIsImRlc2t0b3BHdXR0ZXIiLCJkZXNrdG9wR3V0dGVyTW9yZSIsImRlc2t0b3BHdXR0ZXJNaW5pIiwiZGVza3RvcEtleWxpbmVJbmNyZW1lbnQiLCJkZXNrdG9wRHJvcERvd25NZW51SXRlbUhlaWdodCIsImRlc2t0b3BEcm9wRG93bk1lbnVGb250U2l6ZSIsImRlc2t0b3BEcmF3ZXJNZW51SXRlbUhlaWdodCIsImRlc2t0b3BTdWJoZWFkZXJIZWlnaHQiLCJkZXNrdG9wVG9vbGJhckhlaWdodCIsIl9zcGFjaW5nIiwiX3NwYWNpbmcyIiwicHJpbWFyeTFDb2xvciIsInByaW1hcnkyQ29sb3IiLCJwcmltYXJ5M0NvbG9yIiwiYWNjZW50MUNvbG9yIiwiYWNjZW50MkNvbG9yIiwiYWNjZW50M0NvbG9yIiwiYWx0ZXJuYXRlVGV4dENvbG9yIiwiY2FudmFzQ29sb3IiLCJib3JkZXJDb2xvciIsInBpY2tlckhlYWRlckNvbG9yIiwiY2xvY2tDaXJjbGVDb2xvciIsInNoYWRvd0NvbG9yIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiSEFTSF9VTkRFRklORUQiLCJIT1RfQ09VTlQiLCJIT1RfU1BBTiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJhcmdzVGFnIiwiYXN5bmNUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibnVsbFRhZyIsIm9iamVjdFRhZyIsInByb3h5VGFnIiwidW5kZWZpbmVkVGFnIiwicmVJc0hvc3RDdG9yIiwicmVJc1VpbnQiLCJ0eXBlZEFycmF5VGFncyIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwiYmluZGluZyIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJzYWZlR2V0IiwiYXJyYXlQcm90byIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiY29yZUpzRGF0YSIsImZ1bmNUb1N0cmluZyIsIm1hc2tTcmNLZXkiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJyZUlzTmF0aXZlIiwiQnVmZmVyIiwiVWludDhBcnJheSIsImFsbG9jVW5zYWZlIiwiZ2V0UHJvdG90eXBlIiwib2JqZWN0Q3JlYXRlIiwic3ltVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsImdldE5hdGl2ZSIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVOb3ciLCJNYXAiLCJuYXRpdmVDcmVhdGUiLCJiYXNlQ3JlYXRlIiwiSGFzaCIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU3RhY2siLCJfX2RhdGFfXyIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNBcmd1bWVudHMiLCJpc0J1ZmYiLCJpc1R5cGUiLCJza2lwSW5kZXhlcyIsImJhc2VUaW1lcyIsImlzSW5kZXgiLCJhc3NpZ25NZXJnZVZhbHVlIiwiZXEiLCJiYXNlQXNzaWduVmFsdWUiLCJhc3NpZ25WYWx1ZSIsIm9ialZhbHVlIiwiYXNzb2NJbmRleE9mIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiZnJvbVJpZ2h0IiwiYmFzZUZvciIsImtleXNGdW5jIiwiaXRlcmFibGUiLCJiYXNlR2V0VGFnIiwiaXNPd24iLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsImJhc2VJc0FyZ3VtZW50cyIsImJhc2VJc05hdGl2ZSIsImlzRnVuY3Rpb24iLCJ0b1NvdXJjZSIsImJhc2VLZXlzSW4iLCJuYXRpdmVLZXlzSW4iLCJpc1Byb3RvIiwiaXNQcm90b3R5cGUiLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsImN1c3RvbWl6ZXIiLCJzdGFjayIsInNyY1ZhbHVlIiwibWVyZ2VGdW5jIiwic3RhY2tlZCIsIm5ld1ZhbHVlIiwiaXNDb21tb24iLCJpc1R5cGVkIiwiaXNBcnJheUxpa2UiLCJjb3B5QXJyYXkiLCJidWZmZXIiLCJpc0RlZXAiLCJjb3B5IiwiY2xvbmVCdWZmZXIiLCJ0eXBlZEFycmF5IiwiYXJyYXlCdWZmZXIiLCJieXRlTGVuZ3RoIiwiYnl0ZU9mZnNldCIsIkN0b3IiLCJpc1BsYWluT2JqZWN0IiwiaXNOZXciLCJjb3B5T2JqZWN0Iiwia2V5c0luIiwidG9QbGFpbk9iamVjdCIsImluaXRDbG9uZU9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJiYXNlUmVzdCIsInNldFRvU3RyaW5nIiwib3RoZXJBcmdzIiwib3ZlclJlc3QiLCJpZGVudGl0eSIsImdldFZhbHVlIiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwic2hvcnRPdXQiLCJpc0xlbmd0aCIsImJhc2VVbmFyeSIsImFzc2lnbmVyIiwibWVyZ2UiLCJndWFyZCIsImlzSXRlcmF0ZWVDYWxsIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsInNhZmUiLCJpdGVyIiwiQVJHIiwidHJ5R2V0IiwiY2xhc3NvZiIsImdldEl0ZXJhdG9yTWV0aG9kIiwiJGRlZmluZVByb3BlcnR5IiwiQXJyYXlQcm90byIsInJldCIsImlzQXJyYXlJdGVyIiwidG9MZW5ndGgiLCJjcmVhdGVQcm9wZXJ0eSIsImdldEl0ZXJGbiIsImFycmF5TGlrZSIsInN0ZXAiLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJtb3JlIiwiX211aVRoZW1lIiwiX3pJbmRleDIiLCJfbGlnaHRCYXNlVGhlbWUyIiwidGl0bGVGb250V2VpZ2h0IiwiX3R5cG9ncmFwaHkyIiwiYXZhdGFyIiwiYmFkZ2UiLCJib3R0b21OYXZpZ2F0aW9uIiwidW5zZWxlY3RlZENvbG9yIiwic2VsZWN0ZWRDb2xvciIsInVuc2VsZWN0ZWRGb250U2l6ZSIsInNlbGVjdGVkRm9udFNpemUiLCJpY29uQnV0dG9uU2l6ZSIsImNhcmQiLCJ0aXRsZUNvbG9yIiwic3VidGl0bGVDb2xvciIsImNhcmRNZWRpYSIsIm92ZXJsYXlDb250ZW50QmFja2dyb3VuZCIsImNhcmRUZXh0IiwiY2hlY2tib3giLCJib3hDb2xvciIsImNoZWNrZWRDb2xvciIsInJlcXVpcmVkQ29sb3IiLCJsYWJlbERpc2FibGVkQ29sb3IiLCJjaGlwIiwiZGVsZXRlSWNvbkNvbG9yIiwic2hhZG93IiwiZGF0ZVBpY2tlciIsImNhbGVuZGFyVGV4dENvbG9yIiwic2VsZWN0Q29sb3IiLCJzZWxlY3RUZXh0Q29sb3IiLCJjYWxlbmRhclllYXJCYWNrZ3JvdW5kQ29sb3IiLCJoZWFkZXJDb2xvciIsInRpdGxlRm9udFNpemUiLCJib2R5Rm9udFNpemUiLCJib2R5Q29sb3IiLCJkcm9wRG93bk1lbnUiLCJhY2NlbnRDb2xvciIsImZsYXRCdXR0b24iLCJidXR0b25GaWx0ZXJDb2xvciIsImZsb2F0aW5nQWN0aW9uQnV0dG9uIiwiYnV0dG9uU2l6ZSIsIm1pbmlTaXplIiwiaWNvbkNvbG9yIiwic2Vjb25kYXJ5SWNvbkNvbG9yIiwiZ3JpZFRpbGUiLCJpbmtCYXIiLCJjb250YWluZXJCYWNrZ3JvdW5kQ29sb3IiLCJkYXRhSGVpZ2h0IiwibWVudVN1YmhlYWRlciIsInJhZGlvQnV0dG9uIiwicmVmcmVzaEluZGljYXRvciIsInN0cm9rZUNvbG9yIiwibG9hZGluZ1N0cm9rZUNvbG9yIiwic2xpZGVyIiwidHJhY2tTaXplIiwidHJhY2tDb2xvciIsInRyYWNrQ29sb3JTZWxlY3RlZCIsImhhbmRsZVNpemUiLCJoYW5kbGVTaXplRGlzYWJsZWQiLCJoYW5kbGVTaXplQWN0aXZlIiwiaGFuZGxlQ29sb3JaZXJvIiwiaGFuZGxlRmlsbENvbG9yIiwic2VsZWN0aW9uQ29sb3IiLCJyaXBwbGVDb2xvciIsImFjdGlvbkNvbG9yIiwic3RlcHBlciIsImhvdmVyQmFja2dyb3VuZENvbG9yIiwiaG92ZXJlZEljb25Db2xvciIsImluYWN0aXZlSWNvbkNvbG9yIiwiY29ubmVjdG9yTGluZUNvbG9yIiwidGFibGUiLCJ0YWJsZUZvb3RlciIsInRhYmxlSGVhZGVyIiwidGFibGVIZWFkZXJDb2x1bW4iLCJ0YWJsZVJvdyIsInN0cmlwZUNvbG9yIiwidGFibGVSb3dDb2x1bW4iLCJ0YWJzIiwidGV4dEZpZWxkIiwiaGludENvbG9yIiwiZmxvYXRpbmdMYWJlbENvbG9yIiwiZXJyb3JDb2xvciIsImZvY3VzQ29sb3IiLCJ0aW1lUGlja2VyIiwiY2xvY2tDb2xvciIsInRvZ2dsZSIsInRodW1iT25Db2xvciIsInRodW1iT2ZmQ29sb3IiLCJ0aHVtYkRpc2FibGVkQ29sb3IiLCJ0aHVtYlJlcXVpcmVkQ29sb3IiLCJ0cmFja09uQ29sb3IiLCJ0cmFja09mZkNvbG9yIiwidHJhY2tEaXNhYmxlZENvbG9yIiwidHJhY2tSZXF1aXJlZENvbG9yIiwidG9vbGJhciIsInNlcGFyYXRvckNvbG9yIiwibWVudUhvdmVyQ29sb3IiLCJyYXdUaGVtZSIsInRyYW5zZm9ybWVycyIsIl9hdXRvcHJlZml4ZXIyIiwiX3J0bDIiLCJfY2FsbE9uY2UyIiwiX2NvbXBvc2UyIiwiJE9iamVjdCIsIkQiLCJidWdneSIsImdPUE4iLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwiREVTQ1JJUFRPUlMiLCIkZmFpbHMiLCJ3a3MiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUEQiLCIkRFAiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJVU0VfTkFUSVZFIiwiUU9iamVjdCIsInNldHRlciIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJzeW0iLCJfayIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRzZXQiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsInJlcGxhY2VyIiwiJHJlcGxhY2VyIiwiYWRkVG9VbnNjb3BhYmxlcyIsIkFyZ3VtZW50cyIsIlRPX1NUUklOR19UQUciLCJET01JdGVyYWJsZXMiLCJDb2xsZWN0aW9uIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsIlRPX1NUUklORyIsInBvcyIsImRlc2MiLCIkZ2V0UHJvdG90eXBlT2YiLCJpbnZhcmlhbnQiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJzeW1ib2wiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJkZWZhdWx0VmlldyIsIm93bmVyRG9jdW1lbnQiLCJOb2RlIiwibm9kZU5hbWUiLCJpc05vZGUiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJkb2MiLCJhY3RpdmVFbGVtZW50IiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJiYSIsImVhIiwiZmEiLCJoYSIsImphIiwia2EiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImgiLCJ2IiwiaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yIiwiaGFzQ2F1Z2h0RXJyb3IiLCJjbGVhckNhdWdodEVycm9yIiwicmV0aHJvd0NhdWdodEVycm9yIiwib2EiLCJwYSIsInFhIiwicmEiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInNhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJ0YSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ2YSIsImRlcGVuZGVuY2llcyIsIndhIiwieGEiLCJDYSIsImZyZWV6ZSIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwic3RhdGVOb2RlIiwiUGEiLCJRYSIsIlJhIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIlNhIiwiVGEiLCJVYSIsIlZhIiwiWGEiLCJiYiIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiTCIsImNiIiwiZGIiLCJkaXNwYXRjaENvbmZpZyIsImViIiwiX3RhcmdldEluc3QiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwiYWx0ZXJuYXRlIiwia2IiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImxiIiwibWIiLCJNIiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm5iIiwib2IiLCJwYiIsInFiIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiTiIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJzYiIsImV2ZW50UG9vbCIsInRiIiwiZGVzdHJ1Y3RvciIsInJiIiwiZ2V0UG9vbGVkIiwiY2FuY2VsQnViYmxlIiwiZXh0ZW5kIiwidWIiLCJ2YiIsIndiIiwieGIiLCJ5YiIsImRvY3VtZW50TW9kZSIsInpiIiwiQWIiLCJCYiIsIktiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIkxiIiwiTWIiLCJOYiIsImRldGFpbCIsIk9iIiwiUmIiLCJQYiIsImNoYXIiLCJRYiIsIlNiIiwiVGIiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50IiwiVWIiLCJWYiIsIldiIiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiZW5xdWV1ZVN0YXRlUmVzdG9yZSIsIm5lZWRzU3RhdGVSZXN0b3JlIiwicmVzdG9yZVN0YXRlSWZOZWVkZWQiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwidGVsIiwidGV4dCIsIndlZWsiLCJnYyIsImhjIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJpYyIsImpjIiwibGMiLCJfdmFsdWVUcmFja2VyIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJrYyIsIm1jIiwibmMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsIlJlYWN0Q3VycmVudE93bmVyIiwib2MiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCIkJHR5cGVvZiIsIkJjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJDYyIsIkRjIiwiRWMiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwiViIsIlNjIiwiVGMiLCJVYyIsIkdjIiwiSGMiLCJGYyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiVmMiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIldjIiwiWGMiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNoYW5nZSIsImNkIiwiZGQiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsInBkIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsInFkIiwidmlldyIsInJkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsInNkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInRkIiwidWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInNyY0VsZW1lbnQiLCJ0b0VsZW1lbnQiLCJ2ZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwid2QiLCJwYXJlbnRXaW5kb3ciLCJ4ZCIsImVmZmVjdFRhZyIsInlkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsInpkIiwiQWQiLCJzaWJsaW5nIiwiQmQiLCJEZCIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkVkIiwiY2xpcGJvYXJkRGF0YSIsIkZkIiwiR2QiLCJIZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIklkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIkpkIiwibG9jYWxlIiwiS2QiLCJkYXRhVHJhbnNmZXIiLCJMZCIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIk1kIiwiTmQiLCJ3aGVlbERlbHRhWCIsIndoZWVsRGVsdGFZIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiT2QiLCJQZCIsIlFkIiwiaXNJbnRlcmFjdGl2ZSIsIlJkIiwiaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlIiwiU2QiLCJUZCIsIlVkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFR5cGUiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiYWUiLCJiZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImNlIiwiZGUiLCJlZSIsImZlIiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuY2VsIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDbG9zZSIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRm9jdXMiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZCIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wU2Nyb2xsIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wVGV4dElucHV0IiwidG9wVG9nZ2xlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wV2hlZWwiLCJnZSIsInRvcEFib3J0IiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wRHVyYXRpb25DaGFuZ2UiLCJ0b3BFbXB0aWVkIiwidG9wRW5jcnlwdGVkIiwidG9wRW5kZWQiLCJ0b3BFcnJvciIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsImhlIiwiamUiLCJrZSIsImxlIiwibWUiLCJ0ZXh0Q29udGVudCIsIm5lIiwiY29udGVudEVkaXRhYmxlIiwib2UiLCJwZSIsInNlbGVjdCIsInFlIiwic2UiLCJ0ZSIsInVlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJ2ZSIsIm9uU2VsZWN0IiwieGUiLCJwZW5kaW5nUHJvcHMiLCJtZW1vaXplZFN0YXRlIiwidXBkYXRlUXVldWUiLCJtZW1vaXplZFByb3BzIiwibW9kZSIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJleHBpcmF0aW9uVGltZSIsInplIiwiQWUiLCJpc1JlYWN0Q29tcG9uZW50IiwiQmUiLCJDZSIsIkRlIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiRWUiLCJGZSIsIkdlIiwiSWUiLCJKZSIsIktlIiwiYmFzZVN0YXRlIiwiZmlyc3QiLCJjYWxsYmFja0xpc3QiLCJoYXNGb3JjZVVwZGF0ZSIsImlzSW5pdGlhbGl6ZWQiLCJjYXB0dXJlZFZhbHVlcyIsIkxlIiwiU2V0IiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJRZSIsInBhcnRpYWxTdGF0ZSIsIlJlIiwiaXNSZXBsYWNlIiwiaXNGb3JjZWQiLCJjYXB0dXJlZFZhbHVlIiwiU2UiLCJVZSIsIlZlIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIldlIiwiWGUiLCJ6IiwicSIsInUiLCJRIiwiSCIsIlllIiwiWmUiLCIkZSIsInBlbmRpbmdDb250ZXh0IiwiWSIsInNob3VsZFNldFRleHRDb250ZW50Iiwic2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSIsInB1c2hIb3N0Q29udGV4dCIsInB1c2hIb3N0Q29udGFpbmVyIiwicHVzaFByb3ZpZGVyIiwiZ2V0TWFza2VkQ29udGV4dCIsImdldFVubWFza2VkQ29udGV4dCIsImhhc0NvbnRleHRDaGFuZ2VkIiwicHVzaENvbnRleHRQcm92aWRlciIsInB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QiLCJpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyIiwiZW50ZXJIeWRyYXRpb25TdGF0ZSIsIldhIiwicmVzZXRIeWRyYXRpb25TdGF0ZSIsIkNiIiwidHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJKYyIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwidXBkYXRlciIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImNhY2hlQ29udGV4dCIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNNb3VudGVkIiwiZW5xdWV1ZVNldFN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiYWRvcHRDbGFzc0luc3RhbmNlIiwiY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNvbnN0cnVjdENsYXNzSW5zdGFuY2UiLCJtb3VudENsYXNzSW5zdGFuY2UiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJyZXN1bWVNb3VudENsYXNzSW5zdGFuY2UiLCJ1cGRhdGVDbGFzc0luc3RhbmNlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiVGUiLCJLYyIsIkxjIiwiRGIiLCJNYyIsIkViIiwiYmVnaW5Xb3JrIiwiaHlkcmF0ZSIsIl9jb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsImNmIiwic3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZyIsImVmIiwibGYiLCJJIiwiWWEiLCJaIiwiTmMiLCJ5YSIsImNhIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiT2MiLCJaYSIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsImNvbXBvbmVudERpZENhdGNoIiwiaWEiLCJ6YSIsImRhIiwiRmIiLCJ4ZyIsInllIiwiSWMiLCJQYyIsIkdiIiwibWciLCJRYyIsImxnIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsImxhIiwiSiIsIkhiIiwiYWEiLCIkYSIsIkliIiwiQWEiLCJfb25Db21wbGV0ZSIsIndnIiwiQmEiLCJKYiIsImZpbmlzaGVkV29yayIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJ6ZyIsImFiIiwia2ciLCJ3ZSIsImdnIiwiQWciLCJoZyIsImlnIiwiamciLCJ0aW1lUmVtYWluaW5nIiwiQmciLCJjcmVhdGVDdXJzb3IiLCJpc0VtcHR5IiwiY2hlY2tUaGF0U3RhY2tJc0VtcHR5IiwicmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2Iiwia2YiLCJnZXRDaGlsZEhvc3RDb250ZXh0IiwiZ2V0Um9vdEhvc3RDb250ZXh0IiwiZ2V0SG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250YWluZXIiLCJwb3BIb3N0Q29udGV4dCIsImZmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiaXNDb250ZXh0UHJvdmlkZXIiLCJwb3BDb250ZXh0UHJvdmlkZXIiLCJwb3BUb3BMZXZlbENvbnRleHRPYmplY3QiLCJwcm9jZXNzQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCIsImhmIiwicG9wUHJvdmlkZXIiLCJqZiIsImh5ZHJhdGlvbiIsInByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSIsInBvcEh5ZHJhdGlvblN0YXRlIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsImdldE5leHRIeWRyYXRhYmxlU2libGluZyIsImdldEZpcnN0SHlkcmF0YWJsZUNoaWxkIiwiaHlkcmF0ZUluc3RhbmNlIiwiaHlkcmF0ZVRleHRJbnN0YW5jZSIsImdmIiwiY3JlYXRlSW5zdGFuY2UiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsInByZXBhcmVVcGRhdGUiLCJwZXJzaXN0ZW5jZSIsIm11dGF0aW9uIiwiY29tcGxldGVXb3JrIiwiYWYiLCJ0aHJvd0V4Y2VwdGlvbiIsInVud2luZFdvcmsiLCJ1bndpbmRJbnRlcnJ1cHRlZFdvcmsiLCJiZiIsImdldFB1YmxpY0luc3RhbmNlIiwiY29tbWl0TW91bnQiLCJjb21taXRVcGRhdGUiLCJyZXNldFRleHRDb250ZW50IiwiY29tbWl0VGV4dFVwZGF0ZSIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tbWl0UmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFBsYWNlbWVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdExpZmVDeWNsZXMiLCJjb21taXRFcnJvckxvZ2dpbmciLCJjb21wb25lbnRTdGFjayIsImNvbW1pdEF0dGFjaFJlZiIsImNvbW1pdERldGFjaFJlZiIsImRmIiwiYWRkIiwic2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrIiwiY2FuY2VsRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiUmMiLCJyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsInJlcXVlc3RXb3JrIiwiZmx1c2hSb290IiwiYmF0Y2hlZFVwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZmx1c2hDb250cm9sbGVkIiwiZGVmZXJyZWRVcGRhdGVzIiwic3luY1VwZGF0ZXMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsImNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJsZWdhY3lDb250ZXh0IiwibWYiLCJjcmVhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXIiLCJ1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lIiwiZ2V0UHVibGljUm9vdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzIiwiQ2QiLCJpbmplY3RJbnRvRGV2VG9vbHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIkhlIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJuZiIsIm9mIiwicGYiLCJyZiIsInBlcmZvcm1hbmNlIiwic2YiLCJ0ZiIsInVmIiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJkaWRUaW1lb3V0IiwiRGYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJFZiIsInBvc3RNZXNzYWdlIiwiSW5maW5pdHkiLCJHZiIsIkZmIiwiSGYiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsIklmIiwid2FzTXVsdGlwbGUiLCJKZiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJodG1sIiwibWF0aG1sIiwic3ZnIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJuYW1lc3BhY2VVUkkiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiU2YiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJUZiIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJmbGV4UG9zaXRpdmUiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93U3BhbiIsImdyaWRDb2x1bW5TcGFuIiwibGluZUNsYW1wIiwib3JwaGFucyIsIndpZG93cyIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJVZiIsIlZmIiwic2V0UHJvcGVydHkiLCJXZiIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJjcmVhdGVFbGVtZW50TlMiLCJiZyIsImNnIiwiX19odG1sIiwib25jbGljayIsImRnIiwiZWciLCJmZyIsIm5nIiwib2ciLCJzZXRJbml0aWFsUHJvcGVydGllcyIsImRpZmZQcm9wZXJ0aWVzIiwidXBkYXRlUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRUZXh0Iiwid2FybkZvclVubWF0Y2hlZFRleHQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwicGciLCJxZyIsInJnIiwiWCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsInNnIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsInRnIiwiX2ludGVybmFsUm9vdCIsInVnIiwidmciLCJhdXRvRm9jdXMiLCJ0aGVuIiwiY29tbWl0IiwidW5tb3VudCIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNyZWF0ZUJhdGNoIiwidGFnTmFtZSIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiaGlkZGVuIiwiZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdE1hdGNoSHlkcmF0ZWRUZXh0SW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RIeWRyYXRlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UiLCJDZyIsIkVnIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImhhc0F0dHJpYnV0ZSIsIkRnIiwiRmciLCJxZiIsIkdnIiwiY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiSGciLCJJZyIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI6IiwiUHVyZUNvbXBvbmVudCIsImNyZWF0ZUNvbnRleHQiLCJfZGVmYXVsdFZhbHVlIiwiUHJvdmlkZXIiLCJDb25zdW1lciIsImZvcndhcmRSZWYiLCJGcmFnbWVudCIsIlN0cmljdE1vZGUiLCJ1bnN0YWJsZV9Bc3luY01vZGUiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWpCLEdBQ0FZLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURrQixPQUFBLEtBSWpEcEIsRUFBQXFCLEVBQUEsU0FBQWxCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQW1CLFdBQ0EsV0FBMkIsT0FBQW5CLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFVLEVBQUFDLEdBQXNELE9BQUFWLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBZ0IsRUFBQUMsSUFHdER4QixFQUFBMkIsRUFBQSxHQUlBM0IsSUFBQTRCLEVBQUEsb0NDaEVBekIsRUFBQUQsUUFBQUYsRUFBQSxzQkN1QkFHLEVBQUFELFFBQUFGLEVBQUEsSUFBQUEsaUNDaUNBRyxFQUFBRCxRQXpDQSwyQ0NoQkFBLEVB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RUFBQTFjLE1BQUEvVixHQUFXLFFBQUFKLEVBQUEsRUFBWUEsRUFBQUksRUFBSUosSUFBQTZ5QixFQUFBN3lCLEdBQUFtRCxVQUFBbkQsRUFBQSxHQUF3QkssRUFBQWtZLFNBQUFzYSxFQUFhLE9BQU91aEUsU0FBQXYxRCxFQUFBNTJCLEtBQUExRSxFQUFBMEUsS0FBQTVGLElBQUErb0MsRUFBQXB3QixJQUFBb3RFLEVBQUFubUYsTUFBQTVCLEVBQUF3b0csT0FBQW5sRyxJQUFxRGt3RCxjQUFBLFNBQUFyd0QsR0FBMkIsSUFBQUMsRUFBQTZvRixFQUFBLytFLEtBQUEsS0FBQS9KLEdBQThCLE9BQVRDLEVBQUF5RSxLQUFBMUUsRUFBU0MsR0FBUzRYLGVBQUFveUUsRUFBQTdvRixRQUFBLFNBQUEwdUYsb0RBQXVGQyxrQkFBQTBaLEVBQUEvOEUsT0FBQTl2QixJQUE4Qjg5RyxFQUFBeDlHLE9BQUFncEYsUUFBa0Jqb0YsUUFBQXNILElBQzllNGdHLEVBQUF1VSxHQUFBbjFHLEdBQUFtMUcsRUFBVW4rRyxFQUFBRCxRQUFBNnBHLEVBQUEsUUFBQUEsRUFBQSxRQUFBQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDExNyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3NldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIik7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIik7XG5cbnZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHN1cGVyQ2xhc3MpKSk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCA/ICgwLCBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAoKHR5cGVvZiBjYWxsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAob2JqLCBrZXlzKSB7XG4gIHZhciB0YXJnZXQgPSB7fTtcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7XG4gICAgdGFyZ2V0W2ldID0gb2JqW2ldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2Fzc2lnblwiKTtcblxudmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX2Fzc2lnbjIuZGVmYXVsdCB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS41JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcblxuICBlYXNlT3V0RnVuY3Rpb246ICdjdWJpYy1iZXppZXIoMC4yMywgMSwgMC4zMiwgMSknLFxuICBlYXNlSW5PdXRGdW5jdGlvbjogJ2N1YmljLWJlemllcigwLjQ0NSwgMC4wNSwgMC41NSwgMC45NSknLFxuXG4gIGVhc2VPdXQ6IGZ1bmN0aW9uIGVhc2VPdXQoZHVyYXRpb24sIHByb3BlcnR5LCBkZWxheSwgZWFzZUZ1bmN0aW9uKSB7XG4gICAgZWFzZUZ1bmN0aW9uID0gZWFzZUZ1bmN0aW9uIHx8IHRoaXMuZWFzZU91dEZ1bmN0aW9uO1xuXG4gICAgaWYgKHByb3BlcnR5ICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9wZXJ0eSkgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHZhciB0cmFuc2l0aW9ucyA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wZXJ0eS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodHJhbnNpdGlvbnMpIHRyYW5zaXRpb25zICs9ICcsJztcbiAgICAgICAgdHJhbnNpdGlvbnMgKz0gdGhpcy5jcmVhdGUoZHVyYXRpb24sIHByb3BlcnR5W2ldLCBkZWxheSwgZWFzZUZ1bmN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRyYW5zaXRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGUoZHVyYXRpb24sIHByb3BlcnR5LCBkZWxheSwgZWFzZUZ1bmN0aW9uKTtcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKGR1cmF0aW9uLCBwcm9wZXJ0eSwgZGVsYXksIGVhc2VGdW5jdGlvbikge1xuICAgIGR1cmF0aW9uID0gZHVyYXRpb24gfHwgJzQ1MG1zJztcbiAgICBwcm9wZXJ0eSA9IHByb3BlcnR5IHx8ICdhbGwnO1xuICAgIGRlbGF5ID0gZGVsYXkgfHwgJzBtcyc7XG4gICAgZWFzZUZ1bmN0aW9uID0gZWFzZUZ1bmN0aW9uIHx8ICdsaW5lYXInO1xuXG4gICAgcmV0dXJuIHByb3BlcnR5ICsgJyAnICsgZHVyYXRpb24gKyAnICcgKyBlYXNlRnVuY3Rpb24gKyAnICcgKyBkZWxheTtcbiAgfVxufTsiLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgYWRkTGVhZGluZ1NsYXNoID0gZXhwb3J0cy5hZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufTtcblxudmFyIHN0cmlwTGVhZGluZ1NsYXNoID0gZXhwb3J0cy5zdHJpcExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG59O1xuXG52YXIgaGFzQmFzZW5hbWUgPSBleHBvcnRzLmhhc0Jhc2VuYW1lID0gZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHByZWZpeCArICcoXFxcXC98XFxcXD98I3wkKScsICdpJykudGVzdChwYXRoKTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZXhwb3J0cy5zdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59O1xuXG52YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZXhwb3J0cy5zdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxudmFyIHBhcnNlUGF0aCA9IGV4cG9ydHMucGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG52YXIgY3JlYXRlUGF0aCA9IGV4cG9ydHMuY3JlYXRlUGF0aCA9IGZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcblxuXG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuXG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogJz8nICsgc2VhcmNoO1xuXG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6ICcjJyArIGhhc2g7XG5cbiAgcmV0dXJuIHBhdGg7XG59OyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3BhZ2VzLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9wYWdlcy5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3BhZ2VzLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyBcIiBcIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGhvcml6b250YWwgPSBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsnbGVmdCcsICdtaWRkbGUnLCAncmlnaHQnXSk7XG52YXIgdmVydGljYWwgPSBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsndG9wJywgJ2NlbnRlcicsICdib3R0b20nXSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHtcblxuICBjb3JuZXJzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsnYm90dG9tLWxlZnQnLCAnYm90dG9tLXJpZ2h0JywgJ3RvcC1sZWZ0JywgJ3RvcC1yaWdodCddKSxcblxuICBob3Jpem9udGFsOiBob3Jpem9udGFsLFxuXG4gIHZlcnRpY2FsOiB2ZXJ0aWNhbCxcblxuICBvcmlnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IGhvcml6b250YWwsXG4gICAgdmVydGljYWw6IHZlcnRpY2FsXG4gIH0pLFxuXG4gIGNvcm5lcnNBbmRDZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydib3R0b20tY2VudGVyJywgJ2JvdHRvbS1sZWZ0JywgJ2JvdHRvbS1yaWdodCcsICd0b3AtY2VudGVyJywgJ3RvcC1sZWZ0JywgJ3RvcC1yaWdodCddKSxcblxuICBzdHJpbmdPck51bWJlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcl0pLFxuXG4gIHpEZXB0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbMCwgMSwgMiwgMywgNCwgNV0pXG5cbn07IiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJ2ZianMvbGliL3NoYWxsb3dFcXVhbCcpO1xuXG52YXIgX3NoYWxsb3dFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93RXF1YWwpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0UHJlZml4ZWRWYWx1ZTtcbmZ1bmN0aW9uIGdldFByZWZpeGVkVmFsdWUocHJlZml4ZWRWYWx1ZSwgdmFsdWUsIGtlZXBVbnByZWZpeGVkKSB7XG4gIGlmIChrZWVwVW5wcmVmaXhlZCkge1xuICAgIHJldHVybiBbcHJlZml4ZWRWYWx1ZSwgdmFsdWVdO1xuICB9XG4gIHJldHVybiBwcmVmaXhlZFZhbHVlO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9TdmdJY29uID0gcmVxdWlyZSgnLi9TdmdJY29uJyk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX1N2Z0ljb24yLmRlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3Nob3VsZFVwZGF0ZSA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlJyk7XG5cbnZhciBfc2hvdWxkVXBkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Nob3VsZFVwZGF0ZSk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnLi9zaGFsbG93RXF1YWwnKTtcblxudmFyIF9zaGFsbG93RXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hhbGxvd0VxdWFsKTtcblxudmFyIF9zZXREaXNwbGF5TmFtZSA9IHJlcXVpcmUoJy4vc2V0RGlzcGxheU5hbWUnKTtcblxudmFyIF9zZXREaXNwbGF5TmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXREaXNwbGF5TmFtZSk7XG5cbnZhciBfd3JhcERpc3BsYXlOYW1lID0gcmVxdWlyZSgnLi93cmFwRGlzcGxheU5hbWUnKTtcblxudmFyIF93cmFwRGlzcGxheU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd3JhcERpc3BsYXlOYW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHB1cmUgPSBmdW5jdGlvbiBwdXJlKEJhc2VDb21wb25lbnQpIHtcbiAgdmFyIGhvYyA9ICgwLCBfc2hvdWxkVXBkYXRlMi5kZWZhdWx0KShmdW5jdGlvbiAocHJvcHMsIG5leHRQcm9wcykge1xuICAgIHJldHVybiAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHByb3BzLCBuZXh0UHJvcHMpO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoMCwgX3NldERpc3BsYXlOYW1lMi5kZWZhdWx0KSgoMCwgX3dyYXBEaXNwbGF5TmFtZTIuZGVmYXVsdCkoQmFzZUNvbXBvbmVudCwgJ3B1cmUnKSkoaG9jKEJhc2VDb21wb25lbnQpKTtcbiAgfVxuXG4gIHJldHVybiBob2MoQmFzZUNvbXBvbmVudCk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBwdXJlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuY29udmVydENvbG9yVG9TdHJpbmcgPSBjb252ZXJ0Q29sb3JUb1N0cmluZztcbmV4cG9ydHMuY29udmVydEhleFRvUkdCID0gY29udmVydEhleFRvUkdCO1xuZXhwb3J0cy5kZWNvbXBvc2VDb2xvciA9IGRlY29tcG9zZUNvbG9yO1xuZXhwb3J0cy5nZXRDb250cmFzdFJhdGlvID0gZ2V0Q29udHJhc3RSYXRpbztcbmV4cG9ydHMuZ2V0THVtaW5hbmNlID0gZ2V0THVtaW5hbmNlO1xuZXhwb3J0cy5lbXBoYXNpemUgPSBlbXBoYXNpemU7XG5leHBvcnRzLmZhZGUgPSBmYWRlO1xuZXhwb3J0cy5kYXJrZW4gPSBkYXJrZW47XG5leHBvcnRzLmxpZ2h0ZW4gPSBsaWdodGVuO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgY2xhbXBlZFxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHJldHVybnMge251bWJlcn0gQSBudW1iZXIgaW4gdGhlIHJhbmdlIFttaW4sIG1heF1cbiAqL1xuZnVuY3Rpb24gY2xhbXAodmFsdWUsIG1pbiwgbWF4KSB7XG4gIGlmICh2YWx1ZSA8IG1pbikge1xuICAgIHJldHVybiBtaW47XG4gIH1cbiAgaWYgKHZhbHVlID4gbWF4KSB7XG4gICAgcmV0dXJuIG1heDtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBvYmplY3Qgd2l0aCB0eXBlIGFuZCB2YWx1ZXMgdG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2YsICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSdcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gY29udmVydENvbG9yVG9TdHJpbmcoY29sb3IpIHtcbiAgdmFyIHR5cGUgPSBjb2xvci50eXBlLFxuICAgICAgdmFsdWVzID0gY29sb3IudmFsdWVzO1xuXG5cbiAgaWYgKHR5cGUuaW5kZXhPZigncmdiJykgPiAtMSkge1xuICAgIC8vIE9ubHkgY29udmVydCB0aGUgZmlyc3QgMyB2YWx1ZXMgdG8gaW50IChpLmUuIG5vdCBhbHBoYSlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgdmFsdWVzW2ldID0gcGFyc2VJbnQodmFsdWVzW2ldKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29sb3JTdHJpbmcgPSB2b2lkIDA7XG5cbiAgaWYgKHR5cGUuaW5kZXhPZignaHNsJykgPiAtMSkge1xuICAgIGNvbG9yU3RyaW5nID0gY29sb3IudHlwZSArICcoJyArIHZhbHVlc1swXSArICcsICcgKyB2YWx1ZXNbMV0gKyAnJSwgJyArIHZhbHVlc1syXSArICclJztcbiAgfSBlbHNlIHtcbiAgICBjb2xvclN0cmluZyA9IGNvbG9yLnR5cGUgKyAnKCcgKyB2YWx1ZXNbMF0gKyAnLCAnICsgdmFsdWVzWzFdICsgJywgJyArIHZhbHVlc1syXTtcbiAgfVxuXG4gIGlmICh2YWx1ZXMubGVuZ3RoID09PSA0KSB7XG4gICAgY29sb3JTdHJpbmcgKz0gJywgJyArIGNvbG9yLnZhbHVlc1szXSArICcpJztcbiAgfSBlbHNlIHtcbiAgICBjb2xvclN0cmluZyArPSAnKSc7XG4gIH1cblxuICByZXR1cm4gY29sb3JTdHJpbmc7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyBoZXggZm9ybWF0IHRvIENTUyByZ2IgZm9ybWF0LlxuICpcbiAqICBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIZXggY29sb3IsIGkuZS4gI25ubiBvciAjbm5ubm5uXG4gKiAgQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5mdW5jdGlvbiBjb252ZXJ0SGV4VG9SR0IoY29sb3IpIHtcbiAgaWYgKGNvbG9yLmxlbmd0aCA9PT0gNCkge1xuICAgIHZhciBleHRlbmRlZENvbG9yID0gJyMnO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY29sb3IubGVuZ3RoOyBpKyspIHtcbiAgICAgIGV4dGVuZGVkQ29sb3IgKz0gY29sb3IuY2hhckF0KGkpICsgY29sb3IuY2hhckF0KGkpO1xuICAgIH1cbiAgICBjb2xvciA9IGV4dGVuZGVkQ29sb3I7XG4gIH1cblxuICB2YXIgdmFsdWVzID0ge1xuICAgIHI6IHBhcnNlSW50KGNvbG9yLnN1YnN0cigxLCAyKSwgMTYpLFxuICAgIGc6IHBhcnNlSW50KGNvbG9yLnN1YnN0cigzLCAyKSwgMTYpLFxuICAgIGI6IHBhcnNlSW50KGNvbG9yLnN1YnN0cig1LCAyKSwgMTYpXG4gIH07XG5cbiAgcmV0dXJuICdyZ2IoJyArIHZhbHVlcy5yICsgJywgJyArIHZhbHVlcy5nICsgJywgJyArIHZhbHVlcy5iICsgJyknO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzIGFuZCBjb2xvciBuYW1lcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7e3R5cGU6IHN0cmluZywgdmFsdWVzOiBudW1iZXJbXX19IEEgTVVJIGNvbG9yIG9iamVjdFxuICovXG5mdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICByZXR1cm4gZGVjb21wb3NlQ29sb3IoY29udmVydEhleFRvUkdCKGNvbG9yKSk7XG4gIH1cblxuICB2YXIgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkobWFya2VyICE9PSAtMSwgJ01hdGVyaWFsLVVJOiBUaGUgJyArIGNvbG9yICsgJyBjb2xvciB3YXMgbm90IHBhcnNlZCBjb3JyZWN0bHksXFxuICBiZWNhdXNlIGl0IGhhcyBhbiB1bnN1cHBvcnRlZCBmb3JtYXQgKGNvbG9yIG5hbWUgb3IgUkdCICUpLiBUaGlzIG1heSBjYXVzZSBpc3N1ZXMgaW4gY29tcG9uZW50IHJlbmRlcmluZy4nKSA6IHZvaWQgMDtcblxuICB2YXIgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpO1xuICB2YXIgdmFsdWVzID0gY29sb3Iuc3Vic3RyaW5nKG1hcmtlciArIDEsIGNvbG9yLmxlbmd0aCAtIDEpLnNwbGl0KCcsJyk7XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4geyB0eXBlOiB0eXBlLCB2YWx1ZXM6IHZhbHVlcyB9O1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnRyYXN0IHJhdGlvIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqXG4gKiBGb3JtdWxhOiBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI2NvbnRyYXN0LXJhdGlvZGVmXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcmVncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29udHJhc3QgcmF0aW8gdmFsdWUgaW4gdGhlIHJhbmdlIDAgLSAyMSB3aXRoIDIgZGlnaXQgcHJlY2lzaW9uLlxuICovXG5mdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgdmFyIGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIHZhciBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICB2YXIgY29udHJhc3RSYXRpbyA9IChNYXRoLm1heChsdW1BLCBsdW1CKSArIDAuMDUpIC8gKE1hdGgubWluKGx1bUEsIGx1bUIpICsgMC4wNSk7XG5cbiAgcmV0dXJuIE51bWJlcihjb250cmFzdFJhdGlvLnRvRml4ZWQoMikpOyAvLyBUcnVuY2F0ZSBhdCB0d28gZGlnaXRzXG59XG5cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9XQUkvR0wvd2lraS9SZWxhdGl2ZV9sdW1pbmFuY2VcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKi9cbmZ1bmN0aW9uIGdldEx1bWluYW5jZShjb2xvcikge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSA+IC0xKSB7XG4gICAgdmFyIHJnYiA9IGNvbG9yLnZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgdmFsIC89IDI1NTsgLy8gbm9ybWFsaXplZFxuICAgICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiBNYXRoLnBvdygodmFsICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTsgLy8gVHJ1bmNhdGUgYXQgMyBkaWdpdHNcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpID4gLTEpIHtcbiAgICByZXR1cm4gY29sb3IudmFsdWVzWzJdIC8gMTAwO1xuICB9XG59XG5cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvdXIsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5mdW5jdGlvbiBlbXBoYXNpemUoY29sb3IpIHtcbiAgdmFyIGNvZWZmaWNpZW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjE1O1xuXG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhYnNvbHV0ZSB0cmFuc3BhcmVuY3kgb2YgYSBjb2xvci5cbiAqIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMCAtMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZnVuY3Rpb24gZmFkZShjb2xvciwgdmFsdWUpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhbHVlID0gY2xhbXAodmFsdWUsIDAsIDEpO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAncmdiJyB8fCBjb2xvci50eXBlID09PSAnaHNsJykge1xuICAgIGNvbG9yLnR5cGUgKz0gJ2EnO1xuICB9XG4gIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuXG4gIHJldHVybiBjb252ZXJ0Q29sb3JUb1N0cmluZyhjb2xvcik7XG59XG5cbi8qKlxuICogRGFya2VucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5mdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50LCAwLCAxKTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSA+IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICo9IDEgLSBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpID4gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbnZlcnRDb2xvclRvU3RyaW5nKGNvbG9yKTtcbn1cblxuLyoqXG4gKiBMaWdodGVucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5mdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCwgMCwgMSk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgPiAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgPiAtMSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDI1NSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29udmVydENvbG9yVG9TdHJpbmcoY29sb3IpO1xufSIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfSWNvbkJ1dHRvbiA9IHJlcXVpcmUoJy4vSWNvbkJ1dHRvbicpO1xuXG52YXIgX0ljb25CdXR0b24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSWNvbkJ1dHRvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9JY29uQnV0dG9uMi5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBzZXQ6IGZ1bmN0aW9uIHNldChzdHlsZSwga2V5LCB2YWx1ZSkge1xuICAgIHN0eWxlW2tleV0gPSB2YWx1ZTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9ldmVudHMgPSByZXF1aXJlKCcuLi91dGlscy9ldmVudHMnKTtcblxudmFyIF9ldmVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXZlbnRzKTtcblxudmFyIF9rZXljb2RlID0gcmVxdWlyZSgna2V5Y29kZScpO1xuXG52YXIgX2tleWNvZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5Y29kZSk7XG5cbnZhciBfRm9jdXNSaXBwbGUgPSByZXF1aXJlKCcuL0ZvY3VzUmlwcGxlJyk7XG5cbnZhciBfRm9jdXNSaXBwbGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRm9jdXNSaXBwbGUpO1xuXG52YXIgX1RvdWNoUmlwcGxlID0gcmVxdWlyZSgnLi9Ub3VjaFJpcHBsZScpO1xuXG52YXIgX1RvdWNoUmlwcGxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RvdWNoUmlwcGxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHN0eWxlSW5qZWN0ZWQgPSBmYWxzZTtcbnZhciBsaXN0ZW5pbmcgPSBmYWxzZTtcbnZhciB0YWJQcmVzc2VkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGluamVjdFN0eWxlKCkge1xuICBpZiAoIXN0eWxlSW5qZWN0ZWQpIHtcbiAgICAvLyBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggNCsuXG4gICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzdHlsZS5pbm5lckhUTUwgPSAnXFxuICAgICAgYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxcbiAgICAgIGlucHV0OjotbW96LWZvY3VzLWlubmVyIHtcXG4gICAgICAgIGJvcmRlcjogMDtcXG4gICAgICAgIHBhZGRpbmc6IDA7XFxuICAgICAgfVxcbiAgICAnO1xuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgc3R5bGVJbmplY3RlZCA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGlzdGVuRm9yVGFiUHJlc3NlcygpIHtcbiAgaWYgKCFsaXN0ZW5pbmcpIHtcbiAgICBfZXZlbnRzMi5kZWZhdWx0Lm9uKHdpbmRvdywgJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHRhYlByZXNzZWQgPSAoMCwgX2tleWNvZGUyLmRlZmF1bHQpKGV2ZW50KSA9PT0gJ3RhYic7XG4gICAgfSk7XG4gICAgbGlzdGVuaW5nID0gdHJ1ZTtcbiAgfVxufVxuXG52YXIgRW5oYW5jZWRCdXR0b24gPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShFbmhhbmNlZEJ1dHRvbiwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRW5oYW5jZWRCdXR0b24oKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgRW5oYW5jZWRCdXR0b24pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gRW5oYW5jZWRCdXR0b24uX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKEVuaGFuY2VkQnV0dG9uKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBpc0tleWJvYXJkRm9jdXNlZDogZmFsc2VcbiAgICB9LCBfdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLnByb3BzLmRpc2FibGVkICYmICFfdGhpcy5wcm9wcy5kaXNhYmxlS2V5Ym9hcmRGb2N1cykge1xuICAgICAgICBpZiAoKDAsIF9rZXljb2RlMi5kZWZhdWx0KShldmVudCkgPT09ICdlbnRlcicgJiYgX3RoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgICAgICBfdGhpcy5oYW5kbGVDbGljayhldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgwLCBfa2V5Y29kZTIuZGVmYXVsdCkoZXZlbnQpID09PSAnZXNjJyAmJiBfdGhpcy5zdGF0ZS5pc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgICAgIF90aGlzLnJlbW92ZUtleWJvYXJkRm9jdXMoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBfdGhpcy5wcm9wcy5vbktleURvd24oZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZUtleVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLnByb3BzLmRpc2FibGVkICYmICFfdGhpcy5wcm9wcy5kaXNhYmxlS2V5Ym9hcmRGb2N1cykge1xuICAgICAgICBpZiAoKDAsIF9rZXljb2RlMi5kZWZhdWx0KShldmVudCkgPT09ICdzcGFjZScgJiYgX3RoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgICAgICBfdGhpcy5oYW5kbGVDbGljayhldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF90aGlzLnByb3BzLm9uS2V5VXAoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLmNhbmNlbEZvY3VzVGltZW91dCgpO1xuICAgICAgX3RoaXMucmVtb3ZlS2V5Ym9hcmRGb2N1cyhldmVudCk7XG4gICAgICBfdGhpcy5wcm9wcy5vbkJsdXIoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQpIGV2ZW50LnBlcnNpc3QoKTtcbiAgICAgIGlmICghX3RoaXMucHJvcHMuZGlzYWJsZWQgJiYgIV90aGlzLnByb3BzLmRpc2FibGVLZXlib2FyZEZvY3VzKSB7XG4gICAgICAgIC8vIHNldFRpbWVvdXQgaXMgbmVlZGVkIGJlY2F1c2UgdGhlIGZvY3VzIGV2ZW50IGZpcmVzIGZpcnN0XG4gICAgICAgIC8vIFdhaXQgc28gdGhhdCB3ZSBjYW4gY2FwdHVyZSBpZiB0aGlzIHdhcyBhIGtleWJvYXJkIGZvY3VzXG4gICAgICAgIC8vIG9yIHRvdWNoIGZvY3VzXG4gICAgICAgIF90aGlzLmZvY3VzVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0YWJQcmVzc2VkKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRLZXlib2FyZEZvY3VzKGV2ZW50KTtcbiAgICAgICAgICAgIHRhYlByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDE1MCk7XG5cbiAgICAgICAgX3RoaXMucHJvcHMub25Gb2N1cyhldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLmNhbmNlbEZvY3VzVGltZW91dCgpO1xuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICB0YWJQcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnJlbW92ZUtleWJvYXJkRm9jdXMoZXZlbnQpO1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRW5oYW5jZWRCdXR0b24sIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMuZGlzYWJsZWQsXG4gICAgICAgICAgZGlzYWJsZUtleWJvYXJkRm9jdXMgPSBfcHJvcHMuZGlzYWJsZUtleWJvYXJkRm9jdXMsXG4gICAgICAgICAga2V5Ym9hcmRGb2N1c2VkID0gX3Byb3BzLmtleWJvYXJkRm9jdXNlZDtcblxuICAgICAgaWYgKCFkaXNhYmxlZCAmJiBrZXlib2FyZEZvY3VzZWQgJiYgIWRpc2FibGVLZXlib2FyZEZvY3VzKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0tleWJvYXJkRm9jdXNlZDogdHJ1ZSB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaW5qZWN0U3R5bGUoKTtcbiAgICAgIGxpc3RlbkZvclRhYlByZXNzZXMoKTtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICAgIHRoaXMuYnV0dG9uLmZvY3VzKCk7XG4gICAgICAgIHRoaXMucHJvcHMub25LZXlib2FyZEZvY3VzKG51bGwsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKChuZXh0UHJvcHMuZGlzYWJsZWQgfHwgbmV4dFByb3BzLmRpc2FibGVLZXlib2FyZEZvY3VzKSAmJiB0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0tleWJvYXJkRm9jdXNlZDogZmFsc2UgfSk7XG4gICAgICAgIGlmIChuZXh0UHJvcHMub25LZXlib2FyZEZvY3VzKSB7XG4gICAgICAgICAgbmV4dFByb3BzLm9uS2V5Ym9hcmRGb2N1cyhudWxsLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuZm9jdXNUaW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmZvY3VzVGltZW91dCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaXNLZXlib2FyZEZvY3VzZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0tleWJvYXJkRm9jdXNlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZUtleWJvYXJkRm9jdXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVLZXlib2FyZEZvY3VzKGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5pc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNLZXlib2FyZEZvY3VzZWQ6IGZhbHNlIH0pO1xuICAgICAgICB0aGlzLnByb3BzLm9uS2V5Ym9hcmRGb2N1cyhldmVudCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldEtleWJvYXJkRm9jdXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRLZXlib2FyZEZvY3VzKGV2ZW50KSB7XG4gICAgICBpZiAoIXRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzS2V5Ym9hcmRGb2N1c2VkOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLnByb3BzLm9uS2V5Ym9hcmRGb2N1cyhldmVudCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2FuY2VsRm9jdXNUaW1lb3V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsRm9jdXNUaW1lb3V0KCkge1xuICAgICAgaWYgKHRoaXMuZm9jdXNUaW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmZvY3VzVGltZW91dCk7XG4gICAgICAgIHRoaXMuZm9jdXNUaW1lb3V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVCdXR0b25DaGlsZHJlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUJ1dHRvbkNoaWxkcmVuKCkge1xuICAgICAgdmFyIF9wcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNlbnRlclJpcHBsZSA9IF9wcm9wczIuY2VudGVyUmlwcGxlLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzMi5jaGlsZHJlbixcbiAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wczIuZGlzYWJsZWQsXG4gICAgICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlID0gX3Byb3BzMi5kaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgICAgICAgZGlzYWJsZUtleWJvYXJkRm9jdXMgPSBfcHJvcHMyLmRpc2FibGVLZXlib2FyZEZvY3VzLFxuICAgICAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IF9wcm9wczIuZGlzYWJsZVRvdWNoUmlwcGxlLFxuICAgICAgICAgIGZvY3VzUmlwcGxlQ29sb3IgPSBfcHJvcHMyLmZvY3VzUmlwcGxlQ29sb3IsXG4gICAgICAgICAgZm9jdXNSaXBwbGVPcGFjaXR5ID0gX3Byb3BzMi5mb2N1c1JpcHBsZU9wYWNpdHksXG4gICAgICAgICAgdG91Y2hSaXBwbGVDb2xvciA9IF9wcm9wczIudG91Y2hSaXBwbGVDb2xvcixcbiAgICAgICAgICB0b3VjaFJpcHBsZU9wYWNpdHkgPSBfcHJvcHMyLnRvdWNoUmlwcGxlT3BhY2l0eTtcbiAgICAgIHZhciBpc0tleWJvYXJkRm9jdXNlZCA9IHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQ7XG5cbiAgICAgIC8vIEZvY3VzIFJpcHBsZVxuXG4gICAgICB2YXIgZm9jdXNSaXBwbGUgPSBpc0tleWJvYXJkRm9jdXNlZCAmJiAhZGlzYWJsZWQgJiYgIWRpc2FibGVGb2N1c1JpcHBsZSAmJiAhZGlzYWJsZUtleWJvYXJkRm9jdXMgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRm9jdXNSaXBwbGUyLmRlZmF1bHQsIHtcbiAgICAgICAgY29sb3I6IGZvY3VzUmlwcGxlQ29sb3IsXG4gICAgICAgIG9wYWNpdHk6IGZvY3VzUmlwcGxlT3BhY2l0eSxcbiAgICAgICAgc2hvdzogaXNLZXlib2FyZEZvY3VzZWQsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICAgIH0sXG4gICAgICAgIGtleTogJ2ZvY3VzUmlwcGxlJ1xuICAgICAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgICAgIC8vIFRvdWNoIFJpcHBsZVxuICAgICAgdmFyIHRvdWNoUmlwcGxlID0gIWRpc2FibGVkICYmICFkaXNhYmxlVG91Y2hSaXBwbGUgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgX1RvdWNoUmlwcGxlMi5kZWZhdWx0LFxuICAgICAgICB7XG4gICAgICAgICAgY2VudGVyUmlwcGxlOiBjZW50ZXJSaXBwbGUsXG4gICAgICAgICAgY29sb3I6IHRvdWNoUmlwcGxlQ29sb3IsXG4gICAgICAgICAgb3BhY2l0eTogdG91Y2hSaXBwbGVPcGFjaXR5LFxuICAgICAgICAgIGtleTogJ3RvdWNoUmlwcGxlJ1xuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKSA6IHVuZGVmaW5lZDtcblxuICAgICAgcmV0dXJuIFtmb2N1c1JpcHBsZSwgdG91Y2hSaXBwbGUsIHRvdWNoUmlwcGxlID8gdW5kZWZpbmVkIDogY2hpbGRyZW5dO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2VudGVyUmlwcGxlID0gX3Byb3BzMy5jZW50ZXJSaXBwbGUsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQgPSBfcHJvcHMzLmNvbnRhaW5lckVsZW1lbnQsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfcHJvcHMzLmRpc2FibGVkLFxuICAgICAgICAgIGRpc2FibGVGb2N1c1JpcHBsZSA9IF9wcm9wczMuZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgICAgICAgIGRpc2FibGVLZXlib2FyZEZvY3VzID0gX3Byb3BzMy5kaXNhYmxlS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgICBkaXNhYmxlVG91Y2hSaXBwbGUgPSBfcHJvcHMzLmRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICAgICAgICBmb2N1c1JpcHBsZUNvbG9yID0gX3Byb3BzMy5mb2N1c1JpcHBsZUNvbG9yLFxuICAgICAgICAgIGZvY3VzUmlwcGxlT3BhY2l0eSA9IF9wcm9wczMuZm9jdXNSaXBwbGVPcGFjaXR5LFxuICAgICAgICAgIGhyZWYgPSBfcHJvcHMzLmhyZWYsXG4gICAgICAgICAga2V5Ym9hcmRGb2N1c2VkID0gX3Byb3BzMy5rZXlib2FyZEZvY3VzZWQsXG4gICAgICAgICAgdG91Y2hSaXBwbGVDb2xvciA9IF9wcm9wczMudG91Y2hSaXBwbGVDb2xvcixcbiAgICAgICAgICB0b3VjaFJpcHBsZU9wYWNpdHkgPSBfcHJvcHMzLnRvdWNoUmlwcGxlT3BhY2l0eSxcbiAgICAgICAgICBvbkJsdXIgPSBfcHJvcHMzLm9uQmx1cixcbiAgICAgICAgICBvbkNsaWNrID0gX3Byb3BzMy5vbkNsaWNrLFxuICAgICAgICAgIG9uRm9jdXMgPSBfcHJvcHMzLm9uRm9jdXMsXG4gICAgICAgICAgb25LZXlVcCA9IF9wcm9wczMub25LZXlVcCxcbiAgICAgICAgICBvbktleURvd24gPSBfcHJvcHMzLm9uS2V5RG93bixcbiAgICAgICAgICBvbktleWJvYXJkRm9jdXMgPSBfcHJvcHMzLm9uS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wczMuc3R5bGUsXG4gICAgICAgICAgdGFiSW5kZXggPSBfcHJvcHMzLnRhYkluZGV4LFxuICAgICAgICAgIHR5cGUgPSBfcHJvcHMzLnR5cGUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMzLCBbJ2NlbnRlclJpcHBsZScsICdjaGlsZHJlbicsICdjb250YWluZXJFbGVtZW50JywgJ2Rpc2FibGVkJywgJ2Rpc2FibGVGb2N1c1JpcHBsZScsICdkaXNhYmxlS2V5Ym9hcmRGb2N1cycsICdkaXNhYmxlVG91Y2hSaXBwbGUnLCAnZm9jdXNSaXBwbGVDb2xvcicsICdmb2N1c1JpcHBsZU9wYWNpdHknLCAnaHJlZicsICdrZXlib2FyZEZvY3VzZWQnLCAndG91Y2hSaXBwbGVDb2xvcicsICd0b3VjaFJpcHBsZU9wYWNpdHknLCAnb25CbHVyJywgJ29uQ2xpY2snLCAnb25Gb2N1cycsICdvbktleVVwJywgJ29uS2V5RG93bicsICdvbktleWJvYXJkRm9jdXMnLCAnc3R5bGUnLCAndGFiSW5kZXgnLCAndHlwZSddKTtcbiAgICAgIHZhciBfY29udGV4dCRtdWlUaGVtZSA9IHRoaXMuY29udGV4dC5tdWlUaGVtZSxcbiAgICAgICAgICBwcmVwYXJlU3R5bGVzID0gX2NvbnRleHQkbXVpVGhlbWUucHJlcGFyZVN0eWxlcyxcbiAgICAgICAgICBlbmhhbmNlZEJ1dHRvbiA9IF9jb250ZXh0JG11aVRoZW1lLmVuaGFuY2VkQnV0dG9uO1xuXG5cbiAgICAgIHZhciBtZXJnZWRTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe1xuICAgICAgICBib3JkZXI6IDEwLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgIGZvbnRGYW1pbHk6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5iYXNlVGhlbWUuZm9udEZhbWlseSxcbiAgICAgICAgV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3I6IGVuaGFuY2VkQnV0dG9uLnRhcEhpZ2hsaWdodENvbG9yLCAvLyBSZW1vdmUgbW9iaWxlIGNvbG9yIGZsYXNoaW5nIChkZXByZWNhdGVkKVxuICAgICAgICBjdXJzb3I6IGRpc2FibGVkID8gJ2RlZmF1bHQnIDogJ3BvaW50ZXInLFxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICAgZm9udFNpemU6ICdpbmhlcml0JyxcbiAgICAgICAgZm9udFdlaWdodDogJ2luaGVyaXQnLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJywgLy8gVGhpcyBpcyBuZWVkZWQgc28gdGhhdCByaXBwbGVzIGRvIG5vdCBibGVlZCBwYXN0IGJvcmRlciByYWRpdXMuXG4gICAgICAgIHZlcnRpY2FsQWxpZ246IGhyZWYgPyAnbWlkZGxlJyA6IG51bGxcbiAgICAgIH0sIHN0eWxlKTtcblxuICAgICAgLy8gUGFzc2luZyBib3RoIGJhY2tncm91bmQ6bm9uZSAmIGJhY2tncm91bmRDb2xvciBjYW4gYnJlYWsgZHVlIHRvIG9iamVjdCBpdGVyYXRpb24gb3JkZXJcbiAgICAgIGlmICghbWVyZ2VkU3R5bGVzLmJhY2tncm91bmRDb2xvciAmJiAhbWVyZ2VkU3R5bGVzLmJhY2tncm91bmQpIHtcbiAgICAgICAgbWVyZ2VkU3R5bGVzLmJhY2tncm91bmQgPSAnbm9uZSc7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXNhYmxlZCAmJiBocmVmKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHtcbiAgICAgICAgICAgIHN0eWxlOiBtZXJnZWRTdHlsZXNcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBjaGlsZHJlblxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB2YXIgYnV0dG9uUHJvcHMgPSAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwge1xuICAgICAgICBzdHlsZTogcHJlcGFyZVN0eWxlcyhtZXJnZWRTdHlsZXMpLFxuICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5idXR0b24gPSBub2RlO1xuICAgICAgICB9LFxuICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgIG9uQmx1cjogdGhpcy5oYW5kbGVCbHVyLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLmhhbmRsZUZvY3VzLFxuICAgICAgICBvbktleVVwOiB0aGlzLmhhbmRsZUtleVVwLFxuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGljayxcbiAgICAgICAgdGFiSW5kZXg6IGRpc2FibGVkIHx8IGRpc2FibGVLZXlib2FyZEZvY3VzID8gLTEgOiB0YWJJbmRleFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChocmVmKSBidXR0b25Qcm9wcy5ocmVmID0gaHJlZjtcblxuICAgICAgdmFyIGJ1dHRvbkNoaWxkcmVuID0gdGhpcy5jcmVhdGVCdXR0b25DaGlsZHJlbigpO1xuXG4gICAgICBpZiAoX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNvbnRhaW5lckVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGNvbnRhaW5lckVsZW1lbnQsIGJ1dHRvblByb3BzLCBidXR0b25DaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIGlmICghaHJlZiAmJiBjb250YWluZXJFbGVtZW50ID09PSAnYnV0dG9uJykge1xuICAgICAgICBidXR0b25Qcm9wcy50eXBlID0gdHlwZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGhyZWYgPyAnYScgOiBjb250YWluZXJFbGVtZW50LCBidXR0b25Qcm9wcywgYnV0dG9uQ2hpbGRyZW4pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRW5oYW5jZWRCdXR0b247XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5FbmhhbmNlZEJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbnRhaW5lckVsZW1lbnQ6ICdidXR0b24nLFxuICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHt9LFxuICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCkge30sXG4gIG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoKSB7fSxcbiAgb25LZXlEb3duOiBmdW5jdGlvbiBvbktleURvd24oKSB7fSxcbiAgb25LZXlVcDogZnVuY3Rpb24gb25LZXlVcCgpIHt9LFxuICBvbktleWJvYXJkRm9jdXM6IGZ1bmN0aW9uIG9uS2V5Ym9hcmRGb2N1cygpIHt9LFxuICB0YWJJbmRleDogMCxcbiAgdHlwZTogJ2J1dHRvbidcbn07XG5FbmhhbmNlZEJ1dHRvbi5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuRW5oYW5jZWRCdXR0b24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBjZW50ZXJSaXBwbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgY29udGFpbmVyRWxlbWVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnRdKSxcbiAgZGlzYWJsZUZvY3VzUmlwcGxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGRpc2FibGVLZXlib2FyZEZvY3VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGRpc2FibGVUb3VjaFJpcHBsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBkaXNhYmxlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBmb2N1c1JpcHBsZUNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgZm9jdXNSaXBwbGVPcGFjaXR5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgaHJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGtleWJvYXJkRm9jdXNlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBvbkJsdXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb25DbGljazogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvbkZvY3VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uS2V5RG93bjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvbktleVVwOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIG9uS2V5Ym9hcmRGb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIHRhYkluZGV4OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgdG91Y2hSaXBwbGVDb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHRvdWNoUmlwcGxlT3BhY2l0eTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIHR5cGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBFbmhhbmNlZEJ1dHRvbjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfUGFwZXIgPSByZXF1aXJlKCcuL1BhcGVyJyk7XG5cbnZhciBfUGFwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFwZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfUGFwZXIyLmRlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBvbmNlOiBmdW5jdGlvbiBvbmNlKGVsLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIHZhciB0eXBlQXJyYXkgPSB0eXBlID8gdHlwZS5zcGxpdCgnICcpIDogW107XG4gICAgdmFyIHJlY3Vyc2l2ZUZ1bmN0aW9uID0gZnVuY3Rpb24gcmVjdXJzaXZlRnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGV2ZW50LnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LnR5cGUsIHJlY3Vyc2l2ZUZ1bmN0aW9uKTtcbiAgICAgIHJldHVybiBjYWxsYmFjayhldmVudCk7XG4gICAgfTtcblxuICAgIGZvciAodmFyIGkgPSB0eXBlQXJyYXkubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMub24oZWwsIHR5cGVBcnJheVtpXSwgcmVjdXJzaXZlRnVuY3Rpb24pO1xuICAgIH1cbiAgfSxcbiAgb246IGZ1bmN0aW9uIG9uKGVsLCB0eXBlLCBjYWxsYmFjaykge1xuICAgIGlmIChlbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSUU4KyBTdXBwb3J0XG4gICAgICBlbC5hdHRhY2hFdmVudCgnb24nICsgdHlwZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKGVsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgb2ZmOiBmdW5jdGlvbiBvZmYoZWwsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJRTgrIFN1cHBvcnRcbiAgICAgIGVsLmRldGFjaEV2ZW50KCdvbicgKyB0eXBlLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuICBpc0tleWJvYXJkOiBmdW5jdGlvbiBpc0tleWJvYXJkKGV2ZW50KSB7XG4gICAgcmV0dXJuIFsna2V5ZG93bicsICdrZXlwcmVzcycsICdrZXl1cCddLmluZGV4T2YoZXZlbnQudHlwZSkgIT09IC0xO1xuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzUHJlZml4ZWRWYWx1ZTtcbnZhciByZWdleCA9IC8td2Via2l0LXwtbW96LXwtbXMtLztcblxuZnVuY3Rpb24gaXNQcmVmaXhlZFZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHJlZ2V4LnRlc3QodmFsdWUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjYXBpdGFsaXplU3RyaW5nO1xuZnVuY3Rpb24gY2FwaXRhbGl6ZVN0cmluZyhzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIHJlZDUwID0gZXhwb3J0cy5yZWQ1MCA9ICcjZmZlYmVlJztcbnZhciByZWQxMDAgPSBleHBvcnRzLnJlZDEwMCA9ICcjZmZjZGQyJztcbnZhciByZWQyMDAgPSBleHBvcnRzLnJlZDIwMCA9ICcjZWY5YTlhJztcbnZhciByZWQzMDAgPSBleHBvcnRzLnJlZDMwMCA9ICcjZTU3MzczJztcbnZhciByZWQ0MDAgPSBleHBvcnRzLnJlZDQwMCA9ICcjZWY1MzUwJztcbnZhciByZWQ1MDAgPSBleHBvcnRzLnJlZDUwMCA9ICcjZjQ0MzM2JztcbnZhciByZWQ2MDAgPSBleHBvcnRzLnJlZDYwMCA9ICcjZTUzOTM1JztcbnZhciByZWQ3MDAgPSBleHBvcnRzLnJlZDcwMCA9ICcjZDMyZjJmJztcbnZhciByZWQ4MDAgPSBleHBvcnRzLnJlZDgwMCA9ICcjYzYyODI4JztcbnZhciByZWQ5MDAgPSBleHBvcnRzLnJlZDkwMCA9ICcjYjcxYzFjJztcbnZhciByZWRBMTAwID0gZXhwb3J0cy5yZWRBMTAwID0gJyNmZjhhODAnO1xudmFyIHJlZEEyMDAgPSBleHBvcnRzLnJlZEEyMDAgPSAnI2ZmNTI1Mic7XG52YXIgcmVkQTQwMCA9IGV4cG9ydHMucmVkQTQwMCA9ICcjZmYxNzQ0JztcbnZhciByZWRBNzAwID0gZXhwb3J0cy5yZWRBNzAwID0gJyNkNTAwMDAnO1xuXG52YXIgcGluazUwID0gZXhwb3J0cy5waW5rNTAgPSAnI2ZjZTRlYyc7XG52YXIgcGluazEwMCA9IGV4cG9ydHMucGluazEwMCA9ICcjZjhiYmQwJztcbnZhciBwaW5rMjAwID0gZXhwb3J0cy5waW5rMjAwID0gJyNmNDhmYjEnO1xudmFyIHBpbmszMDAgPSBleHBvcnRzLnBpbmszMDAgPSAnI2YwNjI5Mic7XG52YXIgcGluazQwMCA9IGV4cG9ydHMucGluazQwMCA9ICcjZWM0MDdhJztcbnZhciBwaW5rNTAwID0gZXhwb3J0cy5waW5rNTAwID0gJyNlOTFlNjMnO1xudmFyIHBpbms2MDAgPSBleHBvcnRzLnBpbms2MDAgPSAnI2Q4MWI2MCc7XG52YXIgcGluazcwMCA9IGV4cG9ydHMucGluazcwMCA9ICcjYzIxODViJztcbnZhciBwaW5rODAwID0gZXhwb3J0cy5waW5rODAwID0gJyNhZDE0NTcnO1xudmFyIHBpbms5MDAgPSBleHBvcnRzLnBpbms5MDAgPSAnIzg4MGU0Zic7XG52YXIgcGlua0ExMDAgPSBleHBvcnRzLnBpbmtBMTAwID0gJyNmZjgwYWInO1xudmFyIHBpbmtBMjAwID0gZXhwb3J0cy5waW5rQTIwMCA9ICcjZmY0MDgxJztcbnZhciBwaW5rQTQwMCA9IGV4cG9ydHMucGlua0E0MDAgPSAnI2Y1MDA1Nyc7XG52YXIgcGlua0E3MDAgPSBleHBvcnRzLnBpbmtBNzAwID0gJyNjNTExNjInO1xuXG52YXIgcHVycGxlNTAgPSBleHBvcnRzLnB1cnBsZTUwID0gJyNmM2U1ZjUnO1xudmFyIHB1cnBsZTEwMCA9IGV4cG9ydHMucHVycGxlMTAwID0gJyNlMWJlZTcnO1xudmFyIHB1cnBsZTIwMCA9IGV4cG9ydHMucHVycGxlMjAwID0gJyNjZTkzZDgnO1xudmFyIHB1cnBsZTMwMCA9IGV4cG9ydHMucHVycGxlMzAwID0gJyNiYTY4YzgnO1xudmFyIHB1cnBsZTQwMCA9IGV4cG9ydHMucHVycGxlNDAwID0gJyNhYjQ3YmMnO1xudmFyIHB1cnBsZTUwMCA9IGV4cG9ydHMucHVycGxlNTAwID0gJyM5YzI3YjAnO1xudmFyIHB1cnBsZTYwMCA9IGV4cG9ydHMucHVycGxlNjAwID0gJyM4ZTI0YWEnO1xudmFyIHB1cnBsZTcwMCA9IGV4cG9ydHMucHVycGxlNzAwID0gJyM3YjFmYTInO1xudmFyIHB1cnBsZTgwMCA9IGV4cG9ydHMucHVycGxlODAwID0gJyM2YTFiOWEnO1xudmFyIHB1cnBsZTkwMCA9IGV4cG9ydHMucHVycGxlOTAwID0gJyM0YTE0OGMnO1xudmFyIHB1cnBsZUExMDAgPSBleHBvcnRzLnB1cnBsZUExMDAgPSAnI2VhODBmYyc7XG52YXIgcHVycGxlQTIwMCA9IGV4cG9ydHMucHVycGxlQTIwMCA9ICcjZTA0MGZiJztcbnZhciBwdXJwbGVBNDAwID0gZXhwb3J0cy5wdXJwbGVBNDAwID0gJyNkNTAwZjknO1xudmFyIHB1cnBsZUE3MDAgPSBleHBvcnRzLnB1cnBsZUE3MDAgPSAnI2FhMDBmZic7XG5cbnZhciBkZWVwUHVycGxlNTAgPSBleHBvcnRzLmRlZXBQdXJwbGU1MCA9ICcjZWRlN2Y2JztcbnZhciBkZWVwUHVycGxlMTAwID0gZXhwb3J0cy5kZWVwUHVycGxlMTAwID0gJyNkMWM0ZTknO1xudmFyIGRlZXBQdXJwbGUyMDAgPSBleHBvcnRzLmRlZXBQdXJwbGUyMDAgPSAnI2IzOWRkYic7XG52YXIgZGVlcFB1cnBsZTMwMCA9IGV4cG9ydHMuZGVlcFB1cnBsZTMwMCA9ICcjOTU3NWNkJztcbnZhciBkZWVwUHVycGxlNDAwID0gZXhwb3J0cy5kZWVwUHVycGxlNDAwID0gJyM3ZTU3YzInO1xudmFyIGRlZXBQdXJwbGU1MDAgPSBleHBvcnRzLmRlZXBQdXJwbGU1MDAgPSAnIzY3M2FiNyc7XG52YXIgZGVlcFB1cnBsZTYwMCA9IGV4cG9ydHMuZGVlcFB1cnBsZTYwMCA9ICcjNWUzNWIxJztcbnZhciBkZWVwUHVycGxlNzAwID0gZXhwb3J0cy5kZWVwUHVycGxlNzAwID0gJyM1MTJkYTgnO1xudmFyIGRlZXBQdXJwbGU4MDAgPSBleHBvcnRzLmRlZXBQdXJwbGU4MDAgPSAnIzQ1MjdhMCc7XG52YXIgZGVlcFB1cnBsZTkwMCA9IGV4cG9ydHMuZGVlcFB1cnBsZTkwMCA9ICcjMzExYjkyJztcbnZhciBkZWVwUHVycGxlQTEwMCA9IGV4cG9ydHMuZGVlcFB1cnBsZUExMDAgPSAnI2IzODhmZic7XG52YXIgZGVlcFB1cnBsZUEyMDAgPSBleHBvcnRzLmRlZXBQdXJwbGVBMjAwID0gJyM3YzRkZmYnO1xudmFyIGRlZXBQdXJwbGVBNDAwID0gZXhwb3J0cy5kZWVwUHVycGxlQTQwMCA9ICcjNjUxZmZmJztcbnZhciBkZWVwUHVycGxlQTcwMCA9IGV4cG9ydHMuZGVlcFB1cnBsZUE3MDAgPSAnIzYyMDBlYSc7XG5cbnZhciBpbmRpZ281MCA9IGV4cG9ydHMuaW5kaWdvNTAgPSAnI2U4ZWFmNic7XG52YXIgaW5kaWdvMTAwID0gZXhwb3J0cy5pbmRpZ28xMDAgPSAnI2M1Y2FlOSc7XG52YXIgaW5kaWdvMjAwID0gZXhwb3J0cy5pbmRpZ28yMDAgPSAnIzlmYThkYSc7XG52YXIgaW5kaWdvMzAwID0gZXhwb3J0cy5pbmRpZ28zMDAgPSAnIzc5ODZjYic7XG52YXIgaW5kaWdvNDAwID0gZXhwb3J0cy5pbmRpZ280MDAgPSAnIzVjNmJjMCc7XG52YXIgaW5kaWdvNTAwID0gZXhwb3J0cy5pbmRpZ281MDAgPSAnIzNmNTFiNSc7XG52YXIgaW5kaWdvNjAwID0gZXhwb3J0cy5pbmRpZ282MDAgPSAnIzM5NDlhYic7XG52YXIgaW5kaWdvNzAwID0gZXhwb3J0cy5pbmRpZ283MDAgPSAnIzMwM2Y5Zic7XG52YXIgaW5kaWdvODAwID0gZXhwb3J0cy5pbmRpZ284MDAgPSAnIzI4MzU5Myc7XG52YXIgaW5kaWdvOTAwID0gZXhwb3J0cy5pbmRpZ285MDAgPSAnIzFhMjM3ZSc7XG52YXIgaW5kaWdvQTEwMCA9IGV4cG9ydHMuaW5kaWdvQTEwMCA9ICcjOGM5ZWZmJztcbnZhciBpbmRpZ29BMjAwID0gZXhwb3J0cy5pbmRpZ29BMjAwID0gJyM1MzZkZmUnO1xudmFyIGluZGlnb0E0MDAgPSBleHBvcnRzLmluZGlnb0E0MDAgPSAnIzNkNWFmZSc7XG52YXIgaW5kaWdvQTcwMCA9IGV4cG9ydHMuaW5kaWdvQTcwMCA9ICcjMzA0ZmZlJztcblxudmFyIGJsdWU1MCA9IGV4cG9ydHMuYmx1ZTUwID0gJyNlM2YyZmQnO1xudmFyIGJsdWUxMDAgPSBleHBvcnRzLmJsdWUxMDAgPSAnI2JiZGVmYic7XG52YXIgYmx1ZTIwMCA9IGV4cG9ydHMuYmx1ZTIwMCA9ICcjOTBjYWY5JztcbnZhciBibHVlMzAwID0gZXhwb3J0cy5ibHVlMzAwID0gJyM2NGI1ZjYnO1xudmFyIGJsdWU0MDAgPSBleHBvcnRzLmJsdWU0MDAgPSAnIzQyYTVmNSc7XG52YXIgYmx1ZTUwMCA9IGV4cG9ydHMuYmx1ZTUwMCA9ICcjMjE5NmYzJztcbnZhciBibHVlNjAwID0gZXhwb3J0cy5ibHVlNjAwID0gJyMxZTg4ZTUnO1xudmFyIGJsdWU3MDAgPSBleHBvcnRzLmJsdWU3MDAgPSAnIzE5NzZkMic7XG52YXIgYmx1ZTgwMCA9IGV4cG9ydHMuYmx1ZTgwMCA9ICcjMTU2NWMwJztcbnZhciBibHVlOTAwID0gZXhwb3J0cy5ibHVlOTAwID0gJyMwZDQ3YTEnO1xudmFyIGJsdWVBMTAwID0gZXhwb3J0cy5ibHVlQTEwMCA9ICcjODJiMWZmJztcbnZhciBibHVlQTIwMCA9IGV4cG9ydHMuYmx1ZUEyMDAgPSAnIzQ0OGFmZic7XG52YXIgYmx1ZUE0MDAgPSBleHBvcnRzLmJsdWVBNDAwID0gJyMyOTc5ZmYnO1xudmFyIGJsdWVBNzAwID0gZXhwb3J0cy5ibHVlQTcwMCA9ICcjMjk2MmZmJztcblxudmFyIGxpZ2h0Qmx1ZTUwID0gZXhwb3J0cy5saWdodEJsdWU1MCA9ICcjZTFmNWZlJztcbnZhciBsaWdodEJsdWUxMDAgPSBleHBvcnRzLmxpZ2h0Qmx1ZTEwMCA9ICcjYjNlNWZjJztcbnZhciBsaWdodEJsdWUyMDAgPSBleHBvcnRzLmxpZ2h0Qmx1ZTIwMCA9ICcjODFkNGZhJztcbnZhciBsaWdodEJsdWUzMDAgPSBleHBvcnRzLmxpZ2h0Qmx1ZTMwMCA9ICcjNGZjM2Y3JztcbnZhciBsaWdodEJsdWU0MDAgPSBleHBvcnRzLmxpZ2h0Qmx1ZTQwMCA9ICcjMjliNmY2JztcbnZhciBsaWdodEJsdWU1MDAgPSBleHBvcnRzLmxpZ2h0Qmx1ZTUwMCA9ICcjMDNhOWY0JztcbnZhciBsaWdodEJsdWU2MDAgPSBleHBvcnRzLmxpZ2h0Qmx1ZTYwMCA9ICcjMDM5YmU1JztcbnZhciBsaWdodEJsdWU3MDAgPSBleHBvcnRzLmxpZ2h0Qmx1ZTcwMCA9ICcjMDI4OGQxJztcbnZhciBsaWdodEJsdWU4MDAgPSBleHBvcnRzLmxpZ2h0Qmx1ZTgwMCA9ICcjMDI3N2JkJztcbnZhciBsaWdodEJsdWU5MDAgPSBleHBvcnRzLmxpZ2h0Qmx1ZTkwMCA9ICcjMDE1NzliJztcbnZhciBsaWdodEJsdWVBMTAwID0gZXhwb3J0cy5saWdodEJsdWVBMTAwID0gJyM4MGQ4ZmYnO1xudmFyIGxpZ2h0Qmx1ZUEyMDAgPSBleHBvcnRzLmxpZ2h0Qmx1ZUEyMDAgPSAnIzQwYzRmZic7XG52YXIgbGlnaHRCbHVlQTQwMCA9IGV4cG9ydHMubGlnaHRCbHVlQTQwMCA9ICcjMDBiMGZmJztcbnZhciBsaWdodEJsdWVBNzAwID0gZXhwb3J0cy5saWdodEJsdWVBNzAwID0gJyMwMDkxZWEnO1xuXG52YXIgY3lhbjUwID0gZXhwb3J0cy5jeWFuNTAgPSAnI2UwZjdmYSc7XG52YXIgY3lhbjEwMCA9IGV4cG9ydHMuY3lhbjEwMCA9ICcjYjJlYmYyJztcbnZhciBjeWFuMjAwID0gZXhwb3J0cy5jeWFuMjAwID0gJyM4MGRlZWEnO1xudmFyIGN5YW4zMDAgPSBleHBvcnRzLmN5YW4zMDAgPSAnIzRkZDBlMSc7XG52YXIgY3lhbjQwMCA9IGV4cG9ydHMuY3lhbjQwMCA9ICcjMjZjNmRhJztcbnZhciBjeWFuNTAwID0gZXhwb3J0cy5jeWFuNTAwID0gJyMwMGJjZDQnO1xudmFyIGN5YW42MDAgPSBleHBvcnRzLmN5YW42MDAgPSAnIzAwYWNjMSc7XG52YXIgY3lhbjcwMCA9IGV4cG9ydHMuY3lhbjcwMCA9ICcjMDA5N2E3JztcbnZhciBjeWFuODAwID0gZXhwb3J0cy5jeWFuODAwID0gJyMwMDgzOGYnO1xudmFyIGN5YW45MDAgPSBleHBvcnRzLmN5YW45MDAgPSAnIzAwNjA2NCc7XG52YXIgY3lhbkExMDAgPSBleHBvcnRzLmN5YW5BMTAwID0gJyM4NGZmZmYnO1xudmFyIGN5YW5BMjAwID0gZXhwb3J0cy5jeWFuQTIwMCA9ICcjMThmZmZmJztcbnZhciBjeWFuQTQwMCA9IGV4cG9ydHMuY3lhbkE0MDAgPSAnIzAwZTVmZic7XG52YXIgY3lhbkE3MDAgPSBleHBvcnRzLmN5YW5BNzAwID0gJyMwMGI4ZDQnO1xuXG52YXIgdGVhbDUwID0gZXhwb3J0cy50ZWFsNTAgPSAnI2UwZjJmMSc7XG52YXIgdGVhbDEwMCA9IGV4cG9ydHMudGVhbDEwMCA9ICcjYjJkZmRiJztcbnZhciB0ZWFsMjAwID0gZXhwb3J0cy50ZWFsMjAwID0gJyM4MGNiYzQnO1xudmFyIHRlYWwzMDAgPSBleHBvcnRzLnRlYWwzMDAgPSAnIzRkYjZhYyc7XG52YXIgdGVhbDQwMCA9IGV4cG9ydHMudGVhbDQwMCA9ICcjMjZhNjlhJztcbnZhciB0ZWFsNTAwID0gZXhwb3J0cy50ZWFsNTAwID0gJyMwMDk2ODgnO1xudmFyIHRlYWw2MDAgPSBleHBvcnRzLnRlYWw2MDAgPSAnIzAwODk3Yic7XG52YXIgdGVhbDcwMCA9IGV4cG9ydHMudGVhbDcwMCA9ICcjMDA3OTZiJztcbnZhciB0ZWFsODAwID0gZXhwb3J0cy50ZWFsODAwID0gJyMwMDY5NWMnO1xudmFyIHRlYWw5MDAgPSBleHBvcnRzLnRlYWw5MDAgPSAnIzAwNGQ0MCc7XG52YXIgdGVhbEExMDAgPSBleHBvcnRzLnRlYWxBMTAwID0gJyNhN2ZmZWInO1xudmFyIHRlYWxBMjAwID0gZXhwb3J0cy50ZWFsQTIwMCA9ICcjNjRmZmRhJztcbnZhciB0ZWFsQTQwMCA9IGV4cG9ydHMudGVhbEE0MDAgPSAnIzFkZTliNic7XG52YXIgdGVhbEE3MDAgPSBleHBvcnRzLnRlYWxBNzAwID0gJyMwMGJmYTUnO1xuXG52YXIgZ3JlZW41MCA9IGV4cG9ydHMuZ3JlZW41MCA9ICcjZThmNWU5JztcbnZhciBncmVlbjEwMCA9IGV4cG9ydHMuZ3JlZW4xMDAgPSAnI2M4ZTZjOSc7XG52YXIgZ3JlZW4yMDAgPSBleHBvcnRzLmdyZWVuMjAwID0gJyNhNWQ2YTcnO1xudmFyIGdyZWVuMzAwID0gZXhwb3J0cy5ncmVlbjMwMCA9ICcjODFjNzg0JztcbnZhciBncmVlbjQwMCA9IGV4cG9ydHMuZ3JlZW40MDAgPSAnIzY2YmI2YSc7XG52YXIgZ3JlZW41MDAgPSBleHBvcnRzLmdyZWVuNTAwID0gJyM0Y2FmNTAnO1xudmFyIGdyZWVuNjAwID0gZXhwb3J0cy5ncmVlbjYwMCA9ICcjNDNhMDQ3JztcbnZhciBncmVlbjcwMCA9IGV4cG9ydHMuZ3JlZW43MDAgPSAnIzM4OGUzYyc7XG52YXIgZ3JlZW44MDAgPSBleHBvcnRzLmdyZWVuODAwID0gJyMyZTdkMzInO1xudmFyIGdyZWVuOTAwID0gZXhwb3J0cy5ncmVlbjkwMCA9ICcjMWI1ZTIwJztcbnZhciBncmVlbkExMDAgPSBleHBvcnRzLmdyZWVuQTEwMCA9ICcjYjlmNmNhJztcbnZhciBncmVlbkEyMDAgPSBleHBvcnRzLmdyZWVuQTIwMCA9ICcjNjlmMGFlJztcbnZhciBncmVlbkE0MDAgPSBleHBvcnRzLmdyZWVuQTQwMCA9ICcjMDBlNjc2JztcbnZhciBncmVlbkE3MDAgPSBleHBvcnRzLmdyZWVuQTcwMCA9ICcjMDBjODUzJztcblxudmFyIGxpZ2h0R3JlZW41MCA9IGV4cG9ydHMubGlnaHRHcmVlbjUwID0gJyNmMWY4ZTknO1xudmFyIGxpZ2h0R3JlZW4xMDAgPSBleHBvcnRzLmxpZ2h0R3JlZW4xMDAgPSAnI2RjZWRjOCc7XG52YXIgbGlnaHRHcmVlbjIwMCA9IGV4cG9ydHMubGlnaHRHcmVlbjIwMCA9ICcjYzVlMWE1JztcbnZhciBsaWdodEdyZWVuMzAwID0gZXhwb3J0cy5saWdodEdyZWVuMzAwID0gJyNhZWQ1ODEnO1xudmFyIGxpZ2h0R3JlZW40MDAgPSBleHBvcnRzLmxpZ2h0R3JlZW40MDAgPSAnIzljY2M2NSc7XG52YXIgbGlnaHRHcmVlbjUwMCA9IGV4cG9ydHMubGlnaHRHcmVlbjUwMCA9ICcjOGJjMzRhJztcbnZhciBsaWdodEdyZWVuNjAwID0gZXhwb3J0cy5saWdodEdyZWVuNjAwID0gJyM3Y2IzNDInO1xudmFyIGxpZ2h0R3JlZW43MDAgPSBleHBvcnRzLmxpZ2h0R3JlZW43MDAgPSAnIzY4OWYzOCc7XG52YXIgbGlnaHRHcmVlbjgwMCA9IGV4cG9ydHMubGlnaHRHcmVlbjgwMCA9ICcjNTU4YjJmJztcbnZhciBsaWdodEdyZWVuOTAwID0gZXhwb3J0cy5saWdodEdyZWVuOTAwID0gJyMzMzY5MWUnO1xudmFyIGxpZ2h0R3JlZW5BMTAwID0gZXhwb3J0cy5saWdodEdyZWVuQTEwMCA9ICcjY2NmZjkwJztcbnZhciBsaWdodEdyZWVuQTIwMCA9IGV4cG9ydHMubGlnaHRHcmVlbkEyMDAgPSAnI2IyZmY1OSc7XG52YXIgbGlnaHRHcmVlbkE0MDAgPSBleHBvcnRzLmxpZ2h0R3JlZW5BNDAwID0gJyM3NmZmMDMnO1xudmFyIGxpZ2h0R3JlZW5BNzAwID0gZXhwb3J0cy5saWdodEdyZWVuQTcwMCA9ICcjNjRkZDE3JztcblxudmFyIGxpbWU1MCA9IGV4cG9ydHMubGltZTUwID0gJyNmOWZiZTcnO1xudmFyIGxpbWUxMDAgPSBleHBvcnRzLmxpbWUxMDAgPSAnI2YwZjRjMyc7XG52YXIgbGltZTIwMCA9IGV4cG9ydHMubGltZTIwMCA9ICcjZTZlZTljJztcbnZhciBsaW1lMzAwID0gZXhwb3J0cy5saW1lMzAwID0gJyNkY2U3NzUnO1xudmFyIGxpbWU0MDAgPSBleHBvcnRzLmxpbWU0MDAgPSAnI2Q0ZTE1Nyc7XG52YXIgbGltZTUwMCA9IGV4cG9ydHMubGltZTUwMCA9ICcjY2RkYzM5JztcbnZhciBsaW1lNjAwID0gZXhwb3J0cy5saW1lNjAwID0gJyNjMGNhMzMnO1xudmFyIGxpbWU3MDAgPSBleHBvcnRzLmxpbWU3MDAgPSAnI2FmYjQyYic7XG52YXIgbGltZTgwMCA9IGV4cG9ydHMubGltZTgwMCA9ICcjOWU5ZDI0JztcbnZhciBsaW1lOTAwID0gZXhwb3J0cy5saW1lOTAwID0gJyM4Mjc3MTcnO1xudmFyIGxpbWVBMTAwID0gZXhwb3J0cy5saW1lQTEwMCA9ICcjZjRmZjgxJztcbnZhciBsaW1lQTIwMCA9IGV4cG9ydHMubGltZUEyMDAgPSAnI2VlZmY0MSc7XG52YXIgbGltZUE0MDAgPSBleHBvcnRzLmxpbWVBNDAwID0gJyNjNmZmMDAnO1xudmFyIGxpbWVBNzAwID0gZXhwb3J0cy5saW1lQTcwMCA9ICcjYWVlYTAwJztcblxudmFyIHllbGxvdzUwID0gZXhwb3J0cy55ZWxsb3c1MCA9ICcjZmZmZGU3JztcbnZhciB5ZWxsb3cxMDAgPSBleHBvcnRzLnllbGxvdzEwMCA9ICcjZmZmOWM0JztcbnZhciB5ZWxsb3cyMDAgPSBleHBvcnRzLnllbGxvdzIwMCA9ICcjZmZmNTlkJztcbnZhciB5ZWxsb3czMDAgPSBleHBvcnRzLnllbGxvdzMwMCA9ICcjZmZmMTc2JztcbnZhciB5ZWxsb3c0MDAgPSBleHBvcnRzLnllbGxvdzQwMCA9ICcjZmZlZTU4JztcbnZhciB5ZWxsb3c1MDAgPSBleHBvcnRzLnllbGxvdzUwMCA9ICcjZmZlYjNiJztcbnZhciB5ZWxsb3c2MDAgPSBleHBvcnRzLnllbGxvdzYwMCA9ICcjZmRkODM1JztcbnZhciB5ZWxsb3c3MDAgPSBleHBvcnRzLnllbGxvdzcwMCA9ICcjZmJjMDJkJztcbnZhciB5ZWxsb3c4MDAgPSBleHBvcnRzLnllbGxvdzgwMCA9ICcjZjlhODI1JztcbnZhciB5ZWxsb3c5MDAgPSBleHBvcnRzLnllbGxvdzkwMCA9ICcjZjU3ZjE3JztcbnZhciB5ZWxsb3dBMTAwID0gZXhwb3J0cy55ZWxsb3dBMTAwID0gJyNmZmZmOGQnO1xudmFyIHllbGxvd0EyMDAgPSBleHBvcnRzLnllbGxvd0EyMDAgPSAnI2ZmZmYwMCc7XG52YXIgeWVsbG93QTQwMCA9IGV4cG9ydHMueWVsbG93QTQwMCA9ICcjZmZlYTAwJztcbnZhciB5ZWxsb3dBNzAwID0gZXhwb3J0cy55ZWxsb3dBNzAwID0gJyNmZmQ2MDAnO1xuXG52YXIgYW1iZXI1MCA9IGV4cG9ydHMuYW1iZXI1MCA9ICcjZmZmOGUxJztcbnZhciBhbWJlcjEwMCA9IGV4cG9ydHMuYW1iZXIxMDAgPSAnI2ZmZWNiMyc7XG52YXIgYW1iZXIyMDAgPSBleHBvcnRzLmFtYmVyMjAwID0gJyNmZmUwODInO1xudmFyIGFtYmVyMzAwID0gZXhwb3J0cy5hbWJlcjMwMCA9ICcjZmZkNTRmJztcbnZhciBhbWJlcjQwMCA9IGV4cG9ydHMuYW1iZXI0MDAgPSAnI2ZmY2EyOCc7XG52YXIgYW1iZXI1MDAgPSBleHBvcnRzLmFtYmVyNTAwID0gJyNmZmMxMDcnO1xudmFyIGFtYmVyNjAwID0gZXhwb3J0cy5hbWJlcjYwMCA9ICcjZmZiMzAwJztcbnZhciBhbWJlcjcwMCA9IGV4cG9ydHMuYW1iZXI3MDAgPSAnI2ZmYTAwMCc7XG52YXIgYW1iZXI4MDAgPSBleHBvcnRzLmFtYmVyODAwID0gJyNmZjhmMDAnO1xudmFyIGFtYmVyOTAwID0gZXhwb3J0cy5hbWJlcjkwMCA9ICcjZmY2ZjAwJztcbnZhciBhbWJlckExMDAgPSBleHBvcnRzLmFtYmVyQTEwMCA9ICcjZmZlNTdmJztcbnZhciBhbWJlckEyMDAgPSBleHBvcnRzLmFtYmVyQTIwMCA9ICcjZmZkNzQwJztcbnZhciBhbWJlckE0MDAgPSBleHBvcnRzLmFtYmVyQTQwMCA9ICcjZmZjNDAwJztcbnZhciBhbWJlckE3MDAgPSBleHBvcnRzLmFtYmVyQTcwMCA9ICcjZmZhYjAwJztcblxudmFyIG9yYW5nZTUwID0gZXhwb3J0cy5vcmFuZ2U1MCA9ICcjZmZmM2UwJztcbnZhciBvcmFuZ2UxMDAgPSBleHBvcnRzLm9yYW5nZTEwMCA9ICcjZmZlMGIyJztcbnZhciBvcmFuZ2UyMDAgPSBleHBvcnRzLm9yYW5nZTIwMCA9ICcjZmZjYzgwJztcbnZhciBvcmFuZ2UzMDAgPSBleHBvcnRzLm9yYW5nZTMwMCA9ICcjZmZiNzRkJztcbnZhciBvcmFuZ2U0MDAgPSBleHBvcnRzLm9yYW5nZTQwMCA9ICcjZmZhNzI2JztcbnZhciBvcmFuZ2U1MDAgPSBleHBvcnRzLm9yYW5nZTUwMCA9ICcjZmY5ODAwJztcbnZhciBvcmFuZ2U2MDAgPSBleHBvcnRzLm9yYW5nZTYwMCA9ICcjZmI4YzAwJztcbnZhciBvcmFuZ2U3MDAgPSBleHBvcnRzLm9yYW5nZTcwMCA9ICcjZjU3YzAwJztcbnZhciBvcmFuZ2U4MDAgPSBleHBvcnRzLm9yYW5nZTgwMCA9ICcjZWY2YzAwJztcbnZhciBvcmFuZ2U5MDAgPSBleHBvcnRzLm9yYW5nZTkwMCA9ICcjZTY1MTAwJztcbnZhciBvcmFuZ2VBMTAwID0gZXhwb3J0cy5vcmFuZ2VBMTAwID0gJyNmZmQxODAnO1xudmFyIG9yYW5nZUEyMDAgPSBleHBvcnRzLm9yYW5nZUEyMDAgPSAnI2ZmYWI0MCc7XG52YXIgb3JhbmdlQTQwMCA9IGV4cG9ydHMub3JhbmdlQTQwMCA9ICcjZmY5MTAwJztcbnZhciBvcmFuZ2VBNzAwID0gZXhwb3J0cy5vcmFuZ2VBNzAwID0gJyNmZjZkMDAnO1xuXG52YXIgZGVlcE9yYW5nZTUwID0gZXhwb3J0cy5kZWVwT3JhbmdlNTAgPSAnI2ZiZTllNyc7XG52YXIgZGVlcE9yYW5nZTEwMCA9IGV4cG9ydHMuZGVlcE9yYW5nZTEwMCA9ICcjZmZjY2JjJztcbnZhciBkZWVwT3JhbmdlMjAwID0gZXhwb3J0cy5kZWVwT3JhbmdlMjAwID0gJyNmZmFiOTEnO1xudmFyIGRlZXBPcmFuZ2UzMDAgPSBleHBvcnRzLmRlZXBPcmFuZ2UzMDAgPSAnI2ZmOGE2NSc7XG52YXIgZGVlcE9yYW5nZTQwMCA9IGV4cG9ydHMuZGVlcE9yYW5nZTQwMCA9ICcjZmY3MDQzJztcbnZhciBkZWVwT3JhbmdlNTAwID0gZXhwb3J0cy5kZWVwT3JhbmdlNTAwID0gJyNmZjU3MjInO1xudmFyIGRlZXBPcmFuZ2U2MDAgPSBleHBvcnRzLmRlZXBPcmFuZ2U2MDAgPSAnI2Y0NTExZSc7XG52YXIgZGVlcE9yYW5nZTcwMCA9IGV4cG9ydHMuZGVlcE9yYW5nZTcwMCA9ICcjZTY0YTE5JztcbnZhciBkZWVwT3JhbmdlODAwID0gZXhwb3J0cy5kZWVwT3JhbmdlODAwID0gJyNkODQzMTUnO1xudmFyIGRlZXBPcmFuZ2U5MDAgPSBleHBvcnRzLmRlZXBPcmFuZ2U5MDAgPSAnI2JmMzYwYyc7XG52YXIgZGVlcE9yYW5nZUExMDAgPSBleHBvcnRzLmRlZXBPcmFuZ2VBMTAwID0gJyNmZjllODAnO1xudmFyIGRlZXBPcmFuZ2VBMjAwID0gZXhwb3J0cy5kZWVwT3JhbmdlQTIwMCA9ICcjZmY2ZTQwJztcbnZhciBkZWVwT3JhbmdlQTQwMCA9IGV4cG9ydHMuZGVlcE9yYW5nZUE0MDAgPSAnI2ZmM2QwMCc7XG52YXIgZGVlcE9yYW5nZUE3MDAgPSBleHBvcnRzLmRlZXBPcmFuZ2VBNzAwID0gJyNkZDJjMDAnO1xuXG52YXIgYnJvd241MCA9IGV4cG9ydHMuYnJvd241MCA9ICcjZWZlYmU5JztcbnZhciBicm93bjEwMCA9IGV4cG9ydHMuYnJvd24xMDAgPSAnI2Q3Y2NjOCc7XG52YXIgYnJvd24yMDAgPSBleHBvcnRzLmJyb3duMjAwID0gJyNiY2FhYTQnO1xudmFyIGJyb3duMzAwID0gZXhwb3J0cy5icm93bjMwMCA9ICcjYTE4ODdmJztcbnZhciBicm93bjQwMCA9IGV4cG9ydHMuYnJvd240MDAgPSAnIzhkNmU2Myc7XG52YXIgYnJvd241MDAgPSBleHBvcnRzLmJyb3duNTAwID0gJyM3OTU1NDgnO1xudmFyIGJyb3duNjAwID0gZXhwb3J0cy5icm93bjYwMCA9ICcjNmQ0YzQxJztcbnZhciBicm93bjcwMCA9IGV4cG9ydHMuYnJvd243MDAgPSAnIzVkNDAzNyc7XG52YXIgYnJvd244MDAgPSBleHBvcnRzLmJyb3duODAwID0gJyM0ZTM0MmUnO1xudmFyIGJyb3duOTAwID0gZXhwb3J0cy5icm93bjkwMCA9ICcjM2UyNzIzJztcblxudmFyIGJsdWVHcmV5NTAgPSBleHBvcnRzLmJsdWVHcmV5NTAgPSAnI2VjZWZmMSc7XG52YXIgYmx1ZUdyZXkxMDAgPSBleHBvcnRzLmJsdWVHcmV5MTAwID0gJyNjZmQ4ZGMnO1xudmFyIGJsdWVHcmV5MjAwID0gZXhwb3J0cy5ibHVlR3JleTIwMCA9ICcjYjBiZWM1JztcbnZhciBibHVlR3JleTMwMCA9IGV4cG9ydHMuYmx1ZUdyZXkzMDAgPSAnIzkwYTRhZSc7XG52YXIgYmx1ZUdyZXk0MDAgPSBleHBvcnRzLmJsdWVHcmV5NDAwID0gJyM3ODkwOWMnO1xudmFyIGJsdWVHcmV5NTAwID0gZXhwb3J0cy5ibHVlR3JleTUwMCA9ICcjNjA3ZDhiJztcbnZhciBibHVlR3JleTYwMCA9IGV4cG9ydHMuYmx1ZUdyZXk2MDAgPSAnIzU0NmU3YSc7XG52YXIgYmx1ZUdyZXk3MDAgPSBleHBvcnRzLmJsdWVHcmV5NzAwID0gJyM0NTVhNjQnO1xudmFyIGJsdWVHcmV5ODAwID0gZXhwb3J0cy5ibHVlR3JleTgwMCA9ICcjMzc0NzRmJztcbnZhciBibHVlR3JleTkwMCA9IGV4cG9ydHMuYmx1ZUdyZXk5MDAgPSAnIzI2MzIzOCc7XG5cbnZhciBncmV5NTAgPSBleHBvcnRzLmdyZXk1MCA9ICcjZmFmYWZhJztcbnZhciBncmV5MTAwID0gZXhwb3J0cy5ncmV5MTAwID0gJyNmNWY1ZjUnO1xudmFyIGdyZXkyMDAgPSBleHBvcnRzLmdyZXkyMDAgPSAnI2VlZWVlZSc7XG52YXIgZ3JleTMwMCA9IGV4cG9ydHMuZ3JleTMwMCA9ICcjZTBlMGUwJztcbnZhciBncmV5NDAwID0gZXhwb3J0cy5ncmV5NDAwID0gJyNiZGJkYmQnO1xudmFyIGdyZXk1MDAgPSBleHBvcnRzLmdyZXk1MDAgPSAnIzllOWU5ZSc7XG52YXIgZ3JleTYwMCA9IGV4cG9ydHMuZ3JleTYwMCA9ICcjNzU3NTc1JztcbnZhciBncmV5NzAwID0gZXhwb3J0cy5ncmV5NzAwID0gJyM2MTYxNjEnO1xudmFyIGdyZXk4MDAgPSBleHBvcnRzLmdyZXk4MDAgPSAnIzQyNDI0Mic7XG52YXIgZ3JleTkwMCA9IGV4cG9ydHMuZ3JleTkwMCA9ICcjMjEyMTIxJztcblxudmFyIGJsYWNrID0gZXhwb3J0cy5ibGFjayA9ICcjMDAwMDAwJztcbnZhciB3aGl0ZSA9IGV4cG9ydHMud2hpdGUgPSAnI2ZmZmZmZic7XG5cbnZhciB0cmFuc3BhcmVudCA9IGV4cG9ydHMudHJhbnNwYXJlbnQgPSAncmdiYSgwLCAwLCAwLCAwKSc7XG52YXIgZnVsbEJsYWNrID0gZXhwb3J0cy5mdWxsQmxhY2sgPSAncmdiYSgwLCAwLCAwLCAxKSc7XG52YXIgZGFya0JsYWNrID0gZXhwb3J0cy5kYXJrQmxhY2sgPSAncmdiYSgwLCAwLCAwLCAwLjg3KSc7XG52YXIgbGlnaHRCbGFjayA9IGV4cG9ydHMubGlnaHRCbGFjayA9ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJztcbnZhciBtaW5CbGFjayA9IGV4cG9ydHMubWluQmxhY2sgPSAncmdiYSgwLCAwLCAwLCAwLjI2KSc7XG52YXIgZmFpbnRCbGFjayA9IGV4cG9ydHMuZmFpbnRCbGFjayA9ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJztcbnZhciBmdWxsV2hpdGUgPSBleHBvcnRzLmZ1bGxXaGl0ZSA9ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDEpJztcbnZhciBkYXJrV2hpdGUgPSBleHBvcnRzLmRhcmtXaGl0ZSA9ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuODcpJztcbnZhciBsaWdodFdoaXRlID0gZXhwb3J0cy5saWdodFdoaXRlID0gJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41NCknOyIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHRydWU7XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2l0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTtcblxudmFyIF9zeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZihfaXRlcmF0b3IyLmRlZmF1bHQpID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59OyIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgdmFyIHNldFByb21wdCA9IGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJyk7XG5cbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY29uZmlybVRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKTtcblxuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIHZhciBhcHBlbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBub3RpZnlMaXN0ZW5lcnMgPSBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZXNvbHZlUGF0aG5hbWUgPSByZXF1aXJlKCdyZXNvbHZlLXBhdGhuYW1lJyk7XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc29sdmVQYXRobmFtZSk7XG5cbnZhciBfdmFsdWVFcXVhbCA9IHJlcXVpcmUoJ3ZhbHVlLWVxdWFsJyk7XG5cbnZhciBfdmFsdWVFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWx1ZUVxdWFsKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlTG9jYXRpb24gPSBleHBvcnRzLmNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9ICgwLCBfUGF0aFV0aWxzLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gKDAsIF9yZXNvbHZlUGF0aG5hbWUyLmRlZmF1bHQpKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG52YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmICgwLCBfdmFsdWVFcXVhbDIuZGVmYXVsdCkoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wdXJlID0gcmVxdWlyZSgncmVjb21wb3NlL3B1cmUnKTtcblxudmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXG52YXIgX1N2Z0ljb24gPSByZXF1aXJlKCcuLi8uLi9TdmdJY29uJyk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE5hdmlnYXRpb25Nb3JlVmVydCA9IGZ1bmN0aW9uIE5hdmlnYXRpb25Nb3JlVmVydChwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTIgOGMxLjEgMCAyLS45IDItMnMtLjktMi0yLTItMiAuOS0yIDIgLjkgMiAyIDJ6bTAgMmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6bTAgNmMtMS4xIDAtMiAuOS0yIDJzLjkgMiAyIDIgMi0uOSAyLTItLjktMi0yLTJ6JyB9KVxuICApO1xufTtcbk5hdmlnYXRpb25Nb3JlVmVydCA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoTmF2aWdhdGlvbk1vcmVWZXJ0KTtcbk5hdmlnYXRpb25Nb3JlVmVydC5kaXNwbGF5TmFtZSA9ICdOYXZpZ2F0aW9uTW9yZVZlcnQnO1xuTmF2aWdhdGlvbk1vcmVWZXJ0Lm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5hdmlnYXRpb25Nb3JlVmVydDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLk1lbnVJdGVtID0gZXhwb3J0cy5JY29uTWVudSA9IHVuZGVmaW5lZDtcblxudmFyIF9JY29uTWVudTIgPSByZXF1aXJlKCcuL0ljb25NZW51Jyk7XG5cbnZhciBfSWNvbk1lbnUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSWNvbk1lbnUyKTtcblxudmFyIF9NZW51SXRlbTIgPSByZXF1aXJlKCcuLi9NZW51SXRlbS9NZW51SXRlbScpO1xuXG52YXIgX01lbnVJdGVtMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01lbnVJdGVtMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuSWNvbk1lbnUgPSBfSWNvbk1lbnUzLmRlZmF1bHQ7XG5leHBvcnRzLk1lbnVJdGVtID0gX01lbnVJdGVtMy5kZWZhdWx0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX0ljb25NZW51My5kZWZhdWx0OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7IiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bykge1xuICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG5cbiAgdmFyIHRvUGFydHMgPSB0byAmJiB0by5zcGxpdCgnLycpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IHZvaWQgMDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gIH1pZiAobXVzdEVuZEFicyAmJiBmcm9tUGFydHNbMF0gIT09ICcnICYmICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpKSBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7IiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vaGVhZGVyLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9oZWFkZXIuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9oZWFkZXIuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NoYWluRnVuY3Rpb24gPSByZXF1aXJlKCdjaGFpbi1mdW5jdGlvbicpO1xuXG52YXIgX2NoYWluRnVuY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhaW5GdW5jdGlvbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX0NoaWxkTWFwcGluZyA9IHJlcXVpcmUoJy4vdXRpbHMvQ2hpbGRNYXBwaW5nJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgY2hpbGRGYWN0b3J5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGVcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ3NwYW4nLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhUcmFuc2l0aW9uR3JvdXAsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb25Hcm91cChwcm9wcywgY29udGV4dCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUcmFuc2l0aW9uR3JvdXApO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICBfdGhpcy5wZXJmb3JtQXBwZWFyID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldID0gdHJ1ZTtcblxuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsQXBwZWFyKSB7XG4gICAgICAgIGNvbXBvbmVudC5jb21wb25lbnRXaWxsQXBwZWFyKF90aGlzLl9oYW5kbGVEb25lQXBwZWFyaW5nLmJpbmQoX3RoaXMsIGtleSwgY29tcG9uZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5faGFuZGxlRG9uZUFwcGVhcmluZyhrZXksIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLl9oYW5kbGVEb25lQXBwZWFyaW5nID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBpZiAoY29tcG9uZW50LmNvbXBvbmVudERpZEFwcGVhcikge1xuICAgICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkQXBwZWFyKCk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldO1xuXG4gICAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykoX3RoaXMucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAoIWN1cnJlbnRDaGlsZE1hcHBpbmcgfHwgIWN1cnJlbnRDaGlsZE1hcHBpbmcuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAvLyBUaGlzIHdhcyByZW1vdmVkIGJlZm9yZSBpdCBoYWQgZnVsbHkgYXBwZWFyZWQuIFJlbW92ZSBpdC5cbiAgICAgICAgX3RoaXMucGVyZm9ybUxlYXZlKGtleSwgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gKGtleSwgY29tcG9uZW50KSB7XG4gICAgICBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldID0gdHJ1ZTtcblxuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnRXaWxsRW50ZXIpIHtcbiAgICAgICAgY29tcG9uZW50LmNvbXBvbmVudFdpbGxFbnRlcihfdGhpcy5faGFuZGxlRG9uZUVudGVyaW5nLmJpbmQoX3RoaXMsIGtleSwgY29tcG9uZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5faGFuZGxlRG9uZUVudGVyaW5nKGtleSwgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX2hhbmRsZURvbmVFbnRlcmluZyA9IGZ1bmN0aW9uIChrZXksIGNvbXBvbmVudCkge1xuICAgICAgaWYgKGNvbXBvbmVudC5jb21wb25lbnREaWRFbnRlcikge1xuICAgICAgICBjb21wb25lbnQuY29tcG9uZW50RGlkRW50ZXIoKTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIF90aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV07XG5cbiAgICAgIHZhciBjdXJyZW50Q2hpbGRNYXBwaW5nID0gKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKShfdGhpcy5wcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIGlmICghY3VycmVudENoaWxkTWFwcGluZyB8fCAhY3VycmVudENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIC8vIFRoaXMgd2FzIHJlbW92ZWQgYmVmb3JlIGl0IGhhZCBmdWxseSBlbnRlcmVkLiBSZW1vdmUgaXQuXG4gICAgICAgIF90aGlzLnBlcmZvcm1MZWF2ZShrZXksIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uIChrZXksIGNvbXBvbmVudCkge1xuICAgICAgX3RoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXNba2V5XSA9IHRydWU7XG5cbiAgICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50V2lsbExlYXZlKSB7XG4gICAgICAgIGNvbXBvbmVudC5jb21wb25lbnRXaWxsTGVhdmUoX3RoaXMuX2hhbmRsZURvbmVMZWF2aW5nLmJpbmQoX3RoaXMsIGtleSwgY29tcG9uZW50KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBpcyBzb21ld2hhdCBkYW5nZXJvdXMgYi9jIGl0IGNhbGxzIHNldFN0YXRlKClcbiAgICAgICAgLy8gYWdhaW4sIGVmZmVjdGl2ZWx5IG11dGF0aW5nIHRoZSBjb21wb25lbnQgYmVmb3JlIGFsbCB0aGUgd29ya1xuICAgICAgICAvLyBpcyBkb25lLlxuICAgICAgICBfdGhpcy5faGFuZGxlRG9uZUxlYXZpbmcoa2V5LCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5faGFuZGxlRG9uZUxlYXZpbmcgPSBmdW5jdGlvbiAoa2V5LCBjb21wb25lbnQpIHtcbiAgICAgIGlmIChjb21wb25lbnQuY29tcG9uZW50RGlkTGVhdmUpIHtcbiAgICAgICAgY29tcG9uZW50LmNvbXBvbmVudERpZExlYXZlKCk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBfdGhpcy5jdXJyZW50bHlUcmFuc2l0aW9uaW5nS2V5c1trZXldO1xuXG4gICAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykoX3RoaXMucHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAoY3VycmVudENoaWxkTWFwcGluZyAmJiBjdXJyZW50Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgLy8gVGhpcyBlbnRlcmVkIGFnYWluIGJlZm9yZSBpdCBmdWxseSBsZWZ0LiBBZGQgaXQgYWdhaW4uXG4gICAgICAgIF90aGlzLmtleXNUb0VudGVyLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgIHZhciBuZXdDaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG4gICAgICAgICAgZGVsZXRlIG5ld0NoaWxkcmVuW2tleV07XG4gICAgICAgICAgcmV0dXJuIHsgY2hpbGRyZW46IG5ld0NoaWxkcmVuIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5jaGlsZFJlZnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjaGlsZHJlbjogKDAsIF9DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKShwcm9wcy5jaGlsZHJlbilcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMuY3VycmVudGx5VHJhbnNpdGlvbmluZ0tleXMgPSB7fTtcbiAgICB0aGlzLmtleXNUb0VudGVyID0gW107XG4gICAgdGhpcy5rZXlzVG9MZWF2ZSA9IFtdO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgaW5pdGlhbENoaWxkTWFwcGluZyA9IHRoaXMuc3RhdGUuY2hpbGRyZW47XG4gICAgZm9yICh2YXIga2V5IGluIGluaXRpYWxDaGlsZE1hcHBpbmcpIHtcbiAgICAgIGlmIChpbml0aWFsQ2hpbGRNYXBwaW5nW2tleV0pIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtQXBwZWFyKGtleSwgdGhpcy5jaGlsZFJlZnNba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSAoMCwgX0NoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcpKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSB0aGlzLnN0YXRlLmNoaWxkcmVuO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjaGlsZHJlbjogKDAsIF9DaGlsZE1hcHBpbmcubWVyZ2VDaGlsZE1hcHBpbmdzKShwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKVxuICAgIH0pO1xuXG4gICAgZm9yICh2YXIga2V5IGluIG5leHRDaGlsZE1hcHBpbmcpIHtcbiAgICAgIHZhciBoYXNQcmV2ID0gcHJldkNoaWxkTWFwcGluZyAmJiBwcmV2Q2hpbGRNYXBwaW5nLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICBpZiAobmV4dENoaWxkTWFwcGluZ1trZXldICYmICFoYXNQcmV2ICYmICF0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW2tleV0pIHtcbiAgICAgICAgdGhpcy5rZXlzVG9FbnRlci5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2tleSBpbiBwcmV2Q2hpbGRNYXBwaW5nKSB7XG4gICAgICB2YXIgaGFzTmV4dCA9IG5leHRDaGlsZE1hcHBpbmcgJiYgbmV4dENoaWxkTWFwcGluZy5oYXNPd25Qcm9wZXJ0eShfa2V5KTtcbiAgICAgIGlmIChwcmV2Q2hpbGRNYXBwaW5nW19rZXldICYmICFoYXNOZXh0ICYmICF0aGlzLmN1cnJlbnRseVRyYW5zaXRpb25pbmdLZXlzW19rZXldKSB7XG4gICAgICAgIHRoaXMua2V5c1RvTGVhdmUucHVzaChfa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSB3YW50IHRvIHNvbWVkYXkgY2hlY2sgZm9yIHJlb3JkZXJpbmcsIHdlIGNvdWxkIGRvIGl0IGhlcmUuXG4gIH07XG5cbiAgVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIga2V5c1RvRW50ZXIgPSB0aGlzLmtleXNUb0VudGVyO1xuICAgIHRoaXMua2V5c1RvRW50ZXIgPSBbXTtcbiAgICBrZXlzVG9FbnRlci5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBfdGhpczIucGVyZm9ybUVudGVyKGtleSwgX3RoaXMyLmNoaWxkUmVmc1trZXldKTtcbiAgICB9KTtcblxuICAgIHZhciBrZXlzVG9MZWF2ZSA9IHRoaXMua2V5c1RvTGVhdmU7XG4gICAgdGhpcy5rZXlzVG9MZWF2ZSA9IFtdO1xuICAgIGtleXNUb0xlYXZlLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIF90aGlzMi5wZXJmb3JtTGVhdmUoa2V5LCBfdGhpczIuY2hpbGRSZWZzW2tleV0pO1xuICAgIH0pO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgLy8gVE9ETzogd2UgY291bGQgZ2V0IHJpZCBvZiB0aGUgbmVlZCBmb3IgdGhlIHdyYXBwZXIgbm9kZVxuICAgIC8vIGJ5IGNsb25pbmcgYSBzaW5nbGUgY2hpbGRcbiAgICB2YXIgY2hpbGRyZW5Ub1JlbmRlciA9IFtdO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3Aoa2V5KSB7XG4gICAgICB2YXIgY2hpbGQgPSBfdGhpczMuc3RhdGUuY2hpbGRyZW5ba2V5XTtcbiAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICB2YXIgaXNDYWxsYmFja1JlZiA9IHR5cGVvZiBjaGlsZC5yZWYgIT09ICdzdHJpbmcnO1xuICAgICAgICB2YXIgZmFjdG9yeUNoaWxkID0gX3RoaXMzLnByb3BzLmNoaWxkRmFjdG9yeShjaGlsZCk7XG4gICAgICAgIHZhciByZWYgPSBmdW5jdGlvbiByZWYocikge1xuICAgICAgICAgIF90aGlzMy5jaGlsZFJlZnNba2V5XSA9IHI7XG4gICAgICAgIH07XG5cbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/ICgwLCBfd2FybmluZzIuZGVmYXVsdCkoaXNDYWxsYmFja1JlZiwgJ3N0cmluZyByZWZzIGFyZSBub3Qgc3VwcG9ydGVkIG9uIGNoaWxkcmVuIG9mIFRyYW5zaXRpb25Hcm91cCBhbmQgd2lsbCBiZSBpZ25vcmVkLiAnICsgJ1BsZWFzZSB1c2UgYSBjYWxsYmFjayByZWYgaW5zdGVhZDogaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9yZWZzLWFuZC10aGUtZG9tLmh0bWwjdGhlLXJlZi1jYWxsYmFjay1hdHRyaWJ1dGUnKSA6IHZvaWQgMDtcblxuICAgICAgICAvLyBBbHdheXMgY2hhaW5pbmcgdGhlIHJlZnMgbGVhZHMgdG8gcHJvYmxlbXMgd2hlbiB0aGUgY2hpbGRGYWN0b3J5XG4gICAgICAgIC8vIHdyYXBzIHRoZSBjaGlsZC4gVGhlIGNoaWxkIHJlZiBjYWxsYmFjayBnZXRzIGNhbGxlZCB0d2ljZSB3aXRoIHRoZVxuICAgICAgICAvLyB3cmFwcGVyIGFuZCB0aGUgY2hpbGQuIFNvIHdlIG9ubHkgbmVlZCB0byBjaGFpbiB0aGUgcmVmIGlmIHRoZVxuICAgICAgICAvLyBmYWN0b3J5Q2hpbGQgaXMgbm90IGRpZmZlcmVudCBmcm9tIGNoaWxkLlxuICAgICAgICBpZiAoZmFjdG9yeUNoaWxkID09PSBjaGlsZCAmJiBpc0NhbGxiYWNrUmVmKSB7XG4gICAgICAgICAgcmVmID0gKDAsIF9jaGFpbkZ1bmN0aW9uMi5kZWZhdWx0KShjaGlsZC5yZWYsIHJlZik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGxlYXZpbmcuXG4gICAgICAgIC8vIFRoZSBub3JtYWwgUmVhY3Qgd2F5IHRvIGRvIGl0IHdvbid0IHdvcmsgc2luY2UgdGhlIGNoaWxkIHdpbGwgaGF2ZVxuICAgICAgICAvLyBhbHJlYWR5IGJlZW4gcmVtb3ZlZC4gSW4gY2FzZSB5b3UgbmVlZCB0aGlzIGJlaGF2aW9yIHlvdSBjYW4gcHJvdmlkZVxuICAgICAgICAvLyBhIGNoaWxkRmFjdG9yeSBmdW5jdGlvbiB0byB3cmFwIGV2ZXJ5IGNoaWxkLCBldmVuIHRoZSBvbmVzIHRoYXQgYXJlXG4gICAgICAgIC8vIGxlYXZpbmcuXG4gICAgICAgIGNoaWxkcmVuVG9SZW5kZXIucHVzaChfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGZhY3RvcnlDaGlsZCwge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuc3RhdGUuY2hpbGRyZW4pIHtcbiAgICAgIF9sb29wKGtleSk7XG4gICAgfVxuXG4gICAgLy8gRG8gbm90IGZvcndhcmQgVHJhbnNpdGlvbkdyb3VwIHByb3BzIHRvIHByaW1pdGl2ZSBET00gbm9kZXNcbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcyk7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25MZWF2ZTtcbiAgICBkZWxldGUgcHJvcHMudHJhbnNpdGlvbk5hbWU7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25BcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLnRyYW5zaXRpb25FbnRlcjtcbiAgICBkZWxldGUgcHJvcHMuY2hpbGRGYWN0b3J5O1xuICAgIGRlbGV0ZSBwcm9wcy50cmFuc2l0aW9uTGVhdmVUaW1lb3V0O1xuICAgIGRlbGV0ZSBwcm9wcy50cmFuc2l0aW9uRW50ZXJUaW1lb3V0O1xuICAgIGRlbGV0ZSBwcm9wcy50cmFuc2l0aW9uQXBwZWFyVGltZW91dDtcbiAgICBkZWxldGUgcHJvcHMuY29tcG9uZW50O1xuXG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHRoaXMucHJvcHMuY29tcG9uZW50LCBwcm9wcywgY2hpbGRyZW5Ub1JlbmRlcik7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb25Hcm91cDtcbn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb25Hcm91cC5kaXNwbGF5TmFtZSA9ICdUcmFuc2l0aW9uR3JvdXAnO1xuXG5cblRyYW5zaXRpb25Hcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcblRyYW5zaXRpb25Hcm91cC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFRyYW5zaXRpb25Hcm91cDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9nZXREaXNwbGF5TmFtZSA9IHJlcXVpcmUoJy4vZ2V0RGlzcGxheU5hbWUnKTtcblxudmFyIF9nZXREaXNwbGF5TmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXREaXNwbGF5TmFtZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB3cmFwRGlzcGxheU5hbWUgPSBmdW5jdGlvbiB3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgaG9jTmFtZSkge1xuICByZXR1cm4gaG9jTmFtZSArICcoJyArICgwLCBfZ2V0RGlzcGxheU5hbWUyLmRlZmF1bHQpKEJhc2VDb21wb25lbnQpICsgJyknO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gd3JhcERpc3BsYXlOYW1lOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9zZXRTdGF0aWMgPSByZXF1aXJlKCcuL3NldFN0YXRpYycpO1xuXG52YXIgX3NldFN0YXRpYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRTdGF0aWMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgc2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiBzZXREaXNwbGF5TmFtZShkaXNwbGF5TmFtZSkge1xuICByZXR1cm4gKDAsIF9zZXRTdGF0aWMyLmRlZmF1bHQpKCdkaXNwbGF5TmFtZScsIGRpc3BsYXlOYW1lKTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHNldERpc3BsYXlOYW1lOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJ3JlY29tcG9zZS9zaGFsbG93RXF1YWwnKTtcblxudmFyIF9zaGFsbG93RXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hhbGxvd0VxdWFsKTtcblxudmFyIF9Qb3BvdmVyID0gcmVxdWlyZSgnLi4vUG9wb3Zlci9Qb3BvdmVyJyk7XG5cbnZhciBfUG9wb3ZlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qb3BvdmVyKTtcblxudmFyIF9jaGVjayA9IHJlcXVpcmUoJy4uL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2NoZWNrJyk7XG5cbnZhciBfY2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hlY2spO1xuXG52YXIgX0xpc3RJdGVtID0gcmVxdWlyZSgnLi4vTGlzdC9MaXN0SXRlbScpO1xuXG52YXIgX0xpc3RJdGVtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0xpc3RJdGVtKTtcblxudmFyIF9NZW51ID0gcmVxdWlyZSgnLi4vTWVudS9NZW51Jyk7XG5cbnZhciBfTWVudTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZW51KTtcblxudmFyIF9wcm9wVHlwZXMzID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJvcFR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlczMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgbmVzdGVkTWVudVN0eWxlID0ge1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufTtcblxuZnVuY3Rpb24gZ2V0U3R5bGVzKHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBkaXNhYmxlZENvbG9yID0gY29udGV4dC5tdWlUaGVtZS5iYXNlVGhlbWUucGFsZXR0ZS5kaXNhYmxlZENvbG9yO1xuICB2YXIgdGV4dENvbG9yID0gY29udGV4dC5tdWlUaGVtZS5iYXNlVGhlbWUucGFsZXR0ZS50ZXh0Q29sb3I7XG4gIHZhciBpbmRlbnQgPSBwcm9wcy5kZXNrdG9wID8gNjQgOiA3MjtcbiAgdmFyIHNpZGVQYWRkaW5nID0gcHJvcHMuZGVza3RvcCA/IDI0IDogMTY7XG5cbiAgdmFyIHN0eWxlcyA9IHtcbiAgICByb290OiB7XG4gICAgICBjb2xvcjogcHJvcHMuZGlzYWJsZWQgPyBkaXNhYmxlZENvbG9yIDogdGV4dENvbG9yLFxuICAgICAgY3Vyc29yOiBwcm9wcy5kaXNhYmxlZCA/ICdkZWZhdWx0JyA6ICdwb2ludGVyJyxcbiAgICAgIG1pbkhlaWdodDogcHJvcHMuZGVza3RvcCA/ICczMnB4JyA6ICc0OHB4JyxcbiAgICAgIGxpbmVIZWlnaHQ6IHByb3BzLmRlc2t0b3AgPyAnMzJweCcgOiAnNDhweCcsXG4gICAgICBmb250U2l6ZTogcHJvcHMuZGVza3RvcCA/IDE1IDogMTYsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgIH0sXG5cbiAgICBpbm5lckRpdlN0eWxlOiB7XG4gICAgICBwYWRkaW5nTGVmdDogcHJvcHMubGVmdEljb24gfHwgcHJvcHMuaW5zZXRDaGlsZHJlbiB8fCBwcm9wcy5jaGVja2VkID8gaW5kZW50IDogc2lkZVBhZGRpbmcsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHByb3BzLnJpZ2h0SWNvbiA/IGluZGVudCA6IHNpZGVQYWRkaW5nLFxuICAgICAgcGFkZGluZ0JvdHRvbTogMCxcbiAgICAgIHBhZGRpbmdUb3A6IDBcbiAgICB9LFxuXG4gICAgc2Vjb25kYXJ5VGV4dDoge1xuICAgICAgZmxvYXQ6ICdyaWdodCdcbiAgICB9LFxuXG4gICAgbGVmdEljb25EZXNrdG9wOiB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICBsZWZ0OiAyNCxcbiAgICAgIHRvcDogNFxuICAgIH0sXG5cbiAgICByaWdodEljb25EZXNrdG9wOiB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICByaWdodDogMjQsXG4gICAgICB0b3A6IDQsXG4gICAgICBmaWxsOiBjb250ZXh0Lm11aVRoZW1lLm1lbnVJdGVtLnJpZ2h0SWNvbkRlc2t0b3BGaWxsXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbnZhciBNZW51SXRlbSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKE1lbnVJdGVtLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW51SXRlbSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBNZW51SXRlbSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBNZW51SXRlbS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTWVudUl0ZW0pKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG9wZW46IGZhbHNlXG4gICAgfSwgX3RoaXMuY2xvbmVNZW51SXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChpdGVtLCB7XG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICBpZiAoIWl0ZW0ucHJvcHMubWVudUl0ZW1zKSB7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXRlbS5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgICAgICBpdGVtLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgYW5jaG9yRWw6IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcylcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DbGljaykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgICBhbmNob3JFbDogbnVsbFxuICAgICAgfSk7XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKE1lbnVJdGVtLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLmFwcGx5Rm9jdXNTdGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMuc3RhdGUub3BlbiAmJiBuZXh0UHJvcHMuZm9jdXNTdGF0ZSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlUmVxdWVzdENsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCkge1xuICAgICAgcmV0dXJuICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSkgfHwgISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLmNvbnRleHQsIG5leHRDb250ZXh0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLmFwcGx5Rm9jdXNTdGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG9wZW46IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FwcGx5Rm9jdXNTdGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5Rm9jdXNTdGF0ZSgpIHtcbiAgICAgIHRoaXMucmVmcy5saXN0SXRlbS5hcHBseUZvY3VzU3RhdGUodGhpcy5wcm9wcy5mb2N1c1N0YXRlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGVja2VkID0gX3Byb3BzLmNoZWNrZWQsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgZGVza3RvcCA9IF9wcm9wcy5kZXNrdG9wLFxuICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGZvY3VzU3RhdGUgPSBfcHJvcHMuZm9jdXNTdGF0ZSxcbiAgICAgICAgICBpbm5lckRpdlN0eWxlID0gX3Byb3BzLmlubmVyRGl2U3R5bGUsXG4gICAgICAgICAgaW5zZXRDaGlsZHJlbiA9IF9wcm9wcy5pbnNldENoaWxkcmVuLFxuICAgICAgICAgIGxlZnRJY29uID0gX3Byb3BzLmxlZnRJY29uLFxuICAgICAgICAgIG1lbnVJdGVtcyA9IF9wcm9wcy5tZW51SXRlbXMsXG4gICAgICAgICAgcmlnaHRJY29uID0gX3Byb3BzLnJpZ2h0SWNvbixcbiAgICAgICAgICBzZWNvbmRhcnlUZXh0ID0gX3Byb3BzLnNlY29uZGFyeVRleHQsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgYW5pbWF0aW9uID0gX3Byb3BzLmFuaW1hdGlvbixcbiAgICAgICAgICBhbmNob3JPcmlnaW4gPSBfcHJvcHMuYW5jaG9yT3JpZ2luLFxuICAgICAgICAgIHRhcmdldE9yaWdpbiA9IF9wcm9wcy50YXJnZXRPcmlnaW4sXG4gICAgICAgICAgdmFsdWUgPSBfcHJvcHMudmFsdWUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnY2hlY2tlZCcsICdjaGlsZHJlbicsICdkZXNrdG9wJywgJ2Rpc2FibGVkJywgJ2ZvY3VzU3RhdGUnLCAnaW5uZXJEaXZTdHlsZScsICdpbnNldENoaWxkcmVuJywgJ2xlZnRJY29uJywgJ21lbnVJdGVtcycsICdyaWdodEljb24nLCAnc2Vjb25kYXJ5VGV4dCcsICdzdHlsZScsICdhbmltYXRpb24nLCAnYW5jaG9yT3JpZ2luJywgJ3RhcmdldE9yaWdpbicsICd2YWx1ZSddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXModGhpcy5wcm9wcywgdGhpcy5jb250ZXh0KTtcbiAgICAgIHZhciBtZXJnZWRSb290U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5yb290LCBzdHlsZSk7XG4gICAgICB2YXIgbWVyZ2VkSW5uZXJEaXZTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLmlubmVyRGl2U3R5bGUsIGlubmVyRGl2U3R5bGUpO1xuXG4gICAgICAvLyBMZWZ0IEljb25cbiAgICAgIHZhciBsZWZ0SWNvbkVsZW1lbnQgPSBsZWZ0SWNvbiA/IGxlZnRJY29uIDogY2hlY2tlZCA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jaGVjazIuZGVmYXVsdCwgbnVsbCkgOiBudWxsO1xuICAgICAgaWYgKGxlZnRJY29uRWxlbWVudCkge1xuICAgICAgICB2YXIgbWVyZ2VkTGVmdEljb25TdHlsZXMgPSBkZXNrdG9wID8gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5sZWZ0SWNvbkRlc2t0b3AsIGxlZnRJY29uRWxlbWVudC5wcm9wcy5zdHlsZSkgOiBsZWZ0SWNvbkVsZW1lbnQucHJvcHMuc3R5bGU7XG4gICAgICAgIGxlZnRJY29uRWxlbWVudCA9IF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQobGVmdEljb25FbGVtZW50LCB7IHN0eWxlOiBtZXJnZWRMZWZ0SWNvblN0eWxlcyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gUmlnaHQgSWNvblxuICAgICAgdmFyIHJpZ2h0SWNvbkVsZW1lbnQgPSB2b2lkIDA7XG4gICAgICBpZiAocmlnaHRJY29uKSB7XG4gICAgICAgIHZhciBtZXJnZWRSaWdodEljb25TdHlsZXMgPSBkZXNrdG9wID8gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5yaWdodEljb25EZXNrdG9wLCByaWdodEljb24ucHJvcHMuc3R5bGUpIDogcmlnaHRJY29uLnByb3BzLnN0eWxlO1xuICAgICAgICByaWdodEljb25FbGVtZW50ID0gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChyaWdodEljb24sIHsgc3R5bGU6IG1lcmdlZFJpZ2h0SWNvblN0eWxlcyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gU2Vjb25kYXJ5IFRleHRcbiAgICAgIHZhciBzZWNvbmRhcnlUZXh0RWxlbWVudCA9IHZvaWQgMDtcbiAgICAgIGlmIChzZWNvbmRhcnlUZXh0KSB7XG4gICAgICAgIHZhciBzZWNvbmRhcnlUZXh0SXNBbkVsZW1lbnQgPSBfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoc2Vjb25kYXJ5VGV4dCk7XG4gICAgICAgIHZhciBtZXJnZWRTZWNvbmRhcnlUZXh0U3R5bGVzID0gc2Vjb25kYXJ5VGV4dElzQW5FbGVtZW50ID8gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5zZWNvbmRhcnlUZXh0LCBzZWNvbmRhcnlUZXh0LnByb3BzLnN0eWxlKSA6IG51bGw7XG5cbiAgICAgICAgc2Vjb25kYXJ5VGV4dEVsZW1lbnQgPSBzZWNvbmRhcnlUZXh0SXNBbkVsZW1lbnQgPyBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KHNlY29uZGFyeVRleHQsIHsgc3R5bGU6IG1lcmdlZFNlY29uZGFyeVRleHRTdHlsZXMgfSkgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKHN0eWxlcy5zZWNvbmRhcnlUZXh0KSB9LFxuICAgICAgICAgIHNlY29uZGFyeVRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZE1lbnVQb3BvdmVyID0gdm9pZCAwO1xuICAgICAgaWYgKG1lbnVJdGVtcykge1xuICAgICAgICBjaGlsZE1lbnVQb3BvdmVyID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX1BvcG92ZXIyLmRlZmF1bHQsXG4gICAgICAgICAge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiBhbmltYXRpb24sXG4gICAgICAgICAgICBhbmNob3JPcmlnaW46IGFuY2hvck9yaWdpbixcbiAgICAgICAgICAgIGFuY2hvckVsOiB0aGlzLnN0YXRlLmFuY2hvckVsLFxuICAgICAgICAgICAgb3BlbjogdGhpcy5zdGF0ZS5vcGVuLFxuICAgICAgICAgICAgdGFyZ2V0T3JpZ2luOiB0YXJnZXRPcmlnaW4sXG4gICAgICAgICAgICB1c2VMYXllckZvckNsaWNrQXdheTogZmFsc2UsXG4gICAgICAgICAgICBvblJlcXVlc3RDbG9zZTogdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX01lbnUyLmRlZmF1bHQsXG4gICAgICAgICAgICB7IGRlc2t0b3A6IGRlc2t0b3AsIGRpc2FibGVkOiBkaXNhYmxlZCwgc3R5bGU6IG5lc3RlZE1lbnVTdHlsZSB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm1hcChtZW51SXRlbXMsIHRoaXMuY2xvbmVNZW51SXRlbSlcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIG90aGVyLm9uQ2xpY2sgPSB0aGlzLmhhbmRsZUNsaWNrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9MaXN0SXRlbTIuZGVmYXVsdCxcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHtcbiAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgaG92ZXJDb2xvcjogdGhpcy5jb250ZXh0Lm11aVRoZW1lLm1lbnVJdGVtLmhvdmVyQ29sb3IsXG4gICAgICAgICAgaW5uZXJEaXZTdHlsZTogbWVyZ2VkSW5uZXJEaXZTdHlsZXMsXG4gICAgICAgICAgaW5zZXRDaGlsZHJlbjogaW5zZXRDaGlsZHJlbixcbiAgICAgICAgICBsZWZ0SWNvbjogbGVmdEljb25FbGVtZW50LFxuICAgICAgICAgIHJlZjogJ2xpc3RJdGVtJyxcbiAgICAgICAgICByaWdodEljb246IHJpZ2h0SWNvbkVsZW1lbnQsXG4gICAgICAgICAgcm9sZTogJ21lbnVpdGVtJyxcbiAgICAgICAgICBzdHlsZTogbWVyZ2VkUm9vdFN0eWxlc1xuICAgICAgICB9KSxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHNlY29uZGFyeVRleHRFbGVtZW50LFxuICAgICAgICBjaGlsZE1lbnVQb3BvdmVyXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTWVudUl0ZW07XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5NZW51SXRlbS5tdWlOYW1lID0gJ01lbnVJdGVtJztcbk1lbnVJdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgYW5jaG9yT3JpZ2luOiB7IGhvcml6b250YWw6ICdyaWdodCcsIHZlcnRpY2FsOiAndG9wJyB9LFxuICBjaGVja2VkOiBmYWxzZSxcbiAgZGVza3RvcDogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgZm9jdXNTdGF0ZTogJ25vbmUnLFxuICBpbnNldENoaWxkcmVuOiBmYWxzZSxcbiAgdGFyZ2V0T3JpZ2luOiB7IGhvcml6b250YWw6ICdsZWZ0JywgdmVydGljYWw6ICd0b3AnIH1cbn07XG5NZW51SXRlbS5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuTWVudUl0ZW0ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogTG9jYXRpb24gb2YgdGhlIGFuY2hvciBmb3IgdGhlIHBvcG92ZXIgb2YgbmVzdGVkIGBNZW51SXRlbWBcbiAgICogZWxlbWVudHMuXG4gICAqIE9wdGlvbnM6XG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBtaWRkbGUsIHJpZ2h0XVxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dLlxuICAgKi9cbiAgYW5jaG9yT3JpZ2luOiBfcHJvcFR5cGVzNC5kZWZhdWx0Lm9yaWdpbixcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IGFuaW1hdGlvbiBjb21wb25lbnQgdXNlZC5cbiAgICovXG4gIGFuaW1hdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgYSBsZWZ0IGNoZWNrIG1hcmsgd2lsbCBiZSByZW5kZXJlZC5cbiAgICovXG4gIGNoZWNrZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIEVsZW1lbnRzIHBhc3NlZCBhcyBjaGlsZHJlbiB0byB0aGUgdW5kZXJseWluZyBgTGlzdEl0ZW1gLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogSWYgdHJ1ZSwgdGhlIG1lbnUgaXRlbSB3aWxsIHJlbmRlciB3aXRoIGNvbXBhY3QgZGVza3RvcFxuICAgKiBzdHlsZXMuXG4gICAqL1xuICBkZXNrdG9wOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgbWVudSBpdGVtIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIGZvY3VzIHN0YXRlIG9mIHRoZSBtZW51IGl0ZW0uIFRoaXMgcHJvcCBpcyB1c2VkIHRvIHNldCB0aGUgZm9jdXNcbiAgICogc3RhdGUgb2YgdGhlIHVuZGVybHlpbmcgYExpc3RJdGVtYC5cbiAgICovXG4gIGZvY3VzU3RhdGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydub25lJywgJ2ZvY3VzZWQnLCAna2V5Ym9hcmQtZm9jdXNlZCddKSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSBpbm5lciBkaXYuXG4gICAqL1xuICBpbm5lckRpdlN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBjaGlsZHJlbiB3aWxsIGJlIGluZGVudGVkLlxuICAgKiBUaGlzIGlzIG9ubHkgbmVlZGVkIHdoZW4gdGhlcmUgaXMgbm8gYGxlZnRJY29uYC5cbiAgICovXG4gIGluc2V0Q2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBgU3ZnSWNvbmAgb3IgYEZvbnRJY29uYCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIGxlZnQgc2lkZS5cbiAgICovXG4gIGxlZnRJY29uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBgTWVudUl0ZW1gIGVsZW1lbnRzIHRvIG5lc3Qgd2l0aGluIHRoZSBtZW51IGl0ZW0uXG4gICAqL1xuICBtZW51SXRlbXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIG1lbnUgaXRlbSBpcyBjbGlja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQ2xpY2sgZXZlbnQgdGFyZ2V0aW5nIHRoZSBtZW51IGl0ZW0uXG4gICAqL1xuICBvbkNsaWNrOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYW4gYmUgdXNlZCB0byByZW5kZXIgcHJpbWFyeSB0ZXh0IHdpdGhpbiB0aGUgbWVudSBpdGVtLlxuICAgKi9cbiAgcHJpbWFyeVRleHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBgU3ZnSWNvbmAgb3IgYEZvbnRJY29uYCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIHJpZ2h0IHNpZGUuXG4gICAqL1xuICByaWdodEljb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIENhbiBiZSB1c2VkIHRvIHJlbmRlciBzZWNvbmRhcnkgdGV4dCB3aXRoaW4gdGhlIG1lbnUgaXRlbS5cbiAgICovXG4gIHNlY29uZGFyeVRleHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBMb2NhdGlvbiBvbiB0aGUgcG9wb3ZlciBvZiBuZXN0ZWQgYE1lbnVJdGVtYCBlbGVtZW50cyB0aGF0IHdpbGwgYXR0YWNoXG4gICAqIHRvIHRoZSBhbmNob3IncyBvcmlnaW4uXG4gICAqIE9wdGlvbnM6XG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBtaWRkbGUsIHJpZ2h0XVxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dLlxuICAgKi9cbiAgdGFyZ2V0T3JpZ2luOiBfcHJvcFR5cGVzNC5kZWZhdWx0Lm9yaWdpbixcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgbWVudSBpdGVtLlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55XG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBNZW51SXRlbTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgaXNEZXNjZW5kYW50OiBmdW5jdGlvbiBpc0Rlc2NlbmRhbnQocGFyZW50LCBjaGlsZCkge1xuICAgIHZhciBub2RlID0gY2hpbGQucGFyZW50Tm9kZTtcblxuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBpZiAobm9kZSA9PT0gcGFyZW50KSByZXR1cm4gdHJ1ZTtcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBvZmZzZXQ6IGZ1bmN0aW9uIG9mZnNldChlbCkge1xuICAgIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogcmVjdC50b3AgKyBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdFxuICAgIH07XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfcmVhY3RFdmVudExpc3RlbmVyID0gcmVxdWlyZSgncmVhY3QtZXZlbnQtbGlzdGVuZXInKTtcblxudmFyIF9yZWFjdEV2ZW50TGlzdGVuZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RFdmVudExpc3RlbmVyKTtcblxudmFyIF9SZW5kZXJUb0xheWVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvUmVuZGVyVG9MYXllcicpO1xuXG52YXIgX1JlbmRlclRvTGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVuZGVyVG9MYXllcik7XG5cbnZhciBfcHJvcFR5cGVzMyA9IHJlcXVpcmUoJy4uL3V0aWxzL3Byb3BUeXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMzKTtcblxudmFyIF9QYXBlciA9IHJlcXVpcmUoJy4uL1BhcGVyJyk7XG5cbnZhciBfUGFwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFwZXIpO1xuXG52YXIgX2xvZGFzaCA9IHJlcXVpcmUoJ2xvZGFzaC50aHJvdHRsZScpO1xuXG52YXIgX2xvZGFzaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2Rhc2gpO1xuXG52YXIgX1BvcG92ZXJBbmltYXRpb25EZWZhdWx0ID0gcmVxdWlyZSgnLi9Qb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCcpO1xuXG52YXIgX1BvcG92ZXJBbmltYXRpb25EZWZhdWx0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BvcG92ZXJBbmltYXRpb25EZWZhdWx0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHN0eWxlcyA9IHtcbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdub25lJ1xuICB9XG59O1xuXG52YXIgUG9wb3ZlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFBvcG92ZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcG92ZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQb3BvdmVyKTtcblxuICAgIHZhciBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFBvcG92ZXIuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFBvcG92ZXIpKS5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICBfdGhpcy50aW1lb3V0ID0gbnVsbDtcblxuICAgIF90aGlzLnJlbmRlckxheWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYW5pbWF0ZWQgPSBfdGhpcyRwcm9wcy5hbmltYXRlZCxcbiAgICAgICAgICBhbmltYXRpb24gPSBfdGhpcyRwcm9wcy5hbmltYXRpb24sXG4gICAgICAgICAgYW5jaG9yRWwgPSBfdGhpcyRwcm9wcy5hbmNob3JFbCxcbiAgICAgICAgICBhbmNob3JPcmlnaW4gPSBfdGhpcyRwcm9wcy5hbmNob3JPcmlnaW4sXG4gICAgICAgICAgYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbiA9IF90aGlzJHByb3BzLmF1dG9DbG9zZVdoZW5PZmZTY3JlZW4sXG4gICAgICAgICAgY2FuQXV0b1Bvc2l0aW9uID0gX3RoaXMkcHJvcHMuY2FuQXV0b1Bvc2l0aW9uLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgb25SZXF1ZXN0Q2xvc2UgPSBfdGhpcyRwcm9wcy5vblJlcXVlc3RDbG9zZSxcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICAgIHRhcmdldE9yaWdpbiA9IF90aGlzJHByb3BzLnRhcmdldE9yaWdpbixcbiAgICAgICAgICB1c2VMYXllckZvckNsaWNrQXdheSA9IF90aGlzJHByb3BzLnVzZUxheWVyRm9yQ2xpY2tBd2F5LFxuICAgICAgICAgIHNjcm9sbGFibGVDb250YWluZXIgPSBfdGhpcyRwcm9wcy5zY3JvbGxhYmxlQ29udGFpbmVyLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFsnYW5pbWF0ZWQnLCAnYW5pbWF0aW9uJywgJ2FuY2hvckVsJywgJ2FuY2hvck9yaWdpbicsICdhdXRvQ2xvc2VXaGVuT2ZmU2NyZWVuJywgJ2NhbkF1dG9Qb3NpdGlvbicsICdjaGlsZHJlbicsICdvblJlcXVlc3RDbG9zZScsICdzdHlsZScsICd0YXJnZXRPcmlnaW4nLCAndXNlTGF5ZXJGb3JDbGlja0F3YXknLCAnc2Nyb2xsYWJsZUNvbnRhaW5lciddKTtcblxuXG4gICAgICB2YXIgc3R5bGVSb290ID0gc3R5bGU7XG5cbiAgICAgIGlmICghYW5pbWF0ZWQpIHtcbiAgICAgICAgc3R5bGVSb290ID0ge1xuICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAgIHpJbmRleDogX3RoaXMuY29udGV4dC5tdWlUaGVtZS56SW5kZXgucG9wb3ZlclxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghX3RoaXMuc3RhdGUub3Blbikge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIF9QYXBlcjIuZGVmYXVsdCxcbiAgICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHsgc3R5bGU6ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZVJvb3QsIHN0eWxlKSB9LCBvdGhlciksXG4gICAgICAgICAgY2hpbGRyZW5cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdmFyIEFuaW1hdGlvbiA9IGFuaW1hdGlvbiB8fCBfUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQyLmRlZmF1bHQ7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgQW5pbWF0aW9uLFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICAgICAgICB0YXJnZXRPcmlnaW46IHRhcmdldE9yaWdpbixcbiAgICAgICAgICBzdHlsZTogc3R5bGVSb290XG4gICAgICAgIH0sIG90aGVyLCB7XG4gICAgICAgICAgb3BlbjogX3RoaXMuc3RhdGUub3BlbiAmJiAhX3RoaXMuc3RhdGUuY2xvc2luZ1xuICAgICAgICB9KSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfTtcblxuICAgIF90aGlzLmNvbXBvbmVudENsaWNrQXdheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnJlcXVlc3RDbG9zZSgnY2xpY2tBd2F5Jyk7XG4gICAgfTtcblxuICAgIF90aGlzLnNldFBsYWNlbWVudCA9IGZ1bmN0aW9uIChzY3JvbGxpbmcpIHtcbiAgICAgIGlmICghX3RoaXMuc3RhdGUub3Blbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghX3RoaXMucG9wb3ZlclJlZnMubGF5ZXIuZ2V0TGF5ZXIoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0YXJnZXRFbCA9IF90aGlzLnBvcG92ZXJSZWZzLmxheWVyLmdldExheWVyKCkuY2hpbGRyZW5bMF07XG4gICAgICBpZiAoIXRhcmdldEVsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIHRhcmdldE9yaWdpbiA9IF90aGlzJHByb3BzMi50YXJnZXRPcmlnaW4sXG4gICAgICAgICAgYW5jaG9yT3JpZ2luID0gX3RoaXMkcHJvcHMyLmFuY2hvck9yaWdpbjtcblxuICAgICAgdmFyIGFuY2hvckVsID0gX3RoaXMucHJvcHMuYW5jaG9yRWwgfHwgX3RoaXMuYW5jaG9yRWw7XG5cbiAgICAgIHZhciBhbmNob3IgPSBfdGhpcy5nZXRBbmNob3JQb3NpdGlvbihhbmNob3JFbCk7XG4gICAgICB2YXIgdGFyZ2V0ID0gX3RoaXMuZ2V0VGFyZ2V0UG9zaXRpb24odGFyZ2V0RWwpO1xuXG4gICAgICB2YXIgdGFyZ2V0UG9zaXRpb24gPSB7XG4gICAgICAgIHRvcDogYW5jaG9yW2FuY2hvck9yaWdpbi52ZXJ0aWNhbF0gLSB0YXJnZXRbdGFyZ2V0T3JpZ2luLnZlcnRpY2FsXSxcbiAgICAgICAgbGVmdDogYW5jaG9yW2FuY2hvck9yaWdpbi5ob3Jpem9udGFsXSAtIHRhcmdldFt0YXJnZXRPcmlnaW4uaG9yaXpvbnRhbF1cbiAgICAgIH07XG5cbiAgICAgIGlmIChzY3JvbGxpbmcgJiYgX3RoaXMucHJvcHMuYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbikge1xuICAgICAgICBfdGhpcy5hdXRvQ2xvc2VXaGVuT2ZmU2NyZWVuKGFuY2hvcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5jYW5BdXRvUG9zaXRpb24pIHtcbiAgICAgICAgdGFyZ2V0ID0gX3RoaXMuZ2V0VGFyZ2V0UG9zaXRpb24odGFyZ2V0RWwpOyAvLyB1cGRhdGUgYXMgaGVpZ2h0IG1heSBoYXZlIGNoYW5nZWRcbiAgICAgICAgdGFyZ2V0UG9zaXRpb24gPSBfdGhpcy5hcHBseUF1dG9Qb3NpdGlvbklmTmVlZGVkKGFuY2hvciwgdGFyZ2V0LCB0YXJnZXRPcmlnaW4sIGFuY2hvck9yaWdpbiwgdGFyZ2V0UG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRFbC5zdHlsZS50b3AgPSB0YXJnZXRQb3NpdGlvbi50b3AgKyAncHgnO1xuICAgICAgdGFyZ2V0RWwuc3R5bGUubGVmdCA9IHRhcmdldFBvc2l0aW9uLmxlZnQgKyAncHgnO1xuICAgICAgdGFyZ2V0RWwuc3R5bGUubWF4SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0ICsgJ3B4JztcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVzaXplID0gKDAsIF9sb2Rhc2gyLmRlZmF1bHQpKF90aGlzLnNldFBsYWNlbWVudCwgMTAwKTtcbiAgICBfdGhpcy5oYW5kbGVTY3JvbGwgPSAoMCwgX2xvZGFzaDIuZGVmYXVsdCkoX3RoaXMuc2V0UGxhY2VtZW50LmJpbmQoX3RoaXMsIHRydWUpLCA1MCk7XG5cbiAgICBfdGhpcy5wb3BvdmVyUmVmcyA9IHt9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBvcGVuOiBwcm9wcy5vcGVuLFxuICAgICAgY2xvc2luZzogZmFsc2VcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFBvcG92ZXIsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMucGxhY2VtZW50VGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5zZXRQbGFjZW1lbnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChuZXh0UHJvcHMub3BlbiA9PT0gdGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRQcm9wcy5vcGVuKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSBudWxsO1xuICAgICAgICB0aGlzLmFuY2hvckVsID0gbmV4dFByb3BzLmFuY2hvckVsIHx8IHRoaXMucHJvcHMuYW5jaG9yRWw7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG9wZW46IHRydWUsXG4gICAgICAgICAgY2xvc2luZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobmV4dFByb3BzLmFuaW1hdGVkKSB7XG4gICAgICAgICAgaWYgKHRoaXMudGltZW91dCAhPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjbG9zaW5nOiB0cnVlIH0pO1xuICAgICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgb3BlbjogZmFsc2VcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLnRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG9wZW46IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5wbGFjZW1lbnRUaW1lb3V0KTtcbiAgICAgIHRoaXMucGxhY2VtZW50VGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5zZXRQbGFjZW1lbnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmhhbmRsZVJlc2l6ZS5jYW5jZWwoKTtcbiAgICAgIHRoaXMuaGFuZGxlU2Nyb2xsLmNhbmNlbCgpO1xuXG4gICAgICBpZiAodGhpcy5wbGFjZW1lbnRUaW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBsYWNlbWVudFRpbWVvdXQpO1xuICAgICAgICB0aGlzLnBsYWNlbWVudFRpbWVvdXQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlcXVlc3RDbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVlc3RDbG9zZShyZWFzb24pIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uUmVxdWVzdENsb3NlKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25SZXF1ZXN0Q2xvc2UocmVhc29uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRBbmNob3JQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFuY2hvclBvc2l0aW9uKGVsKSB7XG4gICAgICBpZiAoIWVsKSB7XG4gICAgICAgIGVsID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGEgPSB7XG4gICAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgICAgd2lkdGg6IGVsLm9mZnNldFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGVsLm9mZnNldEhlaWdodFxuICAgICAgfTtcblxuICAgICAgYS5yaWdodCA9IHJlY3QucmlnaHQgfHwgYS5sZWZ0ICsgYS53aWR0aDtcbiAgICAgIGEuYm90dG9tID0gcmVjdC5ib3R0b20gfHwgYS50b3AgKyBhLmhlaWdodDtcbiAgICAgIGEubWlkZGxlID0gYS5sZWZ0ICsgKGEucmlnaHQgLSBhLmxlZnQpIC8gMjtcbiAgICAgIGEuY2VudGVyID0gYS50b3AgKyAoYS5ib3R0b20gLSBhLnRvcCkgLyAyO1xuXG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRUYXJnZXRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRhcmdldFBvc2l0aW9uKHRhcmdldEVsKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGNlbnRlcjogdGFyZ2V0RWwub2Zmc2V0SGVpZ2h0IC8gMixcbiAgICAgICAgYm90dG9tOiB0YXJnZXRFbC5vZmZzZXRIZWlnaHQsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIG1pZGRsZTogdGFyZ2V0RWwub2Zmc2V0V2lkdGggLyAyLFxuICAgICAgICByaWdodDogdGFyZ2V0RWwub2Zmc2V0V2lkdGhcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGF1dG9DbG9zZVdoZW5PZmZTY3JlZW4oYW5jaG9yUG9zaXRpb24pIHtcbiAgICAgIGlmIChhbmNob3JQb3NpdGlvbi50b3AgPCAwIHx8IGFuY2hvclBvc2l0aW9uLnRvcCA+IHdpbmRvdy5pbm5lckhlaWdodCB8fCBhbmNob3JQb3NpdGlvbi5sZWZ0IDwgMCB8fCBhbmNob3JQb3NpdGlvbi5sZWZ0ID4gd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0Q2xvc2UoJ29mZlNjcmVlbicpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldE92ZXJsYXBNb2RlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3ZlcmxhcE1vZGUoYW5jaG9yLCB0YXJnZXQsIG1lZGlhbikge1xuICAgICAgaWYgKFthbmNob3IsIHRhcmdldF0uaW5kZXhPZihtZWRpYW4pID49IDApIHJldHVybiAnYXV0byc7XG4gICAgICBpZiAoYW5jaG9yID09PSB0YXJnZXQpIHJldHVybiAnaW5jbHVzaXZlJztcbiAgICAgIHJldHVybiAnZXhjbHVzaXZlJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRQb3NpdGlvbnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQb3NpdGlvbnMoYW5jaG9yLCB0YXJnZXQpIHtcbiAgICAgIHZhciBhID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgYW5jaG9yKTtcbiAgICAgIHZhciB0ID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgdGFyZ2V0KTtcblxuICAgICAgdmFyIHBvc2l0aW9ucyA9IHtcbiAgICAgICAgeDogWydsZWZ0JywgJ3JpZ2h0J10uZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgcmV0dXJuIHAgIT09IHQuaG9yaXpvbnRhbDtcbiAgICAgICAgfSksXG4gICAgICAgIHk6IFsndG9wJywgJ2JvdHRvbSddLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICAgICAgICAgIHJldHVybiBwICE9PSB0LnZlcnRpY2FsO1xuICAgICAgICB9KVxuICAgICAgfTtcblxuICAgICAgdmFyIG92ZXJsYXAgPSB7XG4gICAgICAgIHg6IHRoaXMuZ2V0T3ZlcmxhcE1vZGUoYS5ob3Jpem9udGFsLCB0Lmhvcml6b250YWwsICdtaWRkbGUnKSxcbiAgICAgICAgeTogdGhpcy5nZXRPdmVybGFwTW9kZShhLnZlcnRpY2FsLCB0LnZlcnRpY2FsLCAnY2VudGVyJylcbiAgICAgIH07XG5cbiAgICAgIHBvc2l0aW9ucy54LnNwbGljZShvdmVybGFwLnggPT09ICdhdXRvJyA/IDAgOiAxLCAwLCAnbWlkZGxlJyk7XG4gICAgICBwb3NpdGlvbnMueS5zcGxpY2Uob3ZlcmxhcC55ID09PSAnYXV0bycgPyAwIDogMSwgMCwgJ2NlbnRlcicpO1xuXG4gICAgICBpZiAob3ZlcmxhcC55ICE9PSAnYXV0bycpIHtcbiAgICAgICAgYS52ZXJ0aWNhbCA9IGEudmVydGljYWwgPT09ICd0b3AnID8gJ2JvdHRvbScgOiAndG9wJztcbiAgICAgICAgaWYgKG92ZXJsYXAueSA9PT0gJ2luY2x1c2l2ZScpIHtcbiAgICAgICAgICB0LnZlcnRpY2FsID0gdC52ZXJ0aWNhbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAob3ZlcmxhcC54ICE9PSAnYXV0bycpIHtcbiAgICAgICAgYS5ob3Jpem9udGFsID0gYS5ob3Jpem9udGFsID09PSAnbGVmdCcgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICBpZiAob3ZlcmxhcC55ID09PSAnaW5jbHVzaXZlJykge1xuICAgICAgICAgIHQuaG9yaXpvbnRhbCA9IHQuaG9yaXpvbnRhbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwb3NpdGlvbnM6IHBvc2l0aW9ucyxcbiAgICAgICAgYW5jaG9yUG9zOiBhXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FwcGx5QXV0b1Bvc2l0aW9uSWZOZWVkZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUF1dG9Qb3NpdGlvbklmTmVlZGVkKGFuY2hvciwgdGFyZ2V0LCB0YXJnZXRPcmlnaW4sIGFuY2hvck9yaWdpbiwgdGFyZ2V0UG9zaXRpb24pIHtcbiAgICAgIHZhciBfZ2V0UG9zaXRpb25zID0gdGhpcy5nZXRQb3NpdGlvbnMoYW5jaG9yT3JpZ2luLCB0YXJnZXRPcmlnaW4pLFxuICAgICAgICAgIHBvc2l0aW9ucyA9IF9nZXRQb3NpdGlvbnMucG9zaXRpb25zLFxuICAgICAgICAgIGFuY2hvclBvcyA9IF9nZXRQb3NpdGlvbnMuYW5jaG9yUG9zO1xuXG4gICAgICBpZiAodGFyZ2V0UG9zaXRpb24udG9wIDwgMCB8fCB0YXJnZXRQb3NpdGlvbi50b3AgKyB0YXJnZXQuYm90dG9tID4gd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICAgIHZhciBuZXdUb3AgPSBhbmNob3JbYW5jaG9yUG9zLnZlcnRpY2FsXSAtIHRhcmdldFtwb3NpdGlvbnMueVswXV07XG4gICAgICAgIGlmIChuZXdUb3AgKyB0YXJnZXQuYm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodCkge1xuICAgICAgICAgIHRhcmdldFBvc2l0aW9uLnRvcCA9IE1hdGgubWF4KDAsIG5ld1RvcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3VG9wID0gYW5jaG9yW2FuY2hvclBvcy52ZXJ0aWNhbF0gLSB0YXJnZXRbcG9zaXRpb25zLnlbMV1dO1xuICAgICAgICAgIGlmIChuZXdUb3AgKyB0YXJnZXQuYm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodCkge1xuICAgICAgICAgICAgdGFyZ2V0UG9zaXRpb24udG9wID0gTWF0aC5tYXgoMCwgbmV3VG9wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldFBvc2l0aW9uLmxlZnQgPCAwIHx8IHRhcmdldFBvc2l0aW9uLmxlZnQgKyB0YXJnZXQucmlnaHQgPiB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICB2YXIgbmV3TGVmdCA9IGFuY2hvclthbmNob3JQb3MuaG9yaXpvbnRhbF0gLSB0YXJnZXRbcG9zaXRpb25zLnhbMF1dO1xuICAgICAgICBpZiAobmV3TGVmdCArIHRhcmdldC5yaWdodCA8PSB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICAgIHRhcmdldFBvc2l0aW9uLmxlZnQgPSBNYXRoLm1heCgwLCBuZXdMZWZ0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdMZWZ0ID0gYW5jaG9yW2FuY2hvclBvcy5ob3Jpem9udGFsXSAtIHRhcmdldFtwb3NpdGlvbnMueFsxXV07XG4gICAgICAgICAgaWYgKG5ld0xlZnQgKyB0YXJnZXQucmlnaHQgPD0gd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgICAgICAgIHRhcmdldFBvc2l0aW9uLmxlZnQgPSBNYXRoLm1heCgwLCBuZXdMZWZ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldFBvc2l0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IHN0eWxlOiBzdHlsZXMucm9vdCB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RFdmVudExpc3RlbmVyMi5kZWZhdWx0LCB7XG4gICAgICAgICAgdGFyZ2V0OiB0aGlzLnByb3BzLnNjcm9sbGFibGVDb250YWluZXIsXG4gICAgICAgICAgb25TY3JvbGw6IHRoaXMuaGFuZGxlU2Nyb2xsLFxuICAgICAgICAgIG9uUmVzaXplOiB0aGlzLmhhbmRsZVJlc2l6ZVxuICAgICAgICB9KSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1JlbmRlclRvTGF5ZXIyLmRlZmF1bHQsIHtcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihfcmVmKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLnBvcG92ZXJSZWZzLmxheWVyID0gX3JlZjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9wZW46IHRoaXMuc3RhdGUub3BlbixcbiAgICAgICAgICBjb21wb25lbnRDbGlja0F3YXk6IHRoaXMuY29tcG9uZW50Q2xpY2tBd2F5LFxuICAgICAgICAgIHVzZUxheWVyRm9yQ2xpY2tBd2F5OiB0aGlzLnByb3BzLnVzZUxheWVyRm9yQ2xpY2tBd2F5LFxuICAgICAgICAgIHJlbmRlcjogdGhpcy5yZW5kZXJMYXllclxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFBvcG92ZXI7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Qb3BvdmVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYW5jaG9yT3JpZ2luOiB7XG4gICAgdmVydGljYWw6ICdib3R0b20nLFxuICAgIGhvcml6b250YWw6ICdsZWZ0J1xuICB9LFxuICBhbmltYXRlZDogdHJ1ZSxcbiAgYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbjogdHJ1ZSxcbiAgY2FuQXV0b1Bvc2l0aW9uOiB0cnVlLFxuICBvblJlcXVlc3RDbG9zZTogZnVuY3Rpb24gb25SZXF1ZXN0Q2xvc2UoKSB7fSxcbiAgb3BlbjogZmFsc2UsXG4gIHNjcm9sbGFibGVDb250YWluZXI6ICd3aW5kb3cnLFxuICBzdHlsZToge1xuICAgIG92ZXJmbG93WTogJ2F1dG8nXG4gIH0sXG4gIHRhcmdldE9yaWdpbjoge1xuICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgfSxcbiAgdXNlTGF5ZXJGb3JDbGlja0F3YXk6IHRydWUsXG4gIHpEZXB0aDogMVxufTtcblBvcG92ZXIuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblBvcG92ZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhpcyBpcyB0aGUgRE9NIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGVcbiAgICogcG9wb3Zlci5cbiAgICovXG4gIGFuY2hvckVsOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBhbmNob3Igd2hlcmUgdGhlIHBvcG92ZXInc1xuICAgKiBgdGFyZ2V0T3JpZ2luYCB3aWxsIGF0dGFjaCB0by5cbiAgICogT3B0aW9uczpcbiAgICogdmVydGljYWw6IFt0b3AsIGNlbnRlciwgYm90dG9tXVxuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgbWlkZGxlLCByaWdodF0uXG4gICAqL1xuICBhbmNob3JPcmlnaW46IF9wcm9wVHlwZXM0LmRlZmF1bHQub3JpZ2luLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIHBvcG92ZXIgd2lsbCBhcHBseSB0cmFuc2l0aW9ucyB3aGVuXG4gICAqIGl0IGlzIGFkZGVkIHRvIHRoZSBET00uXG4gICAqL1xuICBhbmltYXRlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgYW5pbWF0aW9uIGNvbXBvbmVudCB1c2VkLlxuICAgKi9cbiAgYW5pbWF0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgcG9wb3ZlciB3aWxsIGhpZGUgd2hlbiB0aGUgYW5jaG9yIGlzIHNjcm9sbGVkIG9mZiB0aGUgc2NyZWVuLlxuICAgKi9cbiAgYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIHBvcG92ZXIgKHBvdGVudGlhbGx5KSBpZ25vcmVzIGB0YXJnZXRPcmlnaW5gXG4gICAqIGFuZCBgYW5jaG9yT3JpZ2luYCB0byBtYWtlIGl0c2VsZiBmaXQgb24gc2NyZWVuLFxuICAgKiB3aGljaCBpcyB1c2VmdWwgZm9yIG1vYmlsZSBkZXZpY2VzLlxuICAgKi9cbiAgY2FuQXV0b1Bvc2l0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBwb3BvdmVyIGlzIHJlcXVlc3RlZCB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gVGhlIHJlYXNvbiBmb3IgdGhlIGNsb3NlIHJlcXVlc3QuIFBvc3NpYmxlcyB2YWx1ZXNcbiAgICogYXJlICdjbGlja0F3YXknIGFuZCAnb2ZmU2NyZWVuJy5cbiAgICovXG4gIG9uUmVxdWVzdENsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgcG9wb3ZlciBpcyB2aXNpYmxlLlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogUmVwcmVzZW50cyB0aGUgcGFyZW50IHNjcm9sbGFibGUgY29udGFpbmVyLlxuICAgKiBJdCBjYW4gYmUgYW4gZWxlbWVudCBvciBhIHN0cmluZyBsaWtlIGB3aW5kb3dgLlxuICAgKi9cbiAgc2Nyb2xsYWJsZUNvbnRhaW5lcjogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ10pLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBwb3BvdmVyIHdoaWNoIHdpbGwgYXR0YWNoIHRvXG4gICAqIHRoZSBhbmNob3IncyBvcmlnaW4uXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbV1cbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIG1pZGRsZSwgcmlnaHRdLlxuICAgKi9cbiAgdGFyZ2V0T3JpZ2luOiBfcHJvcFR5cGVzNC5kZWZhdWx0Lm9yaWdpbixcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBwb3BvdmVyIHdpbGwgcmVuZGVyIG9uIHRvcCBvZiBhbiBpbnZpc2libGVcbiAgICogbGF5ZXIsIHdoaWNoIHdpbGwgcHJldmVudCBjbGlja3MgdG8gdGhlIHVuZGVybHlpbmdcbiAgICogZWxlbWVudHMsIGFuZCB0cmlnZ2VyIGFuIGBvblJlcXVlc3RDbG9zZSgnY2xpY2tBd2F5JylgIGNhbGwuXG4gICAqL1xuICB1c2VMYXllckZvckNsaWNrQXdheTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIHpEZXB0aCBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIHpEZXB0aDogX3Byb3BUeXBlczQuZGVmYXVsdC56RGVwdGhcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IFBvcG92ZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfU3ViaGVhZGVyID0gcmVxdWlyZSgnLi4vU3ViaGVhZGVyJyk7XG5cbnZhciBfU3ViaGVhZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N1YmhlYWRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBMaXN0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoTGlzdCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlzdCgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBMaXN0KTtcbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoTGlzdC5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTGlzdCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoTGlzdCwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wcywgWydjaGlsZHJlbicsICdzdHlsZSddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cblxuICAgICAgdmFyIGhhc1N1YmhlYWRlciA9IGZhbHNlO1xuXG4gICAgICB2YXIgZmlyc3RDaGlsZCA9IF9yZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKVswXTtcbiAgICAgIGlmICgoMCwgX3JlYWN0LmlzVmFsaWRFbGVtZW50KShmaXJzdENoaWxkKSAmJiBmaXJzdENoaWxkLnR5cGUgPT09IF9TdWJoZWFkZXIyLmRlZmF1bHQpIHtcbiAgICAgICAgaGFzU3ViaGVhZGVyID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgIHBhZGRpbmc6IChoYXNTdWJoZWFkZXIgPyAwIDogOCkgKyAncHggMHB4IDhweCAwcHgnXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpKSB9KSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBMaXN0O1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuTGlzdC5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuTGlzdC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGVzZSBhcmUgdXN1YWxseSBgTGlzdEl0ZW1gcyB0aGF0IGFyZSBwYXNzZWQgdG9cbiAgICogYmUgcGFydCBvZiB0aGUgbGlzdC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBMaXN0OyIsIi8vIFNvdXJjZTogaHR0cDovL2pzZmlkZGxlLm5ldC92V3g4Vi9cbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTYwMzE5NS9mdWxsLWxpc3Qtb2YtamF2YXNjcmlwdC1rZXljb2Rlc1xuXG4vKipcbiAqIENvbmVuaWVuY2UgbWV0aG9kIHJldHVybnMgY29ycmVzcG9uZGluZyB2YWx1ZSBmb3IgZ2l2ZW4ga2V5TmFtZSBvciBrZXlDb2RlLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGtleUNvZGUge051bWJlcn0gb3Iga2V5TmFtZSB7U3RyaW5nfVxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGtleUNvZGUoc2VhcmNoSW5wdXQpIHtcbiAgLy8gS2V5Ym9hcmQgRXZlbnRzXG4gIGlmIChzZWFyY2hJbnB1dCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHNlYXJjaElucHV0KSB7XG4gICAgdmFyIGhhc0tleUNvZGUgPSBzZWFyY2hJbnB1dC53aGljaCB8fCBzZWFyY2hJbnB1dC5rZXlDb2RlIHx8IHNlYXJjaElucHV0LmNoYXJDb2RlXG4gICAgaWYgKGhhc0tleUNvZGUpIHNlYXJjaElucHV0ID0gaGFzS2V5Q29kZVxuICB9XG5cbiAgLy8gTnVtYmVyc1xuICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiBzZWFyY2hJbnB1dCkgcmV0dXJuIG5hbWVzW3NlYXJjaElucHV0XVxuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSAoY2FzdCB0byBzdHJpbmcpXG4gIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoSW5wdXQpXG5cbiAgLy8gY2hlY2sgY29kZXNcbiAgdmFyIGZvdW5kTmFtZWRLZXkgPSBjb2Rlc1tzZWFyY2gudG9Mb3dlckNhc2UoKV1cbiAgaWYgKGZvdW5kTmFtZWRLZXkpIHJldHVybiBmb3VuZE5hbWVkS2V5XG5cbiAgLy8gY2hlY2sgYWxpYXNlc1xuICB2YXIgZm91bmROYW1lZEtleSA9IGFsaWFzZXNbc2VhcmNoLnRvTG93ZXJDYXNlKCldXG4gIGlmIChmb3VuZE5hbWVkS2V5KSByZXR1cm4gZm91bmROYW1lZEtleVxuXG4gIC8vIHdlaXJkIGNoYXJhY3Rlcj9cbiAgaWYgKHNlYXJjaC5sZW5ndGggPT09IDEpIHJldHVybiBzZWFyY2guY2hhckNvZGVBdCgwKVxuXG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuLyoqXG4gKiBDb21wYXJlcyBhIGtleWJvYXJkIGV2ZW50IHdpdGggYSBnaXZlbiBrZXlDb2RlIG9yIGtleU5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgS2V5Ym9hcmQgZXZlbnQgdGhhdCBzaG91bGQgYmUgdGVzdGVkXG4gKiBAcGFyYW0ge01peGVkfSBrZXlDb2RlIHtOdW1iZXJ9IG9yIGtleU5hbWUge1N0cmluZ31cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5rZXlDb2RlLmlzRXZlbnRLZXkgPSBmdW5jdGlvbiBpc0V2ZW50S2V5KGV2ZW50LCBuYW1lT3JDb2RlKSB7XG4gIGlmIChldmVudCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIGV2ZW50KSB7XG4gICAgdmFyIGtleUNvZGUgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlIHx8IGV2ZW50LmNoYXJDb2RlXG4gICAgaWYgKGtleUNvZGUgPT09IG51bGwgfHwga2V5Q29kZSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICh0eXBlb2YgbmFtZU9yQ29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGNoZWNrIGNvZGVzXG4gICAgICB2YXIgZm91bmROYW1lZEtleSA9IGNvZGVzW25hbWVPckNvZGUudG9Mb3dlckNhc2UoKV1cbiAgICAgIGlmIChmb3VuZE5hbWVkS2V5KSB7IHJldHVybiBmb3VuZE5hbWVkS2V5ID09PSBrZXlDb2RlOyB9XG4gICAgXG4gICAgICAvLyBjaGVjayBhbGlhc2VzXG4gICAgICB2YXIgZm91bmROYW1lZEtleSA9IGFsaWFzZXNbbmFtZU9yQ29kZS50b0xvd2VyQ2FzZSgpXVxuICAgICAgaWYgKGZvdW5kTmFtZWRLZXkpIHsgcmV0dXJuIGZvdW5kTmFtZWRLZXkgPT09IGtleUNvZGU7IH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lT3JDb2RlID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG5hbWVPckNvZGUgPT09IGtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBrZXlDb2RlO1xuXG4vKipcbiAqIEdldCBieSBuYW1lXG4gKlxuICogICBleHBvcnRzLmNvZGVbJ2VudGVyJ10gLy8gPT4gMTNcbiAqL1xuXG52YXIgY29kZXMgPSBleHBvcnRzLmNvZGUgPSBleHBvcnRzLmNvZGVzID0ge1xuICAnYmFja3NwYWNlJzogOCxcbiAgJ3RhYic6IDksXG4gICdlbnRlcic6IDEzLFxuICAnc2hpZnQnOiAxNixcbiAgJ2N0cmwnOiAxNyxcbiAgJ2FsdCc6IDE4LFxuICAncGF1c2UvYnJlYWsnOiAxOSxcbiAgJ2NhcHMgbG9jayc6IDIwLFxuICAnZXNjJzogMjcsXG4gICdzcGFjZSc6IDMyLFxuICAncGFnZSB1cCc6IDMzLFxuICAncGFnZSBkb3duJzogMzQsXG4gICdlbmQnOiAzNSxcbiAgJ2hvbWUnOiAzNixcbiAgJ2xlZnQnOiAzNyxcbiAgJ3VwJzogMzgsXG4gICdyaWdodCc6IDM5LFxuICAnZG93bic6IDQwLFxuICAnaW5zZXJ0JzogNDUsXG4gICdkZWxldGUnOiA0NixcbiAgJ2NvbW1hbmQnOiA5MSxcbiAgJ2xlZnQgY29tbWFuZCc6IDkxLFxuICAncmlnaHQgY29tbWFuZCc6IDkzLFxuICAnbnVtcGFkIConOiAxMDYsXG4gICdudW1wYWQgKyc6IDEwNyxcbiAgJ251bXBhZCAtJzogMTA5LFxuICAnbnVtcGFkIC4nOiAxMTAsXG4gICdudW1wYWQgLyc6IDExMSxcbiAgJ251bSBsb2NrJzogMTQ0LFxuICAnc2Nyb2xsIGxvY2snOiAxNDUsXG4gICdteSBjb21wdXRlcic6IDE4MixcbiAgJ215IGNhbGN1bGF0b3InOiAxODMsXG4gICc7JzogMTg2LFxuICAnPSc6IDE4NyxcbiAgJywnOiAxODgsXG4gICctJzogMTg5LFxuICAnLic6IDE5MCxcbiAgJy8nOiAxOTEsXG4gICdgJzogMTkyLFxuICAnWyc6IDIxOSxcbiAgJ1xcXFwnOiAyMjAsXG4gICddJzogMjIxLFxuICBcIidcIjogMjIyXG59XG5cbi8vIEhlbHBlciBhbGlhc2VzXG5cbnZhciBhbGlhc2VzID0gZXhwb3J0cy5hbGlhc2VzID0ge1xuICAnd2luZG93cyc6IDkxLFxuICAn4oenJzogMTYsXG4gICfijKUnOiAxOCxcbiAgJ+KMgyc6IDE3LFxuICAn4oyYJzogOTEsXG4gICdjdGwnOiAxNyxcbiAgJ2NvbnRyb2wnOiAxNyxcbiAgJ29wdGlvbic6IDE4LFxuICAncGF1c2UnOiAxOSxcbiAgJ2JyZWFrJzogMTksXG4gICdjYXBzJzogMjAsXG4gICdyZXR1cm4nOiAxMyxcbiAgJ2VzY2FwZSc6IDI3LFxuICAnc3BjJzogMzIsXG4gICdzcGFjZWJhcic6IDMyLFxuICAncGd1cCc6IDMzLFxuICAncGdkbic6IDM0LFxuICAnaW5zJzogNDUsXG4gICdkZWwnOiA0NixcbiAgJ2NtZCc6IDkxXG59XG5cbi8qIVxuICogUHJvZ3JhbWF0aWNhbGx5IGFkZCB0aGUgZm9sbG93aW5nXG4gKi9cblxuLy8gbG93ZXIgY2FzZSBjaGFyc1xuZm9yIChpID0gOTc7IGkgPCAxMjM7IGkrKykgY29kZXNbU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpIC0gMzJcblxuLy8gbnVtYmVyc1xuZm9yICh2YXIgaSA9IDQ4OyBpIDwgNTg7IGkrKykgY29kZXNbaSAtIDQ4XSA9IGlcblxuLy8gZnVuY3Rpb24ga2V5c1xuZm9yIChpID0gMTsgaSA8IDEzOyBpKyspIGNvZGVzWydmJytpXSA9IGkgKyAxMTFcblxuLy8gbnVtcGFkIGtleXNcbmZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSBjb2Rlc1snbnVtcGFkICcraV0gPSBpICsgOTZcblxuLyoqXG4gKiBHZXQgYnkgY29kZVxuICpcbiAqICAgZXhwb3J0cy5uYW1lWzEzXSAvLyA9PiAnRW50ZXInXG4gKi9cblxudmFyIG5hbWVzID0gZXhwb3J0cy5uYW1lcyA9IGV4cG9ydHMudGl0bGUgPSB7fSAvLyB0aXRsZSBmb3IgYmFja3dhcmQgY29tcGF0XG5cbi8vIENyZWF0ZSByZXZlcnNlIG1hcHBpbmdcbmZvciAoaSBpbiBjb2RlcykgbmFtZXNbY29kZXNbaV1dID0gaVxuXG4vLyBBZGQgYWxpYXNlc1xuZm9yICh2YXIgYWxpYXMgaW4gYWxpYXNlcykge1xuICBjb2Rlc1thbGlhc10gPSBhbGlhc2VzW2FsaWFzXVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZnJvbSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL2FycmF5L2Zyb21cIik7XG5cbnZhciBfZnJvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mcm9tKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcnIpID8gYXJyIDogKDAsIF9mcm9tMi5kZWZhdWx0KShhcnIpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfdG9BcnJheTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdG9BcnJheScpO1xuXG52YXIgX3RvQXJyYXkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9BcnJheTIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgncmVjb21wb3NlL3NoYWxsb3dFcXVhbCcpO1xuXG52YXIgX3NoYWxsb3dFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93RXF1YWwpO1xuXG52YXIgX0NsaWNrQXdheUxpc3RlbmVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvQ2xpY2tBd2F5TGlzdGVuZXInKTtcblxudmFyIF9DbGlja0F3YXlMaXN0ZW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DbGlja0F3YXlMaXN0ZW5lcik7XG5cbnZhciBfa2V5Y29kZSA9IHJlcXVpcmUoJ2tleWNvZGUnKTtcblxudmFyIF9rZXljb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleWNvZGUpO1xuXG52YXIgX3Byb3BUeXBlczMgPSByZXF1aXJlKCcuLi91dGlscy9wcm9wVHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMyk7XG5cbnZhciBfTGlzdCA9IHJlcXVpcmUoJy4uL0xpc3QvTGlzdCcpO1xuXG52YXIgX0xpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGlzdCk7XG5cbnZhciBfbWVudVV0aWxzID0gcmVxdWlyZSgnLi9tZW51VXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0U3R5bGVzKHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBkZXNrdG9wID0gcHJvcHMuZGVza3RvcCxcbiAgICAgIG1heEhlaWdodCA9IHByb3BzLm1heEhlaWdodCxcbiAgICAgIHdpZHRoID0gcHJvcHMud2lkdGg7XG4gIHZhciBtdWlUaGVtZSA9IGNvbnRleHQubXVpVGhlbWU7XG5cblxuICB2YXIgc3R5bGVzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIC8vIE5lc3RlZCBkaXYgYmVjYXVzZSB0aGUgTGlzdCBzY2FsZXMgeCBmYXN0ZXIgdGhhbiBpdCBzY2FsZXMgeVxuICAgICAgekluZGV4OiBtdWlUaGVtZS56SW5kZXgubWVudSxcbiAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0LFxuICAgICAgb3ZlcmZsb3dZOiBtYXhIZWlnaHQgPyAnYXV0bycgOiBudWxsXG4gICAgfSxcbiAgICBkaXZpZGVyOiB7XG4gICAgICBtYXJnaW5Ub3A6IDcsXG4gICAgICBtYXJnaW5Cb3R0b206IDhcbiAgICB9LFxuICAgIGxpc3Q6IHtcbiAgICAgIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgICAgIHBhZGRpbmdCb3R0b206IGRlc2t0b3AgPyAxNiA6IDgsXG4gICAgICBwYWRkaW5nVG9wOiBkZXNrdG9wID8gMTYgOiA4LFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgd2lkdGg6IHdpZHRoXG4gICAgfSxcbiAgICBzZWxlY3RlZE1lbnVJdGVtOiB7XG4gICAgICBjb2xvcjogbXVpVGhlbWUubWVudUl0ZW0uc2VsZWN0ZWRUZXh0Q29sb3JcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxudmFyIE1lbnUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShNZW51LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW51KHByb3BzLCBjb250ZXh0KSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgTWVudSk7XG5cbiAgICB2YXIgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChNZW51Ll9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShNZW51KSkuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX2luaXRpYWxpc2VQcm9wcy5jYWxsKF90aGlzKTtcblxuICAgIHZhciBmaWx0ZXJlZENoaWxkcmVuID0gX3RoaXMuZ2V0RmlsdGVyZWRDaGlsZHJlbihwcm9wcy5jaGlsZHJlbik7XG4gICAgdmFyIHNlbGVjdGVkSW5kZXggPSBfdGhpcy5nZXRMYXN0U2VsZWN0ZWRJbmRleChwcm9wcywgZmlsdGVyZWRDaGlsZHJlbik7XG5cbiAgICB2YXIgbmV3Rm9jdXNJbmRleCA9IHByb3BzLmRpc2FibGVBdXRvRm9jdXMgPyAtMSA6IHNlbGVjdGVkSW5kZXggPj0gMCA/IHNlbGVjdGVkSW5kZXggOiAwO1xuICAgIGlmIChuZXdGb2N1c0luZGV4ICE9PSAtMSAmJiBwcm9wcy5vbk1lbnVJdGVtRm9jdXNDaGFuZ2UpIHtcbiAgICAgIHByb3BzLm9uTWVudUl0ZW1Gb2N1c0NoYW5nZShudWxsLCBuZXdGb2N1c0luZGV4KTtcbiAgICB9XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBmb2N1c0luZGV4OiBuZXdGb2N1c0luZGV4LFxuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IHByb3BzLmluaXRpYWxseUtleWJvYXJkRm9jdXNlZCxcbiAgICAgIGtleVdpZHRoOiBwcm9wcy5kZXNrdG9wID8gNjQgOiA1NlxuICAgIH07XG5cbiAgICBfdGhpcy5ob3RLZXlIb2xkZXIgPSBuZXcgX21lbnVVdGlscy5Ib3RLZXlIb2xkZXIoKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShNZW51LCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvV2lkdGgpIHtcbiAgICAgICAgdGhpcy5zZXRXaWR0aCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTY29sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IHZvaWQgMDtcbiAgICAgIHZhciBmaWx0ZXJlZENoaWxkcmVuID0gdGhpcy5nZXRGaWx0ZXJlZENoaWxkcmVuKG5leHRQcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLm11bHRpcGxlICE9PSB0cnVlKSB7XG4gICAgICAgIHNlbGVjdGVkSW5kZXggPSB0aGlzLmdldExhc3RTZWxlY3RlZEluZGV4KG5leHRQcm9wcywgZmlsdGVyZWRDaGlsZHJlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZEluZGV4ID0gdGhpcy5zdGF0ZS5mb2N1c0luZGV4O1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3Rm9jdXNJbmRleCA9IG5leHRQcm9wcy5kaXNhYmxlQXV0b0ZvY3VzID8gLTEgOiBzZWxlY3RlZEluZGV4ID49IDAgPyBzZWxlY3RlZEluZGV4IDogMDtcbiAgICAgIGlmIChuZXdGb2N1c0luZGV4ICE9PSB0aGlzLnN0YXRlLmZvY3VzSW5kZXggJiYgdGhpcy5wcm9wcy5vbk1lbnVJdGVtRm9jdXNDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbk1lbnVJdGVtRm9jdXNDaGFuZ2UobnVsbCwgbmV3Rm9jdXNJbmRleCk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNJbmRleDogbmV3Rm9jdXNJbmRleCxcbiAgICAgICAga2V5V2lkdGg6IG5leHRQcm9wcy5kZXNrdG9wID8gNjQgOiA1NlxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCkge1xuICAgICAgcmV0dXJuICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSkgfHwgISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLmNvbnRleHQsIG5leHRDb250ZXh0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvV2lkdGgpIHRoaXMuc2V0V2lkdGgoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRWYWx1ZUxpbmsnLFxuXG5cbiAgICAvLyBEbyBub3QgdXNlIG91dHNpZGUgb2YgdGhpcyBjb21wb25lbnQsIGl0IHdpbGwgYmUgcmVtb3ZlZCBvbmNlIHZhbHVlTGluayBpcyBkZXByZWNhdGVkXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlTGluayhwcm9wcykge1xuICAgICAgcmV0dXJuIHByb3BzLnZhbHVlTGluayB8fCB7XG4gICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSxcbiAgICAgICAgcmVxdWVzdENoYW5nZTogcHJvcHMub25DaGFuZ2VcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0S2V5Ym9hcmRGb2N1c2VkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0S2V5Ym9hcmRGb2N1c2VkKGtleWJvYXJkRm9jdXNlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkOiBrZXlib2FyZEZvY3VzZWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEZpbHRlcmVkQ2hpbGRyZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWx0ZXJlZENoaWxkcmVuKGNoaWxkcmVuKSB7XG4gICAgICB2YXIgZmlsdGVyZWRDaGlsZHJlbiA9IFtdO1xuICAgICAgX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICBmaWx0ZXJlZENoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmaWx0ZXJlZENoaWxkcmVuO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Nsb25lTWVudUl0ZW0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZU1lbnVJdGVtKGNoaWxkLCBjaGlsZEluZGV4LCBzdHlsZXMsIGluZGV4KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGNoaWxkSXNEaXNhYmxlZCA9IGNoaWxkLnByb3BzLmRpc2FibGVkO1xuXG4gICAgICB2YXIgc2VsZWN0ZWRDaGlsZFN0eWxlcyA9IHt9O1xuICAgICAgaWYgKCFjaGlsZElzRGlzYWJsZWQpIHtcbiAgICAgICAgdmFyIHNlbGVjdGVkID0gdGhpcy5pc0NoaWxkU2VsZWN0ZWQoY2hpbGQsIHRoaXMucHJvcHMpO1xuXG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzZWxlY3RlZENoaWxkU3R5bGVzLCBzdHlsZXMuc2VsZWN0ZWRNZW51SXRlbSwgdGhpcy5wcm9wcy5zZWxlY3RlZE1lbnVJdGVtU3R5bGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgbWVyZ2VkQ2hpbGRTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIGNoaWxkLnByb3BzLnN0eWxlLCB0aGlzLnByb3BzLm1lbnVJdGVtU3R5bGUsIHNlbGVjdGVkQ2hpbGRTdHlsZXMpO1xuXG4gICAgICB2YXIgZXh0cmFQcm9wcyA9IHtcbiAgICAgICAgZGVza3RvcDogdGhpcy5wcm9wcy5kZXNrdG9wLFxuICAgICAgICBzdHlsZTogbWVyZ2VkQ2hpbGRTdHlsZXNcbiAgICAgIH07XG4gICAgICBpZiAoIWNoaWxkSXNEaXNhYmxlZCkge1xuICAgICAgICB2YXIgaXNGb2N1c2VkID0gY2hpbGRJbmRleCA9PT0gdGhpcy5zdGF0ZS5mb2N1c0luZGV4O1xuICAgICAgICB2YXIgZm9jdXNTdGF0ZSA9ICdub25lJztcbiAgICAgICAgaWYgKGlzRm9jdXNlZCkge1xuICAgICAgICAgIGZvY3VzU3RhdGUgPSB0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkID8gJ2tleWJvYXJkLWZvY3VzZWQnIDogJ2ZvY3VzZWQnO1xuICAgICAgICB9XG5cbiAgICAgICAgKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKGV4dHJhUHJvcHMsIHtcbiAgICAgICAgICBmb2N1c1N0YXRlOiBmb2N1c1N0YXRlLFxuICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgICAgIF90aGlzMi5oYW5kbGVNZW51SXRlbUNsaWNrKGV2ZW50LCBjaGlsZCwgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGNoaWxkLnByb3BzLm9uQ2xpY2spIGNoaWxkLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVmOiBpc0ZvY3VzZWQgPyAnZm9jdXNlZE1lbnVJdGVtJyA6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZCwgZXh0cmFQcm9wcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVjcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVjcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4KGV2ZW50KSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLnN0YXRlLmZvY3VzSW5kZXg7XG5cbiAgICAgIGluZGV4LS07XG4gICAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IDA7XG5cbiAgICAgIHRoaXMuc2V0Rm9jdXNJbmRleChldmVudCwgaW5kZXgsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldE1lbnVJdGVtQ291bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNZW51SXRlbUNvdW50KGZpbHRlcmVkQ2hpbGRyZW4pIHtcbiAgICAgIHZhciBtZW51SXRlbUNvdW50ID0gMDtcbiAgICAgIGZpbHRlcmVkQ2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgdmFyIGNoaWxkSXNBRGl2aWRlciA9IGNoaWxkLnR5cGUgJiYgY2hpbGQudHlwZS5tdWlOYW1lID09PSAnRGl2aWRlcic7XG4gICAgICAgIHZhciBjaGlsZElzRGlzYWJsZWQgPSBjaGlsZC5wcm9wcy5kaXNhYmxlZDtcbiAgICAgICAgaWYgKCFjaGlsZElzQURpdmlkZXIgJiYgIWNoaWxkSXNEaXNhYmxlZCkgbWVudUl0ZW1Db3VudCsrO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWVudUl0ZW1Db3VudDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRMYXN0U2VsZWN0ZWRJbmRleCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldExhc3RTZWxlY3RlZEluZGV4KHByb3BzLCBmaWx0ZXJlZENoaWxkcmVuKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgIHZhciBtZW51SXRlbUluZGV4ID0gMDtcblxuICAgICAgZmlsdGVyZWRDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIgY2hpbGRJc0FEaXZpZGVyID0gY2hpbGQudHlwZSAmJiBjaGlsZC50eXBlLm11aU5hbWUgPT09ICdEaXZpZGVyJztcblxuICAgICAgICBpZiAoX3RoaXMzLmlzQ2hpbGRTZWxlY3RlZChjaGlsZCwgcHJvcHMpKSBzZWxlY3RlZEluZGV4ID0gbWVudUl0ZW1JbmRleDtcbiAgICAgICAgaWYgKCFjaGlsZElzQURpdmlkZXIpIG1lbnVJdGVtSW5kZXgrKztcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc2VsZWN0ZWRJbmRleDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRGb2N1c0luZGV4U3RhcnRzV2l0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZvY3VzSW5kZXhTdGFydHNXaXRoKGV2ZW50LCBrZXlzLCBmaWx0ZXJlZENoaWxkcmVuKSB7XG4gICAgICB2YXIgZm91bmRJbmRleCA9IC0xO1xuICAgICAgX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goZmlsdGVyZWRDaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmltYXJ5VGV4dCA9IGNoaWxkLnByb3BzLnByaW1hcnlUZXh0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgcHJpbWFyeVRleHQgPT09ICdzdHJpbmcnICYmIHByaW1hcnlUZXh0LnN1YnN0cigwLCBrZXlzLmxlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0ga2V5cy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgZm91bmRJbmRleCA9IGluZGV4O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChmb3VuZEluZGV4ID49IDApIHtcbiAgICAgICAgdGhpcy5zZXRGb2N1c0luZGV4KGV2ZW50LCBmb3VuZEluZGV4LCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlTWVudUl0ZW1DbGljaycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZU1lbnVJdGVtQ2xpY2soZXZlbnQsIGl0ZW0sIGluZGV4KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgdmFyIG11bHRpcGxlID0gdGhpcy5wcm9wcy5tdWx0aXBsZTtcbiAgICAgIHZhciB2YWx1ZUxpbmsgPSB0aGlzLmdldFZhbHVlTGluayh0aGlzLnByb3BzKTtcbiAgICAgIHZhciBtZW51VmFsdWUgPSB2YWx1ZUxpbmsudmFsdWU7XG4gICAgICB2YXIgaXRlbVZhbHVlID0gaXRlbS5wcm9wcy52YWx1ZTtcbiAgICAgIHZhciBmb2N1c0luZGV4ID0gX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IDAgOiBjaGlsZHJlbi5pbmRleE9mKGl0ZW0pO1xuXG4gICAgICB0aGlzLnNldEZvY3VzSW5kZXgoZXZlbnQsIGZvY3VzSW5kZXgsIGZhbHNlKTtcblxuICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgIG1lbnVWYWx1ZSA9IG1lbnVWYWx1ZSB8fCBbXTtcblxuICAgICAgICB2YXIgaXRlbUluZGV4ID0gbWVudVZhbHVlLmluZGV4T2YoaXRlbVZhbHVlKTtcblxuICAgICAgICB2YXIgX21lbnVWYWx1ZSA9IG1lbnVWYWx1ZSxcbiAgICAgICAgICAgIF9tZW51VmFsdWUyID0gKDAsIF90b0FycmF5My5kZWZhdWx0KShfbWVudVZhbHVlKSxcbiAgICAgICAgICAgIG5ld01lbnVWYWx1ZSA9IF9tZW51VmFsdWUyLnNsaWNlKDApO1xuXG4gICAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgbmV3TWVudVZhbHVlLnB1c2goaXRlbVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdNZW51VmFsdWUuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZUxpbmsucmVxdWVzdENoYW5nZShldmVudCwgbmV3TWVudVZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoIW11bHRpcGxlICYmIGl0ZW1WYWx1ZSAhPT0gbWVudVZhbHVlKSB7XG4gICAgICAgIHZhbHVlTGluay5yZXF1ZXN0Q2hhbmdlKGV2ZW50LCBpdGVtVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnByb3BzLm9uSXRlbUNsaWNrKGV2ZW50LCBpdGVtLCBpbmRleCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5jcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5jcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4KGV2ZW50LCBmaWx0ZXJlZENoaWxkcmVuKSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLnN0YXRlLmZvY3VzSW5kZXg7XG4gICAgICB2YXIgbWF4SW5kZXggPSB0aGlzLmdldE1lbnVJdGVtQ291bnQoZmlsdGVyZWRDaGlsZHJlbikgLSAxO1xuXG4gICAgICBpbmRleCsrO1xuICAgICAgaWYgKGluZGV4ID4gbWF4SW5kZXgpIGluZGV4ID0gbWF4SW5kZXg7XG5cbiAgICAgIHRoaXMuc2V0Rm9jdXNJbmRleChldmVudCwgaW5kZXgsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2lzQ2hpbGRTZWxlY3RlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzQ2hpbGRTZWxlY3RlZChjaGlsZCwgcHJvcHMpIHtcbiAgICAgIHZhciBtZW51VmFsdWUgPSB0aGlzLmdldFZhbHVlTGluayhwcm9wcykudmFsdWU7XG4gICAgICB2YXIgY2hpbGRWYWx1ZSA9IGNoaWxkLnByb3BzLnZhbHVlO1xuXG4gICAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgcmV0dXJuIG1lbnVWYWx1ZSAmJiBtZW51VmFsdWUubGVuZ3RoICYmIG1lbnVWYWx1ZS5pbmRleE9mKGNoaWxkVmFsdWUpICE9PSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjaGlsZC5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSAmJiBtZW51VmFsdWUgPT09IGNoaWxkVmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Rm9jdXNJbmRleCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZvY3VzSW5kZXgoZXZlbnQsIG5ld0luZGV4LCBpc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMub25NZW51SXRlbUZvY3VzQ2hhbmdlKSB7XG4gICAgICAgIC8vIERvIHRoaXMgZXZlbiBpZiBgbmV3SW5kZXggPT09IHRoaXMuc3RhdGUuZm9jdXNJbmRleGAgdG8gYWxsb3cgdXNlcnNcbiAgICAgICAgLy8gdG8gZGV0ZWN0IHVwLWFycm93IG9uIHRoZSBmaXJzdCBNZW51SXRlbSBvciBkb3duLWFycm93IG9uIHRoZSBsYXN0LlxuICAgICAgICB0aGlzLnByb3BzLm9uTWVudUl0ZW1Gb2N1c0NoYW5nZShldmVudCwgbmV3SW5kZXgpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzSW5kZXg6IG5ld0luZGV4LFxuICAgICAgICBpc0tleWJvYXJkRm9jdXNlZDogaXNLZXlib2FyZEZvY3VzZWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFNjb2xsUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTY29sbFBvc2l0aW9uKCkge1xuICAgICAgdmFyIGRlc2t0b3AgPSB0aGlzLnByb3BzLmRlc2t0b3A7XG4gICAgICB2YXIgZm9jdXNlZE1lbnVJdGVtID0gdGhpcy5yZWZzLmZvY3VzZWRNZW51SXRlbTtcbiAgICAgIHZhciBtZW51SXRlbUhlaWdodCA9IGRlc2t0b3AgPyAzMiA6IDQ4O1xuXG4gICAgICBpZiAoZm9jdXNlZE1lbnVJdGVtKSB7XG4gICAgICAgIHZhciBzZWxlY3RlZE9mZlNldCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShmb2N1c2VkTWVudUl0ZW0pLm9mZnNldFRvcDtcblxuICAgICAgICAvLyBNYWtlIHRoZSBmb2N1c2VkIGl0ZW0gYmUgdGhlIDJuZCBpdGVtIGluIHRoZSBsaXN0IHRoZSB1c2VyIHNlZXNcbiAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHNlbGVjdGVkT2ZmU2V0IC0gbWVudUl0ZW1IZWlnaHQ7XG4gICAgICAgIGlmIChzY3JvbGxUb3AgPCBtZW51SXRlbUhlaWdodCkgc2Nyb2xsVG9wID0gMDtcblxuICAgICAgICBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy5yZWZzLnNjcm9sbENvbnRhaW5lcikuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NhbmNlbFNjcm9sbEV2ZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsU2Nyb2xsRXZlbnQoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRXaWR0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFdpZHRoKCkge1xuICAgICAgdmFyIGVsID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgdmFyIGxpc3RFbCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMubGlzdCk7XG4gICAgICB2YXIgZWxXaWR0aCA9IGVsLm9mZnNldFdpZHRoO1xuICAgICAgdmFyIGtleVdpZHRoID0gdGhpcy5zdGF0ZS5rZXlXaWR0aDtcbiAgICAgIHZhciBtaW5XaWR0aCA9IGtleVdpZHRoICogMS41O1xuICAgICAgdmFyIGtleUluY3JlbWVudHMgPSBlbFdpZHRoIC8ga2V5V2lkdGg7XG4gICAgICB2YXIgbmV3V2lkdGggPSB2b2lkIDA7XG5cbiAgICAgIGtleUluY3JlbWVudHMgPSBrZXlJbmNyZW1lbnRzIDw9IDEuNSA/IDEuNSA6IE1hdGguY2VpbChrZXlJbmNyZW1lbnRzKTtcbiAgICAgIG5ld1dpZHRoID0ga2V5SW5jcmVtZW50cyAqIGtleVdpZHRoO1xuXG4gICAgICBpZiAobmV3V2lkdGggPCBtaW5XaWR0aCkgbmV3V2lkdGggPSBtaW5XaWR0aDtcblxuICAgICAgZWwuc3R5bGUud2lkdGggPSBuZXdXaWR0aCArICdweCc7XG4gICAgICBsaXN0RWwuc3R5bGUud2lkdGggPSBuZXdXaWR0aCArICdweCc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGF1dG9XaWR0aCA9IF9wcm9wcy5hdXRvV2lkdGgsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgZGVza3RvcCA9IF9wcm9wcy5kZXNrdG9wLFxuICAgICAgICAgIGRpc2FibGVBdXRvRm9jdXMgPSBfcHJvcHMuZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgICAgICBpbml0aWFsbHlLZXlib2FyZEZvY3VzZWQgPSBfcHJvcHMuaW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkLFxuICAgICAgICAgIGxpc3RTdHlsZSA9IF9wcm9wcy5saXN0U3R5bGUsXG4gICAgICAgICAgbWF4SGVpZ2h0ID0gX3Byb3BzLm1heEhlaWdodCxcbiAgICAgICAgICBtdWx0aXBsZSA9IF9wcm9wcy5tdWx0aXBsZSxcbiAgICAgICAgICBvbkl0ZW1DbGljayA9IF9wcm9wcy5vbkl0ZW1DbGljayxcbiAgICAgICAgICBvbkVzY0tleURvd24gPSBfcHJvcHMub25Fc2NLZXlEb3duLFxuICAgICAgICAgIG9uTWVudUl0ZW1Gb2N1c0NoYW5nZSA9IF9wcm9wcy5vbk1lbnVJdGVtRm9jdXNDaGFuZ2UsXG4gICAgICAgICAgc2VsZWN0ZWRNZW51SXRlbVN0eWxlID0gX3Byb3BzLnNlbGVjdGVkTWVudUl0ZW1TdHlsZSxcbiAgICAgICAgICBtZW51SXRlbVN0eWxlID0gX3Byb3BzLm1lbnVJdGVtU3R5bGUsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdmFsdWUgPSBfcHJvcHMudmFsdWUsXG4gICAgICAgICAgdmFsdWVMaW5rID0gX3Byb3BzLnZhbHVlTGluayxcbiAgICAgICAgICB3aWR0aCA9IF9wcm9wcy53aWR0aCxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wcywgWydhdXRvV2lkdGgnLCAnY2hpbGRyZW4nLCAnZGVza3RvcCcsICdkaXNhYmxlQXV0b0ZvY3VzJywgJ2luaXRpYWxseUtleWJvYXJkRm9jdXNlZCcsICdsaXN0U3R5bGUnLCAnbWF4SGVpZ2h0JywgJ211bHRpcGxlJywgJ29uSXRlbUNsaWNrJywgJ29uRXNjS2V5RG93bicsICdvbk1lbnVJdGVtRm9jdXNDaGFuZ2UnLCAnc2VsZWN0ZWRNZW51SXRlbVN0eWxlJywgJ21lbnVJdGVtU3R5bGUnLCAnc3R5bGUnLCAndmFsdWUnLCAndmFsdWVMaW5rJywgJ3dpZHRoJ10pO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuICAgICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpO1xuXG4gICAgICB2YXIgbWVyZ2VkUm9vdFN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpO1xuICAgICAgdmFyIG1lcmdlZExpc3RTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLmxpc3QsIGxpc3RTdHlsZSk7XG5cbiAgICAgIHZhciBmaWx0ZXJlZENoaWxkcmVuID0gdGhpcy5nZXRGaWx0ZXJlZENoaWxkcmVuKGNoaWxkcmVuKTtcblxuICAgICAgdmFyIG1lbnVJdGVtSW5kZXggPSAwO1xuICAgICAgdmFyIG5ld0NoaWxkcmVuID0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm1hcChmaWx0ZXJlZENoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICAgIHZhciBjaGlsZElzRGlzYWJsZWQgPSBjaGlsZC5wcm9wcy5kaXNhYmxlZDtcbiAgICAgICAgdmFyIGNoaWxkTmFtZSA9IGNoaWxkLnR5cGUgPyBjaGlsZC50eXBlLm11aU5hbWUgOiAnJztcbiAgICAgICAgdmFyIG5ld0NoaWxkID0gY2hpbGQ7XG5cbiAgICAgICAgc3dpdGNoIChjaGlsZE5hbWUpIHtcbiAgICAgICAgICBjYXNlICdNZW51SXRlbSc6XG4gICAgICAgICAgICBuZXdDaGlsZCA9IF90aGlzNC5jbG9uZU1lbnVJdGVtKGNoaWxkLCBtZW51SXRlbUluZGV4LCBzdHlsZXMsIGluZGV4KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnRGl2aWRlcic6XG4gICAgICAgICAgICBuZXdDaGlsZCA9IF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmRpdmlkZXIsIGNoaWxkLnByb3BzLnN0eWxlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGlsZE5hbWUgPT09ICdNZW51SXRlbScgJiYgIWNoaWxkSXNEaXNhYmxlZCkge1xuICAgICAgICAgIG1lbnVJdGVtSW5kZXgrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdDaGlsZDtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9DbGlja0F3YXlMaXN0ZW5lcjIuZGVmYXVsdCxcbiAgICAgICAgeyBvbkNsaWNrQXdheTogdGhpcy5oYW5kbGVDbGlja0F3YXkgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgb25LZXlEb3duOiB0aGlzLmhhbmRsZUtleURvd24sXG4gICAgICAgICAgICBvbldoZWVsOiB0aGlzLmhhbmRsZU9uV2hlZWwsXG4gICAgICAgICAgICBzdHlsZTogcHJlcGFyZVN0eWxlcyhtZXJnZWRSb290U3R5bGVzKSxcbiAgICAgICAgICAgIHJlZjogJ3Njcm9sbENvbnRhaW5lcicsXG4gICAgICAgICAgICByb2xlOiAncHJlc2VudGF0aW9uJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBfTGlzdDIuZGVmYXVsdCxcbiAgICAgICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCB7XG4gICAgICAgICAgICAgIHJlZjogJ2xpc3QnLFxuICAgICAgICAgICAgICBzdHlsZTogbWVyZ2VkTGlzdFN0eWxlcyxcbiAgICAgICAgICAgICAgcm9sZTogJ21lbnUnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ld0NoaWxkcmVuXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTWVudTtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbk1lbnUuZGVmYXVsdFByb3BzID0ge1xuICBhdXRvV2lkdGg6IHRydWUsXG4gIGRlc2t0b3A6IGZhbHNlLFxuICBkaXNhYmxlQXV0b0ZvY3VzOiBmYWxzZSxcbiAgaW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSxcbiAgbWF4SGVpZ2h0OiBudWxsLFxuICBtdWx0aXBsZTogZmFsc2UsXG4gIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSgpIHt9LFxuICBvbkVzY0tleURvd246IGZ1bmN0aW9uIG9uRXNjS2V5RG93bigpIHt9LFxuICBvbkl0ZW1DbGljazogZnVuY3Rpb24gb25JdGVtQ2xpY2soKSB7fSxcbiAgb25LZXlEb3duOiBmdW5jdGlvbiBvbktleURvd24oKSB7fVxufTtcbk1lbnUuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICB0aGlzLmhhbmRsZUNsaWNrQXdheSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGZvY3VzSW5kZXggPSBfdGhpczUuc3RhdGUuZm9jdXNJbmRleDtcblxuICAgIGlmIChmb2N1c0luZGV4IDwgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBmaWx0ZXJlZENoaWxkcmVuID0gX3RoaXM1LmdldEZpbHRlcmVkQ2hpbGRyZW4oX3RoaXM1LnByb3BzLmNoaWxkcmVuKTtcbiAgICB2YXIgZm9jdXNlZEl0ZW0gPSBmaWx0ZXJlZENoaWxkcmVuW2ZvY3VzSW5kZXhdO1xuICAgIGlmICghIWZvY3VzZWRJdGVtICYmIGZvY3VzZWRJdGVtLnByb3BzLm1lbnVJdGVtcyAmJiBmb2N1c2VkSXRlbS5wcm9wcy5tZW51SXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF90aGlzNS5zZXRGb2N1c0luZGV4KGV2ZW50LCAtMSwgZmFsc2UpO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBmaWx0ZXJlZENoaWxkcmVuID0gX3RoaXM1LmdldEZpbHRlcmVkQ2hpbGRyZW4oX3RoaXM1LnByb3BzLmNoaWxkcmVuKTtcbiAgICB2YXIga2V5ID0gKDAsIF9rZXljb2RlMi5kZWZhdWx0KShldmVudCk7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ2Rvd24nOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpczUuaW5jcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4KGV2ZW50LCBmaWx0ZXJlZENoaWxkcmVuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdlc2MnOlxuICAgICAgICBfdGhpczUucHJvcHMub25Fc2NLZXlEb3duKGV2ZW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0YWInOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICBfdGhpczUuZGVjcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4KGV2ZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczUuaW5jcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4KGV2ZW50LCBmaWx0ZXJlZENoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXM1LmRlY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleChldmVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGtleSAmJiBrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgdmFyIGhvdEtleXMgPSBfdGhpczUuaG90S2V5SG9sZGVyLmFwcGVuZChrZXkpO1xuICAgICAgICAgIGlmIChfdGhpczUuc2V0Rm9jdXNJbmRleFN0YXJ0c1dpdGgoZXZlbnQsIGhvdEtleXMsIGZpbHRlcmVkQ2hpbGRyZW4pKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfdGhpczUucHJvcHMub25LZXlEb3duKGV2ZW50KTtcbiAgfTtcblxuICB0aGlzLmhhbmRsZU9uV2hlZWwgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgc2Nyb2xsQ29udGFpbmVyID0gX3RoaXM1LnJlZnMuc2Nyb2xsQ29udGFpbmVyO1xuICAgIC8vIE9ubHkgc2Nyb2xsIGxvY2sgaWYgdGhlIHRoZSBNZW51IGlzIHNjcm9sbGFibGUuXG4gICAgaWYgKHNjcm9sbENvbnRhaW5lci5zY3JvbGxIZWlnaHQgPD0gc2Nyb2xsQ29udGFpbmVyLmNsaWVudEhlaWdodCkgcmV0dXJuO1xuXG4gICAgdmFyIHNjcm9sbFRvcCA9IHNjcm9sbENvbnRhaW5lci5zY3JvbGxUb3AsXG4gICAgICAgIHNjcm9sbEhlaWdodCA9IHNjcm9sbENvbnRhaW5lci5zY3JvbGxIZWlnaHQsXG4gICAgICAgIGNsaWVudEhlaWdodCA9IHNjcm9sbENvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG5cbiAgICB2YXIgd2hlZWxEZWx0YSA9IGV2ZW50LmRlbHRhWTtcbiAgICB2YXIgaXNEZWx0YVBvc2l0aXZlID0gd2hlZWxEZWx0YSA+IDA7XG5cbiAgICBpZiAoaXNEZWx0YVBvc2l0aXZlICYmIHdoZWVsRGVsdGEgPiBzY3JvbGxIZWlnaHQgLSBjbGllbnRIZWlnaHQgLSBzY3JvbGxUb3ApIHtcbiAgICAgIHNjcm9sbENvbnRhaW5lci5zY3JvbGxUb3AgPSBzY3JvbGxIZWlnaHQ7XG4gICAgICByZXR1cm4gX3RoaXM1LmNhbmNlbFNjcm9sbEV2ZW50KGV2ZW50KTtcbiAgICB9IGVsc2UgaWYgKCFpc0RlbHRhUG9zaXRpdmUgJiYgLXdoZWVsRGVsdGEgPiBzY3JvbGxUb3ApIHtcbiAgICAgIHNjcm9sbENvbnRhaW5lci5zY3JvbGxUb3AgPSAwO1xuICAgICAgcmV0dXJuIF90aGlzNS5jYW5jZWxTY3JvbGxFdmVudChldmVudCk7XG4gICAgfVxuICB9O1xufTtcblxuTWVudS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgd2lkdGggb2YgdGhlIG1lbnUgd2lsbCBiZSBzZXQgYXV0b21hdGljYWxseVxuICAgKiBhY2NvcmRpbmcgdG8gdGhlIHdpZHRocyBvZiBpdHMgY2hpbGRyZW4sXG4gICAqIHVzaW5nIHByb3BlciBrZXlsaW5lIGluY3JlbWVudHMgKDY0cHggZm9yIGRlc2t0b3AsXG4gICAqIDU2cHggb3RoZXJ3aXNlKS5cbiAgICovXG4gIGF1dG9XaWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lbnUuIFRoaXMgaXMgdXN1YWxseSB1c2VkIHRvIHBhc3MgYE1lbnVJdGVtYFxuICAgKiBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgbWVudSBpdGVtIHdpbGwgcmVuZGVyIHdpdGggY29tcGFjdCBkZXNrdG9wIHN0eWxlcy5cbiAgICovXG4gIGRlc2t0b3A6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBtZW51IHdpbGwgbm90IGJlIGF1dG8tZm9jdXNlZC5cbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBtZW51IHdpbGwgYmUga2V5Ym9hcmQtZm9jdXNlZCBpbml0aWFsbHkuXG4gICAqL1xuICBpbml0aWFsbHlLZXlib2FyZEZvY3VzZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSB1bmRlcmx5aW5nIGBMaXN0YCBlbGVtZW50LlxuICAgKi9cbiAgbGlzdFN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGhlaWdodCBvZiB0aGUgbWVudSBpbiBwaXhlbHMuIElmIHNwZWNpZmllZCxcbiAgICogdGhlIG1lbnUgd2lsbCBiZSBzY3JvbGxhYmxlIGlmIGl0IGlzIHRhbGxlciB0aGFuIHRoZSBwcm92aWRlZFxuICAgKiBoZWlnaHQuXG4gICAqL1xuICBtYXhIZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgbWVudSBpdGVtcy5cbiAgICovXG4gIG1lbnVJdGVtU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogSWYgdHJ1ZSwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnRcbiAgICogbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICovXG4gIG11bHRpcGxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIHdpdGggYHZhbHVlYCBub3RcbiAgICogZXF1YWwgdG8gdGhlIGN1cnJlbnQgYHZhbHVlYCBvZiB0aGUgbWVudSBpcyBjbGlja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQ2xpY2sgZXZlbnQgdGFyZ2V0aW5nIHRoZSBtZW51IGl0ZW0uXG4gICAqIEBwYXJhbSB7YW55fSAgdmFsdWUgSWYgYG11bHRpcGxlYCBpcyB0cnVlLCB0aGUgbWVudSdzIGB2YWx1ZWBcbiAgICogYXJyYXkgd2l0aCBlaXRoZXIgdGhlIG1lbnUgaXRlbSdzIGB2YWx1ZWAgYWRkZWQgKGlmXG4gICAqIGl0IHdhc24ndCBhbHJlYWR5IHNlbGVjdGVkKSBvciBvbWl0dGVkIChpZiBpdCB3YXMgYWxyZWFkeSBzZWxlY3RlZCkuXG4gICAqIE90aGVyd2lzZSwgdGhlIGB2YWx1ZWAgb2YgdGhlIG1lbnUgaXRlbS5cbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBtZW51IGlzIGZvY3VzZWQgYW5kIHRoZSAqRXNjKiBrZXlcbiAgICogaXMgcHJlc3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IGBrZXlkb3duYCBldmVudCB0YXJnZXRpbmcgdGhlIG1lbnUuXG4gICAqL1xuICBvbkVzY0tleURvd246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgY2xpY2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IENsaWNrIGV2ZW50IHRhcmdldGluZyB0aGUgbWVudSBpdGVtLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbWVudUl0ZW0gVGhlIG1lbnUgaXRlbS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgbWVudSBpdGVtLlxuICAgKi9cbiAgb25JdGVtQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25LZXlEb3duOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBmb2N1cyBvbiBhIGBNZW51SXRlbWAgaXMgY2hhbmdlZC5cbiAgICogVGhlcmUgd2lsbCBiZSBzb21lIFwiZHVwbGljYXRlXCIgY2hhbmdlcyByZXBvcnRlZCBpZiB0d28gZGlmZmVyZW50XG4gICAqIGZvY3VzaW5nIGV2ZW50IGhhcHBlbiwgZm9yIGV4YW1wbGUgaWYgYSBgTWVudUl0ZW1gIGlzIGZvY3VzZWQgdmlhXG4gICAqIHRoZSBrZXlib2FyZCBhbmQgdGhlbiBpdCBpcyBjbGlja2VkIG9uLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBmb2N1cyBjaGFuZ2UuXG4gICAqIFRoZSBldmVudCBjYW4gYmUgbnVsbCBzaW5jZSB0aGUgZm9jdXMgY2FuIGJlIGNoYW5nZWQgZm9yIG5vbi1ldmVudFxuICAgKiByZWFzb25zIHN1Y2ggYXMgcHJvcCBjaGFuZ2VzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbmV3Rm9jdXNJbmRleCBUaGUgaW5kZXggb2YgdGhlIG5ld2x5IGZvY3VzZWRcbiAgICogYE1lbnVJdGVtYCBvciBgLTFgIGlmIGZvY3VzIHdhcyBsb3N0LlxuICAgKi9cbiAgb25NZW51SXRlbUZvY3VzQ2hhbmdlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiBzZWxlY3RlZCBtZW51IGl0ZW1zLlxuICAgKi9cbiAgc2VsZWN0ZWRNZW51SXRlbVN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiBgbXVsdGlwbGVgIGlzIHRydWUsIGFuIGFycmF5IG9mIHRoZSBgdmFsdWVgcyBvZiB0aGUgc2VsZWN0ZWRcbiAgICogbWVudSBpdGVtcy4gT3RoZXJ3aXNlLCB0aGUgYHZhbHVlYCBvZiB0aGUgc2VsZWN0ZWQgbWVudSBpdGVtLlxuICAgKiBJZiBwcm92aWRlZCwgdGhlIG1lbnUgd2lsbCBiZSBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKiBUaGlzIGNvbXBvbmVudCBhbHNvIHN1cHBvcnRzIHZhbHVlTGluay5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgLyoqXG4gICAqIFZhbHVlTGluayBmb3IgdGhlIG1lbnUncyBgdmFsdWVgLlxuICAgKi9cbiAgdmFsdWVMaW5rOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgbWVudS4gSWYgbm90IHNwZWNpZmllZCwgdGhlIG1lbnUncyB3aWR0aFxuICAgKiB3aWxsIGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIHdpZHRocyBvZiBpdHMgY2hpbGRyZW4sIHVzaW5nXG4gICAqIHByb3BlciBrZXlsaW5lIGluY3JlbWVudHMgKDY0cHggZm9yIGRlc2t0b3AsIDU2cHggb3RoZXJ3aXNlKS5cbiAgICovXG4gIHdpZHRoOiBfcHJvcFR5cGVzNC5kZWZhdWx0LnN0cmluZ09yTnVtYmVyXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBNZW51OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHlwaGVuYXRlUHJvcGVydHk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGVOYW1lID0gcmVxdWlyZSgnaHlwaGVuYXRlLXN0eWxlLW5hbWUnKTtcblxudmFyIF9oeXBoZW5hdGVTdHlsZU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHlwaGVuYXRlU3R5bGVOYW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaHlwaGVuYXRlUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcmV0dXJuICgwLCBfaHlwaGVuYXRlU3R5bGVOYW1lMi5kZWZhdWx0KShwcm9wZXJ0eSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzT2JqZWN0O1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBhZGROZXdWYWx1ZXNPbmx5O1xuZnVuY3Rpb24gYWRkSWZOZXcobGlzdCwgdmFsdWUpIHtcbiAgaWYgKGxpc3QuaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgbGlzdC5wdXNoKHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGROZXdWYWx1ZXNPbmx5KGxpc3QsIHZhbHVlcykge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbHVlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgYWRkSWZOZXcobGlzdCwgdmFsdWVzW2ldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWRkSWZOZXcobGlzdCwgdmFsdWVzKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHByZWZpeFZhbHVlO1xuZnVuY3Rpb24gcHJlZml4VmFsdWUocGx1Z2lucywgcHJvcGVydHksIHZhbHVlLCBzdHlsZSwgbWV0YURhdGEpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBsdWdpbnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgcHJvY2Vzc2VkVmFsdWUgPSBwbHVnaW5zW2ldKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIG1ldGFEYXRhKTtcblxuICAgIC8vIHdlIGNhbiBzdG9wIHByb2Nlc3NpbmcgaWYgYSB2YWx1ZSBpcyByZXR1cm5lZFxuICAgIC8vIGFzIGFsbCBwbHVnaW4gY3JpdGVyaWEgYXJlIHVuaXF1ZVxuICAgIGlmIChwcm9jZXNzZWRWYWx1ZSkge1xuICAgICAgcmV0dXJuIHByb2Nlc3NlZFZhbHVlO1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb21cIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9mcm9tID0gcmVxdWlyZShcIi4uL2NvcmUtanMvYXJyYXkvZnJvbVwiKTtcblxudmFyIF9mcm9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zyb20pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoMCwgX2Zyb20yLmRlZmF1bHQpKGFycik7XG4gIH1cbn07IiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjYW5Vc2VET00gPSBleHBvcnRzLmNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbnZhciBhZGRFdmVudExpc3RlbmVyID0gZXhwb3J0cy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG52YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIGdldENvbmZpcm1hdGlvbiA9IGV4cG9ydHMuZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbnZhciBzdXBwb3J0c0hpc3RvcnkgPSBleHBvcnRzLnN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG52YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGV4cG9ydHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbnZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGV4cG9ydHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbnZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZXhwb3J0cy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX01lbnVJdGVtID0gcmVxdWlyZSgnLi9NZW51SXRlbScpO1xuXG52YXIgX01lbnVJdGVtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01lbnVJdGVtKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX01lbnVJdGVtMi5kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9nZXRNdWlUaGVtZSA9IHJlcXVpcmUoJy4vZ2V0TXVpVGhlbWUnKTtcblxudmFyIF9nZXRNdWlUaGVtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRNdWlUaGVtZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBNdWlUaGVtZVByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoTXVpVGhlbWVQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTXVpVGhlbWVQcm92aWRlcigpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBNdWlUaGVtZVByb3ZpZGVyKTtcbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoTXVpVGhlbWVQcm92aWRlci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTXVpVGhlbWVQcm92aWRlcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoTXVpVGhlbWVQcm92aWRlciwgW3tcbiAgICBrZXk6ICdnZXRDaGlsZENvbnRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtdWlUaGVtZTogdGhpcy5wcm9wcy5tdWlUaGVtZSB8fCAoMCwgX2dldE11aVRoZW1lMi5kZWZhdWx0KSgpXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTXVpVGhlbWVQcm92aWRlcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbk11aVRoZW1lUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuTXVpVGhlbWVQcm92aWRlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gTXVpVGhlbWVQcm92aWRlcjsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAgIChnbG9iYWwuaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBcbiAgICB2YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICAgICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICAgICAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gICAgICAgIG1peGluczogdHJ1ZSxcbiAgICAgICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgICAgICB0eXBlOiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgS05PV05fU1RBVElDUyA9IHtcbiAgICAgICAgbmFtZTogdHJ1ZSxcbiAgICAgICAgbGVuZ3RoOiB0cnVlLFxuICAgICAgICBwcm90b3R5cGU6IHRydWUsXG4gICAgICAgIGNhbGxlcjogdHJ1ZSxcbiAgICAgICAgY2FsbGVlOiB0cnVlLFxuICAgICAgICBhcmd1bWVudHM6IHRydWUsXG4gICAgICAgIGFyaXR5OiB0cnVlXG4gICAgfTtcbiAgICBcbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gICAgdmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICB2YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gICAgdmFyIG9iamVjdFByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mICYmIGdldFByb3RvdHlwZU9mKE9iamVjdCk7XG4gICAgXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5XSAmJiAhS05PV05fU1RBVElDU1trZXldICYmICghYmxhY2tsaXN0IHx8ICFibGFja2xpc3Rba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICAgIH07XG59KSkpO1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cbnZhciBjcmVhdGVNZW1vcnlIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGdldFVzZXJDb25maXJtYXRpb24gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdW5kZWZpbmVkID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IF9QYXRoVXRpbHMuY3JlYXRlUGF0aDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbnZhciBfRE9NVXRpbHMgPSByZXF1aXJlKCcuL0RPTVV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyAoMCwgX1BhdGhVdGlscy5zdHJpcExlYWRpbmdTbGFzaCkocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKF9ET01VdGlscy5jYW5Vc2VET00sICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gKDAsIF9ET01VdGlscy5zdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCkoKTtcblxuICB2YXIgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IF9ET01VdGlscy5nZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBwcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB1bmRlZmluZWQgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gKDAsIF9QYXRoVXRpbHMuc3RyaXBUcmFpbGluZ1NsYXNoKSgoMCwgX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gpKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghYmFzZW5hbWUgfHwgKDAsIF9QYXRoVXRpbHMuaGFzQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcEJhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgKDAsIF9Mb2NhdGlvblV0aWxzLmxvY2F0aW9uc0FyZUVxdWFsKShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaW5pdGlhbExvY2F0aW9uKV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShoaXN0b3J5LmxvY2F0aW9uKSk7XG5cbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpO1xuXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlSGFzaEhpc3Rvcnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKF9ET01VdGlscy5jYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNIaXN0b3J5KSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhKDAsIF9ET01VdGlscy5zdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IF9ET01VdGlscy5nZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyAoMCwgX1BhdGhVdGlscy5zdHJpcFRyYWlsaW5nU2xhc2gpKCgwLCBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaCkocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghYmFzZW5hbWUgfHwgKDAsIF9QYXRoVXRpbHMuaGFzQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcEJhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKCgwLCBfRE9NVXRpbHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCkoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogJy8nLFxuICAgICAgdXJsOiAnLycsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09ICcvJ1xuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGhpc3RvcnkgPSBfcHJvcHMuaGlzdG9yeTtcblxuXG4gICAgaW52YXJpYW50KGNoaWxkcmVuID09IG51bGwgfHwgUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAxLCAnQSA8Um91dGVyPiBtYXkgaGF2ZSBvbmx5IG9uZSBjaGlsZCBlbGVtZW50Jyk7XG5cbiAgICAvLyBEbyB0aGlzIGhlcmUgc28gd2UgY2FuIHNldFN0YXRlIHdoZW4gYSA8UmVkaXJlY3Q+IGNoYW5nZXMgdGhlXG4gICAgLy8gbG9jYXRpb24gaW4gY29tcG9uZW50V2lsbE1vdW50LiBUaGlzIGhhcHBlbnMgZS5nLiB3aGVuIGRvaW5nXG4gICAgLy8gc2VydmVyIHJlbmRlcmluZyB1c2luZyBhIDxTdGF0aWNSb3V0ZXI+LlxuICAgIHRoaXMudW5saXN0ZW4gPSBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICBtYXRjaDogX3RoaXMyLmNvbXB1dGVNYXRjaChoaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKHRoaXMucHJvcHMuaGlzdG9yeSA9PT0gbmV4dFByb3BzLmhpc3RvcnksICdZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+Jyk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgcmV0dXJuIGNoaWxkcmVuID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuUm91dGVyLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZXIgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1JvdXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlSGlzdG9yeSBmcm9tICdoaXN0b3J5L2NyZWF0ZUJyb3dzZXJIaXN0b3J5JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCcm93c2VyUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclJvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlSGlzdG9yeSBmcm9tICdoaXN0b3J5L2NyZWF0ZUhhc2hIaXN0b3J5JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGFzaFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoWydoYXNoYmFuZycsICdub3NsYXNoJywgJ3NsYXNoJ10pLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgSGFzaFJvdXRlcjsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbnZhciBpc01vZGlmaWVkRXZlbnQgPSBmdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxudmFyIExpbmsgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTGluaywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGluaygpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmspO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DbGljaykgX3RoaXMucHJvcHMub25DbGljayhldmVudCk7XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgLy8gaWdub3JlIHJpZ2h0IGNsaWNrc1xuICAgICAgIV90aGlzLnByb3BzLnRhcmdldCAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICB2YXIgaGlzdG9yeSA9IF90aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICAgIHJlcGxhY2UgPSBfdGhpcyRwcm9wcy5yZXBsYWNlLFxuICAgICAgICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvO1xuXG5cbiAgICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIExpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmVwbGFjZSA9IF9wcm9wcy5yZXBsYWNlLFxuICAgICAgICB0byA9IF9wcm9wcy50byxcbiAgICAgICAgaW5uZXJSZWYgPSBfcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydyZXBsYWNlJywgJ3RvJywgJ2lubmVyUmVmJ10pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICB2YXIgaHJlZiA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeS5jcmVhdGVIcmVmKHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB7IHBhdGhuYW1lOiB0byB9IDogdG8pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2EnLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgb25DbGljazogdGhpcy5oYW5kbGVDbGljaywgaHJlZjogaHJlZiwgcmVmOiBpbm5lclJlZiB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpbms7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpbmsucHJvcFR5cGVzID0ge1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmNdKVxufTtcbkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICByZXBsYWNlOiBmYWxzZVxufTtcbkxpbmsuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY3JlYXRlSHJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjcmVhdGVIaXN0b3J5IGZyb20gJ2hpc3RvcnkvY3JlYXRlTWVtb3J5SGlzdG9yeSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbW9yeVJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5cbnZhciBwYXR0ZXJuQ2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbnZhciBjb21waWxlUGF0aCA9IGZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdHRlcm4sIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlS2V5ID0gJycgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBjYWNoZSA9IHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gfHwgKHBhdHRlcm5DYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKGNhY2hlW3BhdHRlcm5dKSByZXR1cm4gY2FjaGVbcGF0dGVybl07XG5cbiAgdmFyIGtleXMgPSBbXTtcbiAgdmFyIHJlID0gcGF0aFRvUmVnZXhwKHBhdHRlcm4sIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgY29tcGlsZWRQYXR0ZXJuID0geyByZTogcmUsIGtleXM6IGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXR0ZXJuXSA9IGNvbXBpbGVkUGF0dGVybjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gY29tcGlsZWRQYXR0ZXJuO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGggcGF0dGVybi5cbiAqL1xudmFyIG1hdGNoUGF0aCA9IGZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIHBhdGggPSBfb3B0aW9ucyRwYXRoID09PSB1bmRlZmluZWQgPyAnLycgOiBfb3B0aW9ucyRwYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcblxuICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgocGF0aCwgeyBlbmQ6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSksXG4gICAgICByZSA9IF9jb21waWxlUGF0aC5yZSxcbiAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICB2YXIgbWF0Y2ggPSByZS5leGVjKHBhdGhuYW1lKTtcblxuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcblxuICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcblxuICByZXR1cm4ge1xuICAgIHBhdGg6IHBhdGgsIC8vIHRoZSBwYXRoIHBhdHRlcm4gdXNlZCB0byBtYXRjaFxuICAgIHVybDogcGF0aCA9PT0gJy8nICYmIHVybCA9PT0gJycgPyAnLycgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgIGlzRXhhY3Q6IGlzRXhhY3QsIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIHt9KVxuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBtYXRjaFBhdGggZnJvbSAnLi9tYXRjaFBhdGgnO1xuXG52YXIgaXNFbXB0eUNoaWxkcmVuID0gZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxudmFyIFJvdXRlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMsIF90aGlzLmNvbnRleHQucm91dGVyKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGUucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGUubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2goX3JlZiwgcm91dGVyKSB7XG4gICAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgICAgcGF0aCA9IF9yZWYucGF0aCxcbiAgICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmU7XG5cbiAgICBpZiAoY29tcHV0ZWRNYXRjaCkgcmV0dXJuIGNvbXB1dGVkTWF0Y2g7IC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuXG4gICAgaW52YXJpYW50KHJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG9yIHdpdGhSb3V0ZXIoKSBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIHZhciByb3V0ZSA9IHJvdXRlci5yb3V0ZTtcblxuICAgIHZhciBwYXRobmFtZSA9IChsb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbikucGF0aG5hbWU7XG5cbiAgICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChwYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBzdHJpY3Q6IHN0cmljdCwgZXhhY3Q6IGV4YWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSA6IHJvdXRlLm1hdGNoO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZCcpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJyk7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5yZW5kZXIgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWQnKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbWF0Y2g6IHRoaXMuY29tcHV0ZU1hdGNoKG5leHRQcm9wcywgbmV4dENvbnRleHQucm91dGVyKVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIG1hdGNoID0gdGhpcy5zdGF0ZS5tYXRjaDtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnQsXG4gICAgICAgIHJlbmRlciA9IF9wcm9wcy5yZW5kZXI7XG4gICAgdmFyIF9jb250ZXh0JHJvdXRlciA9IHRoaXMuY29udGV4dC5yb3V0ZXIsXG4gICAgICAgIGhpc3RvcnkgPSBfY29udGV4dCRyb3V0ZXIuaGlzdG9yeSxcbiAgICAgICAgcm91dGUgPSBfY29udGV4dCRyb3V0ZXIucm91dGUsXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBfY29udGV4dCRyb3V0ZXIuc3RhdGljQ29udGV4dDtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG4gICAgdmFyIHByb3BzID0geyBtYXRjaDogbWF0Y2gsIGxvY2F0aW9uOiBsb2NhdGlvbiwgaGlzdG9yeTogaGlzdG9yeSwgc3RhdGljQ29udGV4dDogc3RhdGljQ29udGV4dCB9O1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudCA/IC8vIGNvbXBvbmVudCBwcm9wIGdldHMgZmlyc3QgcHJpb3JpdHksIG9ubHkgY2FsbGVkIGlmIHRoZXJlJ3MgYSBtYXRjaFxuICAgIG1hdGNoID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IG51bGwgOiByZW5kZXIgPyAvLyByZW5kZXIgcHJvcCBpcyBuZXh0LCBvbmx5IGNhbGxlZCBpZiB0aGVyZSdzIGEgbWF0Y2hcbiAgICBtYXRjaCA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogY2hpbGRyZW4gPyAvLyBjaGlsZHJlbiBjb21lIGxhc3QsIGFsd2F5cyBjYWxsZWRcbiAgICB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihwcm9wcykgOiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbCA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZS5wcm9wVHlwZXMgPSB7XG4gIGNvbXB1dGVkTWF0Y2g6IFByb3BUeXBlcy5vYmplY3QsIC8vIHByaXZhdGUsIGZyb20gPFN3aXRjaD5cbiAgcGF0aDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICBjb21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLFxuICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGUuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KVxufTtcblJvdXRlLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Sb3V0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSb3V0ZSBmcm9tICcuL1JvdXRlJztcbmltcG9ydCBMaW5rIGZyb20gJy4vTGluayc7XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbnZhciBOYXZMaW5rID0gZnVuY3Rpb24gTmF2TGluayhfcmVmKSB7XG4gIHZhciB0byA9IF9yZWYudG8sXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBzdHlsZSA9IF9yZWYuc3R5bGUsXG4gICAgICBnZXRJc0FjdGl2ZSA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYuYXJpYUN1cnJlbnQsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsndG8nLCAnZXhhY3QnLCAnc3RyaWN0JywgJ2xvY2F0aW9uJywgJ2FjdGl2ZUNsYXNzTmFtZScsICdjbGFzc05hbWUnLCAnYWN0aXZlU3R5bGUnLCAnc3R5bGUnLCAnaXNBY3RpdmUnLCAnYXJpYUN1cnJlbnQnXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICBwYXRoOiAodHlwZW9mIHRvID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih0bykpID09PSAnb2JqZWN0JyA/IHRvLnBhdGhuYW1lIDogdG8sXG4gICAgZXhhY3Q6IGV4YWN0LFxuICAgIHN0cmljdDogc3RyaWN0LFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oX3JlZjIpIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9yZWYyLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoID0gX3JlZjIubWF0Y2g7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICEhKGdldElzQWN0aXZlID8gZ2V0SXNBY3RpdmUobWF0Y2gsIGxvY2F0aW9uKSA6IG1hdGNoKTtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgX2V4dGVuZHMoe1xuICAgICAgICB0bzogdG8sXG4gICAgICAgIGNsYXNzTmFtZTogaXNBY3RpdmUgPyBbY2xhc3NOYW1lLCBhY3RpdmVDbGFzc05hbWVdLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9KS5qb2luKCcgJykgOiBjbGFzc05hbWUsXG4gICAgICAgIHN0eWxlOiBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZSwgYWN0aXZlU3R5bGUpIDogc3R5bGUsXG4gICAgICAgICdhcmlhLWN1cnJlbnQnOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudFxuICAgICAgfSwgcmVzdCkpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5OYXZMaW5rLnByb3BUeXBlcyA9IHtcbiAgdG86IExpbmsucHJvcFR5cGVzLnRvLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGFyaWFDdXJyZW50OiBQcm9wVHlwZXMub25lT2YoWydwYWdlJywgJ3N0ZXAnLCAnbG9jYXRpb24nLCAndHJ1ZSddKVxufTtcblxuTmF2TGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGFjdGl2ZUNsYXNzTmFtZTogJ2FjdGl2ZScsXG4gIGFyaWFDdXJyZW50OiAndHJ1ZSdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5hdkxpbms7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXlcbiAqIGZyb20gYSBzY3JlZW4gd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUHJvbXB0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb21wdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvbXB0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9tcHQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQcm9tcHQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZShtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykgdGhpcy51bmJsb2NrKCk7XG5cbiAgICB0aGlzLnVuYmxvY2sgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuYmxvY2sobWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHRoaXMudW5ibG9jayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxQcm9tcHQ+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgaWYgKHRoaXMucHJvcHMud2hlbikgdGhpcy5lbmFibGUodGhpcy5wcm9wcy5tZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMud2hlbikge1xuICAgICAgaWYgKCF0aGlzLnByb3BzLndoZW4gfHwgdGhpcy5wcm9wcy5tZXNzYWdlICE9PSBuZXh0UHJvcHMubWVzc2FnZSkgdGhpcy5lbmFibGUobmV4dFByb3BzLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuZGlzYWJsZSgpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBQcm9tcHQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblByb21wdC5wcm9wVHlwZXMgPSB7XG4gIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICBtZXNzYWdlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pLmlzUmVxdWlyZWRcbn07XG5Qcm9tcHQuZGVmYXVsdFByb3BzID0ge1xuICB3aGVuOiB0cnVlXG59O1xuUHJvbXB0LmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBibG9jazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB7IHBhcnNlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcblxuZXhwb3J0IHZhciBjcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG5leHBvcnQgdmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsImV4cG9ydCB2YXIgYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBoYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgcGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCJleHBvcnQgdmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbmV4cG9ydCB2YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciByZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIGdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5leHBvcnQgdmFyIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgPSBmdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNIaXN0b3J5LCBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlLCBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJyb3dzZXJIaXN0b3J5OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbnZhciBnZXRIYXNoUGF0aCA9IGZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufTtcblxudmFyIHB1c2hIYXNoUGF0aCA9IGZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59O1xuXG52YXIgcmVwbGFjZUhhc2hQYXRoID0gZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJyMnKTtcblxuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaHJlZi5zbGljZSgwLCBoYXNoSW5kZXggPj0gMCA/IGhhc2hJbmRleCA6IDApICsgJyMnICsgcGF0aCk7XG59O1xuXG52YXIgY3JlYXRlSGFzaEhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBwcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB1bmRlZmluZWQgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG5cbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpO1xuXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSGFzaEhpc3Rvcnk7IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cbnZhciBjcmVhdGVNZW1vcnlIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGdldFVzZXJDb25maXJtYXRpb24gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdW5kZWZpbmVkID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuXG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGNhbkdvID0gZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTWVtb3J5SGlzdG9yeTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICdoaXN0b3J5JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgdXBkYXRpbmcgdGhlIGxvY2F0aW9uIHByb2dyYW1tYXRpY2FsbHlcbiAqIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFJlZGlyZWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlZGlyZWN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWRpcmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVkaXJlY3QpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBSZWRpcmVjdC5wcm90b3R5cGUuaXNTdGF0aWMgPSBmdW5jdGlvbiBpc1N0YXRpYygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlciAmJiB0aGlzLmNvbnRleHQucm91dGVyLnN0YXRpY0NvbnRleHQ7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgaWYgKHRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHByZXZUbyA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG4gICAgdmFyIG5leHRUbyA9IGNyZWF0ZUxvY2F0aW9uKHRoaXMucHJvcHMudG8pO1xuXG4gICAgaWYgKGxvY2F0aW9uc0FyZUVxdWFsKHByZXZUbywgbmV4dFRvKSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgJ1lvdSB0cmllZCB0byByZWRpcmVjdCB0byB0aGUgc2FtZSByb3V0ZSB5b3VcXCdyZSBjdXJyZW50bHkgb246ICcgKyAoJ1wiJyArIG5leHRUby5wYXRobmFtZSArIG5leHRUby5zZWFyY2ggKyAnXCInKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnBlcmZvcm0gPSBmdW5jdGlvbiBwZXJmb3JtKCkge1xuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBwdXNoID0gX3Byb3BzLnB1c2gsXG4gICAgICAgIHRvID0gX3Byb3BzLnRvO1xuXG5cbiAgICBpZiAocHVzaCkge1xuICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICB9XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUmVkaXJlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxufTtcblJlZGlyZWN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgcHVzaDogZmFsc2Vcbn07XG5SZWRpcmVjdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgY3JlYXRlUGF0aCwgcGFyc2VQYXRoIH0gZnJvbSAnaGlzdG9yeS9QYXRoVXRpbHMnO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbnZhciBub3JtYWxpemVMb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2F0aW9uKG9iamVjdCkge1xuICB2YXIgX29iamVjdCRwYXRobmFtZSA9IG9iamVjdC5wYXRobmFtZSxcbiAgICAgIHBhdGhuYW1lID0gX29iamVjdCRwYXRobmFtZSA9PT0gdW5kZWZpbmVkID8gJy8nIDogX29iamVjdCRwYXRobmFtZSxcbiAgICAgIF9vYmplY3Qkc2VhcmNoID0gb2JqZWN0LnNlYXJjaCxcbiAgICAgIHNlYXJjaCA9IF9vYmplY3Qkc2VhcmNoID09PSB1bmRlZmluZWQgPyAnJyA6IF9vYmplY3Qkc2VhcmNoLFxuICAgICAgX29iamVjdCRoYXNoID0gb2JqZWN0Lmhhc2gsXG4gICAgICBoYXNoID0gX29iamVjdCRoYXNoID09PSB1bmRlZmluZWQgPyAnJyA6IF9vYmplY3QkaGFzaDtcblxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbnZhciBhZGRCYXNlbmFtZSA9IGZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG5cbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59O1xuXG52YXIgY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJyA/IHBhcnNlUGF0aChsb2NhdGlvbikgOiBub3JtYWxpemVMb2NhdGlvbihsb2NhdGlvbik7XG59O1xuXG52YXIgY3JlYXRlVVJMID0gZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn07XG5cbnZhciBzdGF0aWNIYW5kbGVyID0gZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaW52YXJpYW50KGZhbHNlLCAnWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+JywgbWV0aG9kTmFtZSk7XG4gIH07XG59O1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aWNSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNyZWF0ZUhyZWYgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChfdGhpcy5wcm9wcy5iYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSAnUFVTSCc7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiB7XG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuY29udGV4dFxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBiYXNlbmFtZSA9IF9wcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgY29udGV4dCA9IF9wcm9wcy5jb250ZXh0LFxuICAgICAgICBsb2NhdGlvbiA9IF9wcm9wcy5sb2NhdGlvbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2Jhc2VuYW1lJywgJ2NvbnRleHQnLCAnbG9jYXRpb24nXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IHRoaXMuY3JlYXRlSHJlZixcbiAgICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKCdnbycpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKCdnb0JhY2snKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcignZ29Gb3J3YXJkJyksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgaGlzdG9yeTogaGlzdG9yeSB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxufTtcblN0YXRpY1JvdXRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGJhc2VuYW1lOiAnJyxcbiAgbG9jYXRpb246ICcvJ1xufTtcblN0YXRpY1JvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBtYXRjaFBhdGggZnJvbSAnLi9tYXRjaFBhdGgnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN3aXRjaCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHJvdXRlID0gdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcblxuICAgIHZhciBtYXRjaCA9IHZvaWQgMCxcbiAgICAgICAgY2hpbGQgPSB2b2lkIDA7XG4gICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmICghUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHJldHVybjtcblxuICAgICAgdmFyIF9lbGVtZW50JHByb3BzID0gZWxlbWVudC5wcm9wcyxcbiAgICAgICAgICBwYXRoUHJvcCA9IF9lbGVtZW50JHByb3BzLnBhdGgsXG4gICAgICAgICAgZXhhY3QgPSBfZWxlbWVudCRwcm9wcy5leGFjdCxcbiAgICAgICAgICBzdHJpY3QgPSBfZWxlbWVudCRwcm9wcy5zdHJpY3QsXG4gICAgICAgICAgc2Vuc2l0aXZlID0gX2VsZW1lbnQkcHJvcHMuc2Vuc2l0aXZlLFxuICAgICAgICAgIGZyb20gPSBfZWxlbWVudCRwcm9wcy5mcm9tO1xuXG4gICAgICB2YXIgcGF0aCA9IHBhdGhQcm9wIHx8IGZyb207XG5cbiAgICAgIGlmIChtYXRjaCA9PSBudWxsKSB7XG4gICAgICAgIGNoaWxkID0gZWxlbWVudDtcbiAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIGV4YWN0OiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pIDogcm91dGUubWF0Y2g7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHsgbG9jYXRpb246IGxvY2F0aW9uLCBjb21wdXRlZE1hdGNoOiBtYXRjaCB9KSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3dpdGNoLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBSb3V0ZSBmcm9tICcuL1JvdXRlJztcblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xudmFyIHdpdGhSb3V0ZXIgPSBmdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbJ3dyYXBwZWRDb21wb25lbnRSZWYnXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwgeyByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyb3V0ZUNvbXBvbmVudFByb3BzKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCByb3V0ZUNvbXBvbmVudFByb3BzLCB7IHJlZjogd3JhcHBlZENvbXBvbmVudFJlZiB9KSk7XG4gICAgICB9IH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSAnd2l0aFJvdXRlcignICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyAnKSc7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcbiAgQy5wcm9wVHlwZXMgPSB7XG4gICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLmZ1bmNcbiAgfTtcblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyOyIsImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IFJhaXNlZEJ1dHRvbiBmcm9tICdtYXRlcmlhbC11aS9SYWlzZWRCdXR0b24nO1xuaW1wb3J0IE1lbnVJdGVtIGZyb20gJ21hdGVyaWFsLXVpL01lbnVJdGVtJztcblxuaW1wb3J0IHsgbGluayB9IGZyb20gJy4uL3N0eWxlcy9oZWFkZXIuY3NzJztcblxuXG5leHBvcnQgdmFyIHBhZ2VzID1cbltcbiAge2FkZHJlc3M6IFwiL3BhZ2VzL2NhbGVuZGFyc1wiLCBuYW1lOiBcIkNhbGVuZGFyc1wifSxcbiAge2FkZHJlc3M6IFwiL3BhZ2VzL291ci1zY2hvb2xzXCIsIG5hbWU6IFwiT3VyIFNjaG9vbHNcIn0sXG4gIHthZGRyZXNzOiBcIi9wYWdlcy9zY2hvb2wtYm9hcmRcIiwgbmFtZTogXCJTY2hvb2wgQm9hcmRcIn0sXG4gIHthZGRyZXNzOiBcIi9wYWdlcy9zdHVkZW50LXBhcmVudC1yZXNvdXJjZXNcIiwgbmFtZTogXCJQYXJlbnRzL1N0dWRlbnRzXCJ9LFxuICB7YWRkcmVzczogXCIvcGFnZXMvc3RhZmYtcmVzb3VyY2VzXCIsIG5hbWU6IFwiU3RhZmYgUmVzb3VyY2VzXCJ9LFxuICB7YWRkcmVzczogXCIvcGFnZXMvZW1wbG95bWVudFwiLCBuYW1lOiBcIkVtcGxveW1lbnRcIn0sXG4gIHthZGRyZXNzOiBcIi9cIiwgbmFtZTogXCJIb21lcGFnZVwifVxuXTtcblxuLy9DcmVhdGUgYSByYWlzZWQgYnV0dG9uIHRoYXQgbGlua3MgdG8gZWFjaCBwYWdlXG5leHBvcnQgdmFyIGxpbmtzID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IHBhZ2VzLmxlbmd0aDsgaSsrKXtcbiAgbGlua3MucHVzaChcbiAgICA8TGluayBjbGFzc05hbWUgPSBcImxpbmsgXCIgdG89e3BhZ2VzW2ldLmFkZHJlc3N9PlxuICAgICAgPE1lbnVJdGVtIHByaW1hcnlUZXh0ID0ge3BhZ2VzW2ldLm5hbWV9IC8+XG4gICAgPC9MaW5rPlxuICApO1xufVxuXG4vL29oIGdvZC4uLiBsb29rIGF3YXlcbmV4cG9ydCB2YXIgYnV0dG9ucyA9IFtdO1xuZm9yICh2YXIgaSA9IDA7IGkgPCBwYWdlcy5sZW5ndGg7IGkrKyl7XG4gIGJ1dHRvbnMucHVzaChcbiAgICA8ZGl2PlxuICAgICAgPExpbmsgdG8gPSB7cGFnZXNbaV0uYWRkcmVzc30+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJidXR0b25cIj57cGFnZXNbaV0ubmFtZX08L2Rpdj5cbiAgICAgIDwvTGluaz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cblxuXG4vKlxuYnV0dG9ucy5wdXNoKFxuICA8ZGl2PlxuICAgIDxkaXY+XG4gICAgICA8TGluayB0bz17cGFnZXNbMF0uYWRkcmVzc30+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJidXR0b25cIj57cGFnZXNbMF0ubmFtZX08L2Rpdj5cbiAgICAgIDwvTGluaz5cbiAgICAgIDxMaW5rIHRvPXtwYWdlc1sxXS5hZGRyZXNzfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWUgPSBcImJ1dHRvblwiPntwYWdlc1sxXS5uYW1lfTwvZGl2PlxuICAgICAgPC9MaW5rPlxuICAgICAgPExpbmsgdG89e3BhZ2VzWzJdLmFkZHJlc3N9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZSA9IFwiYnV0dG9uXCI+e3BhZ2VzWzJdLm5hbWV9PC9kaXY+XG4gICAgICA8L0xpbms+XG4gICAgICA8YnIgLz5cbiAgICAgIDxociAvPlxuICAgIDwvZGl2PlxuICAgIDxkaXY+XG4gICAgICA8TGluayB0bz17cGFnZXNbM10uYWRkcmVzc30+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJidXR0b25cIj57cGFnZXNbM10ubmFtZX08L2Rpdj5cbiAgICAgIDwvTGluaz5cbiAgICAgIDxMaW5rIHRvPXtwYWdlc1s0XS5hZGRyZXNzfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWUgPSBcImJ1dHRvblwiPntwYWdlc1s0XS5uYW1lfTwvZGl2PlxuICAgICAgPC9MaW5rPlxuICAgICAgPExpbmsgdG89e3BhZ2VzWzVdLmFkZHJlc3N9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZSA9IFwiYnV0dG9uXCI+e3BhZ2VzWzVdLm5hbWV9PC9kaXY+XG4gICAgICA8L0xpbms+XG4gICAgICA8TGluayB0bz17cGFnZXNbNl0uYWRkcmVzc30+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJidXR0b25cIj57cGFnZXNbNl0ubmFtZX08L2Rpdj5cbiAgICAgIDwvTGluaz5cbiAgICAgIDxociAvPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbik7XG4qL1xuXG5leHBvcnQgdmFyIGZpeGVkQnV0dG9ucyA9IFtdO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IHBhZ2VzLmxlbmd0aDsgaSsrKXtcbiAgZml4ZWRCdXR0b25zLnB1c2goXG4gICAgPExpbmsgdG89e3BhZ2VzW2ldLmFkZHJlc3N9PlxuICAgICAgPGRpdiBjbGFzc05hbWUgPSBcImJ1dHRvbi1maXhlZFwiPntwYWdlc1tpXS5uYW1lfTwvZGl2PlxuICAgIDwvTGluaz5cbiAgKTtcbn1cbmZpeGVkQnV0dG9ucy5wdXNoKDxiciAvPik7XG4iLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJY29uTWVudSBmcm9tICdtYXRlcmlhbC11aS9JY29uTWVudSc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICdtYXRlcmlhbC11aS9JY29uQnV0dG9uJztcbmltcG9ydCBNb3JlVmVydEljb24gZnJvbSAnbWF0ZXJpYWwtdWkvc3ZnLWljb25zL25hdmlnYXRpb24vbW9yZS12ZXJ0JztcblxuaW1wb3J0ICcuLi9zdHlsZXMvaGVhZGVyLmNzcyc7XG5pbXBvcnQge2xpbmtzLCBidXR0b25zLCBmaXhlZEJ1dHRvbnN9IGZyb20gJy4vbGlua3MuanN4J1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWFkZXIgZXh0ZW5kcyBDb21wb25lbnR7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICBtb2JpbGVSZW5kZXIoKXtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWUgPSB7dGhpcy5wcm9wcy5oZWFkZXJNb2JpbGV9PlxuICAgICAgICA8aW1nIHNyYyA9IFwiLi4vLi4vLi4vLi4vcmVzb3VyY2VzL2xvZ28ucG5nXCIgY2xhc3NOYW1lID0gXCJpbWFnZVwiLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWUgPSBcImhlYWRlci1tb2JpbGUtdGl0bGVcIj5NU0FEIDU4PC9kaXY+XG4gICAgICAgIDxJY29uTWVudVxuICAgICAgICAgIGNsYXNzTmFtZSA9IFwiaWNvblwiXG4gICAgICAgICAgaWNvbkJ1dHRvbkVsZW1lbnQ9ezxJY29uQnV0dG9uPjxNb3JlVmVydEljb24gLz48L0ljb25CdXR0b24+fVxuICAgICAgICA+XG4gICAgICAgICAge2xpbmtzfVxuICAgICAgICA8L0ljb25NZW51PlxuICAgIDwvZGl2PlxuICAgICk7XG4gIH1cblxuICBjb21wdXRlclJlbmRlcigpe1xuICAgIGlmKCAhdGhpcy5wcm9wcy5maXhIZWFkZXIgKXtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lID0gJ2hlYWRlci1sYW5kc2NhcGUnPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJidXR0b24tZ3JpZFwiPlxuICAgICAgICAgICAgPGRpdj48L2Rpdj5cbiAgICAgICAgICAgIHtidXR0b25zfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lID0gJ2hlYWRlci1sYW5kc2NhcGUtZml4ZWQnPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lID0gXCJidXR0b24tZ3JpZFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWUgPSBcInBpY3R1cmVcIj5cbiAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWUgPSAnaW1hZ2UnIHNyYyA9XG4gICAgICAgICAgICAgICAgJy4uLy4uLy4uLy4uL3Jlc291cmNlcy9sb2dvLnBuZycgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge2ZpeGVkQnV0dG9uc31cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIGlmICggdGhpcy5wcm9wcy5zaG93TW9iaWxlICkge1xuICAgICAgcmV0dXJuIHRoaXMubW9iaWxlUmVuZGVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVyUmVuZGVyKCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEljb25NZW51IGZyb20gJ21hdGVyaWFsLXVpL0ljb25NZW51JztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJ21hdGVyaWFsLXVpL0ljb25CdXR0b24nO1xuaW1wb3J0IE1vcmVWZXJ0SWNvbiBmcm9tICdtYXRlcmlhbC11aS9zdmctaWNvbnMvbmF2aWdhdGlvbi9tb3JlLXZlcnQnO1xuXG5pbXBvcnQge2Zvb3Rlcn0gZnJvbSAnLi4vc3R5bGVzL2Zvb3Rlci5jc3MnO1xuXG5jb25zdCBGb290ZXIgPSAoKSA9PiAoXG4gICAgPGRpdiBjbGFzc05hbWUgPSBcImZvb3RlclwiPlxuICAgICAgwqkgMjAxOCAtXG4gICAgPC9kaXY+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBGb290ZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge2JhY2tncm91bmR9IGZyb20gJy4uL3N0eWxlcy9iYWNrZ3JvdW5kLmNzcyc7XG5cbmNvbnN0IEJhY2tncm91bmQgPSAoKSA9PiAoXG4gICAgPGRpdiBjbGFzc05hbWUgPSBcImJhY2tncm91bmRcIj5cbiAgICAgIFxuICAgIDwvZGl2PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQmFja2dyb3VuZDtcbiIsImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcGFnZSB9IGZyb20gXCIuLi8uLi8uLi9zdHlsZXMvcGFnZXMuY3NzXCI7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4uLy4uLy4uL2hlYWRlci9IZWFkZXIuanN4JztcbmltcG9ydCBcIi4uLy4uLy4uL3N0eWxlcy9wYWdlcy5jc3NcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKXtcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2IGNsYXNzTmFtZSA9ICdwYWdlJz5cblxuICAgICAgICBDYWxlbmRhcnMgPGJyLz5cbiAgICAgIENhbGVuZGFycyA8YnIvPlxuICAgIENhbGVuZGFycyA8YnIvPlxuICBDYWxlbmRhcnMgPGJyLz5cbkNhbGVuZGFycyA8YnIvPlxuQ2FsZW5kYXJzIDxici8+XG5DYWxlbmRhcnMgPGJyLz5cbkNhbGVuZGFycyA8YnIvPlxuQ2FsZW5kYXJzIDxici8+XG5DYWxlbmRhcnMgPGJyLz5cbkNhbGVuZGFycyA8YnIvPlxuQ2FsZW5kYXJzIDxici8+XG5DYWxlbmRhcnMgPGJyLz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG59XG4iLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vc3R5bGVzL3BhZ2VzLmNzc1wiO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi8uLi8uLi9oZWFkZXIvSGVhZGVyLmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRlbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCl7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdj5cblxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbn1cbiIsImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcGFnZSB9IGZyb20gXCIuLi8uLi8uLi9zdHlsZXMvcGFnZXMuY3NzXCI7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4uLy4uLy4uL2hlYWRlci9IZWFkZXIuanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKXtcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbn1cbiIsImltcG9ydCBSZWFjdCwge0NvbXBvbmVudH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcGFnZSB9IGZyb20gXCIuLi8uLi8uLi9zdHlsZXMvcGFnZXMuY3NzXCI7XG5pbXBvcnQgSGVhZGVyIGZyb20gJy4uLy4uLy4uL2hlYWRlci9IZWFkZXIuanN4JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKXtcbiAgICByZXR1cm4oXG4gICAgICA8ZGl2PjwvZGl2PlxuICAgIClcbiAgfVxuXG59XG4iLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHBhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vc3R5bGVzL3BhZ2VzLmNzc1wiO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi8uLi8uLi9oZWFkZXIvSGVhZGVyLmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRlbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCl7XG4gICAgcmV0dXJuKFxuICAgICAgPGRpdj5cbiAgICAgICAgU1RVRkY8L2Rpdj5cbiAgICApXG4gIH1cblxufVxuIiwiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwYWdlIH0gZnJvbSBcIi4uLy4uLy4uL3N0eWxlcy9wYWdlcy5jc3NcIjtcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi4vLi4vLi4vaGVhZGVyL0hlYWRlci5qc3gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbXBsb3ltZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIHJldHVybihcbiAgICAgIDxkaXY+XG4gICAgICAgIDEgPGJyIC8+XG4gICAgICAyIDxiciAvPlxuICAgIDMgPGJyIC8+XG4gIDQgPGJyIC8+XG41IDxiciAvPlxuNiA8YnIgLz5cbjcgPGJyIC8+XG43IDxiciAvPlxuNyA8YnIgLz5cbjcgPGJyIC8+XG43IDxiciAvPlxuNyA8YnIgLz5cbjcgPGJyIC8+XG52XG43IDxiciAvPlxuNyA8YnIgLz5cbjcgPGJyIC8+XG43IDxiciAvPlxuNyA8YnIgLz5cbjcgPGJyIC8+XG43IDxiciAvPlxuNyA8YnIgLz5cbjcgPGJyIC8+XG43IDxiciAvPlxuNyA8YnIgLz5cbjcgPGJyIC8+XG43IDxiciAvPlxuNyA8YnIgLz5cbjcgPGJyIC8+XG43IDxiciAvPlxuXG5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG59XG4iLCJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCBDYWxlbmRhcnMgZnJvbSBcIi4vQ2FsZW5kYXJzL0NhbGVuZGFycy5qc3hcIjtcbmltcG9ydCBPdXJTY2hvb2xzIGZyb20gXCIuL091ci1TY2hvb2xzL091ci1TY2hvb2xzLmpzeFwiO1xuaW1wb3J0IFNjaG9vbEJvYXJkIGZyb20gXCIuL1NjaG9vbC1Cb2FyZC9TY2hvb2wtQm9hcmQuanN4XCI7XG5pbXBvcnQgU3R1ZGVudFBhcmVudFJlc291cmNlcyBmcm9tIFwiLi9TdHVkZW50LVBhcmVudC1SZXNvdXJjZXMvU3R1ZGVudC1QYXJlbnQtUmVzb3VyY2VzLmpzeFwiO1xuaW1wb3J0IFN0YWZmUmVzb3VyY2VzIGZyb20gXCIuL1N0YWZmLVJlc291cmNlcy9TdGFmZi1SZXNvdXJjZXMuanN4XCI7XG5pbXBvcnQgRW1wbG95bWVudCBmcm9tIFwiLi9FbXBsb3ltZW50L0VtcGxveW1lbnQuanN4XCI7XG5cbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4uLy4uL2hlYWRlci9IZWFkZXIuanN4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2VzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIHJldHVybihcbiAgICAgIDxkaXY+XG4gICAgICAgIDxIZWFkZXJcbiAgICAgICAgICBoZWFkZXJNb2JpbGUgPSB7dGhpcy5wcm9wcy5oZWFkZXJNb2JpbGV9XG4gICAgICAgICAgc2hvd01vYmlsZSA9IHt0aGlzLnByb3BzLnNob3dNb2JpbGV9XG4gICAgICAgICAgZml4SGVhZGVyID0ge3RydWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgPFJvdXRlIHBhdGg9XCIvcGFnZXMvY2FsZW5kYXJzXCIgcmVuZGVyID0geygpID0+ICg8Q2FsZW5kYXJzIC8+KSB9IC8+XG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL3BhZ2VzL291ci1zY2hvb2xzXCIgcmVuZGVyID0geygpID0+ICg8T3VyU2Nob29scyAvPikgfSAvPlxuICAgICAgICA8Um91dGUgcGF0aD1cIi9wYWdlcy9zY2hvb2wtYm9hcmRcIiByZW5kZXIgPSB7KCkgPT4gKDxTY2hvb2xCb2FyZCAvPikgfSAvPlxuICAgICAgICA8Um91dGUgcGF0aD1cIi9wYWdlcy9zdHVkZW50LXBhcmVudC1yZXNvdXJjZXNcIiByZW5kZXIgPSB7KCkgPT4gKDxTdHVkZW50UGFyZW50UmVzb3VyY2VzIC8+KSB9IC8+XG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL3BhZ2VzL3N0YWZmLXJlc291cmNlc1wiIHJlbmRlciA9IHsoKSA9PiAoPFN0YWZmUmVzb3VyY2VzIC8+KSB9IC8+XG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL3BhZ2VzL2VtcGxveW1lbnRcIiByZW5kZXIgPSB7KCkgPT4gKDxFbXBsb3ltZW50IC8+KSB9Lz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCAnLi4vc3R5bGVzL3RpdGxlLmNzcydcblxuY29uc3QgVGl0bGUgPSAoKSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lID0gJ3RpdGxlLWNvbnRhaW5lciB0aXRsZS1ncmlkLWNvbnRhaW5lcic+XG4gICAgPGRpdiBjbGFzc05hbWUgPSAnYmFja2dyb3VuZDEnPlxuICAgICAgPGltZyBjbGFzc05hbWUgPSAndGl0bGUtaW1hZ2UnIHNyYyA9XG4gICAgICAgICcuLi8uLi8uLi8uLi9yZXNvdXJjZXMvbG9nby5wbmcnIC8+XG4gICAgPC9kaXY+XG4gICAgPGRpdj48L2Rpdj5cbiAgICA8aSBjbGFzc05hbWUgPSBcInRpdGxlXCI+RW1wb3dlcmluZyBsZWFybmVycyA8YnIgLz50byBpbnZlbnQgdGhlaXIgZnV0dXJlPC9pPlxuICA8L2Rpdj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFRpdGxlO1xuIiwiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVGl0bGUgZnJvbSAnLi4vLi4vVGl0bGUuanN4JztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi4vLi4vLi4vaGVhZGVyL0hlYWRlci5qc3gnO1xuaW1wb3J0IFwiLi4vLi4vLi4vc3R5bGVzL2hvbWVwYWdlLmNzc1wiO1xuaW1wb3J0IFwiLi4vLi4vLi4vc3R5bGVzL3BhZ2VzLmNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250ZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIHJldHVybihcbiAgICAgIDxkaXY+XG4gICAgICAgIDxUaXRsZSAvPlxuICAgICAgICA8SGVhZGVyXG4gICAgICAgICAgaGVhZGVyTW9iaWxlID0ge3RoaXMucHJvcHMuaGVhZGVyTW9iaWxlfVxuICAgICAgICAgIHNob3dNb2JpbGUgPSB7dGhpcy5wcm9wcy5zaG93TW9iaWxlfVxuICAgICAgICAgIGZpeEhlYWRlciA9IHt0aGlzLnByb3BzLmZpeEhlYWRlcn1cbiAgICAgICAgICAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZSA9ICdwYWdlJz5cbiAgICAgICAgICAgIFRISVMgPGJyIC8+XG4gICAgICAgICAgSVMgPGJyIC8+XG4gICAgICAgIFRIRSA8YnIgLz5cbiAgICAgIEhPTUVQQUdFIDxiciAvPlxuICAgICAgVEhJUyA8YnIgLz5cbiAgICBJUyA8YnIgLz5cbiAgICBUSEUgPGJyIC8+XG4gICAgSE9NRVBBR0UgPGJyIC8+XG4gICAgVEhJUyA8YnIgLz5cbiAgICA8aHIgLz5cbiAgICBJUyA8YnIgLz5cbiAgICBUSEUgPGJyIC8+XG4gICAgSE9NRVBBR0UgPGJyIC8+XG4gICAgVEhJUyA8YnIgLz5cbiAgICBJUyA8YnIgLz5cbiAgICBUSEUgPGJyIC8+XG4gICAgSE9NRVBBR0UgPGJyIC8+XG4gICAgVEhJUyA8YnIgLz5cbiAgICBJUyA8YnIgLz5cbiAgICBUSEUgPGJyIC8+XG4gICAgSE9NRVBBR0UgPGJyIC8+XG4gICAgVEhJUyA8YnIgLz5cbiAgICBJUyA8YnIgLz5cbiAgICBUSEUgPGJyIC8+XG4gICAgSE9NRVBBR0UgPGJyIC8+XG4gICAgVEhJUyA8YnIgLz5cbiAgICBJUyA8YnIgLz5cbiAgICBUSEUgPGJyIC8+XG4gICAgSE9NRVBBR0UgPGJyIC8+XG4gICAgVEhJUyA8YnIgLz5cbiAgICBJUyA8YnIgLz5cbiAgICBUSEUgPGJyIC8+XG4gICAgSE9NRVBBR0UgPGJyIC8+XG4gICAgVEhJUyA8YnIgLz5cbiAgICBJUyA8YnIgLz5cbiAgICBUSEUgPGJyIC8+XG4gICAgSE9NRVBBR0UgPGJyIC8+XG4gICAgVEhJUyA8YnIgLz5cbiAgICBJUyA8YnIgLz5cbiAgICBUSEUgPGJyIC8+XG4gICAgSE9NRVBBR0UgPGJyIC8+ICAgIEhPTUVQQUdFIDxiciAvPlxuICAgICAgICBUSElTIDxiciAvPlxuICAgICAgICBJUyA8YnIgLz5cbiAgICAgICAgVEhFIDxiciAvPlxuICAgICAgICBIT01FUEFHRSA8YnIgLz4gICAgSE9NRVBBR0UgPGJyIC8+XG4gICAgICAgICAgICBUSElTIDxiciAvPlxuICAgICAgICAgICAgSVMgPGJyIC8+XG4gICAgICAgICAgICBUSEUgPGJyIC8+XG4gICAgICAgICAgICBIT01FUEFHRSA8YnIgLz4gICAgSE9NRVBBR0UgPGJyIC8+XG4gICAgICAgICAgICAgICAgVEhJUyA8YnIgLz5cbiAgICAgICAgICAgICAgICBJUyA8YnIgLz5cbiAgICAgICAgICAgICAgICBUSEUgPGJyIC8+XG4gICAgICAgICAgICAgICAgSE9NRVBBR0UgPGJyIC8+ICAgIEhPTUVQQUdFIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICBUSElTIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICBJUyA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgVEhFIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICBIT01FUEFHRSA8YnIgLz4gICAgSE9NRVBBR0UgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICBUSElTIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgSVMgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICBUSEUgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICBIT01FUEFHRSA8YnIgLz5cblxuICAgICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICApXG4gIH1cblxufVxuIiwiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQgUGFnZXMgZnJvbSBcIi4vcGFnZXMvUGFnZXMuanN4XCI7XG5cbmltcG9ydCBUaXRsZSBmcm9tICcuL1RpdGxlLmpzeCc7XG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuLi9oZWFkZXIvSGVhZGVyLmpzeFwiO1xuaW1wb3J0IEhvbWVwYWdlIGZyb20gXCIuL3BhZ2VzL0hvbWVwYWdlL0hvbWVwYWdlLmpzeFwiO1xuXG5pbXBvcnQge3BhZ2VzfSBmcm9tIFwiLi4vaGVhZGVyL2xpbmtzLmpzeFwiO1xuXG5pbXBvcnQgXCIuLi9zdHlsZXMvcGFnZXMuY3NzXCI7XG5pbXBvcnQgXCIuLi9zdHlsZXMvYm9keS5jc3NcIjtcblxudmFyIHNjcm9sbCA9IDA7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvZHkgZXh0ZW5kcyBDb21wb25lbnR7XG4gIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5ib2R5UmVmID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgdGhpcy5oYW5kbGVSZXNpemUgPSB0aGlzLmhhbmRsZVJlc2l6ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlU2Nyb2xsID0gdGhpcy5oYW5kbGVTY3JvbGwuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2hvd01vYmlsZTogZmFsc2UsXG4gICAgICBmaXhIZWFkZXI6IGZhbHNlLFxuICAgICAgaGVhZGVyTW9iaWxlOiAnaGVhZGVyLW1vYmlsZScsXG4gICAgICBoZWFkZXJMYW5kc2NhcGU6ICdoZWFkZXItbGFuZHNjYXBlJyxcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIHRoaXMuYm9keVJlZi5jdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsKTtcbiAgICBpZiggd2luZG93LmlubmVyV2lkdGggPCA3MDAgKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtzaG93TW9iaWxlOiB0cnVlfSk7XG4gICAgfVxuICB9XG5cbiAgLy9Mb2dpYyBzbyB0aGF0IHN0YXRlIGlzIG5vdCBjaGFuZ2VkIGV2ZXJ5IHNjcm9sbFxuICAvL1RoaXMgaXMgZG9uZSB0byBwcmV2ZW50IGNvbnN0YW50bHkgcmUtcmVuZGVyaW5nXG4gIGhhbmRsZVNjcm9sbCgpe1xuICAgIHNjcm9sbCA9IHRoaXMuYm9keVJlZi5jdXJyZW50LnNjcm9sbFRvcFxuXG4gICAgaWYoICF0aGlzLnN0YXRlLmZpeEhlYWRlciAmJiBzY3JvbGwgPj0gMzMwICkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZpeEhlYWRlcjogdHJ1ZSxcbiAgICAgICAgaGVhZGVyTW9iaWxlOiAnaGVhZGVyLW1vYmlsZS1maXhlZCcsXG4gICAgICAgfSk7XG4gICAgfVxuICAgIGlmICggdGhpcy5zdGF0ZS5maXhIZWFkZXIgJiYgc2Nyb2xsIDwgMzMwICkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZpeEhlYWRlcjogZmFsc2UsXG4gICAgICAgIGhlYWRlck1vYmlsZTogJ2hlYWRlci1tb2JpbGUnLFxuICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vTG9naWMgc28gdGhhdCBzdGF0ZSBpcyBub3QgY2hhbmdlZCBldmVyeSBzY3JvbGxcbiAgLy9UaGlzIGlzIGRvbmUgdG8gcHJldmVudCBjb25zdGFudGx5IHJlLXJlbmRlcmluZ1xuICBoYW5kbGVSZXNpemUoKXtcbiAgICBpZiAoICF0aGlzLnN0YXRlLnNob3dNb2JpbGUgJiYgd2luZG93LmlubmVyV2lkdGggPCA4MDAgKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtzaG93TW9iaWxlOiB0cnVlfSk7XG4gICAgfVxuICAgIGlmICggdGhpcy5zdGF0ZS5zaG93TW9iaWxlICYmIHdpbmRvdy5pbm5lcldpZHRoID4gODAwICkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7c2hvd01vYmlsZTogZmFsc2V9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKXtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlcj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWUgPSBcImJvZHlcIiByZWY9e3RoaXMuYm9keVJlZn0gPlxuICAgICAgICAgIDxSb3V0ZSBleGFjdCA9IHt0cnVlfSBwYXRoPVwiL1wiIHJlbmRlciA9IHsoKSA9PiAoXG4gICAgICAgICAgICAgIDxIb21lcGFnZVxuICAgICAgICAgICAgICAgIHNob3dNb2JpbGUgPSB7dGhpcy5zdGF0ZS5zaG93TW9iaWxlfVxuICAgICAgICAgICAgICAgIGhlYWRlck1vYmlsZSA9IHt0aGlzLnN0YXRlLmhlYWRlck1vYmlsZX1cbiAgICAgICAgICAgICAgICBmaXhIZWFkZXIgPSB7dGhpcy5zdGF0ZS5maXhIZWFkZXJ9XG4gICAgICAgICAgICAgICAgLz4pfSAvPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3BhZ2VzL1wiIHJlbmRlciA9IHsoKSA9PiAoXG4gICAgICAgICAgICAgIDxQYWdlc1xuICAgICAgICAgICAgICAgIHNob3dNb2JpbGUgPSB7dGhpcy5zdGF0ZS5zaG93TW9iaWxlfVxuICAgICAgICAgICAgICAgIGhlYWRlck1vYmlsZSA9IHt0aGlzLnN0YXRlLmhlYWRlck1vYmlsZX1cbiAgICAgICAgICAgICAgICAvPil9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8gUm91dGVyPlxuICAgICk7XG4gIH1cblxufVxuXG4vKlxuXG48Um91dGUgZXhhY3QgPSB7dHJ1ZX0gcGF0aD1cIi9cIiByZW5kZXIgPSB7KCkgPT4gKDxIb21lcGFnZSAvPikgfSAvPlxuPFJvdXRlIHBhdGg9XCIvY2FsZW5kYXJzXCIgcmVuZGVyID0geygpID0+ICg8Q2FsZW5kYXJzIC8+KSB9IC8+XG48Um91dGUgcGF0aD1cIi9vdXItc2Nob29sc1wiIHJlbmRlciA9IHsoKSA9PiAoPE91clNjaG9vbHMgLz4pIH0gLz5cbjxSb3V0ZSBwYXRoPVwiL3NjaG9vbC1ib2FyZFwiIHJlbmRlciA9IHsoKSA9PiAoPFNjaG9vbEJvYXJkIC8+KSB9IC8+XG48Um91dGUgcGF0aD1cIi9zdHVkZW50LXBhcmVudC1yZXNvdXJjZXNcIiByZW5kZXIgPSB7KCkgPT4gKDxTdHVkZW50UGFyZW50UmVzb3VyY2VzIC8+KSB9IC8+XG48Um91dGUgcGF0aD1cIi9zdGFmZi1yZXNvdXJjZXNcIiByZW5kZXIgPSB7KCkgPT4gKDxTdGFmZlJlc291cmNlcyAvPikgfSAvPlxuPFJvdXRlIHBhdGg9XCIvZW1wbG95bWVudFwiIHJlbmRlciA9IHsoKSA9PiAoPEVtcGxveW1lbnQgLz4pIH0vPlxuPC9kaXY+XG4qL1xuIiwiaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50fSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgUm91dGV9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgTXVpVGhlbWVQcm92aWRlciBmcm9tICdtYXRlcmlhbC11aS9zdHlsZXMvTXVpVGhlbWVQcm92aWRlcic7XG5cbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4vY29tcG9uZW50cy9oZWFkZXIvSGVhZGVyLmpzeFwiO1xuaW1wb3J0IEZvb3RlciBmcm9tIFwiLi9jb21wb25lbnRzL2Zvb3Rlci9Gb290ZXIuanN4XCI7XG5pbXBvcnQgQmFja2dyb3VuZCBmcm9tIFwiLi9jb21wb25lbnRzL2JhY2tncm91bmQvQmFja2dyb3VuZC5qc3hcIjtcbmltcG9ydCBCb2R5IGZyb20gXCIuL2NvbXBvbmVudHMvYm9keS9Cb2R5LmpzeFwiO1xuXG5pbXBvcnQgeyBwYWdlIH0gZnJvbSBcIi4vY29tcG9uZW50cy9zdHlsZXMvcGFnZXMuY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudHtcbiAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpe1xuICAgIHJldHVybiAoXG4gICAgICA8TXVpVGhlbWVQcm92aWRlcj5cbiAgICAgICAgPFJvdXRlcj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPEJhY2tncm91bmQgLz5cbiAgICAgICAgICAgIDxCb2R5IC8+XG4gICAgICAgICAgICA8Rm9vdGVyIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvUm91dGVyPlxuICAgICAgPC9NdWlUaGVtZVByb3ZpZGVyPlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG5cbmltcG9ydCBBcHAgZnJvbSAnLi9zcmMvQXBwLmpzeCc7XG5cbmNvbnN0IFJvb3QgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEFwcCAvPlxuICApO1xufVxuXG5SZWFjdERPTS5yZW5kZXIoPFJvb3QgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpO1xuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuYm9keSB7XFxuICB3aWR0aDogIDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBvdmVyZmxvdzogc2Nyb2xsO1xcbn1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ib2R5LmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ib2R5LmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYm9keS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2hvbWVwYWdlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ob21lcGFnZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2hvbWVwYWdlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZCk7XCIsIFwiXCJdKTtcblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudGl0bGV7XFxuICBhbGlnbi1zZWxmOiBsZWZ0O1xcbn1cXG5cXG4udGl0bGUtaW1hZ2Uge1xcbiAgdG9wOiAwcHg7XFxuICBsZWZ0OiAwcHg7XFxuICBvYmplY3QtZml0OiBjb3ZlcjtcXG4gIGhlaWdodDogMjYwcHg7XFxuICB3aWR0aDogMjgwcHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi50aXRsZS1jb250YWluZXJ7XFxuICBmb250LWZhbWlseTogJ09zd2FsZCcsIHNhbnMtc2VyaWY7XFxuICBjb2xvcjogIzAwMDAwMDtcXG4gIGZvbnQtc2l6ZTogNXZ3O1xcbiAgaGVpZ2h0OiAzMzBweCAtIDF2dztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgdG9wOiAwcHg7XFxuICBsZWZ0OiAwcHg7XFxufVxcblxcbi50aXRsZS1ncmlkLWNvbnRhaW5lcntcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDQwJSAyJSA1OCU7XFxufVxcblxcbi5iYWNrZ3JvdW5kMXtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vdGl0bGUuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3RpdGxlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vdGl0bGUuY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9T3N3YWxkKTtcIiwgXCJcIl0pO1xuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5wYWdlIHtcXG4gIGNvbG9yOiAjMDAwMDAwO1xcbiAgbWFyZ2luOiA2ZW07XFxuICBmb250LWZhbWlseTogJ09zd2FsZCcsIHNhbnMtc2VyaWY7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImZjZDNkYmU4MzhkZjk2NzY5Yzc3YTE4MmRmZGQ3ODBkLnBuZ1wiOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXNjYXBlKHVybCkge1xuICAgIGlmICh0eXBlb2YgdXJsICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdXJsXG4gICAgfVxuICAgIC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuICAgIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgICAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICAgIH1cbiAgICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gICAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgICBpZiAoL1tcIicoKSBcXHRcXG5dLy50ZXN0KHVybCkpIHtcbiAgICAgICAgcmV0dXJuICdcIicgKyB1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKSArICdcIidcbiAgICB9XG5cbiAgICByZXR1cm4gdXJsXG59XG4iLCJ2YXIgZXNjYXBlID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi91cmwvZXNjYXBlLmpzXCIpO1xuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuYmFja2dyb3VuZCB7XFxuICB0b3A6IDBweDtcXG4gIGxlZnQ6IDBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgei1pbmRleDogLTI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBlc2NhcGUocmVxdWlyZShcIi4uLy4uLy4uLy4uL3Jlc291cmNlcy9iYWNrZ3JvdW5kLnBuZ1wiKSkgKyBcIik7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgZmlsdGVyOiBibHVyKDVweCk7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2JhY2tncm91bmQuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2JhY2tncm91bmQuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9iYWNrZ3JvdW5kLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PU9zd2FsZCk7XCIsIFwiXCJdKTtcblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZm9vdGVyIHtcXG4gIGJhY2tncm91bmQ6IHJhZGlhbC1ncmFkaWVudChmYXJ0aGVzdC1jb3JuZXIgYXQgMTAlIDIlLCAjZmZmZmIzLCAjZmZmZjY2KTtcXG4gIGNvbG9yOiBibGFjaztcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIGxlZnQ6IDBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm90dG9tOiAwJTtcXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XFxuICBib3JkZXItaW1hZ2U6IGxpbmVhci1ncmFkaWVudChyZWQsIHllbGxvdyk7XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Zvb3Rlci5jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vZm9vdGVyLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vZm9vdGVyLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBfdHJhbnNpdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNpdGlvbnMpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKCcuLi91dGlscy9jb2xvck1hbmlwdWxhdG9yJyk7XG5cbnZhciBfRW5oYW5jZWRCdXR0b24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9FbmhhbmNlZEJ1dHRvbicpO1xuXG52YXIgX0VuaGFuY2VkQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VuaGFuY2VkQnV0dG9uKTtcblxudmFyIF9QYXBlciA9IHJlcXVpcmUoJy4uL1BhcGVyJyk7XG5cbnZhciBfUGFwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFwZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUxhYmVsKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghcHJvcHMuY2hpbGRyZW4gJiYgcHJvcHMubGFiZWwgIT09IDAgJiYgIXByb3BzLmxhYmVsICYmICFwcm9wcy5pY29uKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdSZXF1aXJlZCBwcm9wIGxhYmVsIG9yIGNoaWxkcmVuIG9yIGljb24gd2FzIG5vdCBzcGVjaWZpZWQgaW4gJyArIGNvbXBvbmVudE5hbWUgKyAnLicpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTdHlsZXMocHJvcHMsIGNvbnRleHQsIHN0YXRlKSB7XG4gIHZhciBfY29udGV4dCRtdWlUaGVtZSA9IGNvbnRleHQubXVpVGhlbWUsXG4gICAgICBiYXNlVGhlbWUgPSBfY29udGV4dCRtdWlUaGVtZS5iYXNlVGhlbWUsXG4gICAgICBidXR0b24gPSBfY29udGV4dCRtdWlUaGVtZS5idXR0b24sXG4gICAgICByYWlzZWRCdXR0b24gPSBfY29udGV4dCRtdWlUaGVtZS5yYWlzZWRCdXR0b24sXG4gICAgICBib3JkZXJSYWRpdXMgPSBfY29udGV4dCRtdWlUaGVtZS5ib3JkZXJSYWRpdXM7XG4gIHZhciBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWRCYWNrZ3JvdW5kQ29sb3IgPSBwcm9wcy5kaXNhYmxlZEJhY2tncm91bmRDb2xvcixcbiAgICAgIGRpc2FibGVkTGFiZWxDb2xvciA9IHByb3BzLmRpc2FibGVkTGFiZWxDb2xvcixcbiAgICAgIGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGljb24gPSBwcm9wcy5pY29uLFxuICAgICAgbGFiZWwgPSBwcm9wcy5sYWJlbCxcbiAgICAgIGxhYmVsUG9zaXRpb24gPSBwcm9wcy5sYWJlbFBvc2l0aW9uLFxuICAgICAgcHJpbWFyeSA9IHByb3BzLnByaW1hcnksXG4gICAgICBzZWNvbmRhcnkgPSBwcm9wcy5zZWNvbmRhcnksXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlO1xuXG5cbiAgdmFyIGFtb3VudCA9IHByaW1hcnkgfHwgc2Vjb25kYXJ5ID8gMC40IDogMC4wODtcblxuICB2YXIgYmFja2dyb3VuZENvbG9yID0gcmFpc2VkQnV0dG9uLmNvbG9yO1xuICB2YXIgbGFiZWxDb2xvciA9IHJhaXNlZEJ1dHRvbi50ZXh0Q29sb3I7XG5cbiAgaWYgKGRpc2FibGVkKSB7XG4gICAgYmFja2dyb3VuZENvbG9yID0gZGlzYWJsZWRCYWNrZ3JvdW5kQ29sb3IgfHwgcmFpc2VkQnV0dG9uLmRpc2FibGVkQ29sb3I7XG4gICAgbGFiZWxDb2xvciA9IGRpc2FibGVkTGFiZWxDb2xvciB8fCByYWlzZWRCdXR0b24uZGlzYWJsZWRUZXh0Q29sb3I7XG4gIH0gZWxzZSBpZiAocHJpbWFyeSkge1xuICAgIGJhY2tncm91bmRDb2xvciA9IHJhaXNlZEJ1dHRvbi5wcmltYXJ5Q29sb3I7XG4gICAgbGFiZWxDb2xvciA9IHJhaXNlZEJ1dHRvbi5wcmltYXJ5VGV4dENvbG9yO1xuICB9IGVsc2UgaWYgKHNlY29uZGFyeSkge1xuICAgIGJhY2tncm91bmRDb2xvciA9IHJhaXNlZEJ1dHRvbi5zZWNvbmRhcnlDb2xvcjtcbiAgICBsYWJlbENvbG9yID0gcmFpc2VkQnV0dG9uLnNlY29uZGFyeVRleHRDb2xvcjtcbiAgfSBlbHNlIHtcbiAgICBpZiAocHJvcHMuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBwcm9wcy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgfVxuICAgIGlmIChwcm9wcy5sYWJlbENvbG9yKSB7XG4gICAgICBsYWJlbENvbG9yID0gcHJvcHMubGFiZWxDb2xvcjtcbiAgICB9XG4gIH1cblxuICB2YXIgYnV0dG9uSGVpZ2h0ID0gc3R5bGUgJiYgc3R5bGUuaGVpZ2h0IHx8IGJ1dHRvbi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCksXG4gICAgICBtaW5XaWR0aDogZnVsbFdpZHRoID8gJzEwMCUnIDogYnV0dG9uLm1pbldpZHRoXG4gICAgfSxcbiAgICBidXR0b246IHtcbiAgICAgIGhlaWdodDogYnV0dG9uSGVpZ2h0LFxuICAgICAgbGluZUhlaWdodDogYnV0dG9uSGVpZ2h0ICsgJ3B4JyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgYm9yZGVyUmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgpLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAvLyBUaGF0J3MgdGhlIGRlZmF1bHQgdmFsdWUgZm9yIGEgYnV0dG9uIGJ1dCBub3QgYSBsaW5rXG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfSxcbiAgICBsYWJlbDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgZm9udFNpemU6IHJhaXNlZEJ1dHRvbi5mb250U2l6ZSxcbiAgICAgIGxldHRlclNwYWNpbmc6IDAsXG4gICAgICB0ZXh0VHJhbnNmb3JtOiByYWlzZWRCdXR0b24udGV4dFRyYW5zZm9ybSB8fCBidXR0b24udGV4dFRyYW5zZm9ybSB8fCAndXBwZXJjYXNlJyxcbiAgICAgIGZvbnRXZWlnaHQ6IHJhaXNlZEJ1dHRvbi5mb250V2VpZ2h0LFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgcGFkZGluZ0xlZnQ6IGljb24gJiYgbGFiZWxQb3NpdGlvbiAhPT0gJ2JlZm9yZScgPyA4IDogYmFzZVRoZW1lLnNwYWNpbmcuZGVza3RvcEd1dHRlckxlc3MsXG4gICAgICBwYWRkaW5nUmlnaHQ6IGljb24gJiYgbGFiZWxQb3NpdGlvbiA9PT0gJ2JlZm9yZScgPyA4IDogYmFzZVRoZW1lLnNwYWNpbmcuZGVza3RvcEd1dHRlckxlc3MsXG4gICAgICBjb2xvcjogbGFiZWxDb2xvclxuICAgIH0sXG4gICAgaWNvbjoge1xuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICBtYXJnaW5MZWZ0OiBsYWJlbCAmJiBsYWJlbFBvc2l0aW9uICE9PSAnYmVmb3JlJyA/IDEyIDogMCxcbiAgICAgIG1hcmdpblJpZ2h0OiBsYWJlbCAmJiBsYWJlbFBvc2l0aW9uID09PSAnYmVmb3JlJyA/IDEyIDogMFxuICAgIH0sXG4gICAgb3ZlcmxheToge1xuICAgICAgaGVpZ2h0OiBidXR0b25IZWlnaHQsXG4gICAgICBib3JkZXJSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKHN0YXRlLmtleWJvYXJkRm9jdXNlZCB8fCBzdGF0ZS5ob3ZlcmVkKSAmJiAhZGlzYWJsZWQgJiYgKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKGxhYmVsQ29sb3IsIGFtb3VudCksXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgpLFxuICAgICAgdG9wOiAwXG4gICAgfSxcbiAgICByaXBwbGU6IHtcbiAgICAgIGNvbG9yOiBsYWJlbENvbG9yLFxuICAgICAgb3BhY2l0eTogIShwcmltYXJ5IHx8IHNlY29uZGFyeSkgPyAwLjEgOiAwLjE2XG4gICAgfVxuICB9O1xufVxuXG52YXIgUmFpc2VkQnV0dG9uID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoUmFpc2VkQnV0dG9uLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSYWlzZWRCdXR0b24oKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUmFpc2VkQnV0dG9uKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IFJhaXNlZEJ1dHRvbi5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUmFpc2VkQnV0dG9uKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBob3ZlcmVkOiBmYWxzZSxcbiAgICAgIGtleWJvYXJkRm9jdXNlZDogZmFsc2UsXG4gICAgICB0b3VjaGVkOiBmYWxzZSxcbiAgICAgIGluaXRpYWxaRGVwdGg6IDAsXG4gICAgICB6RGVwdGg6IDBcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIG9ubHkgbGlzdGVuIHRvIGxlZnQgY2xpY2tzXG4gICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAwKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICB6RGVwdGg6IF90aGlzLnN0YXRlLmluaXRpYWxaRGVwdGggKyAxXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uTW91c2VEb3duKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VEb3duKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHpEZXB0aDogX3RoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aFxuICAgICAgfSk7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Nb3VzZVVwKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VVcChldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5rZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHpEZXB0aDogX3RoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCxcbiAgICAgICAgICBob3ZlcmVkOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZUVudGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLmtleWJvYXJkRm9jdXNlZCAmJiAhX3RoaXMuc3RhdGUudG91Y2hlZCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaG92ZXJlZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Nb3VzZUVudGVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHRvdWNoZWQ6IHRydWUsXG4gICAgICAgIHpEZXB0aDogX3RoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aCArIDFcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Ub3VjaFN0YXJ0KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uVG91Y2hTdGFydChldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlVG91Y2hFbmQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdG91Y2hlZDogdHJ1ZSxcbiAgICAgICAgekRlcHRoOiBfdGhpcy5zdGF0ZS5pbml0aWFsWkRlcHRoXG4gICAgICB9KTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uVG91Y2hFbmQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Ub3VjaEVuZChldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlS2V5Ym9hcmRGb2N1cyA9IGZ1bmN0aW9uIChldmVudCwga2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICB2YXIgekRlcHRoID0ga2V5Ym9hcmRGb2N1c2VkICYmICFfdGhpcy5wcm9wcy5kaXNhYmxlZCA/IF90aGlzLnN0YXRlLmluaXRpYWxaRGVwdGggKyAxIDogX3RoaXMuc3RhdGUuaW5pdGlhbFpEZXB0aDtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICB6RGVwdGg6IHpEZXB0aCxcbiAgICAgICAga2V5Ym9hcmRGb2N1c2VkOiBrZXlib2FyZEZvY3VzZWRcbiAgICAgIH0pO1xuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSYWlzZWRCdXR0b24sIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgdmFyIHpEZXB0aCA9IHRoaXMucHJvcHMuZGlzYWJsZWQgPyAwIDogMTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICB6RGVwdGg6IHpEZXB0aCxcbiAgICAgICAgaW5pdGlhbFpEZXB0aDogekRlcHRoXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciB6RGVwdGggPSBuZXh0UHJvcHMuZGlzYWJsZWQgPyAwIDogMTtcbiAgICAgIHZhciBuZXh0U3RhdGUgPSB7XG4gICAgICAgIHpEZXB0aDogekRlcHRoLFxuICAgICAgICBpbml0aWFsWkRlcHRoOiB6RGVwdGhcbiAgICAgIH07XG5cbiAgICAgIGlmIChuZXh0UHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgbmV4dFN0YXRlLmhvdmVyZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvciA9IF9wcm9wcy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgYnV0dG9uU3R5bGUgPSBfcHJvcHMuYnV0dG9uU3R5bGUsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBkaXNhYmxlZEJhY2tncm91bmRDb2xvciA9IF9wcm9wcy5kaXNhYmxlZEJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICBkaXNhYmxlZExhYmVsQ29sb3IgPSBfcHJvcHMuZGlzYWJsZWRMYWJlbENvbG9yLFxuICAgICAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcy5mdWxsV2lkdGgsXG4gICAgICAgICAgaWNvbiA9IF9wcm9wcy5pY29uLFxuICAgICAgICAgIGxhYmVsID0gX3Byb3BzLmxhYmVsLFxuICAgICAgICAgIGxhYmVsQ29sb3IgPSBfcHJvcHMubGFiZWxDb2xvcixcbiAgICAgICAgICBsYWJlbFBvc2l0aW9uID0gX3Byb3BzLmxhYmVsUG9zaXRpb24sXG4gICAgICAgICAgbGFiZWxTdHlsZSA9IF9wcm9wcy5sYWJlbFN0eWxlLFxuICAgICAgICAgIG92ZXJsYXlTdHlsZSA9IF9wcm9wcy5vdmVybGF5U3R5bGUsXG4gICAgICAgICAgcHJpbWFyeSA9IF9wcm9wcy5wcmltYXJ5LFxuICAgICAgICAgIHJpcHBsZVN0eWxlID0gX3Byb3BzLnJpcHBsZVN0eWxlLFxuICAgICAgICAgIHNlY29uZGFyeSA9IF9wcm9wcy5zZWNvbmRhcnksXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnYmFja2dyb3VuZENvbG9yJywgJ2J1dHRvblN0eWxlJywgJ2NoaWxkcmVuJywgJ2NsYXNzTmFtZScsICdkaXNhYmxlZCcsICdkaXNhYmxlZEJhY2tncm91bmRDb2xvcicsICdkaXNhYmxlZExhYmVsQ29sb3InLCAnZnVsbFdpZHRoJywgJ2ljb24nLCAnbGFiZWwnLCAnbGFiZWxDb2xvcicsICdsYWJlbFBvc2l0aW9uJywgJ2xhYmVsU3R5bGUnLCAnb3ZlcmxheVN0eWxlJywgJ3ByaW1hcnknLCAncmlwcGxlU3R5bGUnLCAnc2Vjb25kYXJ5JywgJ3N0eWxlJ10pO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuICAgICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQsIHRoaXMuc3RhdGUpO1xuICAgICAgdmFyIG1lcmdlZFJpcHBsZVN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLnJpcHBsZSwgcmlwcGxlU3R5bGUpO1xuXG4gICAgICB2YXIgYnV0dG9uRXZlbnRIYW5kbGVycyA9IGRpc2FibGVkID8ge30gOiB7XG4gICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vdXNlRG93bixcbiAgICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZU1vdXNlVXAsXG4gICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG4gICAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsXG4gICAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5oYW5kbGVLZXlib2FyZEZvY3VzXG4gICAgICB9O1xuXG4gICAgICB2YXIgbGFiZWxFbGVtZW50ID0gbGFiZWwgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzcGFuJyxcbiAgICAgICAgeyBzdHlsZTogcHJlcGFyZVN0eWxlcygoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLmxhYmVsLCBsYWJlbFN0eWxlKSksIGtleTogJ2xhYmVsRWxlbWVudCcgfSxcbiAgICAgICAgbGFiZWxcbiAgICAgICk7XG5cbiAgICAgIHZhciBpY29uQ2xvbmVkID0gaWNvbiAmJiAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoaWNvbiwge1xuICAgICAgICBjb2xvcjogaWNvbi5wcm9wcy5jb2xvciB8fCBzdHlsZXMubGFiZWwuY29sb3IsXG4gICAgICAgIHN0eWxlOiAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLmljb24sIGljb24ucHJvcHMuc3R5bGUpLFxuICAgICAgICBrZXk6ICdpY29uQ2xvbmVkJ1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFBsYWNlIGxhYmVsIGJlZm9yZSBvciBhZnRlciBjaGlsZHJlbi5cbiAgICAgIHZhciBlbmhhbmNlZEJ1dHRvbkNoaWxkcmVuID0gbGFiZWxQb3NpdGlvbiA9PT0gJ2JlZm9yZScgPyBbbGFiZWxFbGVtZW50LCBpY29uQ2xvbmVkLCBjaGlsZHJlbl0gOiBbY2hpbGRyZW4sIGljb25DbG9uZWQsIGxhYmVsRWxlbWVudF07XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgX1BhcGVyMi5kZWZhdWx0LFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICAgc3R5bGU6ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpLFxuICAgICAgICAgIHpEZXB0aDogdGhpcy5zdGF0ZS56RGVwdGhcbiAgICAgICAgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX0VuaGFuY2VkQnV0dG9uMi5kZWZhdWx0LFxuICAgICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCBidXR0b25FdmVudEhhbmRsZXJzLCB7XG4gICAgICAgICAgICByZWY6ICdjb250YWluZXInLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgICAgc3R5bGU6ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMuYnV0dG9uLCBidXR0b25TdHlsZSksXG4gICAgICAgICAgICBmb2N1c1JpcHBsZUNvbG9yOiBtZXJnZWRSaXBwbGVTdHlsZXMuY29sb3IsXG4gICAgICAgICAgICB0b3VjaFJpcHBsZUNvbG9yOiBtZXJnZWRSaXBwbGVTdHlsZXMuY29sb3IsXG4gICAgICAgICAgICBmb2N1c1JpcHBsZU9wYWNpdHk6IG1lcmdlZFJpcHBsZVN0eWxlcy5vcGFjaXR5LFxuICAgICAgICAgICAgdG91Y2hSaXBwbGVPcGFjaXR5OiBtZXJnZWRSaXBwbGVTdHlsZXMub3BhY2l0eVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJlZjogJ292ZXJsYXknLFxuICAgICAgICAgICAgICBzdHlsZTogcHJlcGFyZVN0eWxlcygoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLm92ZXJsYXksIG92ZXJsYXlTdHlsZSkpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5oYW5jZWRCdXR0b25DaGlsZHJlblxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFJhaXNlZEJ1dHRvbjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblJhaXNlZEJ1dHRvbi5tdWlOYW1lID0gJ1JhaXNlZEJ1dHRvbic7XG5SYWlzZWRCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlZDogZmFsc2UsXG4gIGxhYmVsUG9zaXRpb246ICdhZnRlcicsXG4gIGZ1bGxXaWR0aDogZmFsc2UsXG4gIHByaW1hcnk6IGZhbHNlLFxuICBzZWNvbmRhcnk6IGZhbHNlXG59O1xuUmFpc2VkQnV0dG9uLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5SYWlzZWRCdXR0b24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgYmFja2dyb3VuZCBjb2xvciBmb3IgdGhlIGJ1dHRvbixcbiAgICogYnV0IG5vdCB0aGUgZGVmYXVsdCBkaXNhYmxlZCBiYWNrZ3JvdW5kIGNvbG9yXG4gICAqICh1c2UgYGRpc2FibGVkQmFja2dyb3VuZENvbG9yYCBmb3IgdGhpcykuXG4gICAqL1xuICBiYWNrZ3JvdW5kQ29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIGJ1dHRvbiBlbGVtZW50LlxuICAgKi9cbiAgYnV0dG9uU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGJ1dHRvbi5cbiAgICogSWYgYSBsYWJlbCBpcyBwcm92aWRlZCB2aWEgdGhlIGBsYWJlbGAgcHJvcCwgdGhlIHRleHQgd2l0aGluIHRoZSBsYWJlbFxuICAgKiB3aWxsIGJlIGRpc3BsYXllZCBpbiBhZGRpdGlvbiB0byB0aGUgY29udGVudCBwcm92aWRlZCBoZXJlLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAgKiBUaGUgZWxlbWVudCB0byB1c2UgYXMgdGhlIGNvbnRhaW5lciBmb3IgdGhlIFJhaXNlZEJ1dHRvbi4gRWl0aGVyIGEgc3RyaW5nIHRvXG4gICAgKiB1c2UgYSBET00gZWxlbWVudCBvciBhIFJlYWN0RWxlbWVudC4gVGhpcyBpcyB1c2VmdWwgZm9yIHdyYXBwaW5nIHRoZVxuICAgICogUmFpc2VkQnV0dG9uIGluIGEgY3VzdG9tIExpbmsgY29tcG9uZW50LiBJZiBhIFJlYWN0RWxlbWVudCBpcyBnaXZlbiwgZW5zdXJlXG4gICAgKiB0aGF0IGl0IHBhc3NlcyBhbGwgb2YgaXRzIGdpdmVuIHByb3BzIHRocm91Z2ggdG8gdGhlIHVuZGVybHlpbmcgRE9NXG4gICAgKiBlbGVtZW50IGFuZCByZW5kZXJzIGl0cyBjaGlsZHJlbiBwcm9wIGZvciBwcm9wZXIgaW50ZWdyYXRpb24uXG4gICAgKi9cbiAgY29udGFpbmVyRWxlbWVudDogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnRdKSxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBlbGVtZW50J3MgcmlwcGxlIGVmZmVjdCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZVRvdWNoUmlwcGxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgYmFja2dyb3VuZCBjb2xvciBmb3IgdGhlIGJ1dHRvblxuICAgKiB3aGVuIGl0IGlzIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWRCYWNrZ3JvdW5kQ29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBidXR0b24ncyBsYWJlbCB3aGVuIHRoZSBidXR0b24gaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZExhYmVsQ29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGJ1dHRvbiB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIFVSTCB0byBsaW5rIHRvIHdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkLlxuICAgKi9cbiAgaHJlZjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBBbiBpY29uIHRvIGJlIGRpc3BsYXllZCB3aXRoaW4gdGhlIGJ1dHRvbi5cbiAgICovXG4gIGljb246IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCB0byBiZSBkaXNwbGF5ZWQgd2l0aGluIHRoZSBidXR0b24uXG4gICAqIElmIGNvbnRlbnQgaXMgcHJvdmlkZWQgdmlhIHRoZSBgY2hpbGRyZW5gIHByb3AsIHRoYXQgY29udGVudCB3aWxsIGJlXG4gICAqIGRpc3BsYXllZCBpbiBhZGRpdGlvbiB0byB0aGUgbGFiZWwgcHJvdmlkZWQgaGVyZS5cbiAgICovXG4gIGxhYmVsOiB2YWxpZGF0ZUxhYmVsLFxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBidXR0b24ncyBsYWJlbC5cbiAgICovXG4gIGxhYmVsQ29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogVGhlIHBvc2l0aW9uIG9mIHRoZSBidXR0b24ncyBsYWJlbCByZWxhdGl2ZSB0byB0aGUgYnV0dG9uJ3MgYGNoaWxkcmVuYC5cbiAgICovXG4gIGxhYmVsUG9zaXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydiZWZvcmUnLCAnYWZ0ZXInXSksXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgYnV0dG9uJ3MgbGFiZWwgZWxlbWVudC5cbiAgICovXG4gIGxhYmVsU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBDbGljayBldmVudCB0YXJnZXRpbmcgdGhlIGJ1dHRvbi5cbiAgICovXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Nb3VzZURvd246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Nb3VzZUVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VMZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvbk1vdXNlVXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Ub3VjaEVuZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvblRvdWNoU3RhcnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUgc3R5bGUgb2YgdGhlIGJ1dHRvbiBvdmVybGF5LlxuICAgKi9cbiAgb3ZlcmxheVN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBidXR0b24gd2lsbCB1c2UgdGhlIHRoZW1lJ3MgcHJpbWFyeSBjb2xvci5cbiAgICovXG4gIHByaW1hcnk6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUgc3R5bGUgb2YgdGhlIHJpcHBsZSBlbGVtZW50LlxuICAgKi9cbiAgcmlwcGxlU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGJ1dHRvbiB3aWxsIHVzZSB0aGUgdGhlbWUncyBzZWNvbmRhcnkgY29sb3IuXG4gICAqIElmIGJvdGggYHNlY29uZGFyeWAgYW5kIGBwcmltYXJ5YCBhcmUgdHJ1ZSwgdGhlIGJ1dHRvbiB3aWxsIHVzZVxuICAgKiB0aGUgdGhlbWUncyBwcmltYXJ5IGNvbG9yLlxuICAgKi9cbiAgc2Vjb25kYXJ5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBSYWlzZWRCdXR0b247IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX1JhaXNlZEJ1dHRvbiA9IHJlcXVpcmUoJy4vUmFpc2VkQnV0dG9uJyk7XG5cbnZhciBfUmFpc2VkQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JhaXNlZEJ1dHRvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9SYWlzZWRCdXR0b24yLmRlZmF1bHQ7IiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Pc3dhbGQpO1wiLCBcIlwiXSk7XG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmhlYWRlci1tb2JpbGUtdGl0bGUge1xcbiAgZm9udC1mYW1pbHk6ICdPc3dhbGQnLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiA0MHB4O1xcbiAgY29sb3I6IGJsYWNrO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xcbn1cXG5cXG4uYnV0dG9uLWdyaWQge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTIuNSUgMTIuNSUgMTIuNSUgMTIuNSUgMTIuNSUgMTIuNSUgMTIuNSUgMTIuNSU7XFxufVxcblxcbi5waWN0dXJlIHtcXG4gIGdyaWQtY29sdW1uLXN0YXJ0OiAxO1xcbiAgZ3JpZC1jb2x1bW4tZW5kOiAyO1xcbiAgZ3JpZC1yb3ctc3RhcnQ6IDE7XFxuICBncmlkLXJvdy1lbmQ6IDM7XFxufVxcblxcbi5oZWFkZXItbW9iaWxlLWZpeGVkIHtcXG4gIHRvcDogMHB4O1xcbiAgbGVmdDogMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDMuOGVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICBvcGFjaXR5OiAwLjc1O1xcbn1cXG5cXG4uaGVhZGVyLW1vYmlsZSB7XFxuICB0b3A6IDBweDtcXG4gIGxlZnQ6IDBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAzLjhlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uaGVhZGVyLWxhbmRzY2FwZSB7XFxuICBiYWNrZ3JvdW5kOiAjMDAwMjkzO1xcblxcbiAgLypcXG4gIHRvcDogMHB4O1xcbiAgbGVmdDogMHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDMuOGVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICAqL1xcbn1cXG5cXG4uaGVhZGVyLWxhbmRzY2FwZS1maXhlZCB7XFxuICB0b3A6IDBweDtcXG4gIGxlZnQ6IDBweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAzLjhlbTtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIG9wYWNpdHk6IDAuNzU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kOiAjMDAwMjkzO1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5saW5rIHtcXG4gIG1hcmdpbjogMTVweDtcXG4gIHBhZGRpbmc6IDE1cHggMTVweCAxNXB4IDE1cHg7XFxufVxcblxcbi5pY29uIHtcXG4gIHRvcDogMHB4O1xcbiAgZmxvYXQ6IHJpZ2h0O1xcbn1cXG5cXG4uaW1hZ2Uge1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgbWF4LWhlaWdodDogMTAwJTtcXG59XFxuXFxuLmJ1dHRvbntcXG4gIGZvbnQtZmFtaWx5OiAnT3N3YWxkJywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIHBhZGRpbmc6IDRweDtcXG4gIGJvcmRlcjogM3B4IHNvbGlkICMwMDAyOTM7XFxuICBiYWNrZ3JvdW5kOiAjMDAwMjkzO1xcbiAgY29sb3I6ICNkMWNkMDI7XFxuICB0cmFuc2l0aW9uOiBhbGwgLjJzIGVhc2UtaW4tb3V0O1xcbiAgbWFyZ2luOiA1cHg7XFxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgd2lkdGg6ICA4MCU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBvcGFjaXR5OiAwLjY7XFxufVxcblxcbi5idXR0b246aG92ZXIge1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzMzMztcXG4gIGNvbG9yOiAjZDFjZDAyO1xcbiAgYm9yZGVyLXJhZGl1czogMzBweDtcXG4gIGN1cnNvcjogIHBvaW50ZXI7XFxuICBvcGFjaXR5OiAxO1xcbn1cXG5cXG4uYnV0dG9uLWZpeGVke1xcbiAgZm9udC1mYW1pbHk6ICdPc3dhbGQnLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbiAgcGFkZGluZzogM3B4O1xcbiAgYm9yZGVyOiAycHggc29saWQgIzAwMDI5MztcXG4gIGJhY2tncm91bmQ6ICMwMDAyOTM7XFxuICBjb2xvcjogI2QxY2QwMjtcXG4gIHRyYW5zaXRpb246IGFsbCAuMnMgZWFzZS1pbi1vdXQ7XFxuICBtYXJnaW46IDVweDtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBoZWlnaHQ6IGF1dG87XFxuICB3aWR0aDogIDE1MHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG4uYnV0dG9uLWZpeGVkOmhvdmVyIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7XFxuICBjb2xvcjogI2QxY2QwMjtcXG4gIGJvcmRlci1yYWRpdXM6IDMwcHg7XFxuICBjdXJzb3I6ICBwb2ludGVyO1xcbn1cXG5cXG5ociB7XFxuICB3aWR0aDogNjAlO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxufVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9MaXN0ID0gcmVxdWlyZSgnLi9MaXN0Jyk7XG5cbnZhciBfTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaXN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE5lc3RlZExpc3QgPSBmdW5jdGlvbiBOZXN0ZWRMaXN0KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgb3BlbiA9IHByb3BzLm9wZW4sXG4gICAgICBuZXN0ZWRMZXZlbCA9IHByb3BzLm5lc3RlZExldmVsLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZTtcblxuXG4gIGlmICghb3Blbikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgIF9MaXN0Mi5kZWZhdWx0LFxuICAgIHsgc3R5bGU6IHN0eWxlIH0sXG4gICAgX3JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoY2hpbGQpID8gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICAgIG5lc3RlZExldmVsOiBuZXN0ZWRMZXZlbCArIDFcbiAgICAgIH0pIDogY2hpbGQ7XG4gICAgfSlcbiAgKTtcbn07XG5cbk5lc3RlZExpc3QucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICBuZXN0ZWRMZXZlbDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIuaXNSZXF1aXJlZCxcbiAgb3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59IDoge307XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5lc3RlZExpc3Q7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHVyZSA9IHJlcXVpcmUoJ3JlY29tcG9zZS9wdXJlJyk7XG5cbnZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblxudmFyIF9TdmdJY29uID0gcmVxdWlyZSgnLi4vLi4vU3ZnSWNvbicpO1xuXG52YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBOYXZpZ2F0aW9uRXhwYW5kTW9yZSA9IGZ1bmN0aW9uIE5hdmlnYXRpb25FeHBhbmRNb3JlKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcbiAgICBwcm9wcyxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00xNi41OSA4LjU5TDEyIDEzLjE3IDcuNDEgOC41OSA2IDEwbDYgNiA2LTZ6JyB9KVxuICApO1xufTtcbk5hdmlnYXRpb25FeHBhbmRNb3JlID0gKDAsIF9wdXJlMi5kZWZhdWx0KShOYXZpZ2F0aW9uRXhwYW5kTW9yZSk7XG5OYXZpZ2F0aW9uRXhwYW5kTW9yZS5kaXNwbGF5TmFtZSA9ICdOYXZpZ2F0aW9uRXhwYW5kTW9yZSc7XG5OYXZpZ2F0aW9uRXhwYW5kTW9yZS5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBOYXZpZ2F0aW9uRXhwYW5kTW9yZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wdXJlID0gcmVxdWlyZSgncmVjb21wb3NlL3B1cmUnKTtcblxudmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXG52YXIgX1N2Z0ljb24gPSByZXF1aXJlKCcuLi8uLi9TdmdJY29uJyk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE5hdmlnYXRpb25FeHBhbmRMZXNzID0gZnVuY3Rpb24gTmF2aWdhdGlvbkV4cGFuZExlc3MocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgIF9TdmdJY29uMi5kZWZhdWx0LFxuICAgIHByb3BzLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTEyIDhsLTYgNiAxLjQxIDEuNDFMMTIgMTAuODNsNC41OSA0LjU4TDE4IDE0eicgfSlcbiAgKTtcbn07XG5OYXZpZ2F0aW9uRXhwYW5kTGVzcyA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoTmF2aWdhdGlvbkV4cGFuZExlc3MpO1xuTmF2aWdhdGlvbkV4cGFuZExlc3MuZGlzcGxheU5hbWUgPSAnTmF2aWdhdGlvbkV4cGFuZExlc3MnO1xuTmF2aWdhdGlvbkV4cGFuZExlc3MubXVpTmFtZSA9ICdTdmdJY29uJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gTmF2aWdhdGlvbkV4cGFuZExlc3M7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5leHRlbmRDaGlsZHJlbiA9IGV4dGVuZENoaWxkcmVuO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGV4dGVuZENoaWxkcmVuKGNoaWxkcmVuLCBleHRlbmRlZFByb3BzLCBleHRlbmRlZENoaWxkcmVuKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoIV9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9XG5cbiAgICB2YXIgbmV3UHJvcHMgPSB0eXBlb2YgZXh0ZW5kZWRQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IGV4dGVuZGVkUHJvcHMoY2hpbGQpIDogZXh0ZW5kZWRQcm9wcztcblxuICAgIHZhciBuZXdDaGlsZHJlbiA9IHR5cGVvZiBleHRlbmRlZENoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gZXh0ZW5kZWRDaGlsZHJlbihjaGlsZCkgOiBleHRlbmRlZENoaWxkcmVuID8gZXh0ZW5kZWRDaGlsZHJlbiA6IGNoaWxkLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIG5ld1Byb3BzLCBuZXdDaGlsZHJlbik7XG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBfdHJhbnNpdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNpdGlvbnMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRTdHlsZXMocHJvcHMsIGNvbnRleHQsIHN0YXRlKSB7XG4gIHZhciB2ZXJ0aWNhbFBvc2l0aW9uID0gcHJvcHMudmVydGljYWxQb3NpdGlvbjtcbiAgdmFyIGhvcml6b250YWxQb3NpdGlvbiA9IHByb3BzLmhvcml6b250YWxQb3NpdGlvbjtcbiAgdmFyIHRvdWNoTWFyZ2luT2Zmc2V0ID0gcHJvcHMudG91Y2ggPyAxMCA6IDA7XG4gIHZhciB0b3VjaE9mZnNldFRvcCA9IHByb3BzLnRvdWNoID8gLTIwIDogLTEwO1xuICB2YXIgb2Zmc2V0ID0gdmVydGljYWxQb3NpdGlvbiA9PT0gJ2JvdHRvbScgPyAxNCArIHRvdWNoTWFyZ2luT2Zmc2V0IDogLTE0IC0gdG91Y2hNYXJnaW5PZmZzZXQ7XG5cbiAgdmFyIF9jb250ZXh0JG11aVRoZW1lID0gY29udGV4dC5tdWlUaGVtZSxcbiAgICAgIGJhc2VUaGVtZSA9IF9jb250ZXh0JG11aVRoZW1lLmJhc2VUaGVtZSxcbiAgICAgIHpJbmRleCA9IF9jb250ZXh0JG11aVRoZW1lLnpJbmRleCxcbiAgICAgIHRvb2x0aXAgPSBfY29udGV4dCRtdWlUaGVtZS50b29sdGlwLFxuICAgICAgYm9yZGVyUmFkaXVzID0gX2NvbnRleHQkbXVpVGhlbWUuYm9yZGVyUmFkaXVzO1xuXG5cbiAgdmFyIHN0eWxlcyA9IHtcbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGZvbnRGYW1pbHk6IGJhc2VUaGVtZS5mb250RmFtaWx5LFxuICAgICAgZm9udFNpemU6ICcxMHB4JyxcbiAgICAgIGxpbmVIZWlnaHQ6ICcyMnB4JyxcbiAgICAgIHBhZGRpbmc6ICcwIDhweCcsXG4gICAgICB6SW5kZXg6IHpJbmRleC50b29sdGlwLFxuICAgICAgY29sb3I6IHRvb2x0aXAuY29sb3IsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0b3A6IC0xMDAwMCxcbiAgICAgIGJvcmRlclJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgb3BhY2l0eTogMCxcbiAgICAgIHJpZ2h0OiBob3Jpem9udGFsUG9zaXRpb24gPT09ICdsZWZ0JyA/IDEyIDogbnVsbCxcbiAgICAgIGxlZnQ6IGhvcml6b250YWxQb3NpdGlvbiA9PT0gJ2NlbnRlcicgPyAoc3RhdGUub2Zmc2V0V2lkdGggLSA0OCkgLyAyICogLTEgOiBob3Jpem9udGFsUG9zaXRpb24gPT09ICdyaWdodCcgPyAxMiA6IG51bGwsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnMG1zJywgJ3RvcCcsICc0NTBtcycpICsgJywgJyArIF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCc0NTBtcycsICd0cmFuc2Zvcm0nLCAnMG1zJykgKyAnLCAnICsgX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoJzQ1MG1zJywgJ29wYWNpdHknLCAnMG1zJylcbiAgICB9LFxuICAgIGxhYmVsOiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gICAgfSxcbiAgICByaXBwbGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogaG9yaXpvbnRhbFBvc2l0aW9uID09PSAnY2VudGVyJyA/ICc1MCUnIDogaG9yaXpvbnRhbFBvc2l0aW9uID09PSAnbGVmdCcgPyAnMTAwJScgOiAnMCUnLFxuICAgICAgdG9wOiB2ZXJ0aWNhbFBvc2l0aW9uID09PSAnYm90dG9tJyA/IDAgOiAnMTAwJScsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgLTUwJSknLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCcwbXMnLCAnd2lkdGgnLCAnNDUwbXMnKSArICcsICcgKyBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnMG1zJywgJ2hlaWdodCcsICc0NTBtcycpICsgJywgJyArIF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCc0NTBtcycsICdiYWNrZ3JvdW5kQ29sb3InLCAnMG1zJylcbiAgICB9LFxuICAgIHJvb3RXaGVuU2hvd246IHtcbiAgICAgIHRvcDogdmVydGljYWxQb3NpdGlvbiA9PT0gJ3RvcCcgPyB0b3VjaE9mZnNldFRvcCA6IDM2LFxuICAgICAgb3BhY2l0eTogdG9vbHRpcC5vcGFjaXR5LFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDBweCwgJyArIG9mZnNldCArICdweCknLFxuICAgICAgdHJhbnNpdGlvbjogX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoJzBtcycsICd0b3AnLCAnMG1zJykgKyAnLCAnICsgX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoJzQ1MG1zJywgJ3RyYW5zZm9ybScsICcwbXMnKSArICcsICcgKyBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnNDUwbXMnLCAnb3BhY2l0eScsICcwbXMnKVxuICAgIH0sXG4gICAgcm9vdFdoZW5Ub3VjaGVkOiB7XG4gICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgbGluZUhlaWdodDogJzMycHgnLFxuICAgICAgcGFkZGluZzogJzAgMTZweCdcbiAgICB9LFxuICAgIHJpcHBsZVdoZW5TaG93bjoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0b29sdGlwLnJpcHBsZUJhY2tncm91bmRDb2xvcixcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCc0NTBtcycsICd3aWR0aCcsICcwbXMnKSArICcsICcgKyBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnNDUwbXMnLCAnaGVpZ2h0JywgJzBtcycpICsgJywgJyArIF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCc0NTBtcycsICdiYWNrZ3JvdW5kQ29sb3InLCAnMG1zJylcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxudmFyIFRvb2x0aXAgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShUb29sdGlwLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUb29sdGlwKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFRvb2x0aXApO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gVG9vbHRpcC5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoVG9vbHRpcCkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgb2Zmc2V0V2lkdGg6IG51bGxcbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoVG9vbHRpcCwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5zZXRSaXBwbGVTaXplKCk7XG4gICAgICB0aGlzLnNldFRvb2x0aXBQb3NpdGlvbigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCkge1xuICAgICAgdGhpcy5zZXRUb29sdGlwUG9zaXRpb24oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLnNldFJpcHBsZVNpemUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRSaXBwbGVTaXplJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UmlwcGxlU2l6ZSgpIHtcbiAgICAgIHZhciByaXBwbGUgPSB0aGlzLnJlZnMucmlwcGxlO1xuICAgICAgdmFyIHRvb2x0aXAgPSB0aGlzLnJlZnMudG9vbHRpcDtcbiAgICAgIHZhciB0b29sdGlwV2lkdGggPSBwYXJzZUludCh0b29sdGlwLm9mZnNldFdpZHRoLCAxMCkgLyAodGhpcy5wcm9wcy5ob3Jpem9udGFsUG9zaXRpb24gPT09ICdjZW50ZXInID8gMiA6IDEpO1xuICAgICAgdmFyIHRvb2x0aXBIZWlnaHQgPSBwYXJzZUludCh0b29sdGlwLm9mZnNldEhlaWdodCwgMTApO1xuXG4gICAgICB2YXIgcmlwcGxlRGlhbWV0ZXIgPSBNYXRoLmNlaWwoTWF0aC5zcXJ0KE1hdGgucG93KHRvb2x0aXBIZWlnaHQsIDIpICsgTWF0aC5wb3codG9vbHRpcFdpZHRoLCAyKSkgKiAyKTtcbiAgICAgIGlmICh0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgICAgcmlwcGxlLnN0eWxlLmhlaWdodCA9IHJpcHBsZURpYW1ldGVyICsgJ3B4JztcbiAgICAgICAgcmlwcGxlLnN0eWxlLndpZHRoID0gcmlwcGxlRGlhbWV0ZXIgKyAncHgnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmlwcGxlLnN0eWxlLndpZHRoID0gJzBweCc7XG4gICAgICAgIHJpcHBsZS5zdHlsZS5oZWlnaHQgPSAnMHB4JztcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRUb29sdGlwUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUb29sdGlwUG9zaXRpb24oKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgb2Zmc2V0V2lkdGg6IHRoaXMucmVmcy50b29sdGlwLm9mZnNldFdpZHRoIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGhvcml6b250YWxQb3NpdGlvbiA9IF9wcm9wcy5ob3Jpem9udGFsUG9zaXRpb24sXG4gICAgICAgICAgbGFiZWwgPSBfcHJvcHMubGFiZWwsXG4gICAgICAgICAgc2hvdyA9IF9wcm9wcy5zaG93LFxuICAgICAgICAgIHRvdWNoID0gX3Byb3BzLnRvdWNoLFxuICAgICAgICAgIHZlcnRpY2FsUG9zaXRpb24gPSBfcHJvcHMudmVydGljYWxQb3NpdGlvbixcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wcywgWydob3Jpem9udGFsUG9zaXRpb24nLCAnbGFiZWwnLCAnc2hvdycsICd0b3VjaCcsICd2ZXJ0aWNhbFBvc2l0aW9uJ10pO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuICAgICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQsIHRoaXMuc3RhdGUpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwge1xuICAgICAgICAgIHJlZjogJ3Rvb2x0aXAnLFxuICAgICAgICAgIHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgdGhpcy5wcm9wcy5zaG93ICYmIHN0eWxlcy5yb290V2hlblNob3duLCB0aGlzLnByb3BzLnRvdWNoICYmIHN0eWxlcy5yb290V2hlblRvdWNoZWQsIHRoaXMucHJvcHMuc3R5bGUpKVxuICAgICAgICB9KSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgICByZWY6ICdyaXBwbGUnLFxuICAgICAgICAgIHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucmlwcGxlLCB0aGlzLnByb3BzLnNob3cgJiYgc3R5bGVzLnJpcHBsZVdoZW5TaG93bikpXG4gICAgICAgIH0pLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgeyBzdHlsZTogcHJlcGFyZVN0eWxlcyhzdHlsZXMubGFiZWwpIH0sXG4gICAgICAgICAgbGFiZWxcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRvb2x0aXA7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Ub29sdGlwLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5Ub29sdGlwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjc3MgY2xhc3MgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgaG9yaXpvbnRhbFBvc2l0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsnbGVmdCcsICdyaWdodCcsICdjZW50ZXInXSksXG4gIGxhYmVsOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcbiAgc2hvdzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgdG91Y2g6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgdmVydGljYWxQb3NpdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbJ3RvcCcsICdib3R0b20nXSlcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IFRvb2x0aXA7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcblxudmFyIF90cmFuc2l0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldFN0eWxlcyhwcm9wcywgY29udGV4dCwgc3RhdGUpIHtcbiAgdmFyIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBob3ZlckNvbG9yID0gcHJvcHMuaG92ZXJDb2xvcjtcbiAgdmFyIGJhc2VUaGVtZSA9IGNvbnRleHQubXVpVGhlbWUuYmFzZVRoZW1lO1xuXG4gIHZhciBvZmZDb2xvciA9IGNvbG9yIHx8IGJhc2VUaGVtZS5wYWxldHRlLnRleHRDb2xvcjtcbiAgdmFyIG9uQ29sb3IgPSBob3ZlckNvbG9yIHx8IG9mZkNvbG9yO1xuXG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgY29sb3I6IHN0YXRlLmhvdmVyZWQgPyBvbkNvbG9yIDogb2ZmQ29sb3IsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGZvbnRTaXplOiBiYXNlVGhlbWUuc3BhY2luZy5pY29uU2l6ZSxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgdHJhbnNpdGlvbjogX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoKVxuICAgIH1cbiAgfTtcbn1cblxudmFyIEZvbnRJY29uID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoRm9udEljb24sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZvbnRJY29uKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEZvbnRJY29uKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IEZvbnRJY29uLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShGb250SWNvbikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgaG92ZXJlZDogZmFsc2VcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZUxlYXZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBob3ZlciBpcyBuZWVkZWQgb25seSB3aGVuIGEgaG92ZXJDb2xvciBpcyBkZWZpbmVkXG4gICAgICBpZiAoX3RoaXMucHJvcHMuaG92ZXJDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Nb3VzZUxlYXZlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VFbnRlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gaG92ZXIgaXMgbmVlZGVkIG9ubHkgd2hlbiBhIGhvdmVyQ29sb3IgaXMgZGVmaW5lZFxuICAgICAgaWYgKF90aGlzLnByb3BzLmhvdmVyQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IHRydWUgfSk7XG4gICAgICB9XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Nb3VzZUVudGVyKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uTW91c2VFbnRlcihldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEZvbnRJY29uLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGhvdmVyQ29sb3IgPSBfcHJvcHMuaG92ZXJDb2xvcixcbiAgICAgICAgICBvbk1vdXNlTGVhdmUgPSBfcHJvcHMub25Nb3VzZUxlYXZlLFxuICAgICAgICAgIG9uTW91c2VFbnRlciA9IF9wcm9wcy5vbk1vdXNlRW50ZXIsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnaG92ZXJDb2xvcicsICdvbk1vdXNlTGVhdmUnLCAnb25Nb3VzZUVudGVyJywgJ3N0eWxlJ10pO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuICAgICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQsIHRoaXMuc3RhdGUpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwge1xuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLmhhbmRsZU1vdXNlRW50ZXIsXG4gICAgICAgIHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpKVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRm9udEljb247XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Gb250SWNvbi5tdWlOYW1lID0gJ0ZvbnRJY29uJztcbkZvbnRJY29uLmRlZmF1bHRQcm9wcyA9IHtcbiAgb25Nb3VzZUVudGVyOiBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoKSB7fSxcbiAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoKSB7fVxufTtcbkZvbnRJY29uLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5Gb250SWNvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBmb250IGNvbG9yIG9mIHRoZSBmb250IGljb24uIElmIG5vdCBzcGVjaWZpZWQsXG4gICAqIHRoaXMgY29tcG9uZW50IHdpbGwgZGVmYXVsdCB0byBtdWlUaGVtZS5wYWxldHRlLnRleHRDb2xvci5cbiAgICovXG4gIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGljb24gY29sb3Igd2hlbiB0aGUgbW91c2UgaG92ZXJzIG92ZXIgdGhlIGljb24uXG4gICAqL1xuICBob3ZlckNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Nb3VzZUVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VMZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gRm9udEljb247IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX0ZvbnRJY29uID0gcmVxdWlyZSgnLi9Gb250SWNvbicpO1xuXG52YXIgX0ZvbnRJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ZvbnRJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX0ZvbnRJY29uMi5kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBfdHJhbnNpdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNpdGlvbnMpO1xuXG52YXIgX3Byb3BUeXBlczMgPSByZXF1aXJlKCcuLi91dGlscy9wcm9wVHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMyk7XG5cbnZhciBfRW5oYW5jZWRCdXR0b24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9FbmhhbmNlZEJ1dHRvbicpO1xuXG52YXIgX0VuaGFuY2VkQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VuaGFuY2VkQnV0dG9uKTtcblxudmFyIF9Gb250SWNvbiA9IHJlcXVpcmUoJy4uL0ZvbnRJY29uJyk7XG5cbnZhciBfRm9udEljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRm9udEljb24pO1xuXG52YXIgX1Rvb2x0aXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9Ub29sdGlwJyk7XG5cbnZhciBfVG9vbHRpcDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ub29sdGlwKTtcblxudmFyIF9jaGlsZFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvY2hpbGRVdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRTdHlsZXMocHJvcHMsIGNvbnRleHQpIHtcbiAgdmFyIGJhc2VUaGVtZSA9IGNvbnRleHQubXVpVGhlbWUuYmFzZVRoZW1lO1xuXG5cbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgpLFxuICAgICAgcGFkZGluZzogYmFzZVRoZW1lLnNwYWNpbmcuaWNvblNpemUgLyAyLFxuICAgICAgd2lkdGg6IGJhc2VUaGVtZS5zcGFjaW5nLmljb25TaXplICogMixcbiAgICAgIGhlaWdodDogYmFzZVRoZW1lLnNwYWNpbmcuaWNvblNpemUgKiAyLFxuICAgICAgZm9udFNpemU6IDBcbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgfSxcbiAgICBkaXNhYmxlZDoge1xuICAgICAgY29sb3I6IGJhc2VUaGVtZS5wYWxldHRlLmRpc2FibGVkQ29sb3IsXG4gICAgICBmaWxsOiBiYXNlVGhlbWUucGFsZXR0ZS5kaXNhYmxlZENvbG9yLFxuICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICB9XG4gIH07XG59XG5cbnZhciBJY29uQnV0dG9uID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoSWNvbkJ1dHRvbiwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSWNvbkJ1dHRvbigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBJY29uQnV0dG9uKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IEljb25CdXR0b24uX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKEljb25CdXR0b24pKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhvdmVyZWQ6IGZhbHNlLFxuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IGZhbHNlLFxuICAgICAgLy8gTm90IHRvIGJlIGNvbmZvbmRlZCB3aXRoIHRoZSB0b3VjaCBwcm9wZXJ0eS5cbiAgICAgIC8vIFRoaXMgc3RhdGUgaXMgdG8gZGV0ZXJtaW5lZCBpZiBpdCdzIGEgbW9iaWxlIGRldmljZS5cbiAgICAgIHRvdWNoOiBmYWxzZSxcbiAgICAgIHRvb2x0aXBTaG93bjogZmFsc2VcbiAgICB9LCBfdGhpcy5oYW5kbGVCbHVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5oaWRlVG9vbHRpcCgpO1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQmx1cikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkJsdXIoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zaG93VG9vbHRpcCgpO1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRm9jdXMpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Gb2N1cyhldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFfdGhpcy5idXR0b24uaXNLZXlib2FyZEZvY3VzZWQoKSkge1xuICAgICAgICBfdGhpcy5oaWRlVG9vbHRpcCgpO1xuICAgICAgfVxuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiBmYWxzZSB9KTtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZU91dCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmRpc2FibGVkKSBfdGhpcy5oaWRlVG9vbHRpcCgpO1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uTW91c2VPdXQpIF90aGlzLnByb3BzLm9uTW91c2VPdXQoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlRW50ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnNob3dUb29sdGlwKCk7XG5cbiAgICAgIC8vIENhbmNlbCBob3ZlciBzdHlsZXMgZm9yIHRvdWNoIGRldmljZXNcbiAgICAgIGlmICghX3RoaXMuc3RhdGUudG91Y2gpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiB0cnVlIH0pO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uTW91c2VFbnRlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZVRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgdG91Y2g6IHRydWUgfSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vblRvdWNoU3RhcnQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Ub3VjaFN0YXJ0KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVLZXlib2FyZEZvY3VzID0gZnVuY3Rpb24gKGV2ZW50LCBpc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBvbkZvY3VzID0gX3RoaXMkcHJvcHMub25Gb2N1cyxcbiAgICAgICAgICBvbkJsdXIgPSBfdGhpcyRwcm9wcy5vbkJsdXIsXG4gICAgICAgICAgb25LZXlib2FyZEZvY3VzID0gX3RoaXMkcHJvcHMub25LZXlib2FyZEZvY3VzO1xuXG4gICAgICBpZiAoaXNLZXlib2FyZEZvY3VzZWQgJiYgIWRpc2FibGVkKSB7XG4gICAgICAgIF90aGlzLnNob3dUb29sdGlwKCk7XG4gICAgICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLmhpZGVUb29sdGlwKCk7XG4gICAgICAgIGlmIChvbkJsdXIpIHtcbiAgICAgICAgICBvbkJsdXIoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHsgaXNLZXlib2FyZEZvY3VzZWQ6IGlzS2V5Ym9hcmRGb2N1c2VkIH0pO1xuICAgICAgaWYgKG9uS2V5Ym9hcmRGb2N1cykge1xuICAgICAgICBvbktleWJvYXJkRm9jdXMoZXZlbnQsIGlzS2V5Ym9hcmRGb2N1c2VkKTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoSWNvbkJ1dHRvbiwgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldEtleWJvYXJkRm9jdXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRLZXlib2FyZEZvY3VzKCkge1xuICAgICAgdGhpcy5idXR0b24uc2V0S2V5Ym9hcmRGb2N1cygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3dUb29sdGlwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd1Rvb2x0aXAoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy50b29sdGlwKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB0b29sdGlwU2hvd246IHRydWUgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGlkZVRvb2x0aXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlVG9vbHRpcCgpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnRvb2x0aXApIHRoaXMuc2V0U3RhdGUoeyB0b29sdGlwU2hvd246IGZhbHNlIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBob3ZlcmVkU3R5bGUgPSBfcHJvcHMuaG92ZXJlZFN0eWxlLFxuICAgICAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IF9wcm9wcy5kaXNhYmxlVG91Y2hSaXBwbGUsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgaWNvbkNsYXNzTmFtZSA9IF9wcm9wcy5pY29uQ2xhc3NOYW1lLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHRvb2x0aXAgPSBfcHJvcHMudG9vbHRpcCxcbiAgICAgICAgICB0b29sdGlwUG9zaXRpb25Qcm9wID0gX3Byb3BzLnRvb2x0aXBQb3NpdGlvbixcbiAgICAgICAgICB0b29sdGlwU3R5bGVzID0gX3Byb3BzLnRvb2x0aXBTdHlsZXMsXG4gICAgICAgICAgdG91Y2ggPSBfcHJvcHMudG91Y2gsXG4gICAgICAgICAgaWNvblN0eWxlID0gX3Byb3BzLmljb25TdHlsZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wcywgWydkaXNhYmxlZCcsICdob3ZlcmVkU3R5bGUnLCAnZGlzYWJsZVRvdWNoUmlwcGxlJywgJ2NoaWxkcmVuJywgJ2ljb25DbGFzc05hbWUnLCAnc3R5bGUnLCAndG9vbHRpcCcsICd0b29sdGlwUG9zaXRpb24nLCAndG9vbHRpcFN0eWxlcycsICd0b3VjaCcsICdpY29uU3R5bGUnXSk7XG5cbiAgICAgIHZhciBmb250aWNvbiA9IHZvaWQgMDtcblxuICAgICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpO1xuICAgICAgdmFyIHRvb2x0aXBQb3NpdGlvbiA9IHRvb2x0aXBQb3NpdGlvblByb3Auc3BsaXQoJy0nKTtcblxuICAgICAgdmFyIGhvdmVyZWQgPSAodGhpcy5zdGF0ZS5ob3ZlcmVkIHx8IHRoaXMuc3RhdGUuaXNLZXlib2FyZEZvY3VzZWQpICYmICFkaXNhYmxlZDtcblxuICAgICAgdmFyIG1lcmdlZFJvb3RTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnJvb3QsIHN0eWxlLCBob3ZlcmVkID8gaG92ZXJlZFN0eWxlIDoge30pO1xuXG4gICAgICB2YXIgdG9vbHRpcEVsZW1lbnQgPSB0b29sdGlwID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1Rvb2x0aXAyLmRlZmF1bHQsIHtcbiAgICAgICAgbGFiZWw6IHRvb2x0aXAsXG4gICAgICAgIHNob3c6IHRoaXMuc3RhdGUudG9vbHRpcFNob3duLFxuICAgICAgICB0b3VjaDogdG91Y2gsXG4gICAgICAgIHN0eWxlOiAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnRvb2x0aXAsIHRvb2x0aXBTdHlsZXMpLFxuICAgICAgICB2ZXJ0aWNhbFBvc2l0aW9uOiB0b29sdGlwUG9zaXRpb25bMF0sXG4gICAgICAgIGhvcml6b250YWxQb3NpdGlvbjogdG9vbHRpcFBvc2l0aW9uWzFdXG4gICAgICB9KSA6IG51bGw7XG5cbiAgICAgIGlmIChpY29uQ2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciBpY29uSG92ZXJDb2xvciA9IGljb25TdHlsZS5pY29uSG92ZXJDb2xvcixcbiAgICAgICAgICAgIGljb25TdHlsZUZvbnRJY29uID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoaWNvblN0eWxlLCBbJ2ljb25Ib3ZlckNvbG9yJ10pO1xuXG5cbiAgICAgICAgZm9udGljb24gPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfRm9udEljb24yLmRlZmF1bHQsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBpY29uQ2xhc3NOYW1lLFxuICAgICAgICAgICAgaG92ZXJDb2xvcjogZGlzYWJsZWQgPyBudWxsIDogaWNvbkhvdmVyQ29sb3IsXG4gICAgICAgICAgICBzdHlsZTogKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBkaXNhYmxlZCAmJiBzdHlsZXMuZGlzYWJsZWQsIGljb25TdHlsZUZvbnRJY29uKSxcbiAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbnRleHQubXVpVGhlbWUuYmFzZVRoZW1lLnBhbGV0dGUudGV4dENvbG9yXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGlsZHJlblxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGRyZW5TdHlsZSA9IGRpc2FibGVkID8gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBpY29uU3R5bGUsIHN0eWxlcy5kaXNhYmxlZCkgOiBpY29uU3R5bGU7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgX0VuaGFuY2VkQnV0dG9uMi5kZWZhdWx0LFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihfcmVmMikge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5idXR0b24gPSBfcmVmMjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIG90aGVyLCB7XG4gICAgICAgICAgY2VudGVyUmlwcGxlOiB0cnVlLFxuICAgICAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcbiAgICAgICAgICBzdHlsZTogbWVyZ2VkUm9vdFN0eWxlcyxcbiAgICAgICAgICBkaXNhYmxlVG91Y2hSaXBwbGU6IGRpc2FibGVUb3VjaFJpcHBsZSxcbiAgICAgICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1cixcbiAgICAgICAgICBvbkZvY3VzOiB0aGlzLmhhbmRsZUZvY3VzLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5oYW5kbGVNb3VzZUVudGVyLFxuICAgICAgICAgIG9uTW91c2VPdXQ6IHRoaXMuaGFuZGxlTW91c2VPdXQsXG4gICAgICAgICAgb25LZXlib2FyZEZvY3VzOiB0aGlzLmhhbmRsZUtleWJvYXJkRm9jdXNcbiAgICAgICAgfSksXG4gICAgICAgIHRvb2x0aXBFbGVtZW50LFxuICAgICAgICBmb250aWNvbixcbiAgICAgICAgKDAsIF9jaGlsZFV0aWxzLmV4dGVuZENoaWxkcmVuKShjaGlsZHJlbiwge1xuICAgICAgICAgIHN0eWxlOiBjaGlsZHJlblN0eWxlXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gSWNvbkJ1dHRvbjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkljb25CdXR0b24ubXVpTmFtZSA9ICdJY29uQnV0dG9uJztcbkljb25CdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlZDogZmFsc2UsXG4gIGRpc2FibGVUb3VjaFJpcHBsZTogZmFsc2UsXG4gIGljb25TdHlsZToge30sXG4gIHRvb2x0aXBQb3NpdGlvbjogJ2JvdHRvbS1jZW50ZXInLFxuICB0b3VjaDogZmFsc2Vcbn07XG5JY29uQnV0dG9uLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5JY29uQnV0dG9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIENhbiBiZSB1c2VkIHRvIHBhc3MgYSBgRm9udEljb25gIGVsZW1lbnQgYXMgdGhlIGljb24gZm9yIHRoZSBidXR0b24uXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGVsZW1lbnQncyByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBlbGVtZW50IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudCB3aGVuIHRoZSBjb21wb25lbnQgaXMgaG92ZXJlZC5cbiAgICovXG4gIGhvdmVyZWRTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqL1xuICBocmVmOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgaWNvbi4gVXNlZCBmb3Igc2V0dGluZyB0aGUgaWNvbiB3aXRoIGEgc3R5bGVzaGVldC5cbiAgICovXG4gIGljb25DbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIGljb24gZWxlbWVudC5cbiAgICogTm90ZTogeW91IGNhbiBzcGVjaWZ5IGljb25Ib3ZlckNvbG9yIGFzIGEgU3RyaW5nIGluc2lkZSB0aGlzIG9iamVjdC5cbiAgICovXG4gIGljb25TdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uQmx1cjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBDbGljayBldmVudCB0YXJnZXRpbmcgdGhlIGJ1dHRvbi5cbiAgICovXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Gb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgZWxlbWVudCBpcyBmb2N1c2VkIG9yIGJsdXJyZWQgYnkgdGhlIGtleWJvYXJkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgYGZvY3VzYCBvciBgYmx1cmAgZXZlbnQgdGFyZ2V0aW5nIHRoZSBlbGVtZW50LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGtleWJvYXJkRm9jdXNlZCBJbmRpY2F0ZXMgd2hldGhlciB0aGUgZWxlbWVudCBpcyBmb2N1c2VkLlxuICAgKi9cbiAgb25LZXlib2FyZEZvY3VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VFbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvbk1vdXNlTGVhdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Nb3VzZU91dDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvblRvdWNoU3RhcnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgdGV4dCB0byBzdXBwbHkgdG8gdGhlIGVsZW1lbnQncyB0b29sdGlwLlxuICAgKi9cbiAgdG9vbHRpcDogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIHBvc2l0aW9ucywgcmVzcGVjdGl2ZWx5LCBvZiB0aGUgZWxlbWVudCdzIHRvb2x0aXAuXG4gICAqIFBvc3NpYmxlIHZhbHVlcyBhcmU6IFwiYm90dG9tLWNlbnRlclwiLCBcInRvcC1jZW50ZXJcIiwgXCJib3R0b20tcmlnaHRcIiwgXCJ0b3AtcmlnaHRcIixcbiAgICogXCJib3R0b20tbGVmdFwiLCBhbmQgXCJ0b3AtbGVmdFwiLlxuICAgKi9cbiAgdG9vbHRpcFBvc2l0aW9uOiBfcHJvcFR5cGVzNC5kZWZhdWx0LmNvcm5lcnNBbmRDZW50ZXIsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgdG9vbHRpcCBlbGVtZW50LlxuICAgKi9cbiAgdG9vbHRpcFN0eWxlczogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBpbmNyZWFzZSB0aGUgdG9vbHRpcCBlbGVtZW50J3Mgc2l6ZS4gVXNlZnVsIGZvciBpbmNyZWFzaW5nIHRvb2x0aXBcbiAgICogcmVhZGFiaWxpdHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqL1xuICB0b3VjaDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBJY29uQnV0dG9uOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJ3JlY29tcG9zZS9zaGFsbG93RXF1YWwnKTtcblxudmFyIF9zaGFsbG93RXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hhbGxvd0VxdWFsKTtcblxudmFyIF9hdXRvUHJlZml4ID0gcmVxdWlyZSgnLi4vdXRpbHMvYXV0b1ByZWZpeCcpO1xuXG52YXIgX2F1dG9QcmVmaXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXV0b1ByZWZpeCk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcblxudmFyIF90cmFuc2l0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBDaXJjbGVSaXBwbGUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShDaXJjbGVSaXBwbGUsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENpcmNsZVJpcHBsZSgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBDaXJjbGVSaXBwbGUpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChDaXJjbGVSaXBwbGUuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKENpcmNsZVJpcHBsZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQ2lyY2xlUmlwcGxlLCBbe1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICAgIHJldHVybiAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMucHJvcHMsIG5leHRQcm9wcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmVudGVyVGltZXIpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubGVhdmVUaW1lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbEFwcGVhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxBcHBlYXIoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZUFuaW1hdGlvbihjYWxsYmFjayk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbEVudGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbEVudGVyKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVBbmltYXRpb24oY2FsbGJhY2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZEFwcGVhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZEFwcGVhcigpIHtcbiAgICAgIHRoaXMuYW5pbWF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZEVudGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkRW50ZXIoKSB7XG4gICAgICB0aGlzLmFuaW1hdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsTGVhdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTGVhdmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBzdHlsZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKS5zdHlsZTtcbiAgICAgIHN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgLy8gSWYgdGhlIGFuaW1hdGlvbiBpcyBhYm9ydGVkLCByZW1vdmUgZnJvbSB0aGUgRE9NIGltbWVkaWF0ZWx5XG4gICAgICB2YXIgcmVtb3ZlQWZ0ZXIgPSB0aGlzLnByb3BzLmFib3J0ZWQgPyAwIDogMjAwMDtcbiAgICAgIHRoaXMuZW50ZXJUaW1lciA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIHJlbW92ZUFmdGVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhbmltYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYW5pbWF0ZSgpIHtcbiAgICAgIHZhciBzdHlsZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKS5zdHlsZTtcbiAgICAgIHZhciB0cmFuc2l0aW9uVmFsdWUgPSBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnMnMnLCAnb3BhY2l0eScpICsgJywgJyArIF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCcxcycsICd0cmFuc2Zvcm0nKTtcbiAgICAgIF9hdXRvUHJlZml4Mi5kZWZhdWx0LnNldChzdHlsZSwgJ3RyYW5zaXRpb24nLCB0cmFuc2l0aW9uVmFsdWUpO1xuICAgICAgX2F1dG9QcmVmaXgyLmRlZmF1bHQuc2V0KHN0eWxlLCAndHJhbnNmb3JtJywgJ3NjYWxlKDEpJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5pdGlhbGl6ZUFuaW1hdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxpemVBbmltYXRpb24oY2FsbGJhY2spIHtcbiAgICAgIHZhciBzdHlsZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKS5zdHlsZTtcbiAgICAgIHN0eWxlLm9wYWNpdHkgPSB0aGlzLnByb3BzLm9wYWNpdHk7XG4gICAgICBfYXV0b1ByZWZpeDIuZGVmYXVsdC5zZXQoc3R5bGUsICd0cmFuc2Zvcm0nLCAnc2NhbGUoMCknKTtcbiAgICAgIHRoaXMubGVhdmVUaW1lciA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFib3J0ZWQgPSBfcHJvcHMuYWJvcnRlZCxcbiAgICAgICAgICBjb2xvciA9IF9wcm9wcy5jb2xvcixcbiAgICAgICAgICBvcGFjaXR5ID0gX3Byb3BzLm9wYWNpdHksXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdG91Y2hHZW5lcmF0ZWQgPSBfcHJvcHMudG91Y2hHZW5lcmF0ZWQsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnYWJvcnRlZCcsICdjb2xvcicsICdvcGFjaXR5JywgJ3N0eWxlJywgJ3RvdWNoR2VuZXJhdGVkJ10pO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuXG4gICAgICB2YXIgbWVyZ2VkU3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3JcbiAgICAgIH0sIHN0eWxlKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwgeyBzdHlsZTogcHJlcGFyZVN0eWxlcyhtZXJnZWRTdHlsZXMpIH0pKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIENpcmNsZVJpcHBsZTtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkNpcmNsZVJpcHBsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIG9wYWNpdHk6IDAuMSxcbiAgYWJvcnRlZDogZmFsc2Vcbn07XG5DaXJjbGVSaXBwbGUuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcbkNpcmNsZVJpcHBsZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGFib3J0ZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBvcGFjaXR5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICB0b3VjaEdlbmVyYXRlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBDaXJjbGVSaXBwbGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheScpO1xuXG52YXIgX3RvQ29uc3VtYWJsZUFycmF5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQ29uc3VtYWJsZUFycmF5Mik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3RvQXJyYXkyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQXJyYXknKTtcblxudmFyIF90b0FycmF5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQXJyYXkyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfVHJhbnNpdGlvbkdyb3VwID0gcmVxdWlyZSgncmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uR3JvdXAnKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJhbnNpdGlvbkdyb3VwKTtcblxudmFyIF9kb20gPSByZXF1aXJlKCcuLi91dGlscy9kb20nKTtcblxudmFyIF9kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tKTtcblxudmFyIF9DaXJjbGVSaXBwbGUgPSByZXF1aXJlKCcuL0NpcmNsZVJpcHBsZScpO1xuXG52YXIgX0NpcmNsZVJpcHBsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DaXJjbGVSaXBwbGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBSZW1vdmUgdGhlIGZpcnN0IGVsZW1lbnQgb2YgdGhlIGFycmF5XG52YXIgc2hpZnQgPSBmdW5jdGlvbiBzaGlmdChfcmVmKSB7XG4gIHZhciBfcmVmMiA9ICgwLCBfdG9BcnJheTMuZGVmYXVsdCkoX3JlZiksXG4gICAgICBuZXdBcnJheSA9IF9yZWYyLnNsaWNlKDEpO1xuXG4gIHJldHVybiBuZXdBcnJheTtcbn07XG5cbnZhciBUb3VjaFJpcHBsZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFRvdWNoUmlwcGxlLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUb3VjaFJpcHBsZShwcm9wcywgY29udGV4dCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFRvdWNoUmlwcGxlKTtcblxuICAgIC8vIFRvdWNoIHN0YXJ0IHByb2R1Y2VzIGEgbW91c2UgZG93biBldmVudCBmb3IgY29tcGF0IHJlYXNvbnMuIFRvIGF2b2lkXG4gICAgLy8gc2hvd2luZyByaXBwbGVzIHR3aWNlIHdlIHNraXAgc2hvd2luZyBhIHJpcHBsZSBmb3IgdGhlIGZpcnN0IG1vdXNlIGRvd25cbiAgICAvLyBhZnRlciBhIHRvdWNoIHN0YXJ0LiBOb3RlIHdlIGRvbid0IHN0b3JlIGlnbm9yZU5leHRNb3VzZURvd24gaW4gdGhpcy5zdGF0ZVxuICAgIC8vIHRvIGF2b2lkIHJlLXJlbmRlcmluZyB3aGVuIHdlIGNoYW5nZSBpdC5cbiAgICB2YXIgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChUb3VjaFJpcHBsZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoVG91Y2hSaXBwbGUpKS5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIG9ubHkgbGlzdGVuIHRvIGxlZnQgY2xpY2tzXG4gICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAwKSB7XG4gICAgICAgIF90aGlzLnN0YXJ0KGV2ZW50LCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vdXNlVXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5lbmQoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlTW91c2VMZWF2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmVuZCgpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIC8vIElmIHRoZSB1c2VyIGlzIHN3aXBpbmcgKG5vdCBqdXN0IHRhcHBpbmcpLCBzYXZlIHRoZSBwb3NpdGlvbiBzbyB3ZSBjYW5cbiAgICAgIC8vIGFib3J0IHJpcHBsZXMgaWYgdGhlIHVzZXIgYXBwZWFycyB0byBiZSBzY3JvbGxpbmcuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuYWJvcnRPblNjcm9sbCAmJiBldmVudC50b3VjaGVzKSB7XG4gICAgICAgIF90aGlzLnN0YXJ0TGlzdGVuaW5nRm9yU2Nyb2xsQWJvcnQoZXZlbnQpO1xuICAgICAgICBfdGhpcy5zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgfVxuICAgICAgX3RoaXMuc3RhcnQoZXZlbnQsIHRydWUpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVUb3VjaEVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmVuZCgpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVUb3VjaE1vdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIFN0b3AgdHJ5aW5nIHRvIGFib3J0IGlmIHdlJ3JlIGFscmVhZHkgMzAwbXMgaW50byB0aGUgYW5pbWF0aW9uXG4gICAgICB2YXIgdGltZVNpbmNlU3RhcnQgPSBNYXRoLmFicyhEYXRlLm5vdygpIC0gX3RoaXMuc3RhcnRUaW1lKTtcbiAgICAgIGlmICh0aW1lU2luY2VTdGFydCA+IDMwMCkge1xuICAgICAgICBfdGhpcy5zdG9wTGlzdGVuaW5nRm9yU2Nyb2xsQWJvcnQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgdXNlciBpcyBzY3JvbGxpbmcuLi5cbiAgICAgIHZhciBkZWx0YVkgPSBNYXRoLmFicyhldmVudC50b3VjaGVzWzBdLmNsaWVudFkgLSBfdGhpcy5maXJzdFRvdWNoWSk7XG4gICAgICB2YXIgZGVsdGFYID0gTWF0aC5hYnMoZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIC0gX3RoaXMuZmlyc3RUb3VjaFgpO1xuICAgICAgLy8gQ2FsbCBpdCBhIHNjcm9sbCBhZnRlciBhbiBhcmJpdHJhcnkgNnB4IChmZWVscyByZWFzb25hYmxlIGluIHRlc3RpbmcpXG4gICAgICBpZiAoZGVsdGFZID4gNiB8fCBkZWx0YVggPiA2KSB7XG4gICAgICAgIHZhciBjdXJyZW50UmlwcGxlcyA9IF90aGlzLnN0YXRlLnJpcHBsZXM7XG4gICAgICAgIHZhciByaXBwbGUgPSBjdXJyZW50UmlwcGxlc1swXTtcbiAgICAgICAgLy8gVGhpcyBjbG9uZSB3aWxsIHJlcGxhY2UgdGhlIHJpcHBsZSBpbiBSZWFjdFRyYW5zaXRpb25Hcm91cCB3aXRoIGFcbiAgICAgICAgLy8gdmVyc2lvbiB0aGF0IHdpbGwgZGlzYXBwZWFyIGltbWVkaWF0ZWx5IHdoZW4gcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAgICAgICAgdmFyIGFib3J0ZWRSaXBwbGUgPSBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KHJpcHBsZSwgeyBhYm9ydGVkOiB0cnVlIH0pO1xuICAgICAgICAvLyBSZW1vdmUgdGhlIG9sZCByaXBwbGUgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGUgbmV3IHVwZGF0ZWQgb25lXG4gICAgICAgIGN1cnJlbnRSaXBwbGVzID0gc2hpZnQoY3VycmVudFJpcHBsZXMpO1xuICAgICAgICBjdXJyZW50UmlwcGxlcyA9IFtdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5My5kZWZhdWx0KShjdXJyZW50UmlwcGxlcyksIFthYm9ydGVkUmlwcGxlXSk7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHsgcmlwcGxlczogY3VycmVudFJpcHBsZXMgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIENhbGwgZW5kIGFmdGVyIHdlJ3ZlIHNldCB0aGUgcmlwcGxlIHRvIGFib3J0IG90aGVyd2lzZSB0aGUgc2V0U3RhdGVcbiAgICAgICAgICAvLyBpbiBlbmQoKSBtZXJnZXMgd2l0aCB0aGlzIGFuZCB0aGUgcmlwcGxlIGFib3J0IGZhaWxzXG4gICAgICAgICAgX3RoaXMuZW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5pZ25vcmVOZXh0TW91c2VEb3duID0gZmFsc2U7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIC8vIFRoaXMgcHJvcCBhbGxvd3MgdXMgdG8gb25seSByZW5kZXIgdGhlIFJlYWN0VHJhbnNpdGlvbkdyb3VwXG4gICAgICAvLyBvbiB0aGUgZmlyc3QgY2xpY2sgb2YgdGhlIGNvbXBvbmVudCwgbWFraW5nIHRoZSBpbml0YWwgcmVuZGVyIGZhc3Rlci5cbiAgICAgIGhhc1JpcHBsZXM6IGZhbHNlLFxuICAgICAgbmV4dEtleTogMCxcbiAgICAgIHJpcHBsZXM6IFtdXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShUb3VjaFJpcHBsZSwgW3tcbiAgICBrZXk6ICdzdGFydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0KGV2ZW50LCBpc1JpcHBsZVRvdWNoR2VuZXJhdGVkKSB7XG4gICAgICB2YXIgdGhlbWUgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucmlwcGxlO1xuXG4gICAgICBpZiAodGhpcy5pZ25vcmVOZXh0TW91c2VEb3duICYmICFpc1JpcHBsZVRvdWNoR2VuZXJhdGVkKSB7XG4gICAgICAgIHRoaXMuaWdub3JlTmV4dE1vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByaXBwbGVzID0gdGhpcy5zdGF0ZS5yaXBwbGVzO1xuXG4gICAgICAvLyBBZGQgYSByaXBwbGUgdG8gdGhlIHJpcHBsZXMgYXJyYXlcbiAgICAgIHJpcHBsZXMgPSBbXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTMuZGVmYXVsdCkocmlwcGxlcyksIFtfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ2lyY2xlUmlwcGxlMi5kZWZhdWx0LCB7XG4gICAgICAgIGtleTogdGhpcy5zdGF0ZS5uZXh0S2V5LFxuICAgICAgICBzdHlsZTogIXRoaXMucHJvcHMuY2VudGVyUmlwcGxlID8gdGhpcy5nZXRSaXBwbGVTdHlsZShldmVudCkgOiB7fSxcbiAgICAgICAgY29sb3I6IHRoaXMucHJvcHMuY29sb3IgfHwgdGhlbWUuY29sb3IsXG4gICAgICAgIG9wYWNpdHk6IHRoaXMucHJvcHMub3BhY2l0eSxcbiAgICAgICAgdG91Y2hHZW5lcmF0ZWQ6IGlzUmlwcGxlVG91Y2hHZW5lcmF0ZWRcbiAgICAgIH0pXSk7XG5cbiAgICAgIHRoaXMuaWdub3JlTmV4dE1vdXNlRG93biA9IGlzUmlwcGxlVG91Y2hHZW5lcmF0ZWQ7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaGFzUmlwcGxlczogdHJ1ZSxcbiAgICAgICAgbmV4dEtleTogdGhpcy5zdGF0ZS5uZXh0S2V5ICsgMSxcbiAgICAgICAgcmlwcGxlczogcmlwcGxlc1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5kKCkge1xuICAgICAgdmFyIGN1cnJlbnRSaXBwbGVzID0gdGhpcy5zdGF0ZS5yaXBwbGVzO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHJpcHBsZXM6IHNoaWZ0KGN1cnJlbnRSaXBwbGVzKVxuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hYm9ydE9uU2Nyb2xsKSB7XG4gICAgICAgIHRoaXMuc3RvcExpc3RlbmluZ0ZvclNjcm9sbEFib3J0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIHVzZXIgc2VlbXMgdG8gYmUgc2Nyb2xsaW5nIGFuZCBhYm9ydCB0aGUgYW5pbWF0aW9uIGlmIHNvXG5cbiAgfSwge1xuICAgIGtleTogJ3N0YXJ0TGlzdGVuaW5nRm9yU2Nyb2xsQWJvcnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydExpc3RlbmluZ0ZvclNjcm9sbEFib3J0KGV2ZW50KSB7XG4gICAgICB0aGlzLmZpcnN0VG91Y2hZID0gZXZlbnQudG91Y2hlc1swXS5jbGllbnRZO1xuICAgICAgdGhpcy5maXJzdFRvdWNoWCA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgIC8vIE5vdGUgdGhhdCB3aGVuIHNjb2xsaW5nIENocm9tZSB0aHJvdHRsZXMgdGhpcyBldmVudCB0byBldmVyeSAyMDBtc1xuICAgICAgLy8gQWxzbyBub3RlIHdlIGRvbid0IGxpc3RlbiBmb3Igc2Nyb2xsIGV2ZW50cyBkaXJlY3RseSBhcyB0aGVyZSdzIG5vIGdlbmVyYWxcbiAgICAgIC8vIHdheSB0byBjb3ZlciBjYXNlcyBsaWtlIHNjcm9sbGluZyB3aXRoaW4gY29udGFpbmVycyBvbiB0aGUgcGFnZVxuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLmhhbmRsZVRvdWNoTW92ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc3RvcExpc3RlbmluZ0ZvclNjcm9sbEFib3J0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcExpc3RlbmluZ0ZvclNjcm9sbEFib3J0KCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLmhhbmRsZVRvdWNoTW92ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0UmlwcGxlU3R5bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSaXBwbGVTdHlsZShldmVudCkge1xuICAgICAgdmFyIGVsID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgdmFyIGVsSGVpZ2h0ID0gZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgdmFyIGVsV2lkdGggPSBlbC5vZmZzZXRXaWR0aDtcbiAgICAgIHZhciBvZmZzZXQgPSBfZG9tMi5kZWZhdWx0Lm9mZnNldChlbCk7XG4gICAgICB2YXIgaXNUb3VjaEV2ZW50ID0gZXZlbnQudG91Y2hlcyAmJiBldmVudC50b3VjaGVzLmxlbmd0aDtcbiAgICAgIHZhciBwYWdlWCA9IGlzVG91Y2hFdmVudCA/IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVggOiBldmVudC5wYWdlWDtcbiAgICAgIHZhciBwYWdlWSA9IGlzVG91Y2hFdmVudCA/IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVkgOiBldmVudC5wYWdlWTtcbiAgICAgIHZhciBwb2ludGVyWCA9IHBhZ2VYIC0gb2Zmc2V0LmxlZnQ7XG4gICAgICB2YXIgcG9pbnRlclkgPSBwYWdlWSAtIG9mZnNldC50b3A7XG4gICAgICB2YXIgdG9wTGVmdERpYWcgPSB0aGlzLmNhbGNEaWFnKHBvaW50ZXJYLCBwb2ludGVyWSk7XG4gICAgICB2YXIgdG9wUmlnaHREaWFnID0gdGhpcy5jYWxjRGlhZyhlbFdpZHRoIC0gcG9pbnRlclgsIHBvaW50ZXJZKTtcbiAgICAgIHZhciBib3RSaWdodERpYWcgPSB0aGlzLmNhbGNEaWFnKGVsV2lkdGggLSBwb2ludGVyWCwgZWxIZWlnaHQgLSBwb2ludGVyWSk7XG4gICAgICB2YXIgYm90TGVmdERpYWcgPSB0aGlzLmNhbGNEaWFnKHBvaW50ZXJYLCBlbEhlaWdodCAtIHBvaW50ZXJZKTtcbiAgICAgIHZhciByaXBwbGVSYWRpdXMgPSBNYXRoLm1heCh0b3BMZWZ0RGlhZywgdG9wUmlnaHREaWFnLCBib3RSaWdodERpYWcsIGJvdExlZnREaWFnKTtcbiAgICAgIHZhciByaXBwbGVTaXplID0gcmlwcGxlUmFkaXVzICogMjtcbiAgICAgIHZhciBsZWZ0ID0gcG9pbnRlclggLSByaXBwbGVSYWRpdXM7XG4gICAgICB2YXIgdG9wID0gcG9pbnRlclkgLSByaXBwbGVSYWRpdXM7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpcmVjdGlvbkludmFyaWFudDogdHJ1ZSxcbiAgICAgICAgaGVpZ2h0OiByaXBwbGVTaXplLFxuICAgICAgICB3aWR0aDogcmlwcGxlU2l6ZSxcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIGxlZnQ6IGxlZnRcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2FsY0RpYWcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjYWxjRGlhZyhhLCBiKSB7XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlO1xuICAgICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgaGFzUmlwcGxlcyA9IF9zdGF0ZS5oYXNSaXBwbGVzLFxuICAgICAgICAgIHJpcHBsZXMgPSBfc3RhdGUucmlwcGxlcztcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cblxuICAgICAgdmFyIHJpcHBsZUdyb3VwID0gdm9pZCAwO1xuXG4gICAgICBpZiAoaGFzUmlwcGxlcykge1xuICAgICAgICB2YXIgbWVyZ2VkU3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHtcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgICAgekluZGV4OiAxIC8vIFRoaXMgaXMgYWxzbyBuZWVkZWQgc28gdGhhdCByaXBwbGVzIGRvIG5vdCBibGVlZCBwYXN0IGEgcGFyZW50IGJvcmRlciByYWRpdXMuXG4gICAgICAgIH0sIHN0eWxlKTtcblxuICAgICAgICByaXBwbGVHcm91cCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIF9UcmFuc2l0aW9uR3JvdXAyLmRlZmF1bHQsXG4gICAgICAgICAgeyBzdHlsZTogcHJlcGFyZVN0eWxlcyhtZXJnZWRTdHlsZXMpIH0sXG4gICAgICAgICAgcmlwcGxlc1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZU1vdXNlVXAsXG4gICAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LFxuICAgICAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmRcbiAgICAgICAgfSxcbiAgICAgICAgcmlwcGxlR3JvdXAsXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVG91Y2hSaXBwbGU7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Ub3VjaFJpcHBsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFib3J0T25TY3JvbGw6IHRydWVcbn07XG5Ub3VjaFJpcHBsZS5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuVG91Y2hSaXBwbGUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBhYm9ydE9uU2Nyb2xsOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGNlbnRlclJpcHBsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIG9wYWNpdHk6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IFRvdWNoUmlwcGxlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX2F1dG9QcmVmaXggPSByZXF1aXJlKCcuLi91dGlscy9hdXRvUHJlZml4Jyk7XG5cbnZhciBfYXV0b1ByZWZpeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdXRvUHJlZml4KTtcblxudmFyIF90cmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4uL3N0eWxlcy90cmFuc2l0aW9ucycpO1xuXG52YXIgX3RyYW5zaXRpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb25zKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFNjYWxlSW5DaGlsZCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFNjYWxlSW5DaGlsZCwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2NhbGVJbkNoaWxkKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFNjYWxlSW5DaGlsZCk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFNjYWxlSW5DaGlsZC5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoU2NhbGVJbkNoaWxkKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShTY2FsZUluQ2hpbGQsIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmVudGVyVGltZXIpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubGVhdmVUaW1lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbEFwcGVhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxBcHBlYXIoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZUFuaW1hdGlvbihjYWxsYmFjayk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbEVudGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbEVudGVyKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVBbmltYXRpb24oY2FsbGJhY2spO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZEFwcGVhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZEFwcGVhcigpIHtcbiAgICAgIHRoaXMuYW5pbWF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZEVudGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkRW50ZXIoKSB7XG4gICAgICB0aGlzLmFuaW1hdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsTGVhdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTGVhdmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBzdHlsZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKS5zdHlsZTtcblxuICAgICAgc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICAgIF9hdXRvUHJlZml4Mi5kZWZhdWx0LnNldChzdHlsZSwgJ3RyYW5zZm9ybScsICdzY2FsZSgnICsgdGhpcy5wcm9wcy5taW5TY2FsZSArICcpJyk7XG5cbiAgICAgIHRoaXMubGVhdmVUaW1lciA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIDQ1MCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYW5pbWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgICB2YXIgc3R5bGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcykuc3R5bGU7XG5cbiAgICAgIHN0eWxlLm9wYWNpdHkgPSAnMSc7XG4gICAgICBfYXV0b1ByZWZpeDIuZGVmYXVsdC5zZXQoc3R5bGUsICd0cmFuc2Zvcm0nLCAnc2NhbGUoJyArIHRoaXMucHJvcHMubWF4U2NhbGUgKyAnKScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luaXRpYWxpemVBbmltYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplQW5pbWF0aW9uKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgc3R5bGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcykuc3R5bGU7XG5cbiAgICAgIHN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgICBfYXV0b1ByZWZpeDIuZGVmYXVsdC5zZXQoc3R5bGUsICd0cmFuc2Zvcm0nLCAnc2NhbGUoMCknKTtcblxuICAgICAgdGhpcy5lbnRlclRpbWVyID0gc2V0VGltZW91dChjYWxsYmFjaywgdGhpcy5wcm9wcy5lbnRlckRlbGF5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBlbnRlckRlbGF5ID0gX3Byb3BzLmVudGVyRGVsYXksXG4gICAgICAgICAgbWF4U2NhbGUgPSBfcHJvcHMubWF4U2NhbGUsXG4gICAgICAgICAgbWluU2NhbGUgPSBfcHJvcHMubWluU2NhbGUsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnY2hpbGRyZW4nLCAnZW50ZXJEZWxheScsICdtYXhTY2FsZScsICdtaW5TY2FsZScsICdzdHlsZSddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cblxuICAgICAgdmFyIG1lcmdlZFJvb3RTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KG51bGwsIFsndHJhbnNmb3JtJywgJ29wYWNpdHknXSlcbiAgICAgIH0sIHN0eWxlKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHsgc3R5bGU6IHByZXBhcmVTdHlsZXMobWVyZ2VkUm9vdFN0eWxlcykgfSksXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU2NhbGVJbkNoaWxkO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuU2NhbGVJbkNoaWxkLmRlZmF1bHRQcm9wcyA9IHtcbiAgZW50ZXJEZWxheTogMCxcbiAgbWF4U2NhbGU6IDEsXG4gIG1pblNjYWxlOiAwXG59O1xuU2NhbGVJbkNoaWxkLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5TY2FsZUluQ2hpbGQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICBlbnRlckRlbGF5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgbWF4U2NhbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBtaW5TY2FsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gU2NhbGVJbkNoaWxkOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZ2V0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nO1xuZXhwb3J0cy5tZXJnZUNoaWxkTWFwcGluZ3MgPSBtZXJnZUNoaWxkTWFwcGluZ3M7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4vKipcbiAqIEdpdmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYCwgcmV0dXJuIGFuIG9iamVjdCBtYXBwaW5nIGtleSB0byBjaGlsZC5cbiAqXG4gKiBAcGFyYW0geyp9IGNoaWxkcmVuIGB0aGlzLnByb3BzLmNoaWxkcmVuYFxuICogQHJldHVybiB7b2JqZWN0fSBNYXBwaW5nIG9mIGtleSB0byBjaGlsZFxuICovXG5mdW5jdGlvbiBnZXRDaGlsZE1hcHBpbmcoY2hpbGRyZW4pIHtcbiAgaWYgKCFjaGlsZHJlbikge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgcmVzdWx0ID0ge307XG4gIF9yZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IGNoaWxkO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZUNoaWxkTWFwcGluZ3MocHJldiwgbmV4dCkge1xuICBwcmV2ID0gcHJldiB8fCB7fTtcbiAgbmV4dCA9IG5leHQgfHwge307XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgaWYgKG5leHQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgcmV0dXJuIG5leHRba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJldltrZXldO1xuICB9XG5cbiAgLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gIC8vIHRoZSBjb21iaW5lZCBsaXN0XG4gIHZhciBuZXh0S2V5c1BlbmRpbmcgPSB7fTtcblxuICB2YXIgcGVuZGluZ0tleXMgPSBbXTtcbiAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgaWYgKG5leHQuaGFzT3duUHJvcGVydHkocHJldktleSkpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGkgPSB2b2lkIDA7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcbiAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0KSB7XG4gICAgaWYgKG5leHRLZXlzUGVuZGluZy5oYXNPd25Qcm9wZXJ0eShuZXh0S2V5KSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGVuZGluZ05leHRLZXkgPSBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV07XG4gICAgICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV1baV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ05leHRLZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfVxuXG4gIC8vIEZpbmFsbHksIGFkZCB0aGUga2V5cyB3aGljaCBkaWRuJ3QgYXBwZWFyIGJlZm9yZSBhbnkga2V5IGluIGBuZXh0YFxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn0iLCJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjaGFpbigpe1xyXG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoXHJcbiAgdmFyIGFyZ3MgPSBbXTtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKylcclxuICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV1cclxuXHJcbiAgYXJncyA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uKGZuKXsgcmV0dXJuIGZuICE9IG51bGwgfSlcclxuXHJcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkXHJcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSByZXR1cm4gYXJnc1swXVxyXG5cclxuICByZXR1cm4gYXJncy5yZWR1Y2UoZnVuY3Rpb24oY3VycmVudCwgbmV4dCl7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xyXG4gICAgICBjdXJyZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgIG5leHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIH07XHJcbiAgfSlcclxufVxyXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAgPSByZXF1aXJlKCdyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25Hcm91cCcpO1xuXG52YXIgX1RyYW5zaXRpb25Hcm91cDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UcmFuc2l0aW9uR3JvdXApO1xuXG52YXIgX1NjYWxlSW5DaGlsZCA9IHJlcXVpcmUoJy4vU2NhbGVJbkNoaWxkJyk7XG5cbnZhciBfU2NhbGVJbkNoaWxkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NjYWxlSW5DaGlsZCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTY2FsZUluID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoU2NhbGVJbiwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2NhbGVJbigpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTY2FsZUluKTtcbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoU2NhbGVJbi5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoU2NhbGVJbikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU2NhbGVJbiwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjaGlsZFN0eWxlID0gX3Byb3BzLmNoaWxkU3R5bGUsXG4gICAgICAgICAgZW50ZXJEZWxheSA9IF9wcm9wcy5lbnRlckRlbGF5LFxuICAgICAgICAgIG1heFNjYWxlID0gX3Byb3BzLm1heFNjYWxlLFxuICAgICAgICAgIG1pblNjYWxlID0gX3Byb3BzLm1pblNjYWxlLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3Byb3BzLCBbJ2NoaWxkcmVuJywgJ2NoaWxkU3R5bGUnLCAnZW50ZXJEZWxheScsICdtYXhTY2FsZScsICdtaW5TY2FsZScsICdzdHlsZSddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cblxuICAgICAgdmFyIG1lcmdlZFJvb3RTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGhlaWdodDogJzEwMCUnXG4gICAgICB9LCBzdHlsZSk7XG5cbiAgICAgIHZhciBuZXdDaGlsZHJlbiA9IF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX1NjYWxlSW5DaGlsZDIuZGVmYXVsdCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IGNoaWxkLmtleSxcbiAgICAgICAgICAgIGVudGVyRGVsYXk6IGVudGVyRGVsYXksXG4gICAgICAgICAgICBtYXhTY2FsZTogbWF4U2NhbGUsXG4gICAgICAgICAgICBtaW5TY2FsZTogbWluU2NhbGUsXG4gICAgICAgICAgICBzdHlsZTogY2hpbGRTdHlsZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2hpbGRcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9UcmFuc2l0aW9uR3JvdXAyLmRlZmF1bHQsXG4gICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCB7XG4gICAgICAgICAgc3R5bGU6IHByZXBhcmVTdHlsZXMobWVyZ2VkUm9vdFN0eWxlcyksXG4gICAgICAgICAgY29tcG9uZW50OiAnZGl2J1xuICAgICAgICB9KSxcbiAgICAgICAgbmV3Q2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTY2FsZUluO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuU2NhbGVJbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGVudGVyRGVsYXk6IDBcbn07XG5TY2FsZUluLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5TY2FsZUluLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgY2hpbGRTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIGVudGVyRGVsYXk6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBtYXhTY2FsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIG1pblNjYWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNjYWxlSW47IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgncmVjb21wb3NlL3NoYWxsb3dFcXVhbCcpO1xuXG52YXIgX3NoYWxsb3dFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93RXF1YWwpO1xuXG52YXIgX2F1dG9QcmVmaXggPSByZXF1aXJlKCcuLi91dGlscy9hdXRvUHJlZml4Jyk7XG5cbnZhciBfYXV0b1ByZWZpeDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdXRvUHJlZml4KTtcblxudmFyIF90cmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4uL3N0eWxlcy90cmFuc2l0aW9ucycpO1xuXG52YXIgX3RyYW5zaXRpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb25zKTtcblxudmFyIF9TY2FsZUluID0gcmVxdWlyZSgnLi9TY2FsZUluJyk7XG5cbnZhciBfU2NhbGVJbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TY2FsZUluKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHB1bHNhdGVEdXJhdGlvbiA9IDc1MDtcblxudmFyIEZvY3VzUmlwcGxlID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoRm9jdXNSaXBwbGUsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZvY3VzUmlwcGxlKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEZvY3VzUmlwcGxlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IEZvY3VzUmlwcGxlLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShGb2N1c1JpcHBsZSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnB1bHNhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW5uZXJDaXJjbGUgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoX3RoaXMucmVmcy5pbm5lckNpcmNsZSk7XG4gICAgICBpZiAoIWlubmVyQ2lyY2xlKSByZXR1cm47XG5cbiAgICAgIHZhciBzdGFydFNjYWxlID0gJ3NjYWxlKDEpJztcbiAgICAgIHZhciBlbmRTY2FsZSA9ICdzY2FsZSgwLjg1KSc7XG4gICAgICB2YXIgY3VycmVudFNjYWxlID0gaW5uZXJDaXJjbGUuc3R5bGUudHJhbnNmb3JtIHx8IHN0YXJ0U2NhbGU7XG4gICAgICB2YXIgbmV4dFNjYWxlID0gY3VycmVudFNjYWxlID09PSBzdGFydFNjYWxlID8gZW5kU2NhbGUgOiBzdGFydFNjYWxlO1xuXG4gICAgICBfYXV0b1ByZWZpeDIuZGVmYXVsdC5zZXQoaW5uZXJDaXJjbGUuc3R5bGUsICd0cmFuc2Zvcm0nLCBuZXh0U2NhbGUpO1xuICAgICAgX3RoaXMudGltZW91dCA9IHNldFRpbWVvdXQoX3RoaXMucHVsc2F0ZSwgcHVsc2F0ZUR1cmF0aW9uKTtcbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRm9jdXNSaXBwbGUsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnNob3cpIHtcbiAgICAgICAgdGhpcy5zZXRSaXBwbGVTaXplKCk7XG4gICAgICAgIHRoaXMucHVsc2F0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgICAgcmV0dXJuICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuc2hvdykge1xuICAgICAgICB0aGlzLnNldFJpcHBsZVNpemUoKTtcbiAgICAgICAgdGhpcy5wdWxzYXRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy50aW1lb3V0KSBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0UmlwcGxlRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJpcHBsZUVsZW1lbnQocHJvcHMpIHtcbiAgICAgIHZhciBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgICAgIGlubmVyU3R5bGUgPSBwcm9wcy5pbm5lclN0eWxlLFxuICAgICAgICAgIG9wYWNpdHkgPSBwcm9wcy5vcGFjaXR5O1xuICAgICAgdmFyIF9jb250ZXh0JG11aVRoZW1lID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLFxuICAgICAgICAgIHByZXBhcmVTdHlsZXMgPSBfY29udGV4dCRtdWlUaGVtZS5wcmVwYXJlU3R5bGVzLFxuICAgICAgICAgIHJpcHBsZSA9IF9jb250ZXh0JG11aVRoZW1lLnJpcHBsZTtcblxuXG4gICAgICB2YXIgaW5uZXJTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgIG9wYWNpdHk6IG9wYWNpdHkgPyBvcGFjaXR5IDogMC4xNixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvciB8fCByaXBwbGUuY29sb3IsXG4gICAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KHB1bHNhdGVEdXJhdGlvbiArICdtcycsICd0cmFuc2Zvcm0nLCBudWxsLCBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZUluT3V0RnVuY3Rpb24pXG4gICAgICB9LCBpbm5lclN0eWxlKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IHJlZjogJ2lubmVyQ2lyY2xlJywgc3R5bGU6IHByZXBhcmVTdHlsZXMoKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBpbm5lclN0eWxlcykpIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFJpcHBsZVNpemUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRSaXBwbGVTaXplKCkge1xuICAgICAgdmFyIGVsID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5pbm5lckNpcmNsZSk7XG4gICAgICB2YXIgaGVpZ2h0ID0gZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgdmFyIHdpZHRoID0gZWwub2Zmc2V0V2lkdGg7XG4gICAgICB2YXIgc2l6ZSA9IE1hdGgubWF4KGhlaWdodCwgd2lkdGgpO1xuXG4gICAgICB2YXIgb2xkVG9wID0gMDtcbiAgICAgIC8vIEZvciBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgZW5kc1dpdGgoKVxuICAgICAgaWYgKGVsLnN0eWxlLnRvcC5pbmRleE9mKCdweCcsIGVsLnN0eWxlLnRvcC5sZW5ndGggLSAyKSAhPT0gLTEpIHtcbiAgICAgICAgb2xkVG9wID0gcGFyc2VJbnQoZWwuc3R5bGUudG9wKTtcbiAgICAgIH1cbiAgICAgIGVsLnN0eWxlLmhlaWdodCA9IHNpemUgKyAncHgnO1xuICAgICAgZWwuc3R5bGUudG9wID0gaGVpZ2h0IC8gMiAtIHNpemUgLyAyICsgb2xkVG9wICsgJ3B4JztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBzaG93ID0gX3Byb3BzLnNob3csXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cblxuICAgICAgdmFyIG1lcmdlZFJvb3RTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe1xuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMFxuICAgICAgfSwgc3R5bGUpO1xuXG4gICAgICB2YXIgcmlwcGxlID0gc2hvdyA/IHRoaXMuZ2V0UmlwcGxlRWxlbWVudCh0aGlzLnByb3BzKSA6IG51bGw7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgX1NjYWxlSW4yLmRlZmF1bHQsXG4gICAgICAgIHtcbiAgICAgICAgICBtYXhTY2FsZTogMC44NSxcbiAgICAgICAgICBzdHlsZTogbWVyZ2VkUm9vdFN0eWxlc1xuICAgICAgICB9LFxuICAgICAgICByaXBwbGVcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBGb2N1c1JpcHBsZTtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkZvY3VzUmlwcGxlLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5Gb2N1c1JpcHBsZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgaW5uZXJTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIG9wYWNpdHk6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICBzaG93OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gRm9jdXNSaXBwbGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgncmVjb21wb3NlL3NoYWxsb3dFcXVhbCcpO1xuXG52YXIgX3NoYWxsb3dFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93RXF1YWwpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKCcuLi91dGlscy9jb2xvck1hbmlwdWxhdG9yJyk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcblxudmFyIF90cmFuc2l0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9ucyk7XG5cbnZhciBfRW5oYW5jZWRCdXR0b24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9FbmhhbmNlZEJ1dHRvbicpO1xuXG52YXIgX0VuaGFuY2VkQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VuaGFuY2VkQnV0dG9uKTtcblxudmFyIF9JY29uQnV0dG9uID0gcmVxdWlyZSgnLi4vSWNvbkJ1dHRvbicpO1xuXG52YXIgX0ljb25CdXR0b24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSWNvbkJ1dHRvbik7XG5cbnZhciBfZXhwYW5kTGVzcyA9IHJlcXVpcmUoJy4uL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2V4cGFuZC1sZXNzJyk7XG5cbnZhciBfZXhwYW5kTGVzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHBhbmRMZXNzKTtcblxudmFyIF9leHBhbmRNb3JlID0gcmVxdWlyZSgnLi4vc3ZnLWljb25zL25hdmlnYXRpb24vZXhwYW5kLW1vcmUnKTtcblxudmFyIF9leHBhbmRNb3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4cGFuZE1vcmUpO1xuXG52YXIgX05lc3RlZExpc3QgPSByZXF1aXJlKCcuL05lc3RlZExpc3QnKTtcblxudmFyIF9OZXN0ZWRMaXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX05lc3RlZExpc3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRTdHlsZXMocHJvcHMsIGNvbnRleHQsIHN0YXRlKSB7XG4gIHZhciBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3IgPSBwcm9wcy5hdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3IsXG4gICAgICBpbnNldENoaWxkcmVuID0gcHJvcHMuaW5zZXRDaGlsZHJlbixcbiAgICAgIGxlZnRBdmF0YXIgPSBwcm9wcy5sZWZ0QXZhdGFyLFxuICAgICAgbGVmdENoZWNrYm94ID0gcHJvcHMubGVmdENoZWNrYm94LFxuICAgICAgbGVmdEljb24gPSBwcm9wcy5sZWZ0SWNvbixcbiAgICAgIG5lc3RlZEl0ZW1zID0gcHJvcHMubmVzdGVkSXRlbXMsXG4gICAgICBuZXN0ZWRMZXZlbCA9IHByb3BzLm5lc3RlZExldmVsLFxuICAgICAgcmlnaHRBdmF0YXIgPSBwcm9wcy5yaWdodEF2YXRhcixcbiAgICAgIHJpZ2h0SWNvbiA9IHByb3BzLnJpZ2h0SWNvbixcbiAgICAgIHJpZ2h0SWNvbkJ1dHRvbiA9IHByb3BzLnJpZ2h0SWNvbkJ1dHRvbixcbiAgICAgIHJpZ2h0VG9nZ2xlID0gcHJvcHMucmlnaHRUb2dnbGUsXG4gICAgICBzZWNvbmRhcnlUZXh0ID0gcHJvcHMuc2Vjb25kYXJ5VGV4dCxcbiAgICAgIHNlY29uZGFyeVRleHRMaW5lcyA9IHByb3BzLnNlY29uZGFyeVRleHRMaW5lcztcbiAgdmFyIG11aVRoZW1lID0gY29udGV4dC5tdWlUaGVtZTtcbiAgdmFyIGxpc3RJdGVtID0gbXVpVGhlbWUubGlzdEl0ZW07XG5cblxuICB2YXIgdGV4dENvbG9yID0gbXVpVGhlbWUuYmFzZVRoZW1lLnBhbGV0dGUudGV4dENvbG9yO1xuICB2YXIgaG92ZXJDb2xvciA9IHByb3BzLmhvdmVyQ29sb3IgfHwgKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRleHRDb2xvciwgMC4xKTtcbiAgdmFyIHNpbmdsZUF2YXRhciA9ICFzZWNvbmRhcnlUZXh0ICYmIChsZWZ0QXZhdGFyIHx8IHJpZ2h0QXZhdGFyKTtcbiAgdmFyIHNpbmdsZU5vQXZhdGFyID0gIXNlY29uZGFyeVRleHQgJiYgIShsZWZ0QXZhdGFyIHx8IHJpZ2h0QXZhdGFyKTtcbiAgdmFyIHR3b0xpbmUgPSBzZWNvbmRhcnlUZXh0ICYmIHNlY29uZGFyeVRleHRMaW5lcyA9PT0gMTtcbiAgdmFyIHRocmVlTGluZSA9IHNlY29uZGFyeVRleHQgJiYgc2Vjb25kYXJ5VGV4dExpbmVzID4gMTtcblxuICB2YXIgaXNLZXlib2FyZEZvY3VzZWQgPSAocHJvcHMuaXNLZXlib2FyZEZvY3VzZWQgIT09IHVuZGVmaW5lZCA/IHByb3BzIDogc3RhdGUpLmlzS2V5Ym9hcmRGb2N1c2VkO1xuXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcm9vdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAoaXNLZXlib2FyZEZvY3VzZWQgfHwgc3RhdGUuaG92ZXJlZCkgJiYgIXN0YXRlLnJpZ2h0SWNvbkJ1dHRvbkhvdmVyZWQgJiYgIXN0YXRlLnJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXNlZCA/IGhvdmVyQ29sb3IgOiBudWxsLFxuICAgICAgY29sb3I6IHRleHRDb2xvcixcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICBmb250U2l6ZTogMTYsXG4gICAgICBsaW5lSGVpZ2h0OiAnMTZweCcsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KClcbiAgICB9LFxuXG4gICAgLy8gVGhpcyBpbm5lciBkaXYgaXMgbmVlZGVkIHNvIHRoYXQgcmlwcGxlcyB3aWxsIHNwYW4gdGhlIGVudGlyZSBjb250YWluZXJcbiAgICBpbm5lckRpdjoge1xuICAgICAgbWFyZ2luTGVmdDogbmVzdGVkTGV2ZWwgKiBsaXN0SXRlbS5uZXN0ZWRMZXZlbERlcHRoLFxuICAgICAgcGFkZGluZ0xlZnQ6IGxlZnRJY29uIHx8IGxlZnRBdmF0YXIgfHwgbGVmdENoZWNrYm94IHx8IGluc2V0Q2hpbGRyZW4gPyA3MiA6IDE2LFxuICAgICAgcGFkZGluZ1JpZ2h0OiByaWdodEljb24gfHwgcmlnaHRBdmF0YXIgfHwgcmlnaHRJY29uQnV0dG9uIHx8IG5lc3RlZEl0ZW1zLmxlbmd0aCAmJiBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3IgPyA1NiA6IHJpZ2h0VG9nZ2xlID8gNzIgOiAxNixcbiAgICAgIHBhZGRpbmdCb3R0b206IHNpbmdsZUF2YXRhciA/IDIwIDogMTYsXG4gICAgICBwYWRkaW5nVG9wOiBzaW5nbGVOb0F2YXRhciB8fCB0aHJlZUxpbmUgPyAxNiA6IDIwLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuXG4gICAgaWNvbnM6IHtcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICB3aWR0aDogMjQsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IHR3b0xpbmUgPyAxMiA6IHNpbmdsZUF2YXRhciA/IDQgOiAwLFxuICAgICAgbWFyZ2luOiAxMlxuICAgIH0sXG5cbiAgICBsZWZ0SWNvbjoge1xuICAgICAgbGVmdDogNFxuICAgIH0sXG5cbiAgICByaWdodEljb246IHtcbiAgICAgIHJpZ2h0OiA0XG4gICAgfSxcblxuICAgIGF2YXRhcnM6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiBzaW5nbGVBdmF0YXIgPyA4IDogMTZcbiAgICB9LFxuXG4gICAgbGFiZWw6IHtcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gICAgfSxcblxuICAgIGxlZnRBdmF0YXI6IHtcbiAgICAgIGxlZnQ6IDE2XG4gICAgfSxcblxuICAgIHJpZ2h0QXZhdGFyOiB7XG4gICAgICByaWdodDogMTZcbiAgICB9LFxuXG4gICAgbGVmdENoZWNrYm94OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogMjQsXG4gICAgICB0b3A6IHR3b0xpbmUgPyAyNCA6IHNpbmdsZUF2YXRhciA/IDE2IDogMTIsXG4gICAgICBsZWZ0OiAxNlxuICAgIH0sXG5cbiAgICBwcmltYXJ5VGV4dDoge30sXG5cbiAgICByaWdodEljb25CdXR0b246IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHRvcDogdHdvTGluZSA/IDEyIDogc2luZ2xlQXZhdGFyID8gNCA6IDAsXG4gICAgICByaWdodDogNFxuICAgIH0sXG5cbiAgICByaWdodFRvZ2dsZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6IDU0LFxuICAgICAgdG9wOiB0d29MaW5lID8gMjUgOiBzaW5nbGVBdmF0YXIgPyAxNyA6IDEzLFxuICAgICAgcmlnaHQ6IDhcbiAgICB9LFxuXG4gICAgc2Vjb25kYXJ5VGV4dDoge1xuICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgbGluZUhlaWdodDogdGhyZWVMaW5lID8gJzE4cHgnIDogJzE2cHgnLFxuICAgICAgaGVpZ2h0OiB0aHJlZUxpbmUgPyAzNiA6IDE2LFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgbWFyZ2luVG9wOiA0LFxuICAgICAgY29sb3I6IGxpc3RJdGVtLnNlY29uZGFyeVRleHRDb2xvcixcblxuICAgICAgLy8gbmVlZGVkIGZvciAyIGFuZCAzIGxpbmUgZWxsaXBzaXNcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgIHdoaXRlU3BhY2U6IHRocmVlTGluZSA/IG51bGwgOiAnbm93cmFwJyxcbiAgICAgIGRpc3BsYXk6IHRocmVlTGluZSA/ICctd2Via2l0LWJveCcgOiBudWxsLFxuICAgICAgV2Via2l0TGluZUNsYW1wOiB0aHJlZUxpbmUgPyAyIDogbnVsbCxcbiAgICAgIFdlYmtpdEJveE9yaWVudDogdGhyZWVMaW5lID8gJ3ZlcnRpY2FsJyA6IG51bGxcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxudmFyIExpc3RJdGVtID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoTGlzdEl0ZW0sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpc3RJdGVtKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIExpc3RJdGVtKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IExpc3RJdGVtLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShMaXN0SXRlbSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgaG92ZXJlZDogZmFsc2UsXG4gICAgICBpc0tleWJvYXJkRm9jdXNlZDogZmFsc2UsXG4gICAgICBvcGVuOiBmYWxzZSxcbiAgICAgIHJpZ2h0SWNvbkJ1dHRvbkhvdmVyZWQ6IGZhbHNlLFxuICAgICAgcmlnaHRJY29uQnV0dG9uS2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIHRvdWNoOiBmYWxzZVxuICAgIH0sIF90aGlzLmhhbmRsZUtleWJvYXJkRm9jdXMgPSBmdW5jdGlvbiAoZXZlbnQsIGlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzS2V5Ym9hcmRGb2N1c2VkOiBpc0tleWJvYXJkRm9jdXNlZCB9KTtcbiAgICAgIF90aGlzLnByb3BzLm9uS2V5Ym9hcmRGb2N1cyhldmVudCwgaXNLZXlib2FyZEZvY3VzZWQpO1xuICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlRW50ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghX3RoaXMuc3RhdGUudG91Y2gpIF90aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogdHJ1ZSB9KTtcbiAgICAgIF90aGlzLnByb3BzLm9uTW91c2VFbnRlcihldmVudCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiBmYWxzZSB9KTtcbiAgICAgIF90aGlzLnByb3BzLm9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMucHJpbWFyeVRvZ2dsZXNOZXN0ZWRMaXN0KSB7XG4gICAgICAgIF90aGlzLmhhbmRsZU5lc3RlZExpc3RUb2dnbGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZU5lc3RlZExpc3RUb2dnbGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5sZWZ0Q2hlY2tib3gpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub3BlbiA9PT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IG9wZW46ICFfdGhpcy5zdGF0ZS5vcGVuIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbk5lc3RlZExpc3RUb2dnbGUoX3RoaXMpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEV4cG9zaW5nIGB0aGlzYCBpbiB0aGUgY2FsbGJhY2sgaXMgcXVpdGUgYSBiYWQgQVBJLlxuICAgICAgICAvLyBJJ20gZG9pbmcgYSBvbmUgbGV2ZWwgZGVlcCBjbG9uZSB0byBleHBvc2UgYSBmYWtlIHN0YXRlLm9wZW4uXG4gICAgICAgIF90aGlzLnByb3BzLm9uTmVzdGVkTGlzdFRvZ2dsZSgoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBfdGhpcywge1xuICAgICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgICBvcGVuOiAhX3RoaXMuc3RhdGUub3BlblxuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXMgPSBmdW5jdGlvbiAoZXZlbnQsIGlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICBpZiAoaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSxcbiAgICAgICAgICByaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzZWQ6IGlzS2V5Ym9hcmRGb2N1c2VkXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgaWNvbkJ1dHRvbiA9IF90aGlzLnByb3BzLnJpZ2h0SWNvbkJ1dHRvbjtcblxuICAgICAgaWYgKGljb25CdXR0b24gJiYgaWNvbkJ1dHRvbi5wcm9wcy5vbktleWJvYXJkRm9jdXMpIGljb25CdXR0b24ucHJvcHMub25LZXlib2FyZEZvY3VzKGV2ZW50LCBpc0tleWJvYXJkRm9jdXNlZCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGljb25CdXR0b24gPSBfdGhpcy5wcm9wcy5yaWdodEljb25CdXR0b247XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IHJpZ2h0SWNvbkJ1dHRvbkhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgICAgaWYgKGljb25CdXR0b24gJiYgaWNvbkJ1dHRvbi5wcm9wcy5vbk1vdXNlTGVhdmUpIGljb25CdXR0b24ucHJvcHMub25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZUVudGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgaWNvbkJ1dHRvbiA9IF90aGlzLnByb3BzLnJpZ2h0SWNvbkJ1dHRvbjtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgcmlnaHRJY29uQnV0dG9uSG92ZXJlZDogdHJ1ZSB9KTtcbiAgICAgIGlmIChpY29uQnV0dG9uICYmIGljb25CdXR0b24ucHJvcHMub25Nb3VzZUVudGVyKSBpY29uQnV0dG9uLnByb3BzLm9uTW91c2VFbnRlcihldmVudCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGljb25CdXR0b24gPSBfdGhpcy5wcm9wcy5yaWdodEljb25CdXR0b247XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChpY29uQnV0dG9uICYmIGljb25CdXR0b24ucHJvcHMub25Nb3VzZVVwKSBpY29uQnV0dG9uLnByb3BzLm9uTW91c2VVcChldmVudCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBpY29uQnV0dG9uID0gX3RoaXMucHJvcHMucmlnaHRJY29uQnV0dG9uO1xuXG4gICAgICAvLyBTdG9wIHRoZSBldmVudCBmcm9tIGJ1YmJsaW5nIHVwIHRvIHRoZSBsaXN0LWl0ZW1cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKGljb25CdXR0b24gJiYgaWNvbkJ1dHRvbi5wcm9wcy5vbkNsaWNrKSBpY29uQnV0dG9uLnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgdG91Y2g6IHRydWUgfSk7XG4gICAgICBfdGhpcy5wcm9wcy5vblRvdWNoU3RhcnQoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVRvdWNoRW5kID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IHRvdWNoOiB0cnVlIH0pO1xuICAgICAgX3RoaXMucHJvcHMub25Ub3VjaEVuZChldmVudCk7XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKExpc3RJdGVtLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiB0aGlzLnByb3BzLm9wZW4gPT09IG51bGwgPyB0aGlzLnByb3BzLmluaXRpYWxseU9wZW4gPT09IHRydWUgOiB0aGlzLnByb3BzLm9wZW5cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgLy8gdXBkYXRlIHRoZSBzdGF0ZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgY29udHJvbGxlZC5cbiAgICAgIGlmIChuZXh0UHJvcHMub3BlbiAhPT0gbnVsbCkgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IG5leHRQcm9wcy5vcGVuIH0pO1xuICAgICAgaWYgKG5leHRQcm9wcy5kaXNhYmxlZCAmJiB0aGlzLnN0YXRlLmhvdmVyZWQpIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiBmYWxzZSB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzaG91bGRDb21wb25lbnRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KSB7XG4gICAgICByZXR1cm4gISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8ICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKSB8fCAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMuY29udGV4dCwgbmV4dENvbnRleHQpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgbWV0aG9kIGlzIG5lZWRlZCBieSB0aGUgYE1lbnVJdGVtYCBjb21wb25lbnQuXG5cbiAgfSwge1xuICAgIGtleTogJ2FwcGx5Rm9jdXNTdGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5Rm9jdXNTdGF0ZShmb2N1c1N0YXRlKSB7XG4gICAgICBpZiAodGhpcy5idXR0b24pIHtcbiAgICAgICAgdmFyIGJ1dHRvbkVsID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMuYnV0dG9uKTtcblxuICAgICAgICBzd2l0Y2ggKGZvY3VzU3RhdGUpIHtcbiAgICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgICAgIGJ1dHRvbkVsLmJsdXIoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2ZvY3VzZWQnOlxuICAgICAgICAgICAgYnV0dG9uRWwuZm9jdXMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2tleWJvYXJkLWZvY3VzZWQnOlxuICAgICAgICAgICAgdGhpcy5idXR0b24uc2V0S2V5Ym9hcmRGb2N1cygpO1xuICAgICAgICAgICAgYnV0dG9uRWwuZm9jdXMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlRGlzYWJsZWRFbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRFbGVtZW50KHN0eWxlcywgY29udGVudENoaWxkcmVuLCBhZGRpdGlvbmFsUHJvcHMpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlubmVyRGl2U3R5bGUgPSBfcHJvcHMuaW5uZXJEaXZTdHlsZSxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuXG4gICAgICB2YXIgbWVyZ2VkRGl2U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMucm9vdCwgc3R5bGVzLmlubmVyRGl2LCBpbm5lckRpdlN0eWxlLCBzdHlsZSk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIGFkZGl0aW9uYWxQcm9wcywge1xuICAgICAgICAgIHN0eWxlOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcyhtZXJnZWREaXZTdHlsZXMpXG4gICAgICAgIH0pLFxuICAgICAgICBjb250ZW50Q2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlTGFiZWxFbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTGFiZWxFbGVtZW50KHN0eWxlcywgY29udGVudENoaWxkcmVuLCBhZGRpdGlvbmFsUHJvcHMpIHtcbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpbm5lckRpdlN0eWxlID0gX3Byb3BzMi5pbm5lckRpdlN0eWxlLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzMi5zdHlsZTtcblxuXG4gICAgICB2YXIgbWVyZ2VkTGFiZWxTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5yb290LCBzdHlsZXMuaW5uZXJEaXYsIGlubmVyRGl2U3R5bGUsIHN0eWxlcy5sYWJlbCwgc3R5bGUpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdsYWJlbCcsXG4gICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIGFkZGl0aW9uYWxQcm9wcywge1xuICAgICAgICAgIHN0eWxlOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcyhtZXJnZWRMYWJlbFN0eWxlcylcbiAgICAgICAgfSksXG4gICAgICAgIGNvbnRlbnRDaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVUZXh0RWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVRleHRFbGVtZW50KHN0eWxlcywgZGF0YSwga2V5KSB7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG4gICAgICBpZiAoX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGRhdGEpKSB7XG4gICAgICAgIHZhciBzdHlsZSA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLCBkYXRhLnByb3BzLnN0eWxlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhLnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgLy8gaWYgZWxlbWVudCBpcyBhIG5hdGl2ZSBkb20gbm9kZVxuICAgICAgICAgIHN0eWxlID0gcHJlcGFyZVN0eWxlcyhzdHlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoZGF0YSwge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBrZXk6IGtleSwgc3R5bGU6IHByZXBhcmVTdHlsZXMoc3R5bGVzKSB9LFxuICAgICAgICBkYXRhXG4gICAgICApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3B1c2hFbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHVzaEVsZW1lbnQoY2hpbGRyZW4sIGVsZW1lbnQsIGJhc2VTdHlsZXMsIGFkZGl0aW9uYWxQcm9wcykge1xuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgYmFzZVN0eWxlcywgZWxlbWVudC5wcm9wcy5zdHlsZSk7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChlbGVtZW50LCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICAgICAgICBrZXk6IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgICBzdHlsZTogc3R5bGVzXG4gICAgICAgIH0sIGFkZGl0aW9uYWxQcm9wcykpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGF1dG9HZW5lcmF0ZU5lc3RlZEluZGljYXRvciA9IF9wcm9wczMuYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzMy5jaGlsZHJlbixcbiAgICAgICAgICBjb250YWluZXJFbGVtZW50ID0gX3Byb3BzMy5jb250YWluZXJFbGVtZW50LFxuICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzMy5kaXNhYmxlZCxcbiAgICAgICAgICBkaXNhYmxlS2V5Ym9hcmRGb2N1cyA9IF9wcm9wczMuZGlzYWJsZUtleWJvYXJkRm9jdXMsXG4gICAgICAgICAgaG92ZXJDb2xvciA9IF9wcm9wczMuaG92ZXJDb2xvcixcbiAgICAgICAgICBpbml0aWFsbHlPcGVuID0gX3Byb3BzMy5pbml0aWFsbHlPcGVuLFxuICAgICAgICAgIGlubmVyRGl2U3R5bGUgPSBfcHJvcHMzLmlubmVyRGl2U3R5bGUsXG4gICAgICAgICAgaW5zZXRDaGlsZHJlbiA9IF9wcm9wczMuaW5zZXRDaGlsZHJlbixcbiAgICAgICAgICBsZWZ0QXZhdGFyID0gX3Byb3BzMy5sZWZ0QXZhdGFyLFxuICAgICAgICAgIGxlZnRDaGVja2JveCA9IF9wcm9wczMubGVmdENoZWNrYm94LFxuICAgICAgICAgIGxlZnRJY29uID0gX3Byb3BzMy5sZWZ0SWNvbixcbiAgICAgICAgICBuZXN0ZWRJdGVtcyA9IF9wcm9wczMubmVzdGVkSXRlbXMsXG4gICAgICAgICAgbmVzdGVkTGV2ZWwgPSBfcHJvcHMzLm5lc3RlZExldmVsLFxuICAgICAgICAgIG5lc3RlZExpc3RTdHlsZSA9IF9wcm9wczMubmVzdGVkTGlzdFN0eWxlLFxuICAgICAgICAgIG9uS2V5Ym9hcmRGb2N1cyA9IF9wcm9wczMub25LZXlib2FyZEZvY3VzLFxuICAgICAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkID0gX3Byb3BzMy5pc0tleWJvYXJkRm9jdXNlZCxcbiAgICAgICAgICBvbk1vdXNlRW50ZXIgPSBfcHJvcHMzLm9uTW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlTGVhdmUgPSBfcHJvcHMzLm9uTW91c2VMZWF2ZSxcbiAgICAgICAgICBvbk5lc3RlZExpc3RUb2dnbGUgPSBfcHJvcHMzLm9uTmVzdGVkTGlzdFRvZ2dsZSxcbiAgICAgICAgICBvblRvdWNoU3RhcnQgPSBfcHJvcHMzLm9uVG91Y2hTdGFydCxcbiAgICAgICAgICBvbkNsaWNrID0gX3Byb3BzMy5vbkNsaWNrLFxuICAgICAgICAgIHJpZ2h0QXZhdGFyID0gX3Byb3BzMy5yaWdodEF2YXRhcixcbiAgICAgICAgICByaWdodEljb24gPSBfcHJvcHMzLnJpZ2h0SWNvbixcbiAgICAgICAgICByaWdodEljb25CdXR0b24gPSBfcHJvcHMzLnJpZ2h0SWNvbkJ1dHRvbixcbiAgICAgICAgICByaWdodFRvZ2dsZSA9IF9wcm9wczMucmlnaHRUb2dnbGUsXG4gICAgICAgICAgcHJpbWFyeVRleHQgPSBfcHJvcHMzLnByaW1hcnlUZXh0LFxuICAgICAgICAgIHByaW1hcnlUb2dnbGVzTmVzdGVkTGlzdCA9IF9wcm9wczMucHJpbWFyeVRvZ2dsZXNOZXN0ZWRMaXN0LFxuICAgICAgICAgIHNlY29uZGFyeVRleHQgPSBfcHJvcHMzLnNlY29uZGFyeVRleHQsXG4gICAgICAgICAgc2Vjb25kYXJ5VGV4dExpbmVzID0gX3Byb3BzMy5zZWNvbmRhcnlUZXh0TGluZXMsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMzLnN0eWxlLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3Byb3BzMywgWydhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3InLCAnY2hpbGRyZW4nLCAnY29udGFpbmVyRWxlbWVudCcsICdkaXNhYmxlZCcsICdkaXNhYmxlS2V5Ym9hcmRGb2N1cycsICdob3ZlckNvbG9yJywgJ2luaXRpYWxseU9wZW4nLCAnaW5uZXJEaXZTdHlsZScsICdpbnNldENoaWxkcmVuJywgJ2xlZnRBdmF0YXInLCAnbGVmdENoZWNrYm94JywgJ2xlZnRJY29uJywgJ25lc3RlZEl0ZW1zJywgJ25lc3RlZExldmVsJywgJ25lc3RlZExpc3RTdHlsZScsICdvbktleWJvYXJkRm9jdXMnLCAnaXNLZXlib2FyZEZvY3VzZWQnLCAnb25Nb3VzZUVudGVyJywgJ29uTW91c2VMZWF2ZScsICdvbk5lc3RlZExpc3RUb2dnbGUnLCAnb25Ub3VjaFN0YXJ0JywgJ29uQ2xpY2snLCAncmlnaHRBdmF0YXInLCAncmlnaHRJY29uJywgJ3JpZ2h0SWNvbkJ1dHRvbicsICdyaWdodFRvZ2dsZScsICdwcmltYXJ5VGV4dCcsICdwcmltYXJ5VG9nZ2xlc05lc3RlZExpc3QnLCAnc2Vjb25kYXJ5VGV4dCcsICdzZWNvbmRhcnlUZXh0TGluZXMnLCAnc3R5bGUnXSk7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG4gICAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCwgdGhpcy5zdGF0ZSk7XG4gICAgICB2YXIgY29udGVudENoaWxkcmVuID0gW2NoaWxkcmVuXTtcblxuICAgICAgaWYgKGxlZnRJY29uKSB7XG4gICAgICAgIHZhciBhZGRpdGlvbmFsUHJvcHMgPSB7XG4gICAgICAgICAgY29sb3I6IGxlZnRJY29uLnByb3BzLmNvbG9yIHx8IHRoaXMuY29udGV4dC5tdWlUaGVtZS5saXN0SXRlbS5sZWZ0SWNvbkNvbG9yXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCBsZWZ0SWNvbiwgKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMuaWNvbnMsIHN0eWxlcy5sZWZ0SWNvbiksIGFkZGl0aW9uYWxQcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyaWdodEljb24pIHtcbiAgICAgICAgdmFyIF9hZGRpdGlvbmFsUHJvcHMgPSB7XG4gICAgICAgICAgY29sb3I6IHJpZ2h0SWNvbi5wcm9wcy5jb2xvciB8fCB0aGlzLmNvbnRleHQubXVpVGhlbWUubGlzdEl0ZW0ucmlnaHRJY29uQ29sb3JcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wdXNoRWxlbWVudChjb250ZW50Q2hpbGRyZW4sIHJpZ2h0SWNvbiwgKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMuaWNvbnMsIHN0eWxlcy5yaWdodEljb24pLCBfYWRkaXRpb25hbFByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxlZnRBdmF0YXIpIHtcbiAgICAgICAgdGhpcy5wdXNoRWxlbWVudChjb250ZW50Q2hpbGRyZW4sIGxlZnRBdmF0YXIsICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmF2YXRhcnMsIHN0eWxlcy5sZWZ0QXZhdGFyKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyaWdodEF2YXRhcikge1xuICAgICAgICB0aGlzLnB1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgcmlnaHRBdmF0YXIsICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmF2YXRhcnMsIHN0eWxlcy5yaWdodEF2YXRhcikpO1xuICAgICAgfVxuXG4gICAgICBpZiAobGVmdENoZWNrYm94KSB7XG4gICAgICAgIHRoaXMucHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCBsZWZ0Q2hlY2tib3gsICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmxlZnRDaGVja2JveCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBSaWdodEljb25CdXR0b25FbGVtZW50XG4gICAgICB2YXIgaGFzTmVzdExpc3RJdGVtcyA9IG5lc3RlZEl0ZW1zLmxlbmd0aDtcbiAgICAgIHZhciBoYXNSaWdodEVsZW1lbnQgPSByaWdodEF2YXRhciB8fCByaWdodEljb24gfHwgcmlnaHRJY29uQnV0dG9uIHx8IHJpZ2h0VG9nZ2xlO1xuICAgICAgdmFyIG5lZWRzTmVzdGVkSW5kaWNhdG9yID0gaGFzTmVzdExpc3RJdGVtcyAmJiBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3IgJiYgIWhhc1JpZ2h0RWxlbWVudDtcblxuICAgICAgaWYgKHJpZ2h0SWNvbkJ1dHRvbiB8fCBuZWVkc05lc3RlZEluZGljYXRvcikge1xuICAgICAgICB2YXIgcmlnaHRJY29uQnV0dG9uRWxlbWVudCA9IHJpZ2h0SWNvbkJ1dHRvbjtcbiAgICAgICAgdmFyIHJpZ2h0SWNvbkJ1dHRvbkhhbmRsZXJzID0ge1xuICAgICAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5oYW5kbGVSaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzLFxuICAgICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5oYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZUVudGVyLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZUxlYXZlLFxuICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uQ2xpY2ssXG4gICAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcCxcbiAgICAgICAgICBvbk1vdXNlVXA6IHRoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIENyZWF0ZSBhIG5lc3RlZCBsaXN0IGluZGljYXRvciBpY29uIGlmIHdlIGRvbid0IGhhdmUgYW4gaWNvbiBvbiB0aGUgcmlnaHRcbiAgICAgICAgaWYgKG5lZWRzTmVzdGVkSW5kaWNhdG9yKSB7XG4gICAgICAgICAgcmlnaHRJY29uQnV0dG9uRWxlbWVudCA9IHRoaXMuc3RhdGUub3BlbiA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX0ljb25CdXR0b24yLmRlZmF1bHQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V4cGFuZExlc3MyLmRlZmF1bHQsIG51bGwpXG4gICAgICAgICAgKSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX0ljb25CdXR0b24yLmRlZmF1bHQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V4cGFuZE1vcmUyLmRlZmF1bHQsIG51bGwpXG4gICAgICAgICAgKTtcbiAgICAgICAgICByaWdodEljb25CdXR0b25IYW5kbGVycy5vbkNsaWNrID0gdGhpcy5oYW5kbGVOZXN0ZWRMaXN0VG9nZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wdXNoRWxlbWVudChjb250ZW50Q2hpbGRyZW4sIHJpZ2h0SWNvbkJ1dHRvbkVsZW1lbnQsICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLnJpZ2h0SWNvbkJ1dHRvbiksIHJpZ2h0SWNvbkJ1dHRvbkhhbmRsZXJzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJpZ2h0VG9nZ2xlKSB7XG4gICAgICAgIHRoaXMucHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCByaWdodFRvZ2dsZSwgKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMucmlnaHRUb2dnbGUpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByaW1hcnlUZXh0KSB7XG4gICAgICAgIHZhciBwcmltYXJ5VGV4dEVsZW1lbnQgPSB0aGlzLmNyZWF0ZVRleHRFbGVtZW50KHN0eWxlcy5wcmltYXJ5VGV4dCwgcHJpbWFyeVRleHQsICdwcmltYXJ5VGV4dCcpO1xuICAgICAgICBjb250ZW50Q2hpbGRyZW4ucHVzaChwcmltYXJ5VGV4dEVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2Vjb25kYXJ5VGV4dCkge1xuICAgICAgICB2YXIgc2Vjb25kYXJ5VGV4dEVsZW1lbnQgPSB0aGlzLmNyZWF0ZVRleHRFbGVtZW50KHN0eWxlcy5zZWNvbmRhcnlUZXh0LCBzZWNvbmRhcnlUZXh0LCAnc2Vjb25kYXJ5VGV4dCcpO1xuICAgICAgICBjb250ZW50Q2hpbGRyZW4ucHVzaChzZWNvbmRhcnlUZXh0RWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXN0ZWRMaXN0ID0gbmVzdGVkSXRlbXMubGVuZ3RoID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9OZXN0ZWRMaXN0Mi5kZWZhdWx0LFxuICAgICAgICB7IG5lc3RlZExldmVsOiBuZXN0ZWRMZXZlbCwgb3BlbjogdGhpcy5zdGF0ZS5vcGVuLCBzdHlsZTogbmVzdGVkTGlzdFN0eWxlIH0sXG4gICAgICAgIG5lc3RlZEl0ZW1zXG4gICAgICApIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgc2ltcGxlTGFiZWwgPSAhcHJpbWFyeVRvZ2dsZXNOZXN0ZWRMaXN0ICYmIChsZWZ0Q2hlY2tib3ggfHwgcmlnaHRUb2dnbGUpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBudWxsLFxuICAgICAgICBzaW1wbGVMYWJlbCA/IHRoaXMuY3JlYXRlTGFiZWxFbGVtZW50KHN0eWxlcywgY29udGVudENoaWxkcmVuLCBvdGhlcikgOiBkaXNhYmxlZCA/IHRoaXMuY3JlYXRlRGlzYWJsZWRFbGVtZW50KHN0eWxlcywgY29udGVudENoaWxkcmVuLCBvdGhlcikgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfRW5oYW5jZWRCdXR0b24yLmRlZmF1bHQsXG4gICAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgICAgICBjb250YWluZXJFbGVtZW50OiBjb250YWluZXJFbGVtZW50XG4gICAgICAgICAgfSwgb3RoZXIsIHtcbiAgICAgICAgICAgIGRpc2FibGVLZXlib2FyZEZvY3VzOiBkaXNhYmxlS2V5Ym9hcmRGb2N1cyB8fCB0aGlzLnN0YXRlLnJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXNlZCxcbiAgICAgICAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5oYW5kbGVLZXlib2FyZEZvY3VzLFxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLmhhbmRsZU1vdXNlTGVhdmUsXG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LFxuICAgICAgICAgICAgb25Ub3VjaEVuZDogdGhpcy5oYW5kbGVUb3VjaEVuZCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihub2RlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuYnV0dG9uID0gbm9kZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHlsZTogKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMucm9vdCwgc3R5bGUpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHByZXBhcmVTdHlsZXMoKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5pbm5lckRpdiwgaW5uZXJEaXZTdHlsZSkpIH0sXG4gICAgICAgICAgICBjb250ZW50Q2hpbGRyZW5cbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIG5lc3RlZExpc3RcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBMaXN0SXRlbTtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkxpc3RJdGVtLm11aU5hbWUgPSAnTGlzdEl0ZW0nO1xuTGlzdEl0ZW0uZGVmYXVsdFByb3BzID0ge1xuICBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3I6IHRydWUsXG4gIGNvbnRhaW5lckVsZW1lbnQ6ICdzcGFuJyxcbiAgZGlzYWJsZUtleWJvYXJkRm9jdXM6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIGluaXRpYWxseU9wZW46IGZhbHNlLFxuICBpbnNldENoaWxkcmVuOiBmYWxzZSxcbiAgbmVzdGVkSXRlbXM6IFtdLFxuICBuZXN0ZWRMZXZlbDogMCxcbiAgb25LZXlib2FyZEZvY3VzOiBmdW5jdGlvbiBvbktleWJvYXJkRm9jdXMoKSB7fSxcbiAgb25Nb3VzZUVudGVyOiBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoKSB7fSxcbiAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoKSB7fSxcbiAgb25OZXN0ZWRMaXN0VG9nZ2xlOiBmdW5jdGlvbiBvbk5lc3RlZExpc3RUb2dnbGUoKSB7fSxcbiAgb25Ub3VjaEVuZDogZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHt9LFxuICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIG9uVG91Y2hTdGFydCgpIHt9LFxuICBvcGVuOiBudWxsLFxuICBwcmltYXJ5VG9nZ2xlc05lc3RlZExpc3Q6IGZhbHNlLFxuICBzZWNvbmRhcnlUZXh0TGluZXM6IDFcbn07XG5MaXN0SXRlbS5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuTGlzdEl0ZW0ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogSWYgdHJ1ZSwgZ2VuZXJhdGUgYSBuZXN0ZWQtbGlzdC1pbmRpY2F0b3IgaWNvbiB3aGVuIG5lc3RlZCBsaXN0XG4gICAqIGl0ZW1zIGFyZSBkZXRlY3RlZC4gTm90ZSB0aGF0IGFuIGluZGljYXRvciB3aWxsIG5vdCBiZSBjcmVhdGVkXG4gICAqIGlmIGEgYHJpZ2h0SWNvbmAgb3IgYHJpZ2h0SWNvbkJ1dHRvbmAgaGFzIGJlZW4gcHJvdmlkZWQgdG9cbiAgICogdGhlIGVsZW1lbnQuXG4gICAqL1xuICBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIENoaWxkcmVuIHBhc3NlZCBpbnRvIHRoZSBgTGlzdEl0ZW1gLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBlbGVtZW50IHRvIHVzZSBhcyB0aGUgY29udGFpbmVyIGZvciB0aGUgTGlzdEl0ZW0uIEVpdGhlciBhIHN0cmluZyB0b1xuICAgKiB1c2UgYSBET00gZWxlbWVudCBvciBhIFJlYWN0RWxlbWVudC4gVGhpcyBpcyB1c2VmdWwgZm9yIHdyYXBwaW5nIHRoZVxuICAgKiBMaXN0SXRlbSBpbiBhIGN1c3RvbSBMaW5rIGNvbXBvbmVudC4gSWYgYSBSZWFjdEVsZW1lbnQgaXMgZ2l2ZW4sIGVuc3VyZVxuICAgKiB0aGF0IGl0IHBhc3NlcyBhbGwgb2YgaXRzIGdpdmVuIHByb3BzIHRocm91Z2ggdG8gdGhlIHVuZGVybHlpbmcgRE9NXG4gICAqIGVsZW1lbnQgYW5kIHJlbmRlcnMgaXRzIGNoaWxkcmVuIHByb3AgZm9yIHByb3BlciBpbnRlZ3JhdGlvbi5cbiAgICovXG4gIGNvbnRhaW5lckVsZW1lbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50XSksXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgZWxlbWVudCB3aWxsIG5vdCBiZSBhYmxlIHRvIGJlIGZvY3VzZWQgYnkgdGhlIGtleWJvYXJkLlxuICAgKi9cbiAgZGlzYWJsZUtleWJvYXJkRm9jdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBlbGVtZW50IHdpbGwgbm90IGJlIGNsaWNrYWJsZVxuICAgKiBhbmQgd2lsbCBub3QgZGlzcGxheSBob3ZlciBlZmZlY3RzLlxuICAgKiBUaGlzIGlzIGF1dG9tYXRpY2FsbHkgZGlzYWJsZWQgaWYgZWl0aGVyIGBsZWZ0Q2hlY2tib3hgXG4gICAqIG9yIGByaWdodFRvZ2dsZWAgaXMgc2V0LlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICogT3ZlcnJpZGUgdGhlIGhvdmVyIGJhY2tncm91bmQgY29sb3IuXG4gICovXG4gIGhvdmVyQ29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIG5lc3RlZCBgTGlzdEl0ZW1gcyBhcmUgaW5pdGlhbGx5IGRpc3BsYXllZC5cbiAgICovXG4gIGluaXRpYWxseU9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSBpbm5lciBkaXYgZWxlbWVudC5cbiAgICovXG4gIGlubmVyRGl2U3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGNoaWxkcmVuIHdpbGwgYmUgaW5kZW50ZWQgYnkgNzJweC5cbiAgICogVGhpcyBpcyB1c2VmdWwgaWYgdGhlcmUgaXMgbm8gbGVmdCBhdmF0YXIgb3IgbGVmdCBpY29uLlxuICAgKi9cbiAgaW5zZXRDaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVXNlIHRvIGNvbnRyb2wgaWYgdGhlIGxpc3QgaXRlbSBzaG91bGQgcmVuZGVyIGFzIGtleWJvYXJkIGZvY3VzZWQuICBJZlxuICAgKiB1bmRlZmluZWQgKGRlZmF1bHQpLCB0aGlzIHdpbGwgYmUgYXV0b21hdGljYWxseSBtYW5hZ2VkLiAgSWYgcHJvdmlkZWQsXG4gICAqIGl0IHdpbGwgY2hhbmdlIHRoZSBjb21wb25lbnRzIHN0eWxlLiAgTm90ZSB0aGF0IHRoaXMgd2lsbCBub3QgY2hhbmdlIHRoZVxuICAgKiBhY3R1YWwgZm9jdXMgLSBhbmQgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIHlvdSB3YW50IHRvIHNpbXVsYXRlXG4gICAqIGtleWJvYXJkIGZvY3VzIChlZy4gaW4gYSByaWNoIHRleHQgaW5wdXQgYXV0b2NvbXBsZXRlKS5cbiAgICovXG4gIGlzS2V5Ym9hcmRGb2N1c2VkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBgQXZhdGFyYCBlbGVtZW50IHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgbGVmdCBzaWRlLlxuICAgKi9cbiAgbGVmdEF2YXRhcjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYENoZWNrYm94YCBlbGVtZW50IHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgbGVmdCBzaWRlLlxuICAgKi9cbiAgbGVmdENoZWNrYm94OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBgU3ZnSWNvbmAgb3IgYEZvbnRJY29uYCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIGxlZnQgc2lkZS5cbiAgICovXG4gIGxlZnRJY29uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBgTGlzdEl0ZW1gcyB0byBuZXN0IHVuZGVybmVhdGggdGhlIGN1cnJlbnQgYExpc3RJdGVtYC5cbiAgICovXG4gIG5lc3RlZEl0ZW1zOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50KSxcbiAgLyoqXG4gICAqIENvbnRyb2xzIGhvdyBkZWVwIGEgYExpc3RJdGVtYCBhcHBlYXJzLlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGF1dG9tYXRpY2FsbHkgbWFuYWdlZCwgc28gbW9kaWZ5IGF0IHlvdXIgb3duIHJpc2suXG4gICAqL1xuICBuZXN0ZWRMZXZlbDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgbmVzdGVkIGl0ZW1zJyBgTmVzdGVkTGlzdGAuXG4gICAqL1xuICBuZXN0ZWRMaXN0U3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgbGlzdCBpdGVtIGlzIGNsaWNrZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBDbGljayBldmVudCB0YXJnZXRpbmcgdGhlIGxpc3QgaXRlbS5cbiAgICovXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIGBMaXN0SXRlbWAgaXMgZm9jdXNlZCBvciBibHVycmVkIGJ5IHRoZSBrZXlib2FyZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IGBmb2N1c2Agb3IgYGJsdXJgIGV2ZW50IHRhcmdldGluZyB0aGUgYExpc3RJdGVtYC5cbiAgICogQHBhcmFtIHtib29sZWFufSBpc0tleWJvYXJkRm9jdXNlZCBJZiB0cnVlLCB0aGUgYExpc3RJdGVtYCBpcyBmb2N1c2VkLlxuICAgKi9cbiAgb25LZXlib2FyZEZvY3VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VFbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvbk1vdXNlTGVhdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIGBMaXN0SXRlbWAgdG9nZ2xlcyBpdHMgbmVzdGVkIGxpc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsaXN0SXRlbSBUaGUgYExpc3RJdGVtYC5cbiAgICovXG4gIG9uTmVzdGVkTGlzdFRvZ2dsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvblRvdWNoRW5kOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uVG91Y2hTdGFydDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ29udHJvbCB0b2dnbGUgc3RhdGUgb2YgbmVzdGVkIGxpc3QuXG4gICAqL1xuICBvcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBibG9jayBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIHByaW1hcnkgdGV4dC5cbiAgICogSWYgYSBzdHJpbmcgaXMgcGFzc2VkIGluLCBhIGRpdiB0YWcgd2lsbCBiZSByZW5kZXJlZC5cbiAgICovXG4gIHByaW1hcnlUZXh0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBjbGlja2luZyBvciB0YXBwaW5nIHRoZSBwcmltYXJ5IHRleHQgb2YgdGhlIGBMaXN0SXRlbWBcbiAgICogdG9nZ2xlcyB0aGUgbmVzdGVkIGxpc3QuXG4gICAqL1xuICBwcmltYXJ5VG9nZ2xlc05lc3RlZExpc3Q6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGBBdmF0YXJgIGVsZW1lbnQgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSByaWdodCBzaWRlLlxuICAgKi9cbiAgcmlnaHRBdmF0YXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGBTdmdJY29uYCBvciBgRm9udEljb25gIHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgcmlnaHQgc2lkZS5cbiAgICovXG4gIHJpZ2h0SWNvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYEljb25CdXR0b25gIHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgcmlnaHQgc2lkZS5cbiAgICogSG92ZXJpbmcgb3ZlciB0aGlzIGJ1dHRvbiB3aWxsIHJlbW92ZSB0aGUgYExpc3RJdGVtYCBob3Zlci5cbiAgICogQWxzbywgY2xpY2tpbmcgb24gdGhpcyBidXR0b24gd2lsbCBub3QgdHJpZ2dlciBhXG4gICAqIHJpcHBsZSBvbiB0aGUgYExpc3RJdGVtYDsgdGhlIGV2ZW50IHdpbGwgYmUgc3RvcHBlZCBhbmQgcHJldmVudGVkXG4gICAqIGZyb20gYnViYmxpbmcgdXAgdG8gY2F1c2UgYSBgTGlzdEl0ZW1gIGNsaWNrLlxuICAgKi9cbiAgcmlnaHRJY29uQnV0dG9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBgVG9nZ2xlYCBlbGVtZW50IHRvIGRpc3BsYXkgb24gdGhlIHJpZ2h0IHNpZGUuXG4gICAqL1xuICByaWdodFRvZ2dsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYmxvY2sgZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSBzZWNvbmRhcnkgdGV4dC5cbiAgICogSWYgYSBzdHJpbmcgaXMgcGFzc2VkIGluLCBhIGRpdiB0YWcgd2lsbCBiZSByZW5kZXJlZC5cbiAgICovXG4gIHNlY29uZGFyeVRleHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIENhbiBiZSAxIG9yIDIuIFRoaXMgaXMgdGhlIG51bWJlciBvZiBzZWNvbmRhcnlcbiAgICogdGV4dCBsaW5lcyBiZWZvcmUgZWxsaXBzaXMgd2lsbCBzaG93LlxuICAgKi9cbiAgc2Vjb25kYXJ5VGV4dExpbmVzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsxLCAyXSksXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0XG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBMaXN0SXRlbTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF90cmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4uL3N0eWxlcy90cmFuc2l0aW9ucycpO1xuXG52YXIgX3RyYW5zaXRpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb25zKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFN2Z0ljb24gPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShTdmdJY29uLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdmdJY29uKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFN2Z0ljb24pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gU3ZnSWNvbi5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoU3ZnSWNvbikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgaG92ZXJlZDogZmFsc2VcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZUxlYXZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgICAgX3RoaXMucHJvcHMub25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZUVudGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IHRydWUgfSk7XG4gICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIoZXZlbnQpO1xuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShTdmdJY29uLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNvbG9yID0gX3Byb3BzLmNvbG9yLFxuICAgICAgICAgIGhvdmVyQ29sb3IgPSBfcHJvcHMuaG92ZXJDb2xvcixcbiAgICAgICAgICBvbk1vdXNlRW50ZXIgPSBfcHJvcHMub25Nb3VzZUVudGVyLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZSA9IF9wcm9wcy5vbk1vdXNlTGVhdmUsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdmlld0JveCA9IF9wcm9wcy52aWV3Qm94LFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3Byb3BzLCBbJ2NoaWxkcmVuJywgJ2NvbG9yJywgJ2hvdmVyQ29sb3InLCAnb25Nb3VzZUVudGVyJywgJ29uTW91c2VMZWF2ZScsICdzdHlsZScsICd2aWV3Qm94J10pO1xuICAgICAgdmFyIF9jb250ZXh0JG11aVRoZW1lID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLFxuICAgICAgICAgIHN2Z0ljb24gPSBfY29udGV4dCRtdWlUaGVtZS5zdmdJY29uLFxuICAgICAgICAgIHByZXBhcmVTdHlsZXMgPSBfY29udGV4dCRtdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG5cbiAgICAgIHZhciBvZmZDb2xvciA9IGNvbG9yID8gY29sb3IgOiAnY3VycmVudENvbG9yJztcbiAgICAgIHZhciBvbkNvbG9yID0gaG92ZXJDb2xvciA/IGhvdmVyQ29sb3IgOiBvZmZDb2xvcjtcblxuICAgICAgdmFyIG1lcmdlZFN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICBjb2xvcjogc3ZnSWNvbi5jb2xvcixcbiAgICAgICAgZmlsbDogdGhpcy5zdGF0ZS5ob3ZlcmVkID8gb25Db2xvciA6IG9mZkNvbG9yLFxuICAgICAgICBoZWlnaHQ6IDI0LFxuICAgICAgICB3aWR0aDogMjQsXG4gICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgICAgdHJhbnNpdGlvbjogX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoKVxuICAgICAgfSwgc3R5bGUpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdzdmcnLFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwge1xuICAgICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5oYW5kbGVNb3VzZUVudGVyLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICAgIHN0eWxlOiBwcmVwYXJlU3R5bGVzKG1lcmdlZFN0eWxlcyksXG4gICAgICAgICAgdmlld0JveDogdmlld0JveFxuICAgICAgICB9KSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTdmdJY29uO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuU3ZnSWNvbi5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuU3ZnSWNvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIG9uTW91c2VFbnRlcjogZnVuY3Rpb24gb25Nb3VzZUVudGVyKCkge30sXG4gIG9uTW91c2VMZWF2ZTogZnVuY3Rpb24gb25Nb3VzZUxlYXZlKCkge30sXG4gIHZpZXdCb3g6ICcwIDAgMjQgMjQnXG59O1xuU3ZnSWNvbi5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuU3ZnSWNvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBFbGVtZW50cyBwYXNzZWQgaW50byB0aGUgU1ZHIEljb24uXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgZmlsbCBjb2xvciBvZiB0aGUgc3ZnIGljb24uXG4gICAqIElmIG5vdCBzcGVjaWZpZWQsIHRoaXMgY29tcG9uZW50IHdpbGwgZGVmYXVsdFxuICAgKiB0byBtdWlUaGVtZS5wYWxldHRlLnRleHRDb2xvci5cbiAgICovXG4gIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGljb24gY29sb3Igd2hlbiB0aGUgbW91c2UgaG92ZXJzIG92ZXIgdGhlIGljb24uXG4gICAqL1xuICBob3ZlckNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Nb3VzZUVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VMZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcmVkZWZpbmUgd2hhdCB0aGUgY29vcmRpbmF0ZXNcbiAgICogd2l0aG91dCB1bml0cyBtZWFuIGluc2lkZSBhbiBzdmcgZWxlbWVudC4gRm9yIGV4YW1wbGUsXG4gICAqIGlmIHRoZSBTVkcgZWxlbWVudCBpcyA1MDAgKHdpZHRoKSBieSAyMDAgKGhlaWdodCksIGFuZCB5b3VcbiAgICogcGFzcyB2aWV3Qm94PVwiMCAwIDUwIDIwXCIsIHRoaXMgbWVhbnMgdGhhdCB0aGUgY29vcmRpbmF0ZXMgaW5zaWRlXG4gICAqIHRoZSBzdmcgd2lsbCBnbyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgKDAsMCkgdG8gYm90dG9tIHJpZ2h0ICg1MCwyMClcbiAgICogYW5kIGVhY2ggdW5pdCB3aWxsIGJlIHdvcnRoIDEwcHguXG4gICAqL1xuICB2aWV3Qm94OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gU3ZnSWNvbjsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgZ2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpIHtcbiAgaWYgKHR5cGVvZiBDb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbiAgfVxuXG4gIGlmICghQ29tcG9uZW50KSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBnZXREaXNwbGF5TmFtZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBzZXRTdGF0aWMgPSBmdW5jdGlvbiBzZXRTdGF0aWMoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICAgIEJhc2VDb21wb25lbnRba2V5XSA9IHZhbHVlO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICByZXR1cm4gQmFzZUNvbXBvbmVudDtcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHNldFN0YXRpYzsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3NldERpc3BsYXlOYW1lID0gcmVxdWlyZSgnLi9zZXREaXNwbGF5TmFtZScpO1xuXG52YXIgX3NldERpc3BsYXlOYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldERpc3BsYXlOYW1lKTtcblxudmFyIF93cmFwRGlzcGxheU5hbWUgPSByZXF1aXJlKCcuL3dyYXBEaXNwbGF5TmFtZScpO1xuXG52YXIgX3dyYXBEaXNwbGF5TmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93cmFwRGlzcGxheU5hbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBzaG91bGRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRVcGRhdGUodGVzdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9ICgwLCBfcmVhY3QuY3JlYXRlRmFjdG9yeSkoQmFzZUNvbXBvbmVudCk7XG5cbiAgICB2YXIgU2hvdWxkVXBkYXRlID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIF9pbmhlcml0cyhTaG91bGRVcGRhdGUsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBTaG91bGRVcGRhdGUoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaG91bGRVcGRhdGUpO1xuXG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuXG4gICAgICBTaG91bGRVcGRhdGUucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHRlc3QodGhpcy5wcm9wcywgbmV4dFByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIFNob3VsZFVwZGF0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gZmFjdG9yeSh0aGlzLnByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBTaG91bGRVcGRhdGU7XG4gICAgfShfcmVhY3QuQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gKDAsIF9zZXREaXNwbGF5TmFtZTIuZGVmYXVsdCkoKDAsIF93cmFwRGlzcGxheU5hbWUyLmRlZmF1bHQpKEJhc2VDb21wb25lbnQsICdzaG91bGRVcGRhdGUnKSkoU2hvdWxkVXBkYXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIFNob3VsZFVwZGF0ZTtcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHNob3VsZFVwZGF0ZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wdXJlID0gcmVxdWlyZSgncmVjb21wb3NlL3B1cmUnKTtcblxudmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXG52YXIgX1N2Z0ljb24gPSByZXF1aXJlKCcuLi8uLi9TdmdJY29uJyk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE5hdmlnYXRpb25DaGVjayA9IGZ1bmN0aW9uIE5hdmlnYXRpb25DaGVjayhwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNOSAxNi4xN0w0LjgzIDEybC0xLjQyIDEuNDFMOSAxOSAyMSA3bC0xLjQxLTEuNDF6JyB9KVxuICApO1xufTtcbk5hdmlnYXRpb25DaGVjayA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoTmF2aWdhdGlvbkNoZWNrKTtcbk5hdmlnYXRpb25DaGVjay5kaXNwbGF5TmFtZSA9ICdOYXZpZ2F0aW9uQ2hlY2snO1xuTmF2aWdhdGlvbkNoZWNrLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5hdmlnYXRpb25DaGVjazsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF90cmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4uL3N0eWxlcy90cmFuc2l0aW9ucycpO1xuXG52YXIgX3RyYW5zaXRpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb25zKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9wcm9wVHlwZXMzID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJvcFR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlczMpO1xuXG52YXIgX1BhcGVyID0gcmVxdWlyZSgnLi4vUGFwZXInKTtcblxudmFyIF9QYXBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QYXBlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldFN0eWxlcyhwcm9wcywgY29udGV4dCwgc3RhdGUpIHtcbiAgdmFyIHRhcmdldE9yaWdpbiA9IHByb3BzLnRhcmdldE9yaWdpbjtcbiAgdmFyIG9wZW4gPSBzdGF0ZS5vcGVuO1xuICB2YXIgbXVpVGhlbWUgPSBjb250ZXh0Lm11aVRoZW1lO1xuXG4gIHZhciBob3Jpem9udGFsID0gdGFyZ2V0T3JpZ2luLmhvcml6b250YWwucmVwbGFjZSgnbWlkZGxlJywgJ3ZlcnRpY2FsJyk7XG5cbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHpJbmRleDogbXVpVGhlbWUuekluZGV4LnBvcG92ZXIsXG4gICAgICBvcGFjaXR5OiBvcGVuID8gMSA6IDAsXG4gICAgICB0cmFuc2Zvcm06IG9wZW4gPyAnc2NhbGUoMSwgMSknIDogJ3NjYWxlKDAsIDApJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogaG9yaXpvbnRhbCArICcgJyArIHRhcmdldE9yaWdpbi52ZXJ0aWNhbCxcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCcyNTBtcycsIFsndHJhbnNmb3JtJywgJ29wYWNpdHknXSksXG4gICAgICBtYXhIZWlnaHQ6ICcxMDAlJ1xuICAgIH0sXG4gICAgaG9yaXpvbnRhbDoge1xuICAgICAgbWF4SGVpZ2h0OiAnMTAwJScsXG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgIHRyYW5zZm9ybTogb3BlbiA/ICdzY2FsZVgoMSknIDogJ3NjYWxlWCgwKScsXG4gICAgICBvcGFjaXR5OiBvcGVuID8gMSA6IDAsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46IGhvcml6b250YWwgKyAnICcgKyB0YXJnZXRPcmlnaW4udmVydGljYWwsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnMjUwbXMnLCBbJ3RyYW5zZm9ybScsICdvcGFjaXR5J10pXG4gICAgfSxcbiAgICB2ZXJ0aWNhbDoge1xuICAgICAgb3BhY2l0eTogb3BlbiA/IDEgOiAwLFxuICAgICAgdHJhbnNmb3JtOiBvcGVuID8gJ3NjYWxlWSgxKScgOiAnc2NhbGVZKDApJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogaG9yaXpvbnRhbCArICcgJyArIHRhcmdldE9yaWdpbi52ZXJ0aWNhbCxcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCc1MDBtcycsIFsndHJhbnNmb3JtJywgJ29wYWNpdHknXSlcbiAgICB9XG4gIH07XG59XG5cbnZhciBQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFBvcG92ZXJBbmltYXRpb25EZWZhdWx0LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdC5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG9wZW46IGZhbHNlXG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFBvcG92ZXJBbmltYXRpb25EZWZhdWx0LCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby1kaWQtbW91bnQtc2V0LXN0YXRlXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgb3BlbjogbmV4dFByb3BzLm9wZW5cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgekRlcHRoID0gX3Byb3BzLnpEZXB0aDtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXModGhpcy5wcm9wcywgdGhpcy5jb250ZXh0LCB0aGlzLnN0YXRlKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfUGFwZXIyLmRlZmF1bHQsXG4gICAgICAgIHtcbiAgICAgICAgICBzdHlsZTogKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5yb290LCBzdHlsZSksXG4gICAgICAgICAgekRlcHRoOiB6RGVwdGgsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogcHJlcGFyZVN0eWxlcyhzdHlsZXMuaG9yaXpvbnRhbCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogcHJlcGFyZVN0eWxlcyhzdHlsZXMudmVydGljYWwpIH0sXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQ7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Qb3BvdmVyQW5pbWF0aW9uRGVmYXVsdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHN0eWxlOiB7fSxcbiAgekRlcHRoOiAxXG59O1xuUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblBvcG92ZXJBbmltYXRpb25EZWZhdWx0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjc3MgY2xhc3MgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgb3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICB0YXJnZXRPcmlnaW46IF9wcm9wVHlwZXM0LmRlZmF1bHQub3JpZ2luLmlzUmVxdWlyZWQsXG4gIHpEZXB0aDogX3Byb3BUeXBlczQuZGVmYXVsdC56RGVwdGhcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IFBvcG92ZXJBbmltYXRpb25EZWZhdWx0OyIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgYFR5cGVFcnJvcmAgbWVzc2FnZSBmb3IgXCJGdW5jdGlvbnNcIiBtZXRob2RzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgRGF0ZVxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gKiB9LCBfLm5vdygpKTtcbiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gKi9cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICogaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gKlxuICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAqIH0pKTtcbiAqXG4gKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsYXN0QXJncyxcbiAgICAgIGxhc3RUaGlzLFxuICAgICAgbWF4V2FpdCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHRpbWVySWQsXG4gICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgcmVzdWx0ID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZyA/IG5hdGl2ZU1pbihyZXN1bHQsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0aHJvdHRsZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3Byb3BUeXBlczMgPSByZXF1aXJlKCcuLi91dGlscy9wcm9wVHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMyk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcblxudmFyIF90cmFuc2l0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9ucyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldFN0eWxlcyhwcm9wcywgY29udGV4dCkge1xuICB2YXIgcm91bmRlZCA9IHByb3BzLnJvdW5kZWQsXG4gICAgICBjaXJjbGUgPSBwcm9wcy5jaXJjbGUsXG4gICAgICB0cmFuc2l0aW9uRW5hYmxlZCA9IHByb3BzLnRyYW5zaXRpb25FbmFibGVkLFxuICAgICAgekRlcHRoID0gcHJvcHMuekRlcHRoO1xuICB2YXIgX2NvbnRleHQkbXVpVGhlbWUgPSBjb250ZXh0Lm11aVRoZW1lLFxuICAgICAgYmFzZVRoZW1lID0gX2NvbnRleHQkbXVpVGhlbWUuYmFzZVRoZW1lLFxuICAgICAgcGFwZXIgPSBfY29udGV4dCRtdWlUaGVtZS5wYXBlcixcbiAgICAgIGJvcmRlclJhZGl1cyA9IF9jb250ZXh0JG11aVRoZW1lLmJvcmRlclJhZGl1cztcblxuXG4gIHJldHVybiB7XG4gICAgcm9vdDoge1xuICAgICAgY29sb3I6IHBhcGVyLmNvbG9yLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBwYXBlci5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uRW5hYmxlZCAmJiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgpLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBmb250RmFtaWx5OiBiYXNlVGhlbWUuZm9udEZhbWlseSxcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLDAsMCwwKScsIC8vIFJlbW92ZSBtb2JpbGUgY29sb3IgZmxhc2hpbmcgKGRlcHJlY2F0ZWQpXG4gICAgICBib3hTaGFkb3c6IHBhcGVyLnpEZXB0aFNoYWRvd3NbekRlcHRoIC0gMV0sIC8vIE5vIHNoYWRvdyBmb3IgMCBkZXB0aCBwYXBlcnNcbiAgICAgIGJvcmRlclJhZGl1czogY2lyY2xlID8gJzUwJScgOiByb3VuZGVkID8gYm9yZGVyUmFkaXVzIDogJzBweCdcbiAgICB9XG4gIH07XG59XG5cbnZhciBQYXBlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFBhcGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQYXBlcigpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQYXBlcik7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFBhcGVyLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShQYXBlcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUGFwZXIsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2lyY2xlID0gX3Byb3BzLmNpcmNsZSxcbiAgICAgICAgICByb3VuZGVkID0gX3Byb3BzLnJvdW5kZWQsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdHJhbnNpdGlvbkVuYWJsZWQgPSBfcHJvcHMudHJhbnNpdGlvbkVuYWJsZWQsXG4gICAgICAgICAgekRlcHRoID0gX3Byb3BzLnpEZXB0aCxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wcywgWydjaGlsZHJlbicsICdjaXJjbGUnLCAncm91bmRlZCcsICdzdHlsZScsICd0cmFuc2l0aW9uRW5hYmxlZCcsICd6RGVwdGgnXSk7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG4gICAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpKSB9KSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBQYXBlcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblBhcGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2lyY2xlOiBmYWxzZSxcbiAgcm91bmRlZDogdHJ1ZSxcbiAgdHJhbnNpdGlvbkVuYWJsZWQ6IHRydWUsXG4gIHpEZXB0aDogMVxufTtcblBhcGVyLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5QYXBlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBDaGlsZHJlbiBwYXNzZWQgaW50byB0aGUgcGFwZXIgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBTZXQgdG8gdHJ1ZSB0byBnZW5lcmF0ZSBhIGNpcmN1bGFyIHBhcGVyIGNvbnRhaW5lci5cbiAgICovXG4gIGNpcmNsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogQnkgZGVmYXVsdCwgdGhlIHBhcGVyIGNvbnRhaW5lciB3aWxsIGhhdmUgYSBib3JkZXIgcmFkaXVzLlxuICAgKiBTZXQgdGhpcyB0byBmYWxzZSB0byBnZW5lcmF0ZSBhIGNvbnRhaW5lciB3aXRoIHNoYXJwIGNvcm5lcnMuXG4gICAqL1xuICByb3VuZGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgQ1NTIHRyYW5zaXRpb25zIGZvciB0aGUgcGFwZXIgZWxlbWVudC5cbiAgICovXG4gIHRyYW5zaXRpb25FbmFibGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIG51bWJlciByZXByZXNlbnRzIHRoZSB6RGVwdGggb2YgdGhlIHBhcGVyIHNoYWRvdy5cbiAgICovXG4gIHpEZXB0aDogX3Byb3BUeXBlczQuZGVmYXVsdC56RGVwdGhcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IFBhcGVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RvbScpO1xuXG52YXIgX2RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb20pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBoZWF2aWx5IGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9LaGFuL3JlYWN0LWNvbXBvbmVudHMvYmxvYi9tYXN0ZXIvanMvbGF5ZXJlZC1jb21wb25lbnQtbWl4aW4uanN4XG52YXIgUmVuZGVyVG9MYXllciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFJlbmRlclRvTGF5ZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlbmRlclRvTGF5ZXIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUmVuZGVyVG9MYXllcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBSZW5kZXJUb0xheWVyLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShSZW5kZXJUb0xheWVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMub25DbGlja0F3YXkgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5jb21wb25lbnRDbGlja0F3YXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV90aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWwgPSBfdGhpcy5sYXllcjtcbiAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGVsICYmIGV2ZW50LnRhcmdldCA9PT0gd2luZG93IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpICYmICFfZG9tMi5kZWZhdWx0LmlzRGVzY2VuZGFudChlbCwgZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5jb21wb25lbnRDbGlja0F3YXkoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSZW5kZXJUb0xheWVyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnJlbmRlckxheWVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdGhpcy5yZW5kZXJMYXllcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnVucmVuZGVyTGF5ZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRMYXllcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldExheWVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMubGF5ZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndW5yZW5kZXJMYXllcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVuZGVyTGF5ZXIoKSB7XG4gICAgICBpZiAoIXRoaXMubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wcm9wcy51c2VMYXllckZvckNsaWNrQXdheSkge1xuICAgICAgICB0aGlzLmxheWVyLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgICAgdGhpcy5sYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja0F3YXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrQXdheSk7XG4gICAgICB9XG5cbiAgICAgICgwLCBfcmVhY3REb20udW5tb3VudENvbXBvbmVudEF0Tm9kZSkodGhpcy5sYXllcik7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMubGF5ZXIpO1xuICAgICAgdGhpcy5sYXllciA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnkgY2FsbGluZyB0aGlzIG1ldGhvZCBpbiBjb21wb25lbnREaWRNb3VudCgpIGFuZFxuICAgICAqIGNvbXBvbmVudERpZFVwZGF0ZSgpLCB5b3UncmUgZWZmZWN0aXZlbHkgY3JlYXRpbmcgYSBcIndvcm1ob2xlXCIgdGhhdFxuICAgICAqIGZ1bm5lbHMgUmVhY3QncyBoaWVyYXJjaGljYWwgdXBkYXRlcyB0aHJvdWdoIHRvIGEgRE9NIG5vZGUgb24gYW5cbiAgICAgKiBlbnRpcmVseSBkaWZmZXJlbnQgcGFydCBvZiB0aGUgcGFnZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyTGF5ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJMYXllcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBvcGVuID0gX3Byb3BzLm9wZW4sXG4gICAgICAgICAgcmVuZGVyID0gX3Byb3BzLnJlbmRlcjtcblxuXG4gICAgICBpZiAob3Blbikge1xuICAgICAgICBpZiAoIXRoaXMubGF5ZXIpIHtcbiAgICAgICAgICB0aGlzLmxheWVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmxheWVyKTtcblxuICAgICAgICAgIGlmICh0aGlzLnByb3BzLnVzZUxheWVyRm9yQ2xpY2tBd2F5KSB7XG4gICAgICAgICAgICB0aGlzLmxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrQXdheSk7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgICAgICAgIHRoaXMubGF5ZXIuc3R5bGUudG9wID0gMDtcbiAgICAgICAgICAgIHRoaXMubGF5ZXIuc3R5bGUuYm90dG9tID0gMDtcbiAgICAgICAgICAgIHRoaXMubGF5ZXIuc3R5bGUubGVmdCA9IDA7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnN0eWxlLnJpZ2h0ID0gMDtcbiAgICAgICAgICAgIHRoaXMubGF5ZXIuc3R5bGUuekluZGV4ID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnpJbmRleC5sYXllcjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF90aGlzMi5vbkNsaWNrQXdheSk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGF5ZXJFbGVtZW50ID0gcmVuZGVyKCk7XG4gICAgICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gKDAsIF9yZWFjdERvbS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcikodGhpcywgbGF5ZXJFbGVtZW50LCB0aGlzLmxheWVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudW5yZW5kZXJMYXllcigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUmVuZGVyVG9MYXllcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblJlbmRlclRvTGF5ZXIuZGVmYXVsdFByb3BzID0ge1xuICB1c2VMYXllckZvckNsaWNrQXdheTogdHJ1ZVxufTtcblJlbmRlclRvTGF5ZXIuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblJlbmRlclRvTGF5ZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBjb21wb25lbnRDbGlja0F3YXk6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG4gIHJlbmRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsXG4gIHVzZUxheWVyRm9yQ2xpY2tBd2F5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2xcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IFJlbmRlclRvTGF5ZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wYXNzaXZlT3B0aW9uID0gdW5kZWZpbmVkO1xuXG52YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGF0dHIpIHtcbiAgcmV0dXJuICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKG9iamVjdCwgcHJvcGVydHksIGF0dHIpO1xufVxuXG4vLyBQYXNzaXZlIG9wdGlvbnNcbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9kb20vcGFzc2l2ZWV2ZW50bGlzdGVuZXJzLmpzXG52YXIgcGFzc2l2ZU9wdGlvbiA9IGV4cG9ydHMucGFzc2l2ZU9wdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhY2hlID0gbnVsbDtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWNoZSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNhY2hlO1xuICAgIH1cblxuICAgIHZhciBzdXBwb3J0c1Bhc3NpdmVPcHRpb24gPSBmYWxzZTtcblxuICAgIHRyeSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIGRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgc3VwcG9ydHNQYXNzaXZlT3B0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy9cbiAgICB9XG5cbiAgICBjYWNoZSA9IHN1cHBvcnRzUGFzc2l2ZU9wdGlvbjtcblxuICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmVPcHRpb247XG4gIH0oKTtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0ge307IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxudmFyIF9rZXlzID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzJyk7XG5cbnZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduJyk7XG5cbnZhciBfYXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Fzc2lnbik7XG5cbmV4cG9ydHMud2l0aE9wdGlvbnMgPSB3aXRoT3B0aW9ucztcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9zaGFsbG93RXF1YWwgPSByZXF1aXJlKCdmYmpzL2xpYi9zaGFsbG93RXF1YWwnKTtcblxudmFyIF9zaGFsbG93RXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hhbGxvd0VxdWFsKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfc3VwcG9ydHMgPSByZXF1aXJlKCcuL3N1cHBvcnRzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBkZWZhdWx0RXZlbnRPcHRpb25zID0ge1xuICBjYXB0dXJlOiBmYWxzZSxcbiAgcGFzc2l2ZTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIG1lcmdlRGVmYXVsdEV2ZW50T3B0aW9ucyhvcHRpb25zKSB7XG4gIHJldHVybiAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoe30sIGRlZmF1bHRFdmVudE9wdGlvbnMsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudExpc3RlbmVyQXJncyhldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIHZhciBhcmdzID0gW2V2ZW50TmFtZSwgY2FsbGJhY2tdO1xuICBhcmdzLnB1c2goX3N1cHBvcnRzLnBhc3NpdmVPcHRpb24gPyBvcHRpb25zIDogb3B0aW9ucy5jYXB0dXJlKTtcbiAgcmV0dXJuIGFyZ3M7XG59XG5cbmZ1bmN0aW9uIG9uKHRhcmdldCwgZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lci5hcHBseSh0YXJnZXQsIGdldEV2ZW50TGlzdGVuZXJBcmdzKGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpKTtcbn1cblxuZnVuY3Rpb24gb2ZmKHRhcmdldCwgZXZlbnROYW1lLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lci5hcHBseSh0YXJnZXQsIGdldEV2ZW50TGlzdGVuZXJBcmdzKGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpKTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaExpc3RlbmVyKHByb3BzLCBpdGVyYXRlZSkge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIHRhcmdldCA9IHByb3BzLnRhcmdldCxcbiAgICAgIGV2ZW50UHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShwcm9wcywgWydjaGlsZHJlbicsICd0YXJnZXQnXSk7XG5cblxuICAoMCwgX2tleXMyLmRlZmF1bHQpKGV2ZW50UHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZS5zdWJzdHJpbmcoMCwgMikgIT09ICdvbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcHJvcCA9IGV2ZW50UHJvcHNbbmFtZV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgcHJvcCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShwcm9wKTtcbiAgICB2YXIgaXNPYmplY3QgPSB0eXBlID09PSAnb2JqZWN0JztcbiAgICB2YXIgaXNGdW5jdGlvbiA9IHR5cGUgPT09ICdmdW5jdGlvbic7XG5cbiAgICBpZiAoIWlzT2JqZWN0ICYmICFpc0Z1bmN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNhcHR1cmUgPSBuYW1lLnN1YnN0cigtNykudG9Mb3dlckNhc2UoKSA9PT0gJ2NhcHR1cmUnO1xuICAgIHZhciBldmVudE5hbWUgPSBuYW1lLnN1YnN0cmluZygyKS50b0xvd2VyQ2FzZSgpO1xuICAgIGV2ZW50TmFtZSA9IGNhcHR1cmUgPyBldmVudE5hbWUuc3Vic3RyaW5nKDAsIGV2ZW50TmFtZS5sZW5ndGggLSA3KSA6IGV2ZW50TmFtZTtcblxuICAgIGlmIChpc09iamVjdCkge1xuICAgICAgaXRlcmF0ZWUoZXZlbnROYW1lLCBwcm9wLmhhbmRsZXIsIHByb3Aub3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlKGV2ZW50TmFtZSwgcHJvcCwgbWVyZ2VEZWZhdWx0RXZlbnRPcHRpb25zKHsgY2FwdHVyZTogY2FwdHVyZSB9KSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gd2l0aE9wdGlvbnMoaGFuZGxlciwgb3B0aW9ucykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKG9wdGlvbnMsICdyZWFjdC1ldmVudC1saXN0ZW5lcjogc2hvdWxkIGJlIHNwZWNpZmllZCBvcHRpb25zIGluIHdpdGhPcHRpb25zLicpIDogdm9pZCAwO1xuXG4gIHJldHVybiB7XG4gICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICBvcHRpb25zOiBtZXJnZURlZmF1bHRFdmVudE9wdGlvbnMob3B0aW9ucylcbiAgfTtcbn1cblxudmFyIEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShFdmVudExpc3RlbmVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBFdmVudExpc3RlbmVyKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEV2ZW50TGlzdGVuZXIpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChFdmVudExpc3RlbmVyLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShFdmVudExpc3RlbmVyKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShFdmVudExpc3RlbmVyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLmFkZExpc3RlbmVycygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMpIHtcbiAgICAgIHJldHVybiAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMucHJvcHMsIG5leHRQcm9wcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoKSB7XG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYWRkTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkTGlzdGVuZXJzKCkge1xuICAgICAgdGhpcy5hcHBseUxpc3RlbmVycyhvbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXJzKCkge1xuICAgICAgdGhpcy5hcHBseUxpc3RlbmVycyhvZmYpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FwcGx5TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlMaXN0ZW5lcnMob25Pck9mZikge1xuICAgICAgdmFyIHRhcmdldCA9IHRoaXMucHJvcHMudGFyZ2V0O1xuXG5cbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0YXJnZXQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgZWxlbWVudCA9IHdpbmRvd1t0YXJnZXRdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaExpc3RlbmVyKHRoaXMucHJvcHMsIG9uT3JPZmYuYmluZChudWxsLCBlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbDtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEV2ZW50TGlzdGVuZXI7XG59KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5FdmVudExpc3RlbmVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIHNpbmdsZSBjaGlsZCB0b28uXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIERPTSB0YXJnZXQgdG8gbGlzdGVuIHRvLlxuICAgKi9cbiAgdGFyZ2V0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsIF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXSkuaXNSZXF1aXJlZFxufSA6IHt9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBFdmVudExpc3RlbmVyOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuSG90S2V5SG9sZGVyID0gdW5kZWZpbmVkO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEhvdEtleUhvbGRlciA9IGV4cG9ydHMuSG90S2V5SG9sZGVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBIb3RLZXlIb2xkZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEhvdEtleUhvbGRlcik7XG5cbiAgICB0aGlzLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMudGltZXJJZCA9IG51bGw7XG4gICAgICBfdGhpcy5sYXN0S2V5cyA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEhvdEtleUhvbGRlciwgW3tcbiAgICBrZXk6ICdhcHBlbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmQoa2V5KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcklkKTtcbiAgICAgIHRoaXMudGltZXJJZCA9IHNldFRpbWVvdXQodGhpcy5jbGVhciwgNTAwKTtcbiAgICAgIHJldHVybiB0aGlzLmxhc3RLZXlzID0gKHRoaXMubGFzdEtleXMgfHwgJycpICsga2V5O1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gSG90S2V5SG9sZGVyO1xufSgpOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBTdWJoZWFkZXIgPSBmdW5jdGlvbiBTdWJoZWFkZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBpbnNldCA9IHByb3BzLmluc2V0LFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkocHJvcHMsIFsnY2hpbGRyZW4nLCAnaW5zZXQnLCAnc3R5bGUnXSk7XG4gIHZhciBfY29udGV4dCRtdWlUaGVtZSA9IGNvbnRleHQubXVpVGhlbWUsXG4gICAgICBwcmVwYXJlU3R5bGVzID0gX2NvbnRleHQkbXVpVGhlbWUucHJlcGFyZVN0eWxlcyxcbiAgICAgIHN1YmhlYWRlciA9IF9jb250ZXh0JG11aVRoZW1lLnN1YmhlYWRlcjtcblxuXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcm9vdDoge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBjb2xvcjogc3ViaGVhZGVyLmNvbG9yLFxuICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgZm9udFdlaWdodDogc3ViaGVhZGVyLmZvbnRXZWlnaHQsXG4gICAgICBsaW5lSGVpZ2h0OiAnNDhweCcsXG4gICAgICBwYWRkaW5nTGVmdDogaW5zZXQgPyA3MiA6IDE2LFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHsgc3R5bGU6IHByZXBhcmVTdHlsZXMoKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5yb290LCBzdHlsZSkpIH0pLFxuICAgIGNoaWxkcmVuXG4gICk7XG59O1xuXG5TdWJoZWFkZXIubXVpTmFtZSA9ICdTdWJoZWFkZXInO1xuXG5TdWJoZWFkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogTm9kZSB0aGF0IHdpbGwgYmUgcGxhY2VkIGluc2lkZSB0aGUgYFN1YmhlYWRlcmAuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGBTdWJoZWFkZXJgIHdpbGwgYmUgaW5kZW50ZWQuXG4gICAqL1xuICBpbnNldDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuXG5TdWJoZWFkZXIuZGVmYXVsdFByb3BzID0ge1xuICBpbnNldDogZmFsc2Vcbn07XG5cblN1YmhlYWRlci5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTdWJoZWFkZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX1N1YmhlYWRlciA9IHJlcXVpcmUoJy4vU3ViaGVhZGVyJyk7XG5cbnZhciBfU3ViaGVhZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N1YmhlYWRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9TdWJoZWFkZXIyLmRlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX2V2ZW50cyA9IHJlcXVpcmUoJy4uL3V0aWxzL2V2ZW50cycpO1xuXG52YXIgX2V2ZW50czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ldmVudHMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgaXNEZXNjZW5kYW50ID0gZnVuY3Rpb24gaXNEZXNjZW5kYW50KGVsLCB0YXJnZXQpIHtcbiAgaWYgKHRhcmdldCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBlbCA9PT0gdGFyZ2V0IHx8IGlzRGVzY2VuZGFudChlbCwgdGFyZ2V0LnBhcmVudE5vZGUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbnZhciBjbGlja0F3YXlFdmVudHMgPSBbJ21vdXNldXAnLCAndG91Y2hlbmQnXTtcbnZhciBiaW5kID0gZnVuY3Rpb24gYmluZChjYWxsYmFjaykge1xuICByZXR1cm4gY2xpY2tBd2F5RXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIF9ldmVudHMyLmRlZmF1bHQub24oZG9jdW1lbnQsIGV2ZW50LCBjYWxsYmFjayk7XG4gIH0pO1xufTtcbnZhciB1bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNsaWNrQXdheUV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiBfZXZlbnRzMi5kZWZhdWx0Lm9mZihkb2N1bWVudCwgZXZlbnQsIGNhbGxiYWNrKTtcbiAgfSk7XG59O1xuXG52YXIgQ2xpY2tBd2F5TGlzdGVuZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShDbGlja0F3YXlMaXN0ZW5lciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQ2xpY2tBd2F5TGlzdGVuZXIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQ2xpY2tBd2F5TGlzdGVuZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gQ2xpY2tBd2F5TGlzdGVuZXIuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKENsaWNrQXdheUxpc3RlbmVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2tBd2F5ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIElFMTEgc3VwcG9ydCwgd2hpY2ggdHJpZ2dlciB0aGUgaGFuZGxlQ2xpY2tBd2F5IGV2ZW4gYWZ0ZXIgdGhlIHVuYmluZFxuICAgICAgaWYgKF90aGlzLmlzQ3VycmVudGx5TW91bnRlZCkge1xuICAgICAgICB2YXIgZWwgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoX3RoaXMpO1xuXG4gICAgICAgIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiAhaXNEZXNjZW5kYW50KGVsLCBldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25DbGlja0F3YXkoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKENsaWNrQXdheUxpc3RlbmVyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLmlzQ3VycmVudGx5TW91bnRlZCA9IHRydWU7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vbkNsaWNrQXdheSkge1xuICAgICAgICBiaW5kKHRoaXMuaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICBpZiAocHJldlByb3BzLm9uQ2xpY2tBd2F5ICE9PSB0aGlzLnByb3BzLm9uQ2xpY2tBd2F5KSB7XG4gICAgICAgIHVuYmluZCh0aGlzLmhhbmRsZUNsaWNrQXdheSk7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2tBd2F5KSB7XG4gICAgICAgICAgYmluZCh0aGlzLmhhbmRsZUNsaWNrQXdheSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5pc0N1cnJlbnRseU1vdW50ZWQgPSBmYWxzZTtcbiAgICAgIHVuYmluZCh0aGlzLmhhbmRsZUNsaWNrQXdheSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBDbGlja0F3YXlMaXN0ZW5lcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkNsaWNrQXdheUxpc3RlbmVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgb25DbGlja0F3YXk6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuY1xufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gQ2xpY2tBd2F5TGlzdGVuZXI7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX2V2ZW50cyA9IHJlcXVpcmUoJy4uL3V0aWxzL2V2ZW50cycpO1xuXG52YXIgX2V2ZW50czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ldmVudHMpO1xuXG52YXIgX3Byb3BUeXBlczMgPSByZXF1aXJlKCcuLi91dGlscy9wcm9wVHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMyk7XG5cbnZhciBfTWVudSA9IHJlcXVpcmUoJy4uL01lbnUvTWVudScpO1xuXG52YXIgX01lbnUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWVudSk7XG5cbnZhciBfUG9wb3ZlciA9IHJlcXVpcmUoJy4uL1BvcG92ZXIvUG9wb3ZlcicpO1xuXG52YXIgX1BvcG92ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9wb3Zlcik7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSWNvbk1lbnUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShJY29uTWVudSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSWNvbk1lbnUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSWNvbk1lbnUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gSWNvbk1lbnUuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKEljb25NZW51KSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtZW51SW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIG9wZW46IGZhbHNlXG4gICAgfSwgX3RoaXMuaGFuZGxlSXRlbUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50LCBjaGlsZCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmNsaWNrQ2xvc2VEZWxheSAhPT0gMCAmJiAhY2hpbGQucHJvcHMuaGFzT3duUHJvcGVydHkoJ21lbnVJdGVtcycpKSB7XG4gICAgICAgIHZhciBpc0tleWJvYXJkID0gX2V2ZW50czIuZGVmYXVsdC5pc0tleWJvYXJkKGV2ZW50KTtcbiAgICAgICAgX3RoaXMudGltZXJDbG9zZUlkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuY2xvc2UoaXNLZXlib2FyZCA/ICdlbnRlcicgOiAnaXRlbVRhcCcsIGlzS2V5Ym9hcmQpO1xuICAgICAgICB9LCBfdGhpcy5wcm9wcy5jbGlja0Nsb3NlRGVsYXkpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5wcm9wcy5vbkl0ZW1DbGljayhldmVudCwgY2hpbGQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVJlcXVlc3RDbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIF90aGlzLmNsb3NlKHJlYXNvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlRXNjS2V5RG93bk1lbnUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLmNsb3NlKCdlc2NhcGUnLCBldmVudCk7XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEljb25NZW51LCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKG5leHRQcm9wcy5vcGVuICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgb3BlbjogbmV4dFByb3BzLm9wZW4sXG4gICAgICAgICAgYW5jaG9yRWw6IHRoaXMucmVmcy5pY29uTWVudUNvbnRhaW5lclxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJDbG9zZUlkKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpc09wZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc09wZW4oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5vcGVuO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Nsb3NlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UocmVhc29uLCBpc0tleWJvYXJkKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLnN0YXRlLm9wZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wcm9wcy5vcGVuICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25SZXF1ZXN0Q2hhbmdlKGZhbHNlLCByZWFzb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IGZhbHNlIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBTZXQgZm9jdXMgb24gdGhlIGljb24gYnV0dG9uIHdoZW4gdGhlIG1lbnUgY2xvc2VcbiAgICAgICAgICBpZiAoaXNLZXlib2FyZCkge1xuICAgICAgICAgICAgdmFyIGljb25CdXR0b24gPSBfdGhpczIucmVmcy5pY29uQnV0dG9uO1xuICAgICAgICAgICAgX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKGljb25CdXR0b24pLmZvY3VzKCk7XG4gICAgICAgICAgICBpY29uQnV0dG9uLnNldEtleWJvYXJkRm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ29wZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuKHJlYXNvbiwgZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9wZW4gIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vblJlcXVlc3RDaGFuZ2UodHJ1ZSwgcmVhc29uKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbWVudUluaXRpYWxseUtleWJvYXJkRm9jdXNlZDogX2V2ZW50czIuZGVmYXVsdC5pc0tleWJvYXJkKGV2ZW50KSxcbiAgICAgICAgICBhbmNob3JFbDogZXZlbnQuY3VycmVudFRhcmdldFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG9wZW46IHRydWUsXG4gICAgICAgIG1lbnVJbml0aWFsbHlLZXlib2FyZEZvY3VzZWQ6IF9ldmVudHMyLmRlZmF1bHQuaXNLZXlib2FyZChldmVudCksXG4gICAgICAgIGFuY2hvckVsOiBldmVudC5jdXJyZW50VGFyZ2V0XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYW5jaG9yT3JpZ2luID0gX3Byb3BzLmFuY2hvck9yaWdpbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGFuaW1hdGVkID0gX3Byb3BzLmFuaW1hdGVkLFxuICAgICAgICAgIGFuaW1hdGlvbiA9IF9wcm9wcy5hbmltYXRpb24sXG4gICAgICAgICAgaWNvbkJ1dHRvbkVsZW1lbnQgPSBfcHJvcHMuaWNvbkJ1dHRvbkVsZW1lbnQsXG4gICAgICAgICAgaWNvblN0eWxlID0gX3Byb3BzLmljb25TdHlsZSxcbiAgICAgICAgICBvbkl0ZW1DbGljayA9IF9wcm9wcy5vbkl0ZW1DbGljayxcbiAgICAgICAgICBvbktleWJvYXJkRm9jdXMgPSBfcHJvcHMub25LZXlib2FyZEZvY3VzLFxuICAgICAgICAgIG9uTW91c2VEb3duID0gX3Byb3BzLm9uTW91c2VEb3duLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZSA9IF9wcm9wcy5vbk1vdXNlTGVhdmUsXG4gICAgICAgICAgb25Nb3VzZUVudGVyID0gX3Byb3BzLm9uTW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlVXAgPSBfcHJvcHMub25Nb3VzZVVwLFxuICAgICAgICAgIG9uUmVxdWVzdENoYW5nZSA9IF9wcm9wcy5vblJlcXVlc3RDaGFuZ2UsXG4gICAgICAgICAgb25DbGljayA9IF9wcm9wcy5vbkNsaWNrLFxuICAgICAgICAgIGxpc3RTdHlsZSA9IF9wcm9wcy5saXN0U3R5bGUsXG4gICAgICAgICAgbWVudVN0eWxlID0gX3Byb3BzLm1lbnVTdHlsZSxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgICB0YXJnZXRPcmlnaW4gPSBfcHJvcHMudGFyZ2V0T3JpZ2luLFxuICAgICAgICAgIGNsaWNrQ2xvc2VEZWxheSA9IF9wcm9wcy5jbGlja0Nsb3NlRGVsYXksXG4gICAgICAgICAgdXNlTGF5ZXJGb3JDbGlja0F3YXkgPSBfcHJvcHMudXNlTGF5ZXJGb3JDbGlja0F3YXksXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnYW5jaG9yT3JpZ2luJywgJ2NsYXNzTmFtZScsICdhbmltYXRlZCcsICdhbmltYXRpb24nLCAnaWNvbkJ1dHRvbkVsZW1lbnQnLCAnaWNvblN0eWxlJywgJ29uSXRlbUNsaWNrJywgJ29uS2V5Ym9hcmRGb2N1cycsICdvbk1vdXNlRG93bicsICdvbk1vdXNlTGVhdmUnLCAnb25Nb3VzZUVudGVyJywgJ29uTW91c2VVcCcsICdvblJlcXVlc3RDaGFuZ2UnLCAnb25DbGljaycsICdsaXN0U3R5bGUnLCAnbWVudVN0eWxlJywgJ3N0eWxlJywgJ3RhcmdldE9yaWdpbicsICdjbGlja0Nsb3NlRGVsYXknLCAndXNlTGF5ZXJGb3JDbGlja0F3YXknXSk7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuICAgICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgb3BlbiA9IF9zdGF0ZS5vcGVuLFxuICAgICAgICAgIGFuY2hvckVsID0gX3N0YXRlLmFuY2hvckVsO1xuXG5cbiAgICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgICB9LFxuICAgICAgICBtZW51OiB7XG4gICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIG1lcmdlZFJvb3RTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnJvb3QsIHN0eWxlKTtcbiAgICAgIHZhciBtZXJnZWRNZW51U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5tZW51LCBtZW51U3R5bGUpO1xuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGljb25CdXR0b25FbGVtZW50LnR5cGUubXVpTmFtZSAhPT0gJ1N2Z0ljb24nLCAnTWF0ZXJpYWwtVUk6IFlvdSBzaG91ZCBub3QgcHJvdmlkZSBhbiA8U3ZnSWNvbiAvPiB0byB0aGUgXFwnaWNvbkJ1dHRvbkVsZW1lbnRcXCcgcHJvcGVydHkgb2YgPEljb25NZW51IC8+LlxcbllvdSBzaG91bGQgd3JhcHBlZCBpdCB3aXRoIGFuIDxJY29uQnV0dG9uIC8+LicpIDogdm9pZCAwO1xuXG4gICAgICB2YXIgaWNvbkJ1dHRvblByb3BzID0ge1xuICAgICAgICBvbktleWJvYXJkRm9jdXM6IG9uS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgICAgIF90aGlzMy5vcGVuKF9ldmVudHMyLmRlZmF1bHQuaXNLZXlib2FyZChldmVudCkgPyAna2V5Ym9hcmQnIDogJ2ljb25UYXAnLCBldmVudCk7XG4gICAgICAgICAgaWYgKGljb25CdXR0b25FbGVtZW50LnByb3BzLm9uQ2xpY2spIHtcbiAgICAgICAgICAgIGljb25CdXR0b25FbGVtZW50LnByb3BzLm9uQ2xpY2soZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVmOiAnaWNvbkJ1dHRvbidcbiAgICAgIH07XG4gICAgICBpZiAoaWNvblN0eWxlIHx8IGljb25CdXR0b25FbGVtZW50LnByb3BzLmljb25TdHlsZSkge1xuICAgICAgICBpY29uQnV0dG9uUHJvcHMuaWNvblN0eWxlID0gaWNvblN0eWxlID8gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBpY29uU3R5bGUsIGljb25CdXR0b25FbGVtZW50LnByb3BzLmljb25TdHlsZSkgOiBpY29uQnV0dG9uRWxlbWVudC5wcm9wcy5pY29uU3R5bGU7XG4gICAgICB9XG4gICAgICB2YXIgaWNvbkJ1dHRvbiA9IF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoaWNvbkJ1dHRvbkVsZW1lbnQsIGljb25CdXR0b25Qcm9wcyk7XG5cbiAgICAgIHZhciBtZW51ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9NZW51Mi5kZWZhdWx0LFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwge1xuICAgICAgICAgIGluaXRpYWxseUtleWJvYXJkRm9jdXNlZDogdGhpcy5zdGF0ZS5tZW51SW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkLFxuICAgICAgICAgIG9uRXNjS2V5RG93bjogdGhpcy5oYW5kbGVFc2NLZXlEb3duTWVudSxcbiAgICAgICAgICBvbkl0ZW1DbGljazogdGhpcy5oYW5kbGVJdGVtQ2xpY2ssXG4gICAgICAgICAgc3R5bGU6IG1lcmdlZE1lbnVTdHlsZXMsXG4gICAgICAgICAgbGlzdFN0eWxlOiBsaXN0U3R5bGVcbiAgICAgICAgfSksXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICByZWY6ICdpY29uTWVudUNvbnRhaW5lcicsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgICAgb25Nb3VzZURvd246IG9uTW91c2VEb3duLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZTogb25Nb3VzZUxlYXZlLFxuICAgICAgICAgIG9uTW91c2VFbnRlcjogb25Nb3VzZUVudGVyLFxuICAgICAgICAgIG9uTW91c2VVcDogb25Nb3VzZVVwLFxuICAgICAgICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgICAgICAgc3R5bGU6IHByZXBhcmVTdHlsZXMobWVyZ2VkUm9vdFN0eWxlcylcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbkJ1dHRvbixcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX1BvcG92ZXIyLmRlZmF1bHQsXG4gICAgICAgICAge1xuICAgICAgICAgICAgYW5jaG9yT3JpZ2luOiBhbmNob3JPcmlnaW4sXG4gICAgICAgICAgICB0YXJnZXRPcmlnaW46IHRhcmdldE9yaWdpbixcbiAgICAgICAgICAgIG9wZW46IG9wZW4sXG4gICAgICAgICAgICBhbmNob3JFbDogYW5jaG9yRWwsXG4gICAgICAgICAgICBjaGlsZENvbnRleHRUeXBlczogdGhpcy5jb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyxcbiAgICAgICAgICAgIHVzZUxheWVyRm9yQ2xpY2tBd2F5OiB1c2VMYXllckZvckNsaWNrQXdheSxcbiAgICAgICAgICAgIG9uUmVxdWVzdENsb3NlOiB0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZSxcbiAgICAgICAgICAgIGFuaW1hdGVkOiBhbmltYXRlZCxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogYW5pbWF0aW9uLFxuICAgICAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0XG4gICAgICAgICAgfSxcbiAgICAgICAgICBtZW51XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBJY29uTWVudTtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkljb25NZW51Lm11aU5hbWUgPSAnSWNvbk1lbnUnO1xuSWNvbk1lbnUuZGVmYXVsdFByb3BzID0ge1xuICBhbmNob3JPcmlnaW46IHtcbiAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gIH0sXG4gIGFuaW1hdGVkOiB0cnVlLFxuICBtdWx0aXBsZTogZmFsc2UsXG4gIG9wZW46IG51bGwsXG4gIG9uSXRlbUNsaWNrOiBmdW5jdGlvbiBvbkl0ZW1DbGljaygpIHt9LFxuICBvbktleWJvYXJkRm9jdXM6IGZ1bmN0aW9uIG9uS2V5Ym9hcmRGb2N1cygpIHt9LFxuICBvbk1vdXNlRG93bjogZnVuY3Rpb24gb25Nb3VzZURvd24oKSB7fSxcbiAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoKSB7fSxcbiAgb25Nb3VzZUVudGVyOiBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoKSB7fSxcbiAgb25Nb3VzZVVwOiBmdW5jdGlvbiBvbk1vdXNlVXAoKSB7fSxcbiAgb25SZXF1ZXN0Q2hhbmdlOiBmdW5jdGlvbiBvblJlcXVlc3RDaGFuZ2UoKSB7fSxcbiAgb25DbGljazogZnVuY3Rpb24gb25DbGljaygpIHt9LFxuICB0YXJnZXRPcmlnaW46IHtcbiAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gIH0sXG4gIGNsaWNrQ2xvc2VEZWxheTogMjAwLFxuICB1c2VMYXllckZvckNsaWNrQXdheTogZmFsc2Vcbn07XG5JY29uTWVudS5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuSWNvbk1lbnUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhpcyBpcyB0aGUgcG9pbnQgb24gdGhlIGljb24gd2hlcmUgdGhlIG1lbnVcbiAgICogYHRhcmdldE9yaWdpbmAgd2lsbCBhdHRhY2guXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbV1cbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIG1pZGRsZSwgcmlnaHRdLlxuICAgKi9cbiAgYW5jaG9yT3JpZ2luOiBfcHJvcFR5cGVzNC5kZWZhdWx0Lm9yaWdpbixcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBwb3BvdmVyIHdpbGwgYXBwbHkgdHJhbnNpdGlvbnMgd2hlblxuICAgKiBpdCBnZXRzIGFkZGVkIHRvIHRoZSBET00uXG4gICAqL1xuICBhbmltYXRlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgYW5pbWF0aW9uIGNvbXBvbmVudCB1c2VkLlxuICAgKi9cbiAgYW5pbWF0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBTaG91bGQgYmUgdXNlZCB0byBwYXNzIGBNZW51SXRlbWAgY29tcG9uZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBkZWxheSBpbiBtaWxsaXNlY29uZHMgYmVmb3JlIGNsb3NpbmcgdGhlXG4gICAqIG1lbnUgd2hlbiBhbiBpdGVtIGlzIGNsaWNrZWQuXG4gICAqIElmIHNldCB0byAwIHRoZW4gdGhlIGF1dG8gY2xvc2UgZnVuY3Rpb25hbGl0eVxuICAgKiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgY2xpY2tDbG9zZURlbGF5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGBJY29uQnV0dG9uYCB0byByZW5kZXIuIFRoaXMgYnV0dG9uIHdpbGwgb3BlbiB0aGUgbWVudS5cbiAgICovXG4gIGljb25CdXR0b25FbGVtZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSB1bmRlcmx5aW5nIGljb24gZWxlbWVudC5cbiAgICovXG4gIGljb25TdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgdW5kZXJseWluZyBgTGlzdGAgZWxlbWVudC5cbiAgICovXG4gIGxpc3RTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgbWVudSBlbGVtZW50LlxuICAgKi9cbiAgbWVudVN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSB2YWx1ZSBjYW4gYW4gYmUgYXJyYXkgYW5kIGFsbG93IHRoZSBtZW51IHRvIGJlIGEgbXVsdGktc2VsZWN0LlxuICAgKi9cbiAgbXVsdGlwbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIGBJY29uQnV0dG9uYCBlbGVtZW50IGlzIGNsaWNrZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBDbGljayBldmVudCB0YXJnZXRpbmcgdGhlIGBJY29uQnV0dG9uYCBlbGVtZW50LlxuICAgKi9cbiAgb25DbGljazogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZCB3aXRoIGEgY2xpY2suXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBDbGljayBldmVudCB0YXJnZXRpbmcgdGhlIHNlbGVjdGVkIG1lbnUgaXRlbSBlbGVtZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gY2hpbGQgVGhlIHNlbGVjdGVkIGVsZW1lbnQuXG4gICAqL1xuICBvbkl0ZW1DbGljazogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgYEljb25CdXR0b25gIGVsZW1lbnQgaXMgZm9jdXNlZCBvciBibHVycmVkIGJ5IHRoZSBrZXlib2FyZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IGBmb2N1c2Agb3IgYGJsdXJgIGV2ZW50IHRhcmdldGluZyB0aGUgYEljb25CdXR0b25gIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0ga2V5Ym9hcmRGb2N1c2VkIElmIHRydWUsIHRoZSBgSWNvbkJ1dHRvbmAgZWxlbWVudCBpcyBmb2N1c2VkLlxuICAgKi9cbiAgb25LZXlib2FyZEZvY3VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VEb3duOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VFbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvbk1vdXNlTGVhdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Nb3VzZVVwOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBgb3BlbmAgc3RhdGUgb2YgdGhlIG1lbnUgaXMgcmVxdWVzdGVkIHRvIGJlIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3BlbiBJZiB0cnVlLCB0aGUgbWVudSB3YXMgcmVxdWVzdGVkIHRvIGJlIG9wZW5lZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBUaGUgcmVhc29uIGZvciB0aGUgb3BlbiBvciBjbG9zZSByZXF1ZXN0LiBQb3NzaWJsZSB2YWx1ZXMgYXJlXG4gICAqICdrZXlib2FyZCcgYW5kICdpY29uVGFwJyBmb3Igb3BlbiByZXF1ZXN0czsgJ2VudGVyJywgJ2VzY2FwZScsICdpdGVtVGFwJywgYW5kICdjbGlja0F3YXknXG4gICAqIGZvciBjbG9zZSByZXF1ZXN0cy5cbiAgICovXG4gIG9uUmVxdWVzdENoYW5nZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGBJY29uTWVudWAgaXMgb3BlbmVkLlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBtZW51IHdoaWNoIHdpbGwgc3RpY2sgdG8gdGhlIG1lbnVcbiAgICogb3JpZ2luLlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dXG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBtaWRkbGUsIHJpZ2h0XS5cbiAgICovXG4gIHRhcmdldE9yaWdpbjogX3Byb3BUeXBlczQuZGVmYXVsdC5vcmlnaW4sXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgcG9wb3ZlciB3aWxsIHJlbmRlciBvbiB0b3Agb2YgYW4gaW52aXNpYmxlXG4gICAqIGxheWVyLCB3aGljaCB3aWxsIHByZXZlbnQgY2xpY2tzIHRvIHRoZSB1bmRlcmx5aW5nIGVsZW1lbnRzLlxuICAgKi9cbiAgdXNlTGF5ZXJGb3JDbGlja0F3YXk6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gSWNvbk1lbnU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY29sb3JzID0gcmVxdWlyZSgnLi9jb2xvcnMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFR5cG9ncmFwaHkgPSBmdW5jdGlvbiBUeXBvZ3JhcGh5KCkge1xuICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBUeXBvZ3JhcGh5KTtcblxuICAvLyB0ZXh0IGNvbG9yc1xuICB0aGlzLnRleHRGdWxsQmxhY2sgPSBfY29sb3JzLmZ1bGxCbGFjaztcbiAgdGhpcy50ZXh0RGFya0JsYWNrID0gX2NvbG9ycy5kYXJrQmxhY2s7XG4gIHRoaXMudGV4dExpZ2h0QmxhY2sgPSBfY29sb3JzLmxpZ2h0QmxhY2s7XG4gIHRoaXMudGV4dE1pbkJsYWNrID0gX2NvbG9ycy5taW5CbGFjaztcbiAgdGhpcy50ZXh0RnVsbFdoaXRlID0gX2NvbG9ycy5mdWxsV2hpdGU7XG4gIHRoaXMudGV4dERhcmtXaGl0ZSA9IF9jb2xvcnMuZGFya1doaXRlO1xuICB0aGlzLnRleHRMaWdodFdoaXRlID0gX2NvbG9ycy5saWdodFdoaXRlO1xuXG4gIC8vIGZvbnQgd2VpZ2h0XG4gIHRoaXMuZm9udFdlaWdodExpZ2h0ID0gMzAwO1xuICB0aGlzLmZvbnRXZWlnaHROb3JtYWwgPSA0MDA7XG4gIHRoaXMuZm9udFdlaWdodE1lZGl1bSA9IDUwMDtcblxuICB0aGlzLmZvbnRTdHlsZUJ1dHRvbkZvbnRTaXplID0gMTQ7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBuZXcgVHlwb2dyYXBoeSgpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY29tcG9zZTtcbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59IiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5rZXlzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2tleXMgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMnKTtcblxudmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBydGw7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciByZVRyYW5zbGF0ZSA9IC8oKF58XFxzKXRyYW5zbGF0ZSgzZHxYKT9cXCgpKFxcLT9bXFxkXSspLztcbnZhciByZVNrZXcgPSAvKChefFxccylza2V3KHh8eSk/XFwoKVxccyooXFwtP1tcXGRdKykoZGVnfHJhZHxncmFkKSgsXFxzKihcXC0/W1xcZF0rKShkZWd8cmFkfGdyYWQpKT8vO1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gZW5zdXJlcyB0aGF0IGBzdHlsZWAgc3VwcG9ydHMgYm90aCBsdHIgYW5kIHJ0bCBkaXJlY3Rpb25zIGJ5XG4gKiBjaGVja2luZyBgc3R5bGVDb25zdGFudHNgIGluIGBtdWlUaGVtZWAgYW5kIHJlcGxhY2luZyBhdHRyaWJ1dGUga2V5cyBpZlxuICogbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBydGwobXVpVGhlbWUpIHtcbiAgaWYgKG11aVRoZW1lLmlzUnRsKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgaWYgKHN0eWxlLmRpcmVjdGlvbkludmFyaWFudCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmbGlwcGVkQXR0cmlidXRlcyA9IHtcbiAgICAgICAgLy8gS2V5cyBhbmQgdGhlaXIgcmVwbGFjZW1lbnRzLlxuICAgICAgICByaWdodDogJ2xlZnQnLFxuICAgICAgICBsZWZ0OiAncmlnaHQnLFxuICAgICAgICBtYXJnaW5SaWdodDogJ21hcmdpbkxlZnQnLFxuICAgICAgICBtYXJnaW5MZWZ0OiAnbWFyZ2luUmlnaHQnLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6ICdwYWRkaW5nTGVmdCcsXG4gICAgICAgIHBhZGRpbmdMZWZ0OiAncGFkZGluZ1JpZ2h0JyxcbiAgICAgICAgYm9yZGVyUmlnaHQ6ICdib3JkZXJMZWZ0JyxcbiAgICAgICAgYm9yZGVyTGVmdDogJ2JvcmRlclJpZ2h0J1xuICAgICAgfTtcblxuICAgICAgdmFyIG5ld1N0eWxlID0ge307XG5cbiAgICAgICgwLCBfa2V5czIuZGVmYXVsdCkoc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZVthdHRyaWJ1dGVdO1xuICAgICAgICB2YXIga2V5ID0gYXR0cmlidXRlO1xuXG4gICAgICAgIGlmIChmbGlwcGVkQXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGUpKSB7XG4gICAgICAgICAga2V5ID0gZmxpcHBlZEF0dHJpYnV0ZXNbYXR0cmlidXRlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoYXR0cmlidXRlKSB7XG4gICAgICAgICAgY2FzZSAnZmxvYXQnOlxuICAgICAgICAgIGNhc2UgJ3RleHRBbGlnbic6XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSAnbGVmdCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSAncmlnaHQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdkaXJlY3Rpb24nOlxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnbHRyJykge1xuICAgICAgICAgICAgICB2YWx1ZSA9ICdydGwnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSAnbHRyJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAndHJhbnNmb3JtJzpcbiAgICAgICAgICAgIGlmICghdmFsdWUpIGJyZWFrO1xuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAobWF0Y2hlcyA9IHZhbHVlLm1hdGNoKHJlVHJhbnNsYXRlKSkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UobWF0Y2hlc1swXSwgbWF0Y2hlc1sxXSArIC1wYXJzZUZsb2F0KG1hdGNoZXNbNF0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaGVzID0gdmFsdWUubWF0Y2gocmVTa2V3KSkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UobWF0Y2hlc1swXSwgbWF0Y2hlc1sxXSArIC1wYXJzZUZsb2F0KG1hdGNoZXNbNF0pICsgbWF0Y2hlc1s1XSArIG1hdGNoZXNbNl0gPyAnLCAnICsgKC1wYXJzZUZsb2F0KG1hdGNoZXNbN10pICsgbWF0Y2hlc1s4XSkgOiAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3RyYW5zZm9ybU9yaWdpbic6XG4gICAgICAgICAgICBpZiAoIXZhbHVlKSBicmVhaztcbiAgICAgICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKCdyaWdodCcpID4gLTEpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCdyaWdodCcsICdsZWZ0Jyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLmluZGV4T2YoJ2xlZnQnKSA+IC0xKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgnbGVmdCcsICdyaWdodCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdTdHlsZVtrZXldID0gdmFsdWU7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG5ld1N0eWxlO1xuICAgIH07XG4gIH1cbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjYWxsT25jZTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBDQUxMRURfT05DRSA9ICdtdWlQcmVwYXJlZCc7XG5cbmZ1bmN0aW9uIGNhbGxPbmNlKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIGlmIChzdHlsZVtDQUxMRURfT05DRV0pIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ01hdGVyaWFsLVVJOiBZb3UgY2Fubm90IGNhbGwgcHJlcGFyZVN0eWxlcygpIG9uIHRoZSBzYW1lIHN0eWxlIG9iamVjdCBtb3JlIHRoYW4gb25jZS4nKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHN0eWxlW0NBTExFRF9PTkNFXSA9IHRydWU7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfTtcbiAgfVxufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRyYW5zaXRpb247XG5cbnZhciBfaHlwaGVuYXRlUHJvcGVydHkgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2h5cGhlbmF0ZVByb3BlcnR5Jyk7XG5cbnZhciBfaHlwaGVuYXRlUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHlwaGVuYXRlUHJvcGVydHkpO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJ2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJlZml4ZWRWYWx1ZSk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2NhcGl0YWxpemVTdHJpbmcnKTtcblxudmFyIF9jYXBpdGFsaXplU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhcGl0YWxpemVTdHJpbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJvcGVydGllcyA9IHtcbiAgdHJhbnNpdGlvbjogdHJ1ZSxcbiAgdHJhbnNpdGlvblByb3BlcnR5OiB0cnVlLFxuICBXZWJraXRUcmFuc2l0aW9uOiB0cnVlLFxuICBXZWJraXRUcmFuc2l0aW9uUHJvcGVydHk6IHRydWUsXG4gIE1velRyYW5zaXRpb246IHRydWUsXG4gIE1velRyYW5zaXRpb25Qcm9wZXJ0eTogdHJ1ZVxufTtcblxuXG52YXIgcHJlZml4TWFwcGluZyA9IHtcbiAgV2Via2l0OiAnLXdlYmtpdC0nLFxuICBNb3o6ICctbW96LScsXG4gIG1zOiAnLW1zLSdcbn07XG5cbmZ1bmN0aW9uIHByZWZpeFZhbHVlKHZhbHVlLCBwcm9wZXJ0eVByZWZpeE1hcCkge1xuICBpZiAoKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIG9ubHkgc3BsaXQgbXVsdGkgdmFsdWVzLCBub3QgY3ViaWMgYmV6aWVyc1xuICB2YXIgbXVsdGlwbGVWYWx1ZXMgPSB2YWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKTtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gbXVsdGlwbGVWYWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgc2luZ2xlVmFsdWUgPSBtdWx0aXBsZVZhbHVlc1tpXTtcbiAgICB2YXIgdmFsdWVzID0gW3NpbmdsZVZhbHVlXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwcm9wZXJ0eVByZWZpeE1hcCkge1xuICAgICAgdmFyIGRhc2hDYXNlUHJvcGVydHkgPSAoMCwgX2h5cGhlbmF0ZVByb3BlcnR5Mi5kZWZhdWx0KShwcm9wZXJ0eSk7XG5cbiAgICAgIGlmIChzaW5nbGVWYWx1ZS5pbmRleE9mKGRhc2hDYXNlUHJvcGVydHkpID4gLTEgJiYgZGFzaENhc2VQcm9wZXJ0eSAhPT0gJ29yZGVyJykge1xuICAgICAgICB2YXIgcHJlZml4ZXMgPSBwcm9wZXJ0eVByZWZpeE1hcFtwcm9wZXJ0eV07XG4gICAgICAgIGZvciAodmFyIGogPSAwLCBwTGVuID0gcHJlZml4ZXMubGVuZ3RoOyBqIDwgcExlbjsgKytqKSB7XG4gICAgICAgICAgLy8gam9pbiBhbGwgcHJlZml4ZXMgYW5kIGNyZWF0ZSBhIG5ldyB2YWx1ZVxuICAgICAgICAgIHZhbHVlcy51bnNoaWZ0KHNpbmdsZVZhbHVlLnJlcGxhY2UoZGFzaENhc2VQcm9wZXJ0eSwgcHJlZml4TWFwcGluZ1twcmVmaXhlc1tqXV0gKyBkYXNoQ2FzZVByb3BlcnR5KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBtdWx0aXBsZVZhbHVlc1tpXSA9IHZhbHVlcy5qb2luKCcsJyk7XG4gIH1cblxuICByZXR1cm4gbXVsdGlwbGVWYWx1ZXMuam9pbignLCcpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIHByb3BlcnR5UHJlZml4TWFwKSB7XG4gIC8vIGFsc28gY2hlY2sgZm9yIGFscmVhZHkgcHJlZml4ZWQgdHJhbnNpdGlvbnNcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICB2YXIgb3V0cHV0VmFsdWUgPSBwcmVmaXhWYWx1ZSh2YWx1ZSwgcHJvcGVydHlQcmVmaXhNYXApO1xuICAgIC8vIGlmIHRoZSBwcm9wZXJ0eSBpcyBhbHJlYWR5IHByZWZpeGVkXG4gICAgdmFyIHdlYmtpdE91dHB1dCA9IG91dHB1dFZhbHVlLnNwbGl0KC8sKD8hW14oKV0qKD86XFwoW14oKV0qXFwpKT9cXCkpL2cpLmZpbHRlcihmdW5jdGlvbiAodmFsKSB7XG4gICAgICByZXR1cm4gIS8tbW96LXwtbXMtLy50ZXN0KHZhbCk7XG4gICAgfSkuam9pbignLCcpO1xuXG4gICAgaWYgKHByb3BlcnR5LmluZGV4T2YoJ1dlYmtpdCcpID4gLTEpIHtcbiAgICAgIHJldHVybiB3ZWJraXRPdXRwdXQ7XG4gICAgfVxuXG4gICAgdmFyIG1vek91dHB1dCA9IG91dHB1dFZhbHVlLnNwbGl0KC8sKD8hW14oKV0qKD86XFwoW14oKV0qXFwpKT9cXCkpL2cpLmZpbHRlcihmdW5jdGlvbiAodmFsKSB7XG4gICAgICByZXR1cm4gIS8td2Via2l0LXwtbXMtLy50ZXN0KHZhbCk7XG4gICAgfSkuam9pbignLCcpO1xuXG4gICAgaWYgKHByb3BlcnR5LmluZGV4T2YoJ01veicpID4gLTEpIHtcbiAgICAgIHJldHVybiBtb3pPdXRwdXQ7XG4gICAgfVxuXG4gICAgc3R5bGVbJ1dlYmtpdCcgKyAoMCwgX2NhcGl0YWxpemVTdHJpbmcyLmRlZmF1bHQpKHByb3BlcnR5KV0gPSB3ZWJraXRPdXRwdXQ7XG4gICAgc3R5bGVbJ01veicgKyAoMCwgX2NhcGl0YWxpemVTdHJpbmcyLmRlZmF1bHQpKHByb3BlcnR5KV0gPSBtb3pPdXRwdXQ7XG4gICAgcmV0dXJuIG91dHB1dFZhbHVlO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzaXppbmc7XG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJyddO1xuXG52YXIgcHJvcGVydGllcyA9IHtcbiAgbWF4SGVpZ2h0OiB0cnVlLFxuICBtYXhXaWR0aDogdHJ1ZSxcbiAgd2lkdGg6IHRydWUsXG4gIGhlaWdodDogdHJ1ZSxcbiAgY29sdW1uV2lkdGg6IHRydWUsXG4gIG1pbldpZHRoOiB0cnVlLFxuICBtaW5IZWlnaHQ6IHRydWVcbn07XG52YXIgdmFsdWVzID0ge1xuICAnbWluLWNvbnRlbnQnOiB0cnVlLFxuICAnbWF4LWNvbnRlbnQnOiB0cnVlLFxuICAnZmlsbC1hdmFpbGFibGUnOiB0cnVlLFxuICAnZml0LWNvbnRlbnQnOiB0cnVlLFxuICAnY29udGFpbi1mbG9hdHMnOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBzaXppbmcocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJiB2YWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gcHJlZml4ICsgdmFsdWU7XG4gICAgfSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdyYWRpZW50O1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJ2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJlZml4ZWRWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnLW1vei0nLCAnJ107XG5cbnZhciB2YWx1ZXMgPSAvbGluZWFyLWdyYWRpZW50fHJhZGlhbC1ncmFkaWVudHxyZXBlYXRpbmctbGluZWFyLWdyYWRpZW50fHJlcGVhdGluZy1yYWRpYWwtZ3JhZGllbnQvO1xuXG5mdW5jdGlvbiBncmFkaWVudChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkgJiYgdmFsdWVzLnRlc3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gcHJlZml4ICsgdmFsdWU7XG4gICAgfSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZsZXhib3hPbGQ7XG52YXIgYWx0ZXJuYXRpdmVWYWx1ZXMgPSB7XG4gICdzcGFjZS1hcm91bmQnOiAnanVzdGlmeScsXG4gICdzcGFjZS1iZXR3ZWVuJzogJ2p1c3RpZnknLFxuICAnZmxleC1zdGFydCc6ICdzdGFydCcsXG4gICdmbGV4LWVuZCc6ICdlbmQnLFxuICAnd3JhcC1yZXZlcnNlJzogJ211bHRpcGxlJyxcbiAgd3JhcDogJ211bHRpcGxlJ1xufTtcblxudmFyIGFsdGVybmF0aXZlUHJvcHMgPSB7XG4gIGFsaWduSXRlbXM6ICdXZWJraXRCb3hBbGlnbicsXG4gIGp1c3RpZnlDb250ZW50OiAnV2Via2l0Qm94UGFjaycsXG4gIGZsZXhXcmFwOiAnV2Via2l0Qm94TGluZXMnXG59O1xuXG5mdW5jdGlvbiBmbGV4Ym94T2xkKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAnZmxleERpcmVjdGlvbicgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIGlmICh2YWx1ZS5pbmRleE9mKCdjb2x1bW4nKSA+IC0xKSB7XG4gICAgICBzdHlsZS5XZWJraXRCb3hPcmllbnQgPSAndmVydGljYWwnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5XZWJraXRCb3hPcmllbnQgPSAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIGlmICh2YWx1ZS5pbmRleE9mKCdyZXZlcnNlJykgPiAtMSkge1xuICAgICAgc3R5bGUuV2Via2l0Qm94RGlyZWN0aW9uID0gJ3JldmVyc2UnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5XZWJraXRCb3hEaXJlY3Rpb24gPSAnbm9ybWFsJztcbiAgICB9XG4gIH1cbiAgaWYgKGFsdGVybmF0aXZlUHJvcHMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgc3R5bGVbYWx0ZXJuYXRpdmVQcm9wc1twcm9wZXJ0eV1dID0gYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdIHx8IHZhbHVlO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmbGV4Ym94SUU7XG52YXIgYWx0ZXJuYXRpdmVWYWx1ZXMgPSB7XG4gICdzcGFjZS1hcm91bmQnOiAnZGlzdHJpYnV0ZScsXG4gICdzcGFjZS1iZXR3ZWVuJzogJ2p1c3RpZnknLFxuICAnZmxleC1zdGFydCc6ICdzdGFydCcsXG4gICdmbGV4LWVuZCc6ICdlbmQnXG59O1xudmFyIGFsdGVybmF0aXZlUHJvcHMgPSB7XG4gIGFsaWduQ29udGVudDogJ21zRmxleExpbmVQYWNrJyxcbiAgYWxpZ25TZWxmOiAnbXNGbGV4SXRlbUFsaWduJyxcbiAgYWxpZ25JdGVtczogJ21zRmxleEFsaWduJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdtc0ZsZXhQYWNrJyxcbiAgb3JkZXI6ICdtc0ZsZXhPcmRlcicsXG4gIGZsZXhHcm93OiAnbXNGbGV4UG9zaXRpdmUnLFxuICBmbGV4U2hyaW5rOiAnbXNGbGV4TmVnYXRpdmUnLFxuICBmbGV4QmFzaXM6ICdtc0ZsZXhQcmVmZXJyZWRTaXplJ1xufTtcblxuZnVuY3Rpb24gZmxleGJveElFKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUpIHtcbiAgaWYgKGFsdGVybmF0aXZlUHJvcHMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgc3R5bGVbYWx0ZXJuYXRpdmVQcm9wc1twcm9wZXJ0eV1dID0gYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdIHx8IHZhbHVlO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmbGV4O1xudmFyIHZhbHVlcyA9IHtcbiAgZmxleDogWyctd2Via2l0LWJveCcsICctbW96LWJveCcsICctbXMtZmxleGJveCcsICctd2Via2l0LWZsZXgnLCAnZmxleCddLFxuICAnaW5saW5lLWZsZXgnOiBbJy13ZWJraXQtaW5saW5lLWJveCcsICctbW96LWlubGluZS1ib3gnLCAnLW1zLWlubGluZS1mbGV4Ym94JywgJy13ZWJraXQtaW5saW5lLWZsZXgnLCAnaW5saW5lLWZsZXgnXVxufTtcblxuZnVuY3Rpb24gZmxleChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAnZGlzcGxheScgJiYgdmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZXNbdmFsdWVdO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjYWxjO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJ2Nzcy1pbi1qcy11dGlscy9saWIvaXNQcmVmaXhlZFZhbHVlJyk7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJlZml4ZWRWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnLW1vei0nLCAnJ107XG5mdW5jdGlvbiBjYWxjKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSAmJiB2YWx1ZS5pbmRleE9mKCdjYWxjKCcpID4gLTEpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9jYWxjXFwoL2csIHByZWZpeCArICdjYWxjKCcpO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY2FsYyA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9jYWxjJyk7XG5cbnZhciBfY2FsYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYWxjKTtcblxudmFyIF9mbGV4ID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZsZXgnKTtcblxudmFyIF9mbGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsZXgpO1xuXG52YXIgX2ZsZXhib3hJRSA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9mbGV4Ym94SUUnKTtcblxudmFyIF9mbGV4Ym94SUUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmxleGJveElFKTtcblxudmFyIF9mbGV4Ym94T2xkID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2ZsZXhib3hPbGQnKTtcblxudmFyIF9mbGV4Ym94T2xkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsZXhib3hPbGQpO1xuXG52YXIgX2dyYWRpZW50ID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL2dyYWRpZW50Jyk7XG5cbnZhciBfZ3JhZGllbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JhZGllbnQpO1xuXG52YXIgX3NpemluZyA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9zdGF0aWMvcGx1Z2lucy9zaXppbmcnKTtcblxudmFyIF9zaXppbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2l6aW5nKTtcblxudmFyIF90cmFuc2l0aW9uID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL3N0YXRpYy9wbHVnaW5zL3RyYW5zaXRpb24nKTtcblxudmFyIF90cmFuc2l0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIHBsdWdpbnM6IFtfY2FsYzIuZGVmYXVsdCwgX2ZsZXgyLmRlZmF1bHQsIF9mbGV4Ym94SUUyLmRlZmF1bHQsIF9mbGV4Ym94T2xkMi5kZWZhdWx0LCBfZ3JhZGllbnQyLmRlZmF1bHQsIF9zaXppbmcyLmRlZmF1bHQsIF90cmFuc2l0aW9uMi5kZWZhdWx0XSxcbiAgcHJlZml4TWFwOiB7IFwidHJhbnNmb3JtXCI6IFtcIldlYmtpdFwiLCBcIm1zXCJdLCBcInRyYW5zZm9ybU9yaWdpblwiOiBbXCJXZWJraXRcIiwgXCJtc1wiXSwgXCJ0cmFuc2Zvcm1PcmlnaW5YXCI6IFtcIldlYmtpdFwiLCBcIm1zXCJdLCBcInRyYW5zZm9ybU9yaWdpbllcIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwiYmFja2ZhY2VWaXNpYmlsaXR5XCI6IFtcIldlYmtpdFwiXSwgXCJwZXJzcGVjdGl2ZVwiOiBbXCJXZWJraXRcIl0sIFwicGVyc3BlY3RpdmVPcmlnaW5cIjogW1wiV2Via2l0XCJdLCBcInRyYW5zZm9ybVN0eWxlXCI6IFtcIldlYmtpdFwiXSwgXCJ0cmFuc2Zvcm1PcmlnaW5aXCI6IFtcIldlYmtpdFwiXSwgXCJhbmltYXRpb25cIjogW1wiV2Via2l0XCJdLCBcImFuaW1hdGlvbkRlbGF5XCI6IFtcIldlYmtpdFwiXSwgXCJhbmltYXRpb25EaXJlY3Rpb25cIjogW1wiV2Via2l0XCJdLCBcImFuaW1hdGlvbkZpbGxNb2RlXCI6IFtcIldlYmtpdFwiXSwgXCJhbmltYXRpb25EdXJhdGlvblwiOiBbXCJXZWJraXRcIl0sIFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogW1wiV2Via2l0XCJdLCBcImFuaW1hdGlvbk5hbWVcIjogW1wiV2Via2l0XCJdLCBcImFuaW1hdGlvblBsYXlTdGF0ZVwiOiBbXCJXZWJraXRcIl0sIFwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb25cIjogW1wiV2Via2l0XCJdLCBcImFwcGVhcmFuY2VcIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcInVzZXJTZWxlY3RcIjogW1wiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIl0sIFwiZm9udEtlcm5pbmdcIjogW1wiV2Via2l0XCJdLCBcInRleHRFbXBoYXNpc1Bvc2l0aW9uXCI6IFtcIldlYmtpdFwiXSwgXCJ0ZXh0RW1waGFzaXNcIjogW1wiV2Via2l0XCJdLCBcInRleHRFbXBoYXNpc1N0eWxlXCI6IFtcIldlYmtpdFwiXSwgXCJ0ZXh0RW1waGFzaXNDb2xvclwiOiBbXCJXZWJraXRcIl0sIFwiYm94RGVjb3JhdGlvbkJyZWFrXCI6IFtcIldlYmtpdFwiXSwgXCJjbGlwUGF0aFwiOiBbXCJXZWJraXRcIl0sIFwibWFza0ltYWdlXCI6IFtcIldlYmtpdFwiXSwgXCJtYXNrTW9kZVwiOiBbXCJXZWJraXRcIl0sIFwibWFza1JlcGVhdFwiOiBbXCJXZWJraXRcIl0sIFwibWFza1Bvc2l0aW9uXCI6IFtcIldlYmtpdFwiXSwgXCJtYXNrQ2xpcFwiOiBbXCJXZWJraXRcIl0sIFwibWFza09yaWdpblwiOiBbXCJXZWJraXRcIl0sIFwibWFza1NpemVcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tDb21wb3NpdGVcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tCb3JkZXJTb3VyY2VcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tCb3JkZXJNb2RlXCI6IFtcIldlYmtpdFwiXSwgXCJtYXNrQm9yZGVyU2xpY2VcIjogW1wiV2Via2l0XCJdLCBcIm1hc2tCb3JkZXJXaWR0aFwiOiBbXCJXZWJraXRcIl0sIFwibWFza0JvcmRlck91dHNldFwiOiBbXCJXZWJraXRcIl0sIFwibWFza0JvcmRlclJlcGVhdFwiOiBbXCJXZWJraXRcIl0sIFwibWFza0JvcmRlclwiOiBbXCJXZWJraXRcIl0sIFwibWFza1R5cGVcIjogW1wiV2Via2l0XCJdLCBcInRleHREZWNvcmF0aW9uU3R5bGVcIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcInRleHREZWNvcmF0aW9uU2tpcFwiOiBbXCJXZWJraXRcIiwgXCJNb3pcIl0sIFwidGV4dERlY29yYXRpb25MaW5lXCI6IFtcIldlYmtpdFwiLCBcIk1velwiXSwgXCJ0ZXh0RGVjb3JhdGlvbkNvbG9yXCI6IFtcIldlYmtpdFwiLCBcIk1velwiXSwgXCJmaWx0ZXJcIjogW1wiV2Via2l0XCJdLCBcImZvbnRGZWF0dXJlU2V0dGluZ3NcIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcImJyZWFrQWZ0ZXJcIjogW1wiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIl0sIFwiYnJlYWtCZWZvcmVcIjogW1wiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIl0sIFwiYnJlYWtJbnNpZGVcIjogW1wiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIl0sIFwiY29sdW1uQ291bnRcIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcImNvbHVtbkZpbGxcIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcImNvbHVtbkdhcFwiOiBbXCJXZWJraXRcIiwgXCJNb3pcIl0sIFwiY29sdW1uUnVsZVwiOiBbXCJXZWJraXRcIiwgXCJNb3pcIl0sIFwiY29sdW1uUnVsZUNvbG9yXCI6IFtcIldlYmtpdFwiLCBcIk1velwiXSwgXCJjb2x1bW5SdWxlU3R5bGVcIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcImNvbHVtblJ1bGVXaWR0aFwiOiBbXCJXZWJraXRcIiwgXCJNb3pcIl0sIFwiY29sdW1uc1wiOiBbXCJXZWJraXRcIiwgXCJNb3pcIl0sIFwiY29sdW1uU3BhblwiOiBbXCJXZWJraXRcIiwgXCJNb3pcIl0sIFwiY29sdW1uV2lkdGhcIjogW1wiV2Via2l0XCIsIFwiTW96XCJdLCBcImZsZXhcIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwiZmxleEJhc2lzXCI6IFtcIldlYmtpdFwiXSwgXCJmbGV4RGlyZWN0aW9uXCI6IFtcIldlYmtpdFwiLCBcIm1zXCJdLCBcImZsZXhHcm93XCI6IFtcIldlYmtpdFwiXSwgXCJmbGV4Rmxvd1wiOiBbXCJXZWJraXRcIiwgXCJtc1wiXSwgXCJmbGV4U2hyaW5rXCI6IFtcIldlYmtpdFwiXSwgXCJmbGV4V3JhcFwiOiBbXCJXZWJraXRcIiwgXCJtc1wiXSwgXCJhbGlnbkNvbnRlbnRcIjogW1wiV2Via2l0XCJdLCBcImFsaWduSXRlbXNcIjogW1wiV2Via2l0XCJdLCBcImFsaWduU2VsZlwiOiBbXCJXZWJraXRcIl0sIFwianVzdGlmeUNvbnRlbnRcIjogW1wiV2Via2l0XCJdLCBcIm9yZGVyXCI6IFtcIldlYmtpdFwiXSwgXCJ0cmFuc2l0aW9uRGVsYXlcIjogW1wiV2Via2l0XCJdLCBcInRyYW5zaXRpb25EdXJhdGlvblwiOiBbXCJXZWJraXRcIl0sIFwidHJhbnNpdGlvblByb3BlcnR5XCI6IFtcIldlYmtpdFwiXSwgXCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cIjogW1wiV2Via2l0XCJdLCBcImJhY2tkcm9wRmlsdGVyXCI6IFtcIldlYmtpdFwiXSwgXCJzY3JvbGxTbmFwVHlwZVwiOiBbXCJXZWJraXRcIiwgXCJtc1wiXSwgXCJzY3JvbGxTbmFwUG9pbnRzWFwiOiBbXCJXZWJraXRcIiwgXCJtc1wiXSwgXCJzY3JvbGxTbmFwUG9pbnRzWVwiOiBbXCJXZWJraXRcIiwgXCJtc1wiXSwgXCJzY3JvbGxTbmFwRGVzdGluYXRpb25cIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwic2Nyb2xsU25hcENvb3JkaW5hdGVcIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwic2hhcGVJbWFnZVRocmVzaG9sZFwiOiBbXCJXZWJraXRcIl0sIFwic2hhcGVJbWFnZU1hcmdpblwiOiBbXCJXZWJraXRcIl0sIFwic2hhcGVJbWFnZU91dHNpZGVcIjogW1wiV2Via2l0XCJdLCBcImh5cGhlbnNcIjogW1wiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIl0sIFwiZmxvd0ludG9cIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwiZmxvd0Zyb21cIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwicmVnaW9uRnJhZ21lbnRcIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwiYm94U2l6aW5nXCI6IFtcIk1velwiXSwgXCJ0ZXh0QWxpZ25MYXN0XCI6IFtcIk1velwiXSwgXCJ0YWJTaXplXCI6IFtcIk1velwiXSwgXCJ3cmFwRmxvd1wiOiBbXCJtc1wiXSwgXCJ3cmFwVGhyb3VnaFwiOiBbXCJtc1wiXSwgXCJ3cmFwTWFyZ2luXCI6IFtcIm1zXCJdLCBcInRvdWNoQWN0aW9uXCI6IFtcIm1zXCJdLCBcImdyaWRUZW1wbGF0ZUNvbHVtbnNcIjogW1wibXNcIl0sIFwiZ3JpZFRlbXBsYXRlUm93c1wiOiBbXCJtc1wiXSwgXCJncmlkVGVtcGxhdGVBcmVhc1wiOiBbXCJtc1wiXSwgXCJncmlkVGVtcGxhdGVcIjogW1wibXNcIl0sIFwiZ3JpZEF1dG9Db2x1bW5zXCI6IFtcIm1zXCJdLCBcImdyaWRBdXRvUm93c1wiOiBbXCJtc1wiXSwgXCJncmlkQXV0b0Zsb3dcIjogW1wibXNcIl0sIFwiZ3JpZFwiOiBbXCJtc1wiXSwgXCJncmlkUm93U3RhcnRcIjogW1wibXNcIl0sIFwiZ3JpZENvbHVtblN0YXJ0XCI6IFtcIm1zXCJdLCBcImdyaWRSb3dFbmRcIjogW1wibXNcIl0sIFwiZ3JpZFJvd1wiOiBbXCJtc1wiXSwgXCJncmlkQ29sdW1uXCI6IFtcIm1zXCJdLCBcImdyaWRDb2x1bW5FbmRcIjogW1wibXNcIl0sIFwiZ3JpZENvbHVtbkdhcFwiOiBbXCJtc1wiXSwgXCJncmlkUm93R2FwXCI6IFtcIm1zXCJdLCBcImdyaWRBcmVhXCI6IFtcIm1zXCJdLCBcImdyaWRHYXBcIjogW1wibXNcIl0sIFwidGV4dFNpemVBZGp1c3RcIjogW1wiV2Via2l0XCIsIFwibXNcIl0sIFwiYm9yZGVySW1hZ2VcIjogW1wiV2Via2l0XCJdLCBcImJvcmRlckltYWdlT3V0c2V0XCI6IFtcIldlYmtpdFwiXSwgXCJib3JkZXJJbWFnZVJlcGVhdFwiOiBbXCJXZWJraXRcIl0sIFwiYm9yZGVySW1hZ2VTbGljZVwiOiBbXCJXZWJraXRcIl0sIFwiYm9yZGVySW1hZ2VTb3VyY2VcIjogW1wiV2Via2l0XCJdLCBcImJvcmRlckltYWdlV2lkdGhcIjogW1wiV2Via2l0XCJdIH1cbn07IC8qIGVzbGludC1kaXNhYmxlICovIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC9bQS1aXS9nO1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcbnZhciBjYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZyBpbiBjYWNoZVxuICAgID8gY2FjaGVbc3RyaW5nXVxuICAgIDogY2FjaGVbc3RyaW5nXSA9IHN0cmluZ1xuICAgICAgLnJlcGxhY2UodXBwZXJjYXNlUGF0dGVybiwgJy0kJicpXG4gICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRyYW5zaXRpb247XG5cbnZhciBfaHlwaGVuYXRlUHJvcGVydHkgPSByZXF1aXJlKCdjc3MtaW4tanMtdXRpbHMvbGliL2h5cGhlbmF0ZVByb3BlcnR5Jyk7XG5cbnZhciBfaHlwaGVuYXRlUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHlwaGVuYXRlUHJvcGVydHkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJvcGVydGllcyA9IHtcbiAgdHJhbnNpdGlvbjogdHJ1ZSxcbiAgdHJhbnNpdGlvblByb3BlcnR5OiB0cnVlLFxuICBXZWJraXRUcmFuc2l0aW9uOiB0cnVlLFxuICBXZWJraXRUcmFuc2l0aW9uUHJvcGVydHk6IHRydWUsXG4gIE1velRyYW5zaXRpb246IHRydWUsXG4gIE1velRyYW5zaXRpb25Qcm9wZXJ0eTogdHJ1ZVxufTtcblxuXG52YXIgcmVxdWlyZXNQcmVmaXhEYXNoQ2FzZWQgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb24ocHJvcGVydHksIHZhbHVlLCBzdHlsZSwgX3JlZikge1xuICB2YXIgY3NzUHJlZml4ID0gX3JlZi5jc3NQcmVmaXgsXG4gICAgICBrZWVwVW5wcmVmaXhlZCA9IF9yZWYua2VlcFVucHJlZml4ZWQsXG4gICAgICByZXF1aXJlc1ByZWZpeCA9IF9yZWYucmVxdWlyZXNQcmVmaXg7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAvLyBtZW1vaXplIHRoZSBwcmVmaXggYXJyYXkgZm9yIGxhdGVyIHVzZVxuICAgIGlmICghcmVxdWlyZXNQcmVmaXhEYXNoQ2FzZWQpIHtcbiAgICAgIHJlcXVpcmVzUHJlZml4RGFzaENhc2VkID0gT2JqZWN0LmtleXMocmVxdWlyZXNQcmVmaXgpLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gKDAsIF9oeXBoZW5hdGVQcm9wZXJ0eTIuZGVmYXVsdCkocHJvcCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBvbmx5IHNwbGl0IG11bHRpIHZhbHVlcywgbm90IGN1YmljIGJlemllcnNcbiAgICB2YXIgbXVsdGlwbGVWYWx1ZXMgPSB2YWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKTtcblxuICAgIHJlcXVpcmVzUHJlZml4RGFzaENhc2VkLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIG11bHRpcGxlVmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKHZhbCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKHZhbC5pbmRleE9mKHByb3ApID4gLTEgJiYgcHJvcCAhPT0gJ29yZGVyJykge1xuICAgICAgICAgIG11bHRpcGxlVmFsdWVzW2luZGV4XSA9IHZhbC5yZXBsYWNlKHByb3AsIGNzc1ByZWZpeCArIHByb3ApICsgKGtlZXBVbnByZWZpeGVkID8gJywnICsgdmFsIDogJycpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBtdWx0aXBsZVZhbHVlcy5qb2luKCcsJyk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNpemluZztcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZ2V0UHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2dldFByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJlZml4ZWRWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBwcm9wZXJ0aWVzID0ge1xuICBtYXhIZWlnaHQ6IHRydWUsXG4gIG1heFdpZHRoOiB0cnVlLFxuICB3aWR0aDogdHJ1ZSxcbiAgaGVpZ2h0OiB0cnVlLFxuICBjb2x1bW5XaWR0aDogdHJ1ZSxcbiAgbWluV2lkdGg6IHRydWUsXG4gIG1pbkhlaWdodDogdHJ1ZVxufTtcblxudmFyIHZhbHVlcyA9IHtcbiAgJ21pbi1jb250ZW50JzogdHJ1ZSxcbiAgJ21heC1jb250ZW50JzogdHJ1ZSxcbiAgJ2ZpbGwtYXZhaWxhYmxlJzogdHJ1ZSxcbiAgJ2ZpdC1jb250ZW50JzogdHJ1ZSxcbiAgJ2NvbnRhaW4tZmxvYXRzJzogdHJ1ZVxuXG4gIC8vIFRPRE86IGNocm9tZSAmIG9wZXJhIHN1cHBvcnQgaXRcbn07ZnVuY3Rpb24gc2l6aW5nKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIF9yZWYpIHtcbiAgdmFyIGNzc1ByZWZpeCA9IF9yZWYuY3NzUHJlZml4LFxuICAgICAga2VlcFVucHJlZml4ZWQgPSBfcmVmLmtlZXBVbnByZWZpeGVkO1xuXG4gIC8vIFRoaXMgbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmVcbiAgLy8gS2VlcCBhbiBleWUgb24gaXRcbiAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gKDAsIF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KShjc3NQcmVmaXggKyB2YWx1ZSwgdmFsdWUsIGtlZXBVbnByZWZpeGVkKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ3JhZGllbnQ7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgdmFsdWVzID0gL2xpbmVhci1ncmFkaWVudHxyYWRpYWwtZ3JhZGllbnR8cmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudHxyZXBlYXRpbmctcmFkaWFsLWdyYWRpZW50LztcbmZ1bmN0aW9uIGdyYWRpZW50KHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIF9yZWYpIHtcbiAgdmFyIGJyb3dzZXJOYW1lID0gX3JlZi5icm93c2VyTmFtZSxcbiAgICAgIGJyb3dzZXJWZXJzaW9uID0gX3JlZi5icm93c2VyVmVyc2lvbixcbiAgICAgIGNzc1ByZWZpeCA9IF9yZWYuY3NzUHJlZml4LFxuICAgICAga2VlcFVucHJlZml4ZWQgPSBfcmVmLmtlZXBVbnByZWZpeGVkO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlcy50ZXN0KHZhbHVlKSAmJiAoYnJvd3Nlck5hbWUgPT09ICdmaXJlZm94JyAmJiBicm93c2VyVmVyc2lvbiA8IDE2IHx8IGJyb3dzZXJOYW1lID09PSAnY2hyb21lJyAmJiBicm93c2VyVmVyc2lvbiA8IDI2IHx8IChicm93c2VyTmFtZSA9PT0gJ3NhZmFyaScgfHwgYnJvd3Nlck5hbWUgPT09ICdpb3Nfc2FmJykgJiYgYnJvd3NlclZlcnNpb24gPCA3IHx8IChicm93c2VyTmFtZSA9PT0gJ29wZXJhJyB8fCBicm93c2VyTmFtZSA9PT0gJ29wX21pbmknKSAmJiBicm93c2VyVmVyc2lvbiA8IDEyLjEgfHwgYnJvd3Nlck5hbWUgPT09ICdhbmRyb2lkJyAmJiBicm93c2VyVmVyc2lvbiA8IDQuNCB8fCBicm93c2VyTmFtZSA9PT0gJ2FuZF91YycpKSB7XG4gICAgcmV0dXJuICgwLCBfZ2V0UHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkoY3NzUHJlZml4ICsgdmFsdWUsIHZhbHVlLCBrZWVwVW5wcmVmaXhlZCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZsZXhib3hPbGQ7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgYWx0ZXJuYXRpdmVWYWx1ZXMgPSB7XG4gICdzcGFjZS1hcm91bmQnOiAnanVzdGlmeScsXG4gICdzcGFjZS1iZXR3ZWVuJzogJ2p1c3RpZnknLFxuICAnZmxleC1zdGFydCc6ICdzdGFydCcsXG4gICdmbGV4LWVuZCc6ICdlbmQnLFxuICAnd3JhcC1yZXZlcnNlJzogJ211bHRpcGxlJyxcbiAgd3JhcDogJ211bHRpcGxlJyxcbiAgZmxleDogJ2JveCcsXG4gICdpbmxpbmUtZmxleCc6ICdpbmxpbmUtYm94J1xufTtcblxuXG52YXIgYWx0ZXJuYXRpdmVQcm9wcyA9IHtcbiAgYWxpZ25JdGVtczogJ1dlYmtpdEJveEFsaWduJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdXZWJraXRCb3hQYWNrJyxcbiAgZmxleFdyYXA6ICdXZWJraXRCb3hMaW5lcydcbn07XG5cbnZhciBvdGhlclByb3BzID0gWydhbGlnbkNvbnRlbnQnLCAnYWxpZ25TZWxmJywgJ29yZGVyJywgJ2ZsZXhHcm93JywgJ2ZsZXhTaHJpbmsnLCAnZmxleEJhc2lzJywgJ2ZsZXhEaXJlY3Rpb24nXTtcbnZhciBwcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoYWx0ZXJuYXRpdmVQcm9wcykuY29uY2F0KG90aGVyUHJvcHMpO1xuXG5mdW5jdGlvbiBmbGV4Ym94T2xkKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIF9yZWYpIHtcbiAgdmFyIGJyb3dzZXJOYW1lID0gX3JlZi5icm93c2VyTmFtZSxcbiAgICAgIGJyb3dzZXJWZXJzaW9uID0gX3JlZi5icm93c2VyVmVyc2lvbixcbiAgICAgIGNzc1ByZWZpeCA9IF9yZWYuY3NzUHJlZml4LFxuICAgICAga2VlcFVucHJlZml4ZWQgPSBfcmVmLmtlZXBVbnByZWZpeGVkLFxuICAgICAgcmVxdWlyZXNQcmVmaXggPSBfcmVmLnJlcXVpcmVzUHJlZml4O1xuXG4gIGlmICgocHJvcGVydGllcy5pbmRleE9mKHByb3BlcnR5KSA+IC0xIHx8IHByb3BlcnR5ID09PSAnZGlzcGxheScgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5pbmRleE9mKCdmbGV4JykgPiAtMSkgJiYgKGJyb3dzZXJOYW1lID09PSAnZmlyZWZveCcgJiYgYnJvd3NlclZlcnNpb24gPCAyMiB8fCBicm93c2VyTmFtZSA9PT0gJ2Nocm9tZScgJiYgYnJvd3NlclZlcnNpb24gPCAyMSB8fCAoYnJvd3Nlck5hbWUgPT09ICdzYWZhcmknIHx8IGJyb3dzZXJOYW1lID09PSAnaW9zX3NhZicpICYmIGJyb3dzZXJWZXJzaW9uIDw9IDYuMSB8fCBicm93c2VyTmFtZSA9PT0gJ2FuZHJvaWQnICYmIGJyb3dzZXJWZXJzaW9uIDwgNC40IHx8IGJyb3dzZXJOYW1lID09PSAnYW5kX3VjJykpIHtcbiAgICBkZWxldGUgcmVxdWlyZXNQcmVmaXhbcHJvcGVydHldO1xuXG4gICAgaWYgKCFrZWVwVW5wcmVmaXhlZCAmJiAhQXJyYXkuaXNBcnJheShzdHlsZVtwcm9wZXJ0eV0pKSB7XG4gICAgICBkZWxldGUgc3R5bGVbcHJvcGVydHldO1xuICAgIH1cbiAgICBpZiAocHJvcGVydHkgPT09ICdmbGV4RGlyZWN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodmFsdWUuaW5kZXhPZignY29sdW1uJykgPiAtMSkge1xuICAgICAgICBzdHlsZS5XZWJraXRCb3hPcmllbnQgPSAndmVydGljYWwnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGUuV2Via2l0Qm94T3JpZW50ID0gJ2hvcml6b250YWwnO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlLmluZGV4T2YoJ3JldmVyc2UnKSA+IC0xKSB7XG4gICAgICAgIHN0eWxlLldlYmtpdEJveERpcmVjdGlvbiA9ICdyZXZlcnNlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlLldlYmtpdEJveERpcmVjdGlvbiA9ICdub3JtYWwnO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvcGVydHkgPT09ICdkaXNwbGF5JyAmJiBhbHRlcm5hdGl2ZVZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiAoMCwgX2dldFByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKGNzc1ByZWZpeCArIGFsdGVybmF0aXZlVmFsdWVzW3ZhbHVlXSwgdmFsdWUsIGtlZXBVbnByZWZpeGVkKTtcbiAgICB9XG4gICAgaWYgKGFsdGVybmF0aXZlUHJvcHMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICBzdHlsZVthbHRlcm5hdGl2ZVByb3BzW3Byb3BlcnR5XV0gPSBhbHRlcm5hdGl2ZVZhbHVlc1t2YWx1ZV0gfHwgdmFsdWU7XG4gICAgfVxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmbGV4Ym94SUU7XG5cbnZhciBfZ2V0UHJlZml4ZWRWYWx1ZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2dldFByZWZpeGVkVmFsdWUnKTtcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgYWx0ZXJuYXRpdmVWYWx1ZXMgPSB7XG4gICdzcGFjZS1hcm91bmQnOiAnZGlzdHJpYnV0ZScsXG4gICdzcGFjZS1iZXR3ZWVuJzogJ2p1c3RpZnknLFxuICAnZmxleC1zdGFydCc6ICdzdGFydCcsXG4gICdmbGV4LWVuZCc6ICdlbmQnLFxuICBmbGV4OiAnZmxleGJveCcsXG4gICdpbmxpbmUtZmxleCc6ICdpbmxpbmUtZmxleGJveCdcbn07XG5cbnZhciBhbHRlcm5hdGl2ZVByb3BzID0ge1xuICBhbGlnbkNvbnRlbnQ6ICdtc0ZsZXhMaW5lUGFjaycsXG4gIGFsaWduU2VsZjogJ21zRmxleEl0ZW1BbGlnbicsXG4gIGFsaWduSXRlbXM6ICdtc0ZsZXhBbGlnbicsXG4gIGp1c3RpZnlDb250ZW50OiAnbXNGbGV4UGFjaycsXG4gIG9yZGVyOiAnbXNGbGV4T3JkZXInLFxuICBmbGV4R3JvdzogJ21zRmxleFBvc2l0aXZlJyxcbiAgZmxleFNocmluazogJ21zRmxleE5lZ2F0aXZlJyxcbiAgZmxleEJhc2lzOiAnbXNGbGV4UHJlZmVycmVkU2l6ZSdcbn07XG5cbmZ1bmN0aW9uIGZsZXhib3hJRShwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBfcmVmKSB7XG4gIHZhciBicm93c2VyTmFtZSA9IF9yZWYuYnJvd3Nlck5hbWUsXG4gICAgICBicm93c2VyVmVyc2lvbiA9IF9yZWYuYnJvd3NlclZlcnNpb24sXG4gICAgICBjc3NQcmVmaXggPSBfcmVmLmNzc1ByZWZpeCxcbiAgICAgIGtlZXBVbnByZWZpeGVkID0gX3JlZi5rZWVwVW5wcmVmaXhlZCxcbiAgICAgIHJlcXVpcmVzUHJlZml4ID0gX3JlZi5yZXF1aXJlc1ByZWZpeDtcblxuICBpZiAoKGFsdGVybmF0aXZlUHJvcHMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpIHx8IHByb3BlcnR5ID09PSAnZGlzcGxheScgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5pbmRleE9mKCdmbGV4JykgPiAtMSkgJiYgKGJyb3dzZXJOYW1lID09PSAnaWVfbW9iJyB8fCBicm93c2VyTmFtZSA9PT0gJ2llJykgJiYgYnJvd3NlclZlcnNpb24gPT09IDEwKSB7XG4gICAgZGVsZXRlIHJlcXVpcmVzUHJlZml4W3Byb3BlcnR5XTtcblxuICAgIGlmICgha2VlcFVucHJlZml4ZWQgJiYgIUFycmF5LmlzQXJyYXkoc3R5bGVbcHJvcGVydHldKSkge1xuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BlcnR5XTtcbiAgICB9XG4gICAgaWYgKHByb3BlcnR5ID09PSAnZGlzcGxheScgJiYgYWx0ZXJuYXRpdmVWYWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gKDAsIF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KShjc3NQcmVmaXggKyBhbHRlcm5hdGl2ZVZhbHVlc1t2YWx1ZV0sIHZhbHVlLCBrZWVwVW5wcmVmaXhlZCk7XG4gICAgfVxuICAgIGlmIChhbHRlcm5hdGl2ZVByb3BzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgc3R5bGVbYWx0ZXJuYXRpdmVQcm9wc1twcm9wZXJ0eV1dID0gYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdIHx8IHZhbHVlO1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmxleDtcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZ2V0UHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2dldFByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJlZml4ZWRWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciB2YWx1ZXMgPSB7XG4gIGZsZXg6IHRydWUsXG4gICdpbmxpbmUtZmxleCc6IHRydWVcbn07XG5mdW5jdGlvbiBmbGV4KHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIF9yZWYpIHtcbiAgdmFyIGJyb3dzZXJOYW1lID0gX3JlZi5icm93c2VyTmFtZSxcbiAgICAgIGJyb3dzZXJWZXJzaW9uID0gX3JlZi5icm93c2VyVmVyc2lvbixcbiAgICAgIGNzc1ByZWZpeCA9IF9yZWYuY3NzUHJlZml4LFxuICAgICAga2VlcFVucHJlZml4ZWQgPSBfcmVmLmtlZXBVbnByZWZpeGVkO1xuXG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2Rpc3BsYXknICYmIHZhbHVlc1t2YWx1ZV0gJiYgKGJyb3dzZXJOYW1lID09PSAnY2hyb21lJyAmJiBicm93c2VyVmVyc2lvbiA8IDI5ICYmIGJyb3dzZXJWZXJzaW9uID4gMjAgfHwgKGJyb3dzZXJOYW1lID09PSAnc2FmYXJpJyB8fCBicm93c2VyTmFtZSA9PT0gJ2lvc19zYWYnKSAmJiBicm93c2VyVmVyc2lvbiA8IDkgJiYgYnJvd3NlclZlcnNpb24gPiA2IHx8IGJyb3dzZXJOYW1lID09PSAnb3BlcmEnICYmIChicm93c2VyVmVyc2lvbiA9PT0gMTUgfHwgYnJvd3NlclZlcnNpb24gPT09IDE2KSkpIHtcbiAgICByZXR1cm4gKDAsIF9nZXRQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KShjc3NQcmVmaXggKyB2YWx1ZSwgdmFsdWUsIGtlZXBVbnByZWZpeGVkKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FsYztcblxudmFyIF9nZXRQcmVmaXhlZFZhbHVlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZ2V0UHJlZml4ZWRWYWx1ZScpO1xuXG52YXIgX2dldFByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJlZml4ZWRWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGNhbGMocHJvcGVydHksIHZhbHVlLCBzdHlsZSwgX3JlZikge1xuICB2YXIgYnJvd3Nlck5hbWUgPSBfcmVmLmJyb3dzZXJOYW1lLFxuICAgICAgYnJvd3NlclZlcnNpb24gPSBfcmVmLmJyb3dzZXJWZXJzaW9uLFxuICAgICAgY3NzUHJlZml4ID0gX3JlZi5jc3NQcmVmaXgsXG4gICAgICBrZWVwVW5wcmVmaXhlZCA9IF9yZWYua2VlcFVucHJlZml4ZWQ7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuaW5kZXhPZignY2FsYygnKSA+IC0xICYmIChicm93c2VyTmFtZSA9PT0gJ2ZpcmVmb3gnICYmIGJyb3dzZXJWZXJzaW9uIDwgMTUgfHwgYnJvd3Nlck5hbWUgPT09ICdjaHJvbWUnICYmIGJyb3dzZXJWZXJzaW9uIDwgMjUgfHwgYnJvd3Nlck5hbWUgPT09ICdzYWZhcmknICYmIGJyb3dzZXJWZXJzaW9uIDwgNi4xIHx8IGJyb3dzZXJOYW1lID09PSAnaW9zX3NhZicgJiYgYnJvd3NlclZlcnNpb24gPCA3KSkge1xuICAgIHJldHVybiAoMCwgX2dldFByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlLnJlcGxhY2UoL2NhbGNcXCgvZywgY3NzUHJlZml4ICsgJ2NhbGMoJyksIHZhbHVlLCBrZWVwVW5wcmVmaXhlZCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jYWxjID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9jYWxjJyk7XG5cbnZhciBfY2FsYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYWxjKTtcblxudmFyIF9mbGV4ID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9mbGV4Jyk7XG5cbnZhciBfZmxleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mbGV4KTtcblxudmFyIF9mbGV4Ym94SUUgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2ZsZXhib3hJRScpO1xuXG52YXIgX2ZsZXhib3hJRTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mbGV4Ym94SUUpO1xuXG52YXIgX2ZsZXhib3hPbGQgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL2ZsZXhib3hPbGQnKTtcblxudmFyIF9mbGV4Ym94T2xkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsZXhib3hPbGQpO1xuXG52YXIgX2dyYWRpZW50ID0gcmVxdWlyZSgnaW5saW5lLXN0eWxlLXByZWZpeGVyL2R5bmFtaWMvcGx1Z2lucy9ncmFkaWVudCcpO1xuXG52YXIgX2dyYWRpZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dyYWRpZW50KTtcblxudmFyIF9zaXppbmcgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL3NpemluZycpO1xuXG52YXIgX3NpemluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaXppbmcpO1xuXG52YXIgX3RyYW5zaXRpb24gPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvZHluYW1pYy9wbHVnaW5zL3RyYW5zaXRpb24nKTtcblxudmFyIF90cmFuc2l0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIHBsdWdpbnM6IFtfY2FsYzIuZGVmYXVsdCwgX2ZsZXgyLmRlZmF1bHQsIF9mbGV4Ym94SUUyLmRlZmF1bHQsIF9mbGV4Ym94T2xkMi5kZWZhdWx0LCBfZ3JhZGllbnQyLmRlZmF1bHQsIF9zaXppbmcyLmRlZmF1bHQsIF90cmFuc2l0aW9uMi5kZWZhdWx0XSxcbiAgcHJlZml4TWFwOiB7IFwiY2hyb21lXCI6IHsgXCJ0cmFuc2Zvcm1cIjogMzUsIFwidHJhbnNmb3JtT3JpZ2luXCI6IDM1LCBcInRyYW5zZm9ybU9yaWdpblhcIjogMzUsIFwidHJhbnNmb3JtT3JpZ2luWVwiOiAzNSwgXCJiYWNrZmFjZVZpc2liaWxpdHlcIjogMzUsIFwicGVyc3BlY3RpdmVcIjogMzUsIFwicGVyc3BlY3RpdmVPcmlnaW5cIjogMzUsIFwidHJhbnNmb3JtU3R5bGVcIjogMzUsIFwidHJhbnNmb3JtT3JpZ2luWlwiOiAzNSwgXCJhbmltYXRpb25cIjogNDIsIFwiYW5pbWF0aW9uRGVsYXlcIjogNDIsIFwiYW5pbWF0aW9uRGlyZWN0aW9uXCI6IDQyLCBcImFuaW1hdGlvbkZpbGxNb2RlXCI6IDQyLCBcImFuaW1hdGlvbkR1cmF0aW9uXCI6IDQyLCBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IDQyLCBcImFuaW1hdGlvbk5hbWVcIjogNDIsIFwiYW5pbWF0aW9uUGxheVN0YXRlXCI6IDQyLCBcImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uXCI6IDQyLCBcImFwcGVhcmFuY2VcIjogNjAsIFwidXNlclNlbGVjdFwiOiA1MywgXCJmb250S2VybmluZ1wiOiAzMiwgXCJ0ZXh0RW1waGFzaXNQb3NpdGlvblwiOiA2MCwgXCJ0ZXh0RW1waGFzaXNcIjogNjAsIFwidGV4dEVtcGhhc2lzU3R5bGVcIjogNjAsIFwidGV4dEVtcGhhc2lzQ29sb3JcIjogNjAsIFwiYm94RGVjb3JhdGlvbkJyZWFrXCI6IDYwLCBcImNsaXBQYXRoXCI6IDU0LCBcIm1hc2tJbWFnZVwiOiA2MCwgXCJtYXNrTW9kZVwiOiA2MCwgXCJtYXNrUmVwZWF0XCI6IDYwLCBcIm1hc2tQb3NpdGlvblwiOiA2MCwgXCJtYXNrQ2xpcFwiOiA2MCwgXCJtYXNrT3JpZ2luXCI6IDYwLCBcIm1hc2tTaXplXCI6IDYwLCBcIm1hc2tDb21wb3NpdGVcIjogNjAsIFwibWFza1wiOiA2MCwgXCJtYXNrQm9yZGVyU291cmNlXCI6IDYwLCBcIm1hc2tCb3JkZXJNb2RlXCI6IDYwLCBcIm1hc2tCb3JkZXJTbGljZVwiOiA2MCwgXCJtYXNrQm9yZGVyV2lkdGhcIjogNjAsIFwibWFza0JvcmRlck91dHNldFwiOiA2MCwgXCJtYXNrQm9yZGVyUmVwZWF0XCI6IDYwLCBcIm1hc2tCb3JkZXJcIjogNjAsIFwibWFza1R5cGVcIjogNjAsIFwidGV4dERlY29yYXRpb25TdHlsZVwiOiA1NiwgXCJ0ZXh0RGVjb3JhdGlvblNraXBcIjogNTYsIFwidGV4dERlY29yYXRpb25MaW5lXCI6IDU2LCBcInRleHREZWNvcmF0aW9uQ29sb3JcIjogNTYsIFwiZmlsdGVyXCI6IDUyLCBcImZvbnRGZWF0dXJlU2V0dGluZ3NcIjogNDcsIFwiYnJlYWtBZnRlclwiOiA0OSwgXCJicmVha0JlZm9yZVwiOiA0OSwgXCJicmVha0luc2lkZVwiOiA0OSwgXCJjb2x1bW5Db3VudFwiOiA0OSwgXCJjb2x1bW5GaWxsXCI6IDQ5LCBcImNvbHVtbkdhcFwiOiA0OSwgXCJjb2x1bW5SdWxlXCI6IDQ5LCBcImNvbHVtblJ1bGVDb2xvclwiOiA0OSwgXCJjb2x1bW5SdWxlU3R5bGVcIjogNDksIFwiY29sdW1uUnVsZVdpZHRoXCI6IDQ5LCBcImNvbHVtbnNcIjogNDksIFwiY29sdW1uU3BhblwiOiA0OSwgXCJjb2x1bW5XaWR0aFwiOiA0OSB9LCBcInNhZmFyaVwiOiB7IFwiZmxleFwiOiA4LCBcImZsZXhCYXNpc1wiOiA4LCBcImZsZXhEaXJlY3Rpb25cIjogOCwgXCJmbGV4R3Jvd1wiOiA4LCBcImZsZXhGbG93XCI6IDgsIFwiZmxleFNocmlua1wiOiA4LCBcImZsZXhXcmFwXCI6IDgsIFwiYWxpZ25Db250ZW50XCI6IDgsIFwiYWxpZ25JdGVtc1wiOiA4LCBcImFsaWduU2VsZlwiOiA4LCBcImp1c3RpZnlDb250ZW50XCI6IDgsIFwib3JkZXJcIjogOCwgXCJ0cmFuc2l0aW9uXCI6IDYsIFwidHJhbnNpdGlvbkRlbGF5XCI6IDYsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCI6IDYsIFwidHJhbnNpdGlvblByb3BlcnR5XCI6IDYsIFwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXCI6IDYsIFwidHJhbnNmb3JtXCI6IDgsIFwidHJhbnNmb3JtT3JpZ2luXCI6IDgsIFwidHJhbnNmb3JtT3JpZ2luWFwiOiA4LCBcInRyYW5zZm9ybU9yaWdpbllcIjogOCwgXCJiYWNrZmFjZVZpc2liaWxpdHlcIjogOCwgXCJwZXJzcGVjdGl2ZVwiOiA4LCBcInBlcnNwZWN0aXZlT3JpZ2luXCI6IDgsIFwidHJhbnNmb3JtU3R5bGVcIjogOCwgXCJ0cmFuc2Zvcm1PcmlnaW5aXCI6IDgsIFwiYW5pbWF0aW9uXCI6IDgsIFwiYW5pbWF0aW9uRGVsYXlcIjogOCwgXCJhbmltYXRpb25EaXJlY3Rpb25cIjogOCwgXCJhbmltYXRpb25GaWxsTW9kZVwiOiA4LCBcImFuaW1hdGlvbkR1cmF0aW9uXCI6IDgsIFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogOCwgXCJhbmltYXRpb25OYW1lXCI6IDgsIFwiYW5pbWF0aW9uUGxheVN0YXRlXCI6IDgsIFwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb25cIjogOCwgXCJhcHBlYXJhbmNlXCI6IDEwLjEsIFwidXNlclNlbGVjdFwiOiAxMC4xLCBcImJhY2tkcm9wRmlsdGVyXCI6IDEwLjEsIFwiZm9udEtlcm5pbmdcIjogOSwgXCJzY3JvbGxTbmFwVHlwZVwiOiAxMCwgXCJzY3JvbGxTbmFwUG9pbnRzWFwiOiAxMCwgXCJzY3JvbGxTbmFwUG9pbnRzWVwiOiAxMCwgXCJzY3JvbGxTbmFwRGVzdGluYXRpb25cIjogMTAsIFwic2Nyb2xsU25hcENvb3JkaW5hdGVcIjogMTAsIFwidGV4dEVtcGhhc2lzUG9zaXRpb25cIjogNywgXCJ0ZXh0RW1waGFzaXNcIjogNywgXCJ0ZXh0RW1waGFzaXNTdHlsZVwiOiA3LCBcInRleHRFbXBoYXNpc0NvbG9yXCI6IDcsIFwiYm94RGVjb3JhdGlvbkJyZWFrXCI6IDEwLjEsIFwiY2xpcFBhdGhcIjogMTAuMSwgXCJtYXNrSW1hZ2VcIjogMTAuMSwgXCJtYXNrTW9kZVwiOiAxMC4xLCBcIm1hc2tSZXBlYXRcIjogMTAuMSwgXCJtYXNrUG9zaXRpb25cIjogMTAuMSwgXCJtYXNrQ2xpcFwiOiAxMC4xLCBcIm1hc2tPcmlnaW5cIjogMTAuMSwgXCJtYXNrU2l6ZVwiOiAxMC4xLCBcIm1hc2tDb21wb3NpdGVcIjogMTAuMSwgXCJtYXNrXCI6IDEwLjEsIFwibWFza0JvcmRlclNvdXJjZVwiOiAxMC4xLCBcIm1hc2tCb3JkZXJNb2RlXCI6IDEwLjEsIFwibWFza0JvcmRlclNsaWNlXCI6IDEwLjEsIFwibWFza0JvcmRlcldpZHRoXCI6IDEwLjEsIFwibWFza0JvcmRlck91dHNldFwiOiAxMC4xLCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogMTAuMSwgXCJtYXNrQm9yZGVyXCI6IDEwLjEsIFwibWFza1R5cGVcIjogMTAuMSwgXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCI6IDEwLjEsIFwidGV4dERlY29yYXRpb25Ta2lwXCI6IDEwLjEsIFwidGV4dERlY29yYXRpb25MaW5lXCI6IDEwLjEsIFwidGV4dERlY29yYXRpb25Db2xvclwiOiAxMC4xLCBcInNoYXBlSW1hZ2VUaHJlc2hvbGRcIjogMTAsIFwic2hhcGVJbWFnZU1hcmdpblwiOiAxMCwgXCJzaGFwZUltYWdlT3V0c2lkZVwiOiAxMCwgXCJmaWx0ZXJcIjogOSwgXCJoeXBoZW5zXCI6IDEwLjEsIFwiZmxvd0ludG9cIjogMTAuMSwgXCJmbG93RnJvbVwiOiAxMC4xLCBcImJyZWFrQmVmb3JlXCI6IDgsIFwiYnJlYWtBZnRlclwiOiA4LCBcImJyZWFrSW5zaWRlXCI6IDgsIFwicmVnaW9uRnJhZ21lbnRcIjogMTAuMSwgXCJjb2x1bW5Db3VudFwiOiA4LCBcImNvbHVtbkZpbGxcIjogOCwgXCJjb2x1bW5HYXBcIjogOCwgXCJjb2x1bW5SdWxlXCI6IDgsIFwiY29sdW1uUnVsZUNvbG9yXCI6IDgsIFwiY29sdW1uUnVsZVN0eWxlXCI6IDgsIFwiY29sdW1uUnVsZVdpZHRoXCI6IDgsIFwiY29sdW1uc1wiOiA4LCBcImNvbHVtblNwYW5cIjogOCwgXCJjb2x1bW5XaWR0aFwiOiA4IH0sIFwiZmlyZWZveFwiOiB7IFwiYXBwZWFyYW5jZVwiOiA1NSwgXCJ1c2VyU2VsZWN0XCI6IDU1LCBcImJveFNpemluZ1wiOiAyOCwgXCJ0ZXh0QWxpZ25MYXN0XCI6IDQ4LCBcInRleHREZWNvcmF0aW9uU3R5bGVcIjogMzUsIFwidGV4dERlY29yYXRpb25Ta2lwXCI6IDM1LCBcInRleHREZWNvcmF0aW9uTGluZVwiOiAzNSwgXCJ0ZXh0RGVjb3JhdGlvbkNvbG9yXCI6IDM1LCBcInRhYlNpemVcIjogNTUsIFwiaHlwaGVuc1wiOiA0MiwgXCJmb250RmVhdHVyZVNldHRpbmdzXCI6IDMzLCBcImJyZWFrQWZ0ZXJcIjogNTEsIFwiYnJlYWtCZWZvcmVcIjogNTEsIFwiYnJlYWtJbnNpZGVcIjogNTEsIFwiY29sdW1uQ291bnRcIjogNTEsIFwiY29sdW1uRmlsbFwiOiA1MSwgXCJjb2x1bW5HYXBcIjogNTEsIFwiY29sdW1uUnVsZVwiOiA1MSwgXCJjb2x1bW5SdWxlQ29sb3JcIjogNTEsIFwiY29sdW1uUnVsZVN0eWxlXCI6IDUxLCBcImNvbHVtblJ1bGVXaWR0aFwiOiA1MSwgXCJjb2x1bW5zXCI6IDUxLCBcImNvbHVtblNwYW5cIjogNTEsIFwiY29sdW1uV2lkdGhcIjogNTEgfSwgXCJvcGVyYVwiOiB7IFwiZmxleFwiOiAxNiwgXCJmbGV4QmFzaXNcIjogMTYsIFwiZmxleERpcmVjdGlvblwiOiAxNiwgXCJmbGV4R3Jvd1wiOiAxNiwgXCJmbGV4Rmxvd1wiOiAxNiwgXCJmbGV4U2hyaW5rXCI6IDE2LCBcImZsZXhXcmFwXCI6IDE2LCBcImFsaWduQ29udGVudFwiOiAxNiwgXCJhbGlnbkl0ZW1zXCI6IDE2LCBcImFsaWduU2VsZlwiOiAxNiwgXCJqdXN0aWZ5Q29udGVudFwiOiAxNiwgXCJvcmRlclwiOiAxNiwgXCJ0cmFuc2Zvcm1cIjogMjIsIFwidHJhbnNmb3JtT3JpZ2luXCI6IDIyLCBcInRyYW5zZm9ybU9yaWdpblhcIjogMjIsIFwidHJhbnNmb3JtT3JpZ2luWVwiOiAyMiwgXCJiYWNrZmFjZVZpc2liaWxpdHlcIjogMjIsIFwicGVyc3BlY3RpdmVcIjogMjIsIFwicGVyc3BlY3RpdmVPcmlnaW5cIjogMjIsIFwidHJhbnNmb3JtU3R5bGVcIjogMjIsIFwidHJhbnNmb3JtT3JpZ2luWlwiOiAyMiwgXCJhbmltYXRpb25cIjogMjksIFwiYW5pbWF0aW9uRGVsYXlcIjogMjksIFwiYW5pbWF0aW9uRGlyZWN0aW9uXCI6IDI5LCBcImFuaW1hdGlvbkZpbGxNb2RlXCI6IDI5LCBcImFuaW1hdGlvbkR1cmF0aW9uXCI6IDI5LCBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IDI5LCBcImFuaW1hdGlvbk5hbWVcIjogMjksIFwiYW5pbWF0aW9uUGxheVN0YXRlXCI6IDI5LCBcImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uXCI6IDI5LCBcImFwcGVhcmFuY2VcIjogNDUsIFwidXNlclNlbGVjdFwiOiA0MCwgXCJmb250S2VybmluZ1wiOiAxOSwgXCJ0ZXh0RW1waGFzaXNQb3NpdGlvblwiOiA0NSwgXCJ0ZXh0RW1waGFzaXNcIjogNDUsIFwidGV4dEVtcGhhc2lzU3R5bGVcIjogNDUsIFwidGV4dEVtcGhhc2lzQ29sb3JcIjogNDUsIFwiYm94RGVjb3JhdGlvbkJyZWFrXCI6IDQ1LCBcImNsaXBQYXRoXCI6IDQxLCBcIm1hc2tJbWFnZVwiOiA0NSwgXCJtYXNrTW9kZVwiOiA0NSwgXCJtYXNrUmVwZWF0XCI6IDQ1LCBcIm1hc2tQb3NpdGlvblwiOiA0NSwgXCJtYXNrQ2xpcFwiOiA0NSwgXCJtYXNrT3JpZ2luXCI6IDQ1LCBcIm1hc2tTaXplXCI6IDQ1LCBcIm1hc2tDb21wb3NpdGVcIjogNDUsIFwibWFza1wiOiA0NSwgXCJtYXNrQm9yZGVyU291cmNlXCI6IDQ1LCBcIm1hc2tCb3JkZXJNb2RlXCI6IDQ1LCBcIm1hc2tCb3JkZXJTbGljZVwiOiA0NSwgXCJtYXNrQm9yZGVyV2lkdGhcIjogNDUsIFwibWFza0JvcmRlck91dHNldFwiOiA0NSwgXCJtYXNrQm9yZGVyUmVwZWF0XCI6IDQ1LCBcIm1hc2tCb3JkZXJcIjogNDUsIFwibWFza1R5cGVcIjogNDUsIFwidGV4dERlY29yYXRpb25TdHlsZVwiOiA0MywgXCJ0ZXh0RGVjb3JhdGlvblNraXBcIjogNDMsIFwidGV4dERlY29yYXRpb25MaW5lXCI6IDQzLCBcInRleHREZWNvcmF0aW9uQ29sb3JcIjogNDMsIFwiZmlsdGVyXCI6IDM5LCBcImZvbnRGZWF0dXJlU2V0dGluZ3NcIjogMzQsIFwiYnJlYWtBZnRlclwiOiAzNiwgXCJicmVha0JlZm9yZVwiOiAzNiwgXCJicmVha0luc2lkZVwiOiAzNiwgXCJjb2x1bW5Db3VudFwiOiAzNiwgXCJjb2x1bW5GaWxsXCI6IDM2LCBcImNvbHVtbkdhcFwiOiAzNiwgXCJjb2x1bW5SdWxlXCI6IDM2LCBcImNvbHVtblJ1bGVDb2xvclwiOiAzNiwgXCJjb2x1bW5SdWxlU3R5bGVcIjogMzYsIFwiY29sdW1uUnVsZVdpZHRoXCI6IDM2LCBcImNvbHVtbnNcIjogMzYsIFwiY29sdW1uU3BhblwiOiAzNiwgXCJjb2x1bW5XaWR0aFwiOiAzNiB9LCBcImllXCI6IHsgXCJmbGV4XCI6IDEwLCBcImZsZXhEaXJlY3Rpb25cIjogMTAsIFwiZmxleEZsb3dcIjogMTAsIFwiZmxleFdyYXBcIjogMTAsIFwidHJhbnNmb3JtXCI6IDksIFwidHJhbnNmb3JtT3JpZ2luXCI6IDksIFwidHJhbnNmb3JtT3JpZ2luWFwiOiA5LCBcInRyYW5zZm9ybU9yaWdpbllcIjogOSwgXCJ1c2VyU2VsZWN0XCI6IDExLCBcIndyYXBGbG93XCI6IDExLCBcIndyYXBUaHJvdWdoXCI6IDExLCBcIndyYXBNYXJnaW5cIjogMTEsIFwic2Nyb2xsU25hcFR5cGVcIjogMTEsIFwic2Nyb2xsU25hcFBvaW50c1hcIjogMTEsIFwic2Nyb2xsU25hcFBvaW50c1lcIjogMTEsIFwic2Nyb2xsU25hcERlc3RpbmF0aW9uXCI6IDExLCBcInNjcm9sbFNuYXBDb29yZGluYXRlXCI6IDExLCBcInRvdWNoQWN0aW9uXCI6IDEwLCBcImh5cGhlbnNcIjogMTEsIFwiZmxvd0ludG9cIjogMTEsIFwiZmxvd0Zyb21cIjogMTEsIFwiYnJlYWtCZWZvcmVcIjogMTEsIFwiYnJlYWtBZnRlclwiOiAxMSwgXCJicmVha0luc2lkZVwiOiAxMSwgXCJyZWdpb25GcmFnbWVudFwiOiAxMSwgXCJncmlkVGVtcGxhdGVDb2x1bW5zXCI6IDExLCBcImdyaWRUZW1wbGF0ZVJvd3NcIjogMTEsIFwiZ3JpZFRlbXBsYXRlQXJlYXNcIjogMTEsIFwiZ3JpZFRlbXBsYXRlXCI6IDExLCBcImdyaWRBdXRvQ29sdW1uc1wiOiAxMSwgXCJncmlkQXV0b1Jvd3NcIjogMTEsIFwiZ3JpZEF1dG9GbG93XCI6IDExLCBcImdyaWRcIjogMTEsIFwiZ3JpZFJvd1N0YXJ0XCI6IDExLCBcImdyaWRDb2x1bW5TdGFydFwiOiAxMSwgXCJncmlkUm93RW5kXCI6IDExLCBcImdyaWRSb3dcIjogMTEsIFwiZ3JpZENvbHVtblwiOiAxMSwgXCJncmlkQ29sdW1uRW5kXCI6IDExLCBcImdyaWRDb2x1bW5HYXBcIjogMTEsIFwiZ3JpZFJvd0dhcFwiOiAxMSwgXCJncmlkQXJlYVwiOiAxMSwgXCJncmlkR2FwXCI6IDExLCBcInRleHRTaXplQWRqdXN0XCI6IDExIH0sIFwiZWRnZVwiOiB7IFwidXNlclNlbGVjdFwiOiAxNSwgXCJ3cmFwRmxvd1wiOiAxNSwgXCJ3cmFwVGhyb3VnaFwiOiAxNSwgXCJ3cmFwTWFyZ2luXCI6IDE1LCBcInNjcm9sbFNuYXBUeXBlXCI6IDE1LCBcInNjcm9sbFNuYXBQb2ludHNYXCI6IDE1LCBcInNjcm9sbFNuYXBQb2ludHNZXCI6IDE1LCBcInNjcm9sbFNuYXBEZXN0aW5hdGlvblwiOiAxNSwgXCJzY3JvbGxTbmFwQ29vcmRpbmF0ZVwiOiAxNSwgXCJoeXBoZW5zXCI6IDE1LCBcImZsb3dJbnRvXCI6IDE1LCBcImZsb3dGcm9tXCI6IDE1LCBcImJyZWFrQmVmb3JlXCI6IDE1LCBcImJyZWFrQWZ0ZXJcIjogMTUsIFwiYnJlYWtJbnNpZGVcIjogMTUsIFwicmVnaW9uRnJhZ21lbnRcIjogMTUsIFwiZ3JpZFRlbXBsYXRlQ29sdW1uc1wiOiAxNSwgXCJncmlkVGVtcGxhdGVSb3dzXCI6IDE1LCBcImdyaWRUZW1wbGF0ZUFyZWFzXCI6IDE1LCBcImdyaWRUZW1wbGF0ZVwiOiAxNSwgXCJncmlkQXV0b0NvbHVtbnNcIjogMTUsIFwiZ3JpZEF1dG9Sb3dzXCI6IDE1LCBcImdyaWRBdXRvRmxvd1wiOiAxNSwgXCJncmlkXCI6IDE1LCBcImdyaWRSb3dTdGFydFwiOiAxNSwgXCJncmlkQ29sdW1uU3RhcnRcIjogMTUsIFwiZ3JpZFJvd0VuZFwiOiAxNSwgXCJncmlkUm93XCI6IDE1LCBcImdyaWRDb2x1bW5cIjogMTUsIFwiZ3JpZENvbHVtbkVuZFwiOiAxNSwgXCJncmlkQ29sdW1uR2FwXCI6IDE1LCBcImdyaWRSb3dHYXBcIjogMTUsIFwiZ3JpZEFyZWFcIjogMTUsIFwiZ3JpZEdhcFwiOiAxNSB9LCBcImlvc19zYWZcIjogeyBcImZsZXhcIjogOC4xLCBcImZsZXhCYXNpc1wiOiA4LjEsIFwiZmxleERpcmVjdGlvblwiOiA4LjEsIFwiZmxleEdyb3dcIjogOC4xLCBcImZsZXhGbG93XCI6IDguMSwgXCJmbGV4U2hyaW5rXCI6IDguMSwgXCJmbGV4V3JhcFwiOiA4LjEsIFwiYWxpZ25Db250ZW50XCI6IDguMSwgXCJhbGlnbkl0ZW1zXCI6IDguMSwgXCJhbGlnblNlbGZcIjogOC4xLCBcImp1c3RpZnlDb250ZW50XCI6IDguMSwgXCJvcmRlclwiOiA4LjEsIFwidHJhbnNpdGlvblwiOiA2LCBcInRyYW5zaXRpb25EZWxheVwiOiA2LCBcInRyYW5zaXRpb25EdXJhdGlvblwiOiA2LCBcInRyYW5zaXRpb25Qcm9wZXJ0eVwiOiA2LCBcInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblwiOiA2LCBcInRyYW5zZm9ybVwiOiA4LjEsIFwidHJhbnNmb3JtT3JpZ2luXCI6IDguMSwgXCJ0cmFuc2Zvcm1PcmlnaW5YXCI6IDguMSwgXCJ0cmFuc2Zvcm1PcmlnaW5ZXCI6IDguMSwgXCJiYWNrZmFjZVZpc2liaWxpdHlcIjogOC4xLCBcInBlcnNwZWN0aXZlXCI6IDguMSwgXCJwZXJzcGVjdGl2ZU9yaWdpblwiOiA4LjEsIFwidHJhbnNmb3JtU3R5bGVcIjogOC4xLCBcInRyYW5zZm9ybU9yaWdpblpcIjogOC4xLCBcImFuaW1hdGlvblwiOiA4LjEsIFwiYW5pbWF0aW9uRGVsYXlcIjogOC4xLCBcImFuaW1hdGlvbkRpcmVjdGlvblwiOiA4LjEsIFwiYW5pbWF0aW9uRmlsbE1vZGVcIjogOC4xLCBcImFuaW1hdGlvbkR1cmF0aW9uXCI6IDguMSwgXCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiA4LjEsIFwiYW5pbWF0aW9uTmFtZVwiOiA4LjEsIFwiYW5pbWF0aW9uUGxheVN0YXRlXCI6IDguMSwgXCJhbmltYXRpb25UaW1pbmdGdW5jdGlvblwiOiA4LjEsIFwiYXBwZWFyYW5jZVwiOiAxMCwgXCJ1c2VyU2VsZWN0XCI6IDEwLCBcImJhY2tkcm9wRmlsdGVyXCI6IDEwLCBcImZvbnRLZXJuaW5nXCI6IDEwLCBcInNjcm9sbFNuYXBUeXBlXCI6IDEwLCBcInNjcm9sbFNuYXBQb2ludHNYXCI6IDEwLCBcInNjcm9sbFNuYXBQb2ludHNZXCI6IDEwLCBcInNjcm9sbFNuYXBEZXN0aW5hdGlvblwiOiAxMCwgXCJzY3JvbGxTbmFwQ29vcmRpbmF0ZVwiOiAxMCwgXCJib3hEZWNvcmF0aW9uQnJlYWtcIjogMTAsIFwiY2xpcFBhdGhcIjogMTAsIFwibWFza0ltYWdlXCI6IDEwLCBcIm1hc2tNb2RlXCI6IDEwLCBcIm1hc2tSZXBlYXRcIjogMTAsIFwibWFza1Bvc2l0aW9uXCI6IDEwLCBcIm1hc2tDbGlwXCI6IDEwLCBcIm1hc2tPcmlnaW5cIjogMTAsIFwibWFza1NpemVcIjogMTAsIFwibWFza0NvbXBvc2l0ZVwiOiAxMCwgXCJtYXNrXCI6IDEwLCBcIm1hc2tCb3JkZXJTb3VyY2VcIjogMTAsIFwibWFza0JvcmRlck1vZGVcIjogMTAsIFwibWFza0JvcmRlclNsaWNlXCI6IDEwLCBcIm1hc2tCb3JkZXJXaWR0aFwiOiAxMCwgXCJtYXNrQm9yZGVyT3V0c2V0XCI6IDEwLCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogMTAsIFwibWFza0JvcmRlclwiOiAxMCwgXCJtYXNrVHlwZVwiOiAxMCwgXCJ0ZXh0U2l6ZUFkanVzdFwiOiAxMCwgXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCI6IDEwLCBcInRleHREZWNvcmF0aW9uU2tpcFwiOiAxMCwgXCJ0ZXh0RGVjb3JhdGlvbkxpbmVcIjogMTAsIFwidGV4dERlY29yYXRpb25Db2xvclwiOiAxMCwgXCJzaGFwZUltYWdlVGhyZXNob2xkXCI6IDEwLCBcInNoYXBlSW1hZ2VNYXJnaW5cIjogMTAsIFwic2hhcGVJbWFnZU91dHNpZGVcIjogMTAsIFwiZmlsdGVyXCI6IDksIFwiaHlwaGVuc1wiOiAxMCwgXCJmbG93SW50b1wiOiAxMCwgXCJmbG93RnJvbVwiOiAxMCwgXCJicmVha0JlZm9yZVwiOiA4LjEsIFwiYnJlYWtBZnRlclwiOiA4LjEsIFwiYnJlYWtJbnNpZGVcIjogOC4xLCBcInJlZ2lvbkZyYWdtZW50XCI6IDEwLCBcImNvbHVtbkNvdW50XCI6IDguMSwgXCJjb2x1bW5GaWxsXCI6IDguMSwgXCJjb2x1bW5HYXBcIjogOC4xLCBcImNvbHVtblJ1bGVcIjogOC4xLCBcImNvbHVtblJ1bGVDb2xvclwiOiA4LjEsIFwiY29sdW1uUnVsZVN0eWxlXCI6IDguMSwgXCJjb2x1bW5SdWxlV2lkdGhcIjogOC4xLCBcImNvbHVtbnNcIjogOC4xLCBcImNvbHVtblNwYW5cIjogOC4xLCBcImNvbHVtbldpZHRoXCI6IDguMSB9LCBcImFuZHJvaWRcIjogeyBcImJvcmRlckltYWdlXCI6IDQuMiwgXCJib3JkZXJJbWFnZU91dHNldFwiOiA0LjIsIFwiYm9yZGVySW1hZ2VSZXBlYXRcIjogNC4yLCBcImJvcmRlckltYWdlU2xpY2VcIjogNC4yLCBcImJvcmRlckltYWdlU291cmNlXCI6IDQuMiwgXCJib3JkZXJJbWFnZVdpZHRoXCI6IDQuMiwgXCJmbGV4XCI6IDQuMiwgXCJmbGV4QmFzaXNcIjogNC4yLCBcImZsZXhEaXJlY3Rpb25cIjogNC4yLCBcImZsZXhHcm93XCI6IDQuMiwgXCJmbGV4Rmxvd1wiOiA0LjIsIFwiZmxleFNocmlua1wiOiA0LjIsIFwiZmxleFdyYXBcIjogNC4yLCBcImFsaWduQ29udGVudFwiOiA0LjIsIFwiYWxpZ25JdGVtc1wiOiA0LjIsIFwiYWxpZ25TZWxmXCI6IDQuMiwgXCJqdXN0aWZ5Q29udGVudFwiOiA0LjIsIFwib3JkZXJcIjogNC4yLCBcInRyYW5zaXRpb25cIjogNC4yLCBcInRyYW5zaXRpb25EZWxheVwiOiA0LjIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCI6IDQuMiwgXCJ0cmFuc2l0aW9uUHJvcGVydHlcIjogNC4yLCBcInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblwiOiA0LjIsIFwidHJhbnNmb3JtXCI6IDQuNCwgXCJ0cmFuc2Zvcm1PcmlnaW5cIjogNC40LCBcInRyYW5zZm9ybU9yaWdpblhcIjogNC40LCBcInRyYW5zZm9ybU9yaWdpbllcIjogNC40LCBcImJhY2tmYWNlVmlzaWJpbGl0eVwiOiA0LjQsIFwicGVyc3BlY3RpdmVcIjogNC40LCBcInBlcnNwZWN0aXZlT3JpZ2luXCI6IDQuNCwgXCJ0cmFuc2Zvcm1TdHlsZVwiOiA0LjQsIFwidHJhbnNmb3JtT3JpZ2luWlwiOiA0LjQsIFwiYW5pbWF0aW9uXCI6IDQuNCwgXCJhbmltYXRpb25EZWxheVwiOiA0LjQsIFwiYW5pbWF0aW9uRGlyZWN0aW9uXCI6IDQuNCwgXCJhbmltYXRpb25GaWxsTW9kZVwiOiA0LjQsIFwiYW5pbWF0aW9uRHVyYXRpb25cIjogNC40LCBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IDQuNCwgXCJhbmltYXRpb25OYW1lXCI6IDQuNCwgXCJhbmltYXRpb25QbGF5U3RhdGVcIjogNC40LCBcImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uXCI6IDQuNCwgXCJhcHBlYXJhbmNlXCI6IDUzLCBcInVzZXJTZWxlY3RcIjogNTMsIFwiZm9udEtlcm5pbmdcIjogNC40LCBcInRleHRFbXBoYXNpc1Bvc2l0aW9uXCI6IDUzLCBcInRleHRFbXBoYXNpc1wiOiA1MywgXCJ0ZXh0RW1waGFzaXNTdHlsZVwiOiA1MywgXCJ0ZXh0RW1waGFzaXNDb2xvclwiOiA1MywgXCJib3hEZWNvcmF0aW9uQnJlYWtcIjogNTMsIFwiY2xpcFBhdGhcIjogNTMsIFwibWFza0ltYWdlXCI6IDUzLCBcIm1hc2tNb2RlXCI6IDUzLCBcIm1hc2tSZXBlYXRcIjogNTMsIFwibWFza1Bvc2l0aW9uXCI6IDUzLCBcIm1hc2tDbGlwXCI6IDUzLCBcIm1hc2tPcmlnaW5cIjogNTMsIFwibWFza1NpemVcIjogNTMsIFwibWFza0NvbXBvc2l0ZVwiOiA1MywgXCJtYXNrXCI6IDUzLCBcIm1hc2tCb3JkZXJTb3VyY2VcIjogNTMsIFwibWFza0JvcmRlck1vZGVcIjogNTMsIFwibWFza0JvcmRlclNsaWNlXCI6IDUzLCBcIm1hc2tCb3JkZXJXaWR0aFwiOiA1MywgXCJtYXNrQm9yZGVyT3V0c2V0XCI6IDUzLCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogNTMsIFwibWFza0JvcmRlclwiOiA1MywgXCJtYXNrVHlwZVwiOiA1MywgXCJmaWx0ZXJcIjogNC40LCBcImZvbnRGZWF0dXJlU2V0dGluZ3NcIjogNC40LCBcImJyZWFrQWZ0ZXJcIjogNTMsIFwiYnJlYWtCZWZvcmVcIjogNTMsIFwiYnJlYWtJbnNpZGVcIjogNTMsIFwiY29sdW1uQ291bnRcIjogNTMsIFwiY29sdW1uRmlsbFwiOiA1MywgXCJjb2x1bW5HYXBcIjogNTMsIFwiY29sdW1uUnVsZVwiOiA1MywgXCJjb2x1bW5SdWxlQ29sb3JcIjogNTMsIFwiY29sdW1uUnVsZVN0eWxlXCI6IDUzLCBcImNvbHVtblJ1bGVXaWR0aFwiOiA1MywgXCJjb2x1bW5zXCI6IDUzLCBcImNvbHVtblNwYW5cIjogNTMsIFwiY29sdW1uV2lkdGhcIjogNTMgfSwgXCJhbmRfY2hyXCI6IHsgXCJhcHBlYXJhbmNlXCI6IDU2LCBcInRleHRFbXBoYXNpc1Bvc2l0aW9uXCI6IDU2LCBcInRleHRFbXBoYXNpc1wiOiA1NiwgXCJ0ZXh0RW1waGFzaXNTdHlsZVwiOiA1NiwgXCJ0ZXh0RW1waGFzaXNDb2xvclwiOiA1NiwgXCJib3hEZWNvcmF0aW9uQnJlYWtcIjogNTYsIFwibWFza0ltYWdlXCI6IDU2LCBcIm1hc2tNb2RlXCI6IDU2LCBcIm1hc2tSZXBlYXRcIjogNTYsIFwibWFza1Bvc2l0aW9uXCI6IDU2LCBcIm1hc2tDbGlwXCI6IDU2LCBcIm1hc2tPcmlnaW5cIjogNTYsIFwibWFza1NpemVcIjogNTYsIFwibWFza0NvbXBvc2l0ZVwiOiA1NiwgXCJtYXNrXCI6IDU2LCBcIm1hc2tCb3JkZXJTb3VyY2VcIjogNTYsIFwibWFza0JvcmRlck1vZGVcIjogNTYsIFwibWFza0JvcmRlclNsaWNlXCI6IDU2LCBcIm1hc2tCb3JkZXJXaWR0aFwiOiA1NiwgXCJtYXNrQm9yZGVyT3V0c2V0XCI6IDU2LCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogNTYsIFwibWFza0JvcmRlclwiOiA1NiwgXCJtYXNrVHlwZVwiOiA1NiwgXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCI6IDU2LCBcInRleHREZWNvcmF0aW9uU2tpcFwiOiA1NiwgXCJ0ZXh0RGVjb3JhdGlvbkxpbmVcIjogNTYsIFwidGV4dERlY29yYXRpb25Db2xvclwiOiA1NiB9LCBcImFuZF91Y1wiOiB7IFwiZmxleFwiOiAxMSwgXCJmbGV4QmFzaXNcIjogMTEsIFwiZmxleERpcmVjdGlvblwiOiAxMSwgXCJmbGV4R3Jvd1wiOiAxMSwgXCJmbGV4Rmxvd1wiOiAxMSwgXCJmbGV4U2hyaW5rXCI6IDExLCBcImZsZXhXcmFwXCI6IDExLCBcImFsaWduQ29udGVudFwiOiAxMSwgXCJhbGlnbkl0ZW1zXCI6IDExLCBcImFsaWduU2VsZlwiOiAxMSwgXCJqdXN0aWZ5Q29udGVudFwiOiAxMSwgXCJvcmRlclwiOiAxMSwgXCJ0cmFuc2l0aW9uXCI6IDExLCBcInRyYW5zaXRpb25EZWxheVwiOiAxMSwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIjogMTEsIFwidHJhbnNpdGlvblByb3BlcnR5XCI6IDExLCBcInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblwiOiAxMSwgXCJ0cmFuc2Zvcm1cIjogMTEsIFwidHJhbnNmb3JtT3JpZ2luXCI6IDExLCBcInRyYW5zZm9ybU9yaWdpblhcIjogMTEsIFwidHJhbnNmb3JtT3JpZ2luWVwiOiAxMSwgXCJiYWNrZmFjZVZpc2liaWxpdHlcIjogMTEsIFwicGVyc3BlY3RpdmVcIjogMTEsIFwicGVyc3BlY3RpdmVPcmlnaW5cIjogMTEsIFwidHJhbnNmb3JtU3R5bGVcIjogMTEsIFwidHJhbnNmb3JtT3JpZ2luWlwiOiAxMSwgXCJhbmltYXRpb25cIjogMTEsIFwiYW5pbWF0aW9uRGVsYXlcIjogMTEsIFwiYW5pbWF0aW9uRGlyZWN0aW9uXCI6IDExLCBcImFuaW1hdGlvbkZpbGxNb2RlXCI6IDExLCBcImFuaW1hdGlvbkR1cmF0aW9uXCI6IDExLCBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IDExLCBcImFuaW1hdGlvbk5hbWVcIjogMTEsIFwiYW5pbWF0aW9uUGxheVN0YXRlXCI6IDExLCBcImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uXCI6IDExLCBcImFwcGVhcmFuY2VcIjogMTEsIFwidXNlclNlbGVjdFwiOiAxMSwgXCJmb250S2VybmluZ1wiOiAxMSwgXCJ0ZXh0RW1waGFzaXNQb3NpdGlvblwiOiAxMSwgXCJ0ZXh0RW1waGFzaXNcIjogMTEsIFwidGV4dEVtcGhhc2lzU3R5bGVcIjogMTEsIFwidGV4dEVtcGhhc2lzQ29sb3JcIjogMTEsIFwibWFza0ltYWdlXCI6IDExLCBcIm1hc2tNb2RlXCI6IDExLCBcIm1hc2tSZXBlYXRcIjogMTEsIFwibWFza1Bvc2l0aW9uXCI6IDExLCBcIm1hc2tDbGlwXCI6IDExLCBcIm1hc2tPcmlnaW5cIjogMTEsIFwibWFza1NpemVcIjogMTEsIFwibWFza0NvbXBvc2l0ZVwiOiAxMSwgXCJtYXNrXCI6IDExLCBcIm1hc2tCb3JkZXJTb3VyY2VcIjogMTEsIFwibWFza0JvcmRlck1vZGVcIjogMTEsIFwibWFza0JvcmRlclNsaWNlXCI6IDExLCBcIm1hc2tCb3JkZXJXaWR0aFwiOiAxMSwgXCJtYXNrQm9yZGVyT3V0c2V0XCI6IDExLCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogMTEsIFwibWFza0JvcmRlclwiOiAxMSwgXCJtYXNrVHlwZVwiOiAxMSwgXCJ0ZXh0U2l6ZUFkanVzdFwiOiAxMSwgXCJmaWx0ZXJcIjogMTEsIFwiaHlwaGVuc1wiOiAxMSwgXCJmbG93SW50b1wiOiAxMSwgXCJmbG93RnJvbVwiOiAxMSwgXCJicmVha0JlZm9yZVwiOiAxMSwgXCJicmVha0FmdGVyXCI6IDExLCBcImJyZWFrSW5zaWRlXCI6IDExLCBcInJlZ2lvbkZyYWdtZW50XCI6IDExLCBcImZvbnRGZWF0dXJlU2V0dGluZ3NcIjogMTEsIFwiY29sdW1uQ291bnRcIjogMTEsIFwiY29sdW1uRmlsbFwiOiAxMSwgXCJjb2x1bW5HYXBcIjogMTEsIFwiY29sdW1uUnVsZVwiOiAxMSwgXCJjb2x1bW5SdWxlQ29sb3JcIjogMTEsIFwiY29sdW1uUnVsZVN0eWxlXCI6IDExLCBcImNvbHVtblJ1bGVXaWR0aFwiOiAxMSwgXCJjb2x1bW5zXCI6IDExLCBcImNvbHVtblNwYW5cIjogMTEsIFwiY29sdW1uV2lkdGhcIjogMTEgfSwgXCJvcF9taW5pXCI6IHt9IH1cbn07IC8qIGVzbGludC1kaXNhYmxlICovIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0UHJlZml4ZWRLZXlmcmFtZXM7XG5mdW5jdGlvbiBnZXRQcmVmaXhlZEtleWZyYW1lcyhicm93c2VyTmFtZSwgYnJvd3NlclZlcnNpb24sIGNzc1ByZWZpeCkge1xuICB2YXIgcHJlZml4ZWRLZXlmcmFtZXMgPSAna2V5ZnJhbWVzJztcblxuICBpZiAoYnJvd3Nlck5hbWUgPT09ICdjaHJvbWUnICYmIGJyb3dzZXJWZXJzaW9uIDwgNDMgfHwgKGJyb3dzZXJOYW1lID09PSAnc2FmYXJpJyB8fCBicm93c2VyTmFtZSA9PT0gJ2lvc19zYWYnKSAmJiBicm93c2VyVmVyc2lvbiA8IDkgfHwgYnJvd3Nlck5hbWUgPT09ICdvcGVyYScgJiYgYnJvd3NlclZlcnNpb24gPCAzMCB8fCBicm93c2VyTmFtZSA9PT0gJ2FuZHJvaWQnICYmIGJyb3dzZXJWZXJzaW9uIDw9IDQuNCB8fCBicm93c2VyTmFtZSA9PT0gJ2FuZF91YycpIHtcbiAgICByZXR1cm4gY3NzUHJlZml4ICsgcHJlZml4ZWRLZXlmcmFtZXM7XG4gIH1cbiAgcmV0dXJuIHByZWZpeGVkS2V5ZnJhbWVzO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR0aHJvdyBuZXcgRXJyb3IoXCJkZWZpbmUgY2Fubm90IGJlIHVzZWQgaW5kaXJlY3RcIik7XHJcbn07XHJcbiIsIi8qIVxuICogQm93c2VyIC0gYSBicm93c2VyIGRldGVjdG9yXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZGVkL2Jvd3NlclxuICogTUlUIExpY2Vuc2UgfCAoYykgRHVzdGluIERpYXogMjAxNVxuICovXG5cbiFmdW5jdGlvbiAocm9vdCwgbmFtZSwgZGVmaW5pdGlvbikge1xuICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKClcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIGRlZmluZShuYW1lLCBkZWZpbml0aW9uKVxuICBlbHNlIHJvb3RbbmFtZV0gPSBkZWZpbml0aW9uKClcbn0odGhpcywgJ2Jvd3NlcicsIGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAgKiBTZWUgdXNlcmFnZW50cy5qcyBmb3IgZXhhbXBsZXMgb2YgbmF2aWdhdG9yLnVzZXJBZ2VudFxuICAgICovXG5cbiAgdmFyIHQgPSB0cnVlXG5cbiAgZnVuY3Rpb24gZGV0ZWN0KHVhKSB7XG5cbiAgICBmdW5jdGlvbiBnZXRGaXJzdE1hdGNoKHJlZ2V4KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB1YS5tYXRjaChyZWdleCk7XG4gICAgICByZXR1cm4gKG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2hbMV0pIHx8ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNlY29uZE1hdGNoKHJlZ2V4KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB1YS5tYXRjaChyZWdleCk7XG4gICAgICByZXR1cm4gKG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2hbMl0pIHx8ICcnO1xuICAgIH1cblxuICAgIHZhciBpb3NkZXZpY2UgPSBnZXRGaXJzdE1hdGNoKC8oaXBvZHxpcGhvbmV8aXBhZCkvaSkudG9Mb3dlckNhc2UoKVxuICAgICAgLCBsaWtlQW5kcm9pZCA9IC9saWtlIGFuZHJvaWQvaS50ZXN0KHVhKVxuICAgICAgLCBhbmRyb2lkID0gIWxpa2VBbmRyb2lkICYmIC9hbmRyb2lkL2kudGVzdCh1YSlcbiAgICAgICwgbmV4dXNNb2JpbGUgPSAvbmV4dXNcXHMqWzAtNl1cXHMqL2kudGVzdCh1YSlcbiAgICAgICwgbmV4dXNUYWJsZXQgPSAhbmV4dXNNb2JpbGUgJiYgL25leHVzXFxzKlswLTldKy9pLnRlc3QodWEpXG4gICAgICAsIGNocm9tZW9zID0gL0NyT1MvLnRlc3QodWEpXG4gICAgICAsIHNpbGsgPSAvc2lsay9pLnRlc3QodWEpXG4gICAgICAsIHNhaWxmaXNoID0gL3NhaWxmaXNoL2kudGVzdCh1YSlcbiAgICAgICwgdGl6ZW4gPSAvdGl6ZW4vaS50ZXN0KHVhKVxuICAgICAgLCB3ZWJvcyA9IC8od2VifGhwdylvcy9pLnRlc3QodWEpXG4gICAgICAsIHdpbmRvd3NwaG9uZSA9IC93aW5kb3dzIHBob25lL2kudGVzdCh1YSlcbiAgICAgICwgc2Ftc3VuZ0Jyb3dzZXIgPSAvU2Ftc3VuZ0Jyb3dzZXIvaS50ZXN0KHVhKVxuICAgICAgLCB3aW5kb3dzID0gIXdpbmRvd3NwaG9uZSAmJiAvd2luZG93cy9pLnRlc3QodWEpXG4gICAgICAsIG1hYyA9ICFpb3NkZXZpY2UgJiYgIXNpbGsgJiYgL21hY2ludG9zaC9pLnRlc3QodWEpXG4gICAgICAsIGxpbnV4ID0gIWFuZHJvaWQgJiYgIXNhaWxmaXNoICYmICF0aXplbiAmJiAhd2Vib3MgJiYgL2xpbnV4L2kudGVzdCh1YSlcbiAgICAgICwgZWRnZVZlcnNpb24gPSBnZXRTZWNvbmRNYXRjaCgvZWRnKFtlYV18aW9zKVxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgICwgdmVyc2lvbklkZW50aWZpZXIgPSBnZXRGaXJzdE1hdGNoKC92ZXJzaW9uXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgLCB0YWJsZXQgPSAvdGFibGV0L2kudGVzdCh1YSkgJiYgIS90YWJsZXQgcGMvaS50ZXN0KHVhKVxuICAgICAgLCBtb2JpbGUgPSAhdGFibGV0ICYmIC9bXi1dbW9iaS9pLnRlc3QodWEpXG4gICAgICAsIHhib3ggPSAveGJveC9pLnRlc3QodWEpXG4gICAgICAsIHJlc3VsdFxuXG4gICAgaWYgKC9vcGVyYS9pLnRlc3QodWEpKSB7XG4gICAgICAvLyAgYW4gb2xkIE9wZXJhXG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdPcGVyYSdcbiAgICAgICwgb3BlcmE6IHRcbiAgICAgICwgdmVyc2lvbjogdmVyc2lvbklkZW50aWZpZXIgfHwgZ2V0Rmlyc3RNYXRjaCgvKD86b3BlcmF8b3ByfG9waW9zKVtcXHNcXC9dKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoL29wclxcL3xvcGlvcy9pLnRlc3QodWEpKSB7XG4gICAgICAvLyBhIG5ldyBPcGVyYVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnT3BlcmEnXG4gICAgICAgICwgb3BlcmE6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpvcHJ8b3Bpb3MpW1xcc1xcL10oXFxkKyhcXC5cXGQrKT8pL2kpIHx8IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9TYW1zdW5nQnJvd3Nlci9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdTYW1zdW5nIEludGVybmV0IGZvciBBbmRyb2lkJ1xuICAgICAgICAsIHNhbXN1bmdCcm93c2VyOiB0XG4gICAgICAgICwgdmVyc2lvbjogdmVyc2lvbklkZW50aWZpZXIgfHwgZ2V0Rmlyc3RNYXRjaCgvKD86U2Ftc3VuZ0Jyb3dzZXIpW1xcc1xcL10oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9jb2FzdC9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdPcGVyYSBDb2FzdCdcbiAgICAgICAgLCBjb2FzdDogdFxuICAgICAgICAsIHZlcnNpb246IHZlcnNpb25JZGVudGlmaWVyIHx8IGdldEZpcnN0TWF0Y2goLyg/OmNvYXN0KVtcXHNcXC9dKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgveWFicm93c2VyL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1lhbmRleCBCcm93c2VyJ1xuICAgICAgLCB5YW5kZXhicm93c2VyOiB0XG4gICAgICAsIHZlcnNpb246IHZlcnNpb25JZGVudGlmaWVyIHx8IGdldEZpcnN0TWF0Y2goLyg/OnlhYnJvd3NlcilbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL3VjYnJvd3Nlci9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgbmFtZTogJ1VDIEJyb3dzZXInXG4gICAgICAgICwgdWNicm93c2VyOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86dWNicm93c2VyKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9teGlvcy9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdNYXh0aG9uJ1xuICAgICAgICAsIG1heHRob246IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpteGlvcylbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvZXBpcGhhbnkvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnRXBpcGhhbnknXG4gICAgICAgICwgZXBpcGhhbnk6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzplcGlwaGFueSlbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvcHVmZmluL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1B1ZmZpbidcbiAgICAgICAgLCBwdWZmaW46IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpwdWZmaW4pW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL3NsZWlwbmlyL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1NsZWlwbmlyJ1xuICAgICAgICAsIHNsZWlwbmlyOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86c2xlaXBuaXIpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL2stbWVsZW9uL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0stTWVsZW9uJ1xuICAgICAgICAsIGtNZWxlb246IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzprLW1lbGVvbilbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh3aW5kb3dzcGhvbmUpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1dpbmRvd3MgUGhvbmUnXG4gICAgICAsIG9zbmFtZTogJ1dpbmRvd3MgUGhvbmUnXG4gICAgICAsIHdpbmRvd3NwaG9uZTogdFxuICAgICAgfVxuICAgICAgaWYgKGVkZ2VWZXJzaW9uKSB7XG4gICAgICAgIHJlc3VsdC5tc2VkZ2UgPSB0XG4gICAgICAgIHJlc3VsdC52ZXJzaW9uID0gZWRnZVZlcnNpb25cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXN1bHQubXNpZSA9IHRcbiAgICAgICAgcmVzdWx0LnZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9pZW1vYmlsZVxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL21zaWV8dHJpZGVudC9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdJbnRlcm5ldCBFeHBsb3JlcidcbiAgICAgICwgbXNpZTogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzptc2llIHxydjopKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2hyb21lb3MpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0Nocm9tZSdcbiAgICAgICwgb3NuYW1lOiAnQ2hyb21lIE9TJ1xuICAgICAgLCBjaHJvbWVvczogdFxuICAgICAgLCBjaHJvbWVCb29rOiB0XG4gICAgICAsIGNocm9tZTogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpjaHJvbWV8Y3Jpb3N8Y3JtbylcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgvZWRnKFtlYV18aW9zKS9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdNaWNyb3NvZnQgRWRnZSdcbiAgICAgICwgbXNlZGdlOiB0XG4gICAgICAsIHZlcnNpb246IGVkZ2VWZXJzaW9uXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC92aXZhbGRpL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1ZpdmFsZGknXG4gICAgICAgICwgdml2YWxkaTogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goL3ZpdmFsZGlcXC8oXFxkKyhcXC5cXGQrKT8pL2kpIHx8IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHNhaWxmaXNoKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdTYWlsZmlzaCdcbiAgICAgICwgb3NuYW1lOiAnU2FpbGZpc2ggT1MnXG4gICAgICAsIHNhaWxmaXNoOiB0XG4gICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goL3NhaWxmaXNoXFxzP2Jyb3dzZXJcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9zZWFtb25rZXlcXC8vaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnU2VhTW9ua2V5J1xuICAgICAgLCBzZWFtb25rZXk6IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvc2VhbW9ua2V5XFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvZmlyZWZveHxpY2V3ZWFzZWx8Znhpb3MvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnRmlyZWZveCdcbiAgICAgICwgZmlyZWZveDogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpmaXJlZm94fGljZXdlYXNlbHxmeGlvcylbIFxcL10oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgICBpZiAoL1xcKChtb2JpbGV8dGFibGV0KTtbXlxcKV0qcnY6W1xcZFxcLl0rXFwpL2kudGVzdCh1YSkpIHtcbiAgICAgICAgcmVzdWx0LmZpcmVmb3hvcyA9IHRcbiAgICAgICAgcmVzdWx0Lm9zbmFtZSA9ICdGaXJlZm94IE9TJ1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChzaWxrKSB7XG4gICAgICByZXN1bHQgPSAge1xuICAgICAgICBuYW1lOiAnQW1hem9uIFNpbGsnXG4gICAgICAsIHNpbGs6IHRcbiAgICAgICwgdmVyc2lvbiA6IGdldEZpcnN0TWF0Y2goL3NpbGtcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9waGFudG9tL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1BoYW50b21KUydcbiAgICAgICwgcGhhbnRvbTogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC9waGFudG9tanNcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9zbGltZXJqcy9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdTbGltZXJKUydcbiAgICAgICAgLCBzbGltZXI6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC9zbGltZXJqc1xcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL2JsYWNrYmVycnl8XFxiYmJcXGQrL2kudGVzdCh1YSkgfHwgL3JpbVxcc3RhYmxldC9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdCbGFja0JlcnJ5J1xuICAgICAgLCBvc25hbWU6ICdCbGFja0JlcnJ5IE9TJ1xuICAgICAgLCBibGFja2JlcnJ5OiB0XG4gICAgICAsIHZlcnNpb246IHZlcnNpb25JZGVudGlmaWVyIHx8IGdldEZpcnN0TWF0Y2goL2JsYWNrYmVycnlbXFxkXStcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHdlYm9zKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdXZWJPUydcbiAgICAgICwgb3NuYW1lOiAnV2ViT1MnXG4gICAgICAsIHdlYm9zOiB0XG4gICAgICAsIHZlcnNpb246IHZlcnNpb25JZGVudGlmaWVyIHx8IGdldEZpcnN0TWF0Y2goL3coPzplYik/b3Nicm93c2VyXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfTtcbiAgICAgIC90b3VjaHBhZFxcLy9pLnRlc3QodWEpICYmIChyZXN1bHQudG91Y2hwYWQgPSB0KVxuICAgIH1cbiAgICBlbHNlIGlmICgvYmFkYS9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdCYWRhJ1xuICAgICAgLCBvc25hbWU6ICdCYWRhJ1xuICAgICAgLCBiYWRhOiB0XG4gICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goL2RvbGZpblxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKHRpemVuKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdUaXplbidcbiAgICAgICwgb3NuYW1lOiAnVGl6ZW4nXG4gICAgICAsIHRpemVuOiB0XG4gICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OnRpemVuXFxzPyk/YnJvd3NlclxcLyhcXGQrKFxcLlxcZCspPykvaSkgfHwgdmVyc2lvbklkZW50aWZpZXJcbiAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKC9xdXB6aWxsYS9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdRdXBaaWxsYSdcbiAgICAgICAgLCBxdXB6aWxsYTogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OnF1cHppbGxhKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpIHx8IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9jaHJvbWl1bS9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdDaHJvbWl1bSdcbiAgICAgICAgLCBjaHJvbWl1bTogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OmNocm9taXVtKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKT8pL2kpIHx8IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9jaHJvbWV8Y3Jpb3N8Y3Jtby9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdDaHJvbWUnXG4gICAgICAgICwgY2hyb21lOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86Y2hyb21lfGNyaW9zfGNybW8pXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChhbmRyb2lkKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdBbmRyb2lkJ1xuICAgICAgICAsIHZlcnNpb246IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9zYWZhcml8YXBwbGV3ZWJraXQvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnU2FmYXJpJ1xuICAgICAgLCBzYWZhcmk6IHRcbiAgICAgIH1cbiAgICAgIGlmICh2ZXJzaW9uSWRlbnRpZmllcikge1xuICAgICAgICByZXN1bHQudmVyc2lvbiA9IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlvc2RldmljZSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lIDogaW9zZGV2aWNlID09ICdpcGhvbmUnID8gJ2lQaG9uZScgOiBpb3NkZXZpY2UgPT0gJ2lwYWQnID8gJ2lQYWQnIDogJ2lQb2QnXG4gICAgICB9XG4gICAgICAvLyBXVEY6IHZlcnNpb24gaXMgbm90IHBhcnQgb2YgdXNlciBhZ2VudCBpbiB3ZWIgYXBwc1xuICAgICAgaWYgKHZlcnNpb25JZGVudGlmaWVyKSB7XG4gICAgICAgIHJlc3VsdC52ZXJzaW9uID0gdmVyc2lvbklkZW50aWZpZXJcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZigvZ29vZ2xlYm90L2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0dvb2dsZWJvdCdcbiAgICAgICwgZ29vZ2xlYm90OiB0XG4gICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goL2dvb2dsZWJvdFxcLyhcXGQrKFxcLlxcZCspKS9pKSB8fCB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogZ2V0Rmlyc3RNYXRjaCgvXiguKilcXC8oLiopIC8pLFxuICAgICAgICB2ZXJzaW9uOiBnZXRTZWNvbmRNYXRjaCgvXiguKilcXC8oLiopIC8pXG4gICAgIH07XG4gICB9XG5cbiAgICAvLyBzZXQgd2Via2l0IG9yIGdlY2tvIGZsYWcgZm9yIGJyb3dzZXJzIGJhc2VkIG9uIHRoZXNlIGVuZ2luZXNcbiAgICBpZiAoIXJlc3VsdC5tc2VkZ2UgJiYgLyhhcHBsZSk/d2Via2l0L2kudGVzdCh1YSkpIHtcbiAgICAgIGlmICgvKGFwcGxlKT93ZWJraXRcXC81MzdcXC4zNi9pLnRlc3QodWEpKSB7XG4gICAgICAgIHJlc3VsdC5uYW1lID0gcmVzdWx0Lm5hbWUgfHwgXCJCbGlua1wiXG4gICAgICAgIHJlc3VsdC5ibGluayA9IHRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5uYW1lID0gcmVzdWx0Lm5hbWUgfHwgXCJXZWJraXRcIlxuICAgICAgICByZXN1bHQud2Via2l0ID0gdFxuICAgICAgfVxuICAgICAgaWYgKCFyZXN1bHQudmVyc2lvbiAmJiB2ZXJzaW9uSWRlbnRpZmllcikge1xuICAgICAgICByZXN1bHQudmVyc2lvbiA9IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghcmVzdWx0Lm9wZXJhICYmIC9nZWNrb1xcLy9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQubmFtZSA9IHJlc3VsdC5uYW1lIHx8IFwiR2Vja29cIlxuICAgICAgcmVzdWx0LmdlY2tvID0gdFxuICAgICAgcmVzdWx0LnZlcnNpb24gPSByZXN1bHQudmVyc2lvbiB8fCBnZXRGaXJzdE1hdGNoKC9nZWNrb1xcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICB9XG5cbiAgICAvLyBzZXQgT1MgZmxhZ3MgZm9yIHBsYXRmb3JtcyB0aGF0IGhhdmUgbXVsdGlwbGUgYnJvd3NlcnNcbiAgICBpZiAoIXJlc3VsdC53aW5kb3dzcGhvbmUgJiYgKGFuZHJvaWQgfHwgcmVzdWx0LnNpbGspKSB7XG4gICAgICByZXN1bHQuYW5kcm9pZCA9IHRcbiAgICAgIHJlc3VsdC5vc25hbWUgPSAnQW5kcm9pZCdcbiAgICB9IGVsc2UgaWYgKCFyZXN1bHQud2luZG93c3Bob25lICYmIGlvc2RldmljZSkge1xuICAgICAgcmVzdWx0W2lvc2RldmljZV0gPSB0XG4gICAgICByZXN1bHQuaW9zID0gdFxuICAgICAgcmVzdWx0Lm9zbmFtZSA9ICdpT1MnXG4gICAgfSBlbHNlIGlmIChtYWMpIHtcbiAgICAgIHJlc3VsdC5tYWMgPSB0XG4gICAgICByZXN1bHQub3NuYW1lID0gJ21hY09TJ1xuICAgIH0gZWxzZSBpZiAoeGJveCkge1xuICAgICAgcmVzdWx0Lnhib3ggPSB0XG4gICAgICByZXN1bHQub3NuYW1lID0gJ1hib3gnXG4gICAgfSBlbHNlIGlmICh3aW5kb3dzKSB7XG4gICAgICByZXN1bHQud2luZG93cyA9IHRcbiAgICAgIHJlc3VsdC5vc25hbWUgPSAnV2luZG93cydcbiAgICB9IGVsc2UgaWYgKGxpbnV4KSB7XG4gICAgICByZXN1bHQubGludXggPSB0XG4gICAgICByZXN1bHQub3NuYW1lID0gJ0xpbnV4J1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFdpbmRvd3NWZXJzaW9uIChzKSB7XG4gICAgICBzd2l0Y2ggKHMpIHtcbiAgICAgICAgY2FzZSAnTlQnOiByZXR1cm4gJ05UJ1xuICAgICAgICBjYXNlICdYUCc6IHJldHVybiAnWFAnXG4gICAgICAgIGNhc2UgJ05UIDUuMCc6IHJldHVybiAnMjAwMCdcbiAgICAgICAgY2FzZSAnTlQgNS4xJzogcmV0dXJuICdYUCdcbiAgICAgICAgY2FzZSAnTlQgNS4yJzogcmV0dXJuICcyMDAzJ1xuICAgICAgICBjYXNlICdOVCA2LjAnOiByZXR1cm4gJ1Zpc3RhJ1xuICAgICAgICBjYXNlICdOVCA2LjEnOiByZXR1cm4gJzcnXG4gICAgICAgIGNhc2UgJ05UIDYuMic6IHJldHVybiAnOCdcbiAgICAgICAgY2FzZSAnTlQgNi4zJzogcmV0dXJuICc4LjEnXG4gICAgICAgIGNhc2UgJ05UIDEwLjAnOiByZXR1cm4gJzEwJ1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gT1MgdmVyc2lvbiBleHRyYWN0aW9uXG4gICAgdmFyIG9zVmVyc2lvbiA9ICcnO1xuICAgIGlmIChyZXN1bHQud2luZG93cykge1xuICAgICAgb3NWZXJzaW9uID0gZ2V0V2luZG93c1ZlcnNpb24oZ2V0Rmlyc3RNYXRjaCgvV2luZG93cyAoKE5UfFhQKSggXFxkXFxkPy5cXGQpPykvaSkpXG4gICAgfSBlbHNlIGlmIChyZXN1bHQud2luZG93c3Bob25lKSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC93aW5kb3dzIHBob25lICg/Om9zKT9cXHM/KFxcZCsoXFwuXFxkKykqKS9pKTtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdC5tYWMpIHtcbiAgICAgIG9zVmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL01hYyBPUyBYIChcXGQrKFtfXFwuXFxzXVxcZCspKikvaSk7XG4gICAgICBvc1ZlcnNpb24gPSBvc1ZlcnNpb24ucmVwbGFjZSgvW19cXHNdL2csICcuJyk7XG4gICAgfSBlbHNlIGlmIChpb3NkZXZpY2UpIHtcbiAgICAgIG9zVmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL29zIChcXGQrKFtfXFxzXVxcZCspKikgbGlrZSBtYWMgb3MgeC9pKTtcbiAgICAgIG9zVmVyc2lvbiA9IG9zVmVyc2lvbi5yZXBsYWNlKC9bX1xcc10vZywgJy4nKTtcbiAgICB9IGVsc2UgaWYgKGFuZHJvaWQpIHtcbiAgICAgIG9zVmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL2FuZHJvaWRbIFxcLy1dKFxcZCsoXFwuXFxkKykqKS9pKTtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdC53ZWJvcykge1xuICAgICAgb3NWZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvKD86d2VifGhwdylvc1xcLyhcXGQrKFxcLlxcZCspKikvaSk7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQuYmxhY2tiZXJyeSkge1xuICAgICAgb3NWZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvcmltXFxzdGFibGV0XFxzb3NcXHMoXFxkKyhcXC5cXGQrKSopL2kpO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0LmJhZGEpIHtcbiAgICAgIG9zVmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL2JhZGFcXC8oXFxkKyhcXC5cXGQrKSopL2kpO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0LnRpemVuKSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC90aXplbltcXC9cXHNdKFxcZCsoXFwuXFxkKykqKS9pKTtcbiAgICB9XG4gICAgaWYgKG9zVmVyc2lvbikge1xuICAgICAgcmVzdWx0Lm9zdmVyc2lvbiA9IG9zVmVyc2lvbjtcbiAgICB9XG5cbiAgICAvLyBkZXZpY2UgdHlwZSBleHRyYWN0aW9uXG4gICAgdmFyIG9zTWFqb3JWZXJzaW9uID0gIXJlc3VsdC53aW5kb3dzICYmIG9zVmVyc2lvbi5zcGxpdCgnLicpWzBdO1xuICAgIGlmIChcbiAgICAgICAgIHRhYmxldFxuICAgICAgfHwgbmV4dXNUYWJsZXRcbiAgICAgIHx8IGlvc2RldmljZSA9PSAnaXBhZCdcbiAgICAgIHx8IChhbmRyb2lkICYmIChvc01ham9yVmVyc2lvbiA9PSAzIHx8IChvc01ham9yVmVyc2lvbiA+PSA0ICYmICFtb2JpbGUpKSlcbiAgICAgIHx8IHJlc3VsdC5zaWxrXG4gICAgKSB7XG4gICAgICByZXN1bHQudGFibGV0ID0gdFxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICBtb2JpbGVcbiAgICAgIHx8IGlvc2RldmljZSA9PSAnaXBob25lJ1xuICAgICAgfHwgaW9zZGV2aWNlID09ICdpcG9kJ1xuICAgICAgfHwgYW5kcm9pZFxuICAgICAgfHwgbmV4dXNNb2JpbGVcbiAgICAgIHx8IHJlc3VsdC5ibGFja2JlcnJ5XG4gICAgICB8fCByZXN1bHQud2Vib3NcbiAgICAgIHx8IHJlc3VsdC5iYWRhXG4gICAgKSB7XG4gICAgICByZXN1bHQubW9iaWxlID0gdFxuICAgIH1cblxuICAgIC8vIEdyYWRlZCBCcm93c2VyIFN1cHBvcnRcbiAgICAvLyBodHRwOi8vZGV2ZWxvcGVyLnlhaG9vLmNvbS95dWkvYXJ0aWNsZXMvZ2JzXG4gICAgaWYgKHJlc3VsdC5tc2VkZ2UgfHxcbiAgICAgICAgKHJlc3VsdC5tc2llICYmIHJlc3VsdC52ZXJzaW9uID49IDEwKSB8fFxuICAgICAgICAocmVzdWx0LnlhbmRleGJyb3dzZXIgJiYgcmVzdWx0LnZlcnNpb24gPj0gMTUpIHx8XG5cdFx0ICAgIChyZXN1bHQudml2YWxkaSAmJiByZXN1bHQudmVyc2lvbiA+PSAxLjApIHx8XG4gICAgICAgIChyZXN1bHQuY2hyb21lICYmIHJlc3VsdC52ZXJzaW9uID49IDIwKSB8fFxuICAgICAgICAocmVzdWx0LnNhbXN1bmdCcm93c2VyICYmIHJlc3VsdC52ZXJzaW9uID49IDQpIHx8XG4gICAgICAgIChyZXN1bHQuZmlyZWZveCAmJiByZXN1bHQudmVyc2lvbiA+PSAyMC4wKSB8fFxuICAgICAgICAocmVzdWx0LnNhZmFyaSAmJiByZXN1bHQudmVyc2lvbiA+PSA2KSB8fFxuICAgICAgICAocmVzdWx0Lm9wZXJhICYmIHJlc3VsdC52ZXJzaW9uID49IDEwLjApIHx8XG4gICAgICAgIChyZXN1bHQuaW9zICYmIHJlc3VsdC5vc3ZlcnNpb24gJiYgcmVzdWx0Lm9zdmVyc2lvbi5zcGxpdChcIi5cIilbMF0gPj0gNikgfHxcbiAgICAgICAgKHJlc3VsdC5ibGFja2JlcnJ5ICYmIHJlc3VsdC52ZXJzaW9uID49IDEwLjEpXG4gICAgICAgIHx8IChyZXN1bHQuY2hyb21pdW0gJiYgcmVzdWx0LnZlcnNpb24gPj0gMjApXG4gICAgICAgICkge1xuICAgICAgcmVzdWx0LmEgPSB0O1xuICAgIH1cbiAgICBlbHNlIGlmICgocmVzdWx0Lm1zaWUgJiYgcmVzdWx0LnZlcnNpb24gPCAxMCkgfHxcbiAgICAgICAgKHJlc3VsdC5jaHJvbWUgJiYgcmVzdWx0LnZlcnNpb24gPCAyMCkgfHxcbiAgICAgICAgKHJlc3VsdC5maXJlZm94ICYmIHJlc3VsdC52ZXJzaW9uIDwgMjAuMCkgfHxcbiAgICAgICAgKHJlc3VsdC5zYWZhcmkgJiYgcmVzdWx0LnZlcnNpb24gPCA2KSB8fFxuICAgICAgICAocmVzdWx0Lm9wZXJhICYmIHJlc3VsdC52ZXJzaW9uIDwgMTAuMCkgfHxcbiAgICAgICAgKHJlc3VsdC5pb3MgJiYgcmVzdWx0Lm9zdmVyc2lvbiAmJiByZXN1bHQub3N2ZXJzaW9uLnNwbGl0KFwiLlwiKVswXSA8IDYpXG4gICAgICAgIHx8IChyZXN1bHQuY2hyb21pdW0gJiYgcmVzdWx0LnZlcnNpb24gPCAyMClcbiAgICAgICAgKSB7XG4gICAgICByZXN1bHQuYyA9IHRcbiAgICB9IGVsc2UgcmVzdWx0LnggPSB0XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICB2YXIgYm93c2VyID0gZGV0ZWN0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnID8gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJyA6ICcnKVxuXG4gIGJvd3Nlci50ZXN0ID0gZnVuY3Rpb24gKGJyb3dzZXJMaXN0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBicm93c2VyTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGJyb3dzZXJJdGVtID0gYnJvd3Nlckxpc3RbaV07XG4gICAgICBpZiAodHlwZW9mIGJyb3dzZXJJdGVtPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChicm93c2VySXRlbSBpbiBib3dzZXIpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHZlcnNpb24gcHJlY2lzaW9ucyBjb3VudFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIGdldFZlcnNpb25QcmVjaXNpb24oXCIxLjEwLjNcIikgLy8gM1xuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHZlcnNpb25cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VmVyc2lvblByZWNpc2lvbih2ZXJzaW9uKSB7XG4gICAgcmV0dXJuIHZlcnNpb24uc3BsaXQoXCIuXCIpLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcnJheTo6bWFwIHBvbHlmaWxsXG4gICAqXG4gICAqIEBwYXJhbSAge0FycmF5fSBhcnJcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IGl0ZXJhdG9yXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgZnVuY3Rpb24gbWFwKGFyciwgaXRlcmF0b3IpIHtcbiAgICB2YXIgcmVzdWx0ID0gW10sIGk7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5tYXApIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoYXJyLCBpdGVyYXRvcik7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdC5wdXNoKGl0ZXJhdG9yKGFycltpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBicm93c2VyIHZlcnNpb24gd2VpZ2h0XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAgY29tcGFyZVZlcnNpb25zKFsnMS4xMC4yLjEnLCAgJzEuOC4yLjEuOTAnXSkgICAgLy8gMVxuICAgKiAgIGNvbXBhcmVWZXJzaW9ucyhbJzEuMDEwLjIuMScsICcxLjA5LjIuMS45MCddKTsgIC8vIDFcbiAgICogICBjb21wYXJlVmVyc2lvbnMoWycxLjEwLjIuMScsICAnMS4xMC4yLjEnXSk7ICAgICAvLyAwXG4gICAqICAgY29tcGFyZVZlcnNpb25zKFsnMS4xMC4yLjEnLCAgJzEuMDgwMC4yJ10pOyAgICAgLy8gLTFcbiAgICpcbiAgICogQHBhcmFtICB7QXJyYXk8U3RyaW5nPn0gdmVyc2lvbnMgdmVyc2lvbnMgdG8gY29tcGFyZVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGNvbXBhcmlzb24gcmVzdWx0XG4gICAqL1xuICBmdW5jdGlvbiBjb21wYXJlVmVyc2lvbnModmVyc2lvbnMpIHtcbiAgICAvLyAxKSBnZXQgY29tbW9uIHByZWNpc2lvbiBmb3IgYm90aCB2ZXJzaW9ucywgZm9yIGV4YW1wbGUgZm9yIFwiMTAuMFwiIGFuZCBcIjlcIiBpdCBzaG91bGQgYmUgMlxuICAgIHZhciBwcmVjaXNpb24gPSBNYXRoLm1heChnZXRWZXJzaW9uUHJlY2lzaW9uKHZlcnNpb25zWzBdKSwgZ2V0VmVyc2lvblByZWNpc2lvbih2ZXJzaW9uc1sxXSkpO1xuICAgIHZhciBjaHVua3MgPSBtYXAodmVyc2lvbnMsIGZ1bmN0aW9uICh2ZXJzaW9uKSB7XG4gICAgICB2YXIgZGVsdGEgPSBwcmVjaXNpb24gLSBnZXRWZXJzaW9uUHJlY2lzaW9uKHZlcnNpb24pO1xuXG4gICAgICAvLyAyKSBcIjlcIiAtPiBcIjkuMFwiIChmb3IgcHJlY2lzaW9uID0gMilcbiAgICAgIHZlcnNpb24gPSB2ZXJzaW9uICsgbmV3IEFycmF5KGRlbHRhICsgMSkuam9pbihcIi4wXCIpO1xuXG4gICAgICAvLyAzKSBcIjkuMFwiIC0+IFtcIjAwMDAwMDAwMFwiXCIsIFwiMDAwMDAwMDA5XCJdXG4gICAgICByZXR1cm4gbWFwKHZlcnNpb24uc3BsaXQoXCIuXCIpLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBcnJheSgyMCAtIGNodW5rLmxlbmd0aCkuam9pbihcIjBcIikgKyBjaHVuaztcbiAgICAgIH0pLnJldmVyc2UoKTtcbiAgICB9KTtcblxuICAgIC8vIGl0ZXJhdGUgaW4gcmV2ZXJzZSBvcmRlciBieSByZXZlcnNlZCBjaHVua3MgYXJyYXlcbiAgICB3aGlsZSAoLS1wcmVjaXNpb24gPj0gMCkge1xuICAgICAgLy8gNCkgY29tcGFyZTogXCIwMDAwMDAwMDlcIiA+IFwiMDAwMDAwMDEwXCIgPSBmYWxzZSAoYnV0IFwiOVwiID4gXCIxMFwiID0gdHJ1ZSlcbiAgICAgIGlmIChjaHVua3NbMF1bcHJlY2lzaW9uXSA+IGNodW5rc1sxXVtwcmVjaXNpb25dKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoY2h1bmtzWzBdW3ByZWNpc2lvbl0gPT09IGNodW5rc1sxXVtwcmVjaXNpb25dKSB7XG4gICAgICAgIGlmIChwcmVjaXNpb24gPT09IDApIHtcbiAgICAgICAgICAvLyBhbGwgdmVyc2lvbiBjaHVua3MgYXJlIHNhbWVcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYnJvd3NlciBpcyB1bnN1cHBvcnRlZFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIGJvd3Nlci5pc1Vuc3VwcG9ydGVkQnJvd3Nlcih7XG4gICAqICAgICBtc2llOiBcIjEwXCIsXG4gICAqICAgICBmaXJlZm94OiBcIjIzXCIsXG4gICAqICAgICBjaHJvbWU6IFwiMjlcIixcbiAgICogICAgIHNhZmFyaTogXCI1LjFcIixcbiAgICogICAgIG9wZXJhOiBcIjE2XCIsXG4gICAqICAgICBwaGFudG9tOiBcIjUzNFwiXG4gICAqICAgfSk7XG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gIG1pblZlcnNpb25zIG1hcCBvZiBtaW5pbWFsIHZlcnNpb24gdG8gYnJvd3NlclxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBbc3RyaWN0TW9kZSA9IGZhbHNlXSBmbGFnIHRvIHJldHVybiBmYWxzZSBpZiBicm93c2VyIHdhc24ndCBmb3VuZCBpbiBtYXBcbiAgICogQHBhcmFtICB7U3RyaW5nfSAgW3VhXSB1c2VyIGFnZW50IHN0cmluZ1xuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gaXNVbnN1cHBvcnRlZEJyb3dzZXIobWluVmVyc2lvbnMsIHN0cmljdE1vZGUsIHVhKSB7XG4gICAgdmFyIF9ib3dzZXIgPSBib3dzZXI7XG5cbiAgICAvLyBtYWtlIHN0cmljdE1vZGUgcGFyYW0gb3B0aW9uYWwgd2l0aCB1YSBwYXJhbSB1c2FnZVxuICAgIGlmICh0eXBlb2Ygc3RyaWN0TW9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHVhID0gc3RyaWN0TW9kZTtcbiAgICAgIHN0cmljdE1vZGUgPSB2b2lkKDApO1xuICAgIH1cblxuICAgIGlmIChzdHJpY3RNb2RlID09PSB2b2lkKDApKSB7XG4gICAgICBzdHJpY3RNb2RlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh1YSkge1xuICAgICAgX2Jvd3NlciA9IGRldGVjdCh1YSk7XG4gICAgfVxuXG4gICAgdmFyIHZlcnNpb24gPSBcIlwiICsgX2Jvd3Nlci52ZXJzaW9uO1xuICAgIGZvciAodmFyIGJyb3dzZXIgaW4gbWluVmVyc2lvbnMpIHtcbiAgICAgIGlmIChtaW5WZXJzaW9ucy5oYXNPd25Qcm9wZXJ0eShicm93c2VyKSkge1xuICAgICAgICBpZiAoX2Jvd3Nlclticm93c2VyXSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbWluVmVyc2lvbnNbYnJvd3Nlcl0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jyb3dzZXIgdmVyc2lvbiBpbiB0aGUgbWluVmVyc2lvbiBtYXAgc2hvdWxkIGJlIGEgc3RyaW5nOiAnICsgYnJvd3NlciArICc6ICcgKyBTdHJpbmcobWluVmVyc2lvbnMpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBicm93c2VyIHZlcnNpb24gYW5kIG1pbiBzdXBwb3J0ZWQgdmVyc2lvbi5cbiAgICAgICAgICByZXR1cm4gY29tcGFyZVZlcnNpb25zKFt2ZXJzaW9uLCBtaW5WZXJzaW9uc1ticm93c2VyXV0pIDwgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHJpY3RNb2RlOyAvLyBub3QgZm91bmRcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBicm93c2VyIGlzIHN1cHBvcnRlZFxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG1pblZlcnNpb25zIG1hcCBvZiBtaW5pbWFsIHZlcnNpb24gdG8gYnJvd3NlclxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBbc3RyaWN0TW9kZSA9IGZhbHNlXSBmbGFnIHRvIHJldHVybiBmYWxzZSBpZiBicm93c2VyIHdhc24ndCBmb3VuZCBpbiBtYXBcbiAgICogQHBhcmFtICB7U3RyaW5nfSAgW3VhXSB1c2VyIGFnZW50IHN0cmluZ1xuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gY2hlY2sobWluVmVyc2lvbnMsIHN0cmljdE1vZGUsIHVhKSB7XG4gICAgcmV0dXJuICFpc1Vuc3VwcG9ydGVkQnJvd3NlcihtaW5WZXJzaW9ucywgc3RyaWN0TW9kZSwgdWEpO1xuICB9XG5cbiAgYm93c2VyLmlzVW5zdXBwb3J0ZWRCcm93c2VyID0gaXNVbnN1cHBvcnRlZEJyb3dzZXI7XG4gIGJvd3Nlci5jb21wYXJlVmVyc2lvbnMgPSBjb21wYXJlVmVyc2lvbnM7XG4gIGJvd3Nlci5jaGVjayA9IGNoZWNrO1xuXG4gIC8qXG4gICAqIFNldCBvdXIgZGV0ZWN0IG1ldGhvZCB0byB0aGUgbWFpbiBib3dzZXIgb2JqZWN0IHNvIHdlIGNhblxuICAgKiByZXVzZSBpdCB0byB0ZXN0IG90aGVyIHVzZXIgYWdlbnRzLlxuICAgKiBUaGlzIGlzIG5lZWRlZCB0byBpbXBsZW1lbnQgZnV0dXJlIHRlc3RzLlxuICAgKi9cbiAgYm93c2VyLl9kZXRlY3QgPSBkZXRlY3Q7XG5cbiAgLypcbiAgICogU2V0IG91ciBkZXRlY3QgcHVibGljIG1ldGhvZCB0byB0aGUgbWFpbiBib3dzZXIgb2JqZWN0XG4gICAqIFRoaXMgaXMgbmVlZGVkIHRvIGltcGxlbWVudCBib3dzZXIgaW4gc2VydmVyIHNpZGVcbiAgICovXG4gIGJvd3Nlci5kZXRlY3QgPSBkZXRlY3Q7XG4gIHJldHVybiBib3dzZXJcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0QnJvd3NlckluZm9ybWF0aW9uO1xuXG52YXIgX2Jvd3NlciA9IHJlcXVpcmUoJ2Jvd3NlcicpO1xuXG52YXIgX2Jvd3NlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ib3dzZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJlZml4QnlCcm93c2VyID0ge1xuICBjaHJvbWU6ICdXZWJraXQnLFxuICBzYWZhcmk6ICdXZWJraXQnLFxuICBpb3M6ICdXZWJraXQnLFxuICBhbmRyb2lkOiAnV2Via2l0JyxcbiAgcGhhbnRvbTogJ1dlYmtpdCcsXG4gIG9wZXJhOiAnV2Via2l0JyxcbiAgd2Vib3M6ICdXZWJraXQnLFxuICBibGFja2JlcnJ5OiAnV2Via2l0JyxcbiAgYmFkYTogJ1dlYmtpdCcsXG4gIHRpemVuOiAnV2Via2l0JyxcbiAgY2hyb21pdW06ICdXZWJraXQnLFxuICB2aXZhbGRpOiAnV2Via2l0JyxcbiAgZmlyZWZveDogJ01veicsXG4gIHNlYW1vbmV5OiAnTW96JyxcbiAgc2FpbGZpc2g6ICdNb3onLFxuICBtc2llOiAnbXMnLFxuICBtc2VkZ2U6ICdtcydcbn07XG5cblxudmFyIGJyb3dzZXJCeUNhbkl1c2VBbGlhcyA9IHtcbiAgY2hyb21lOiAnY2hyb21lJyxcbiAgY2hyb21pdW06ICdjaHJvbWUnLFxuICBzYWZhcmk6ICdzYWZhcmknLFxuICBmaXJmb3g6ICdmaXJlZm94JyxcbiAgbXNlZGdlOiAnZWRnZScsXG4gIG9wZXJhOiAnb3BlcmEnLFxuICB2aXZhbGRpOiAnb3BlcmEnLFxuICBtc2llOiAnaWUnXG59O1xuXG5mdW5jdGlvbiBnZXRCcm93c2VyTmFtZShicm93c2VySW5mbykge1xuICBpZiAoYnJvd3NlckluZm8uZmlyZWZveCkge1xuICAgIHJldHVybiAnZmlyZWZveCc7XG4gIH1cblxuICBpZiAoYnJvd3NlckluZm8ubW9iaWxlIHx8IGJyb3dzZXJJbmZvLnRhYmxldCkge1xuICAgIGlmIChicm93c2VySW5mby5pb3MpIHtcbiAgICAgIHJldHVybiAnaW9zX3NhZic7XG4gICAgfSBlbHNlIGlmIChicm93c2VySW5mby5hbmRyb2lkKSB7XG4gICAgICByZXR1cm4gJ2FuZHJvaWQnO1xuICAgIH0gZWxzZSBpZiAoYnJvd3NlckluZm8ub3BlcmEpIHtcbiAgICAgIHJldHVybiAnb3BfbWluaSc7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgYnJvd3NlciBpbiBicm93c2VyQnlDYW5JdXNlQWxpYXMpIHtcbiAgICBpZiAoYnJvd3NlckluZm8uaGFzT3duUHJvcGVydHkoYnJvd3NlcikpIHtcbiAgICAgIHJldHVybiBicm93c2VyQnlDYW5JdXNlQWxpYXNbYnJvd3Nlcl07XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVXNlcyBib3dzZXIgdG8gZ2V0IGRlZmF1bHQgYnJvd3NlciBicm93c2VySW5mb3JtYXRpb24gc3VjaCBhcyB2ZXJzaW9uIGFuZCBuYW1lXG4gKiBFdmFsdWF0ZXMgYm93c2VyIGJyb3dzZXJJbmZvIGFuZCBhZGRzIHZlbmRvclByZWZpeCBicm93c2VySW5mb3JtYXRpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyQWdlbnQgLSB1c2VyQWdlbnQgdGhhdCBnZXRzIGV2YWx1YXRlZFxuICovXG5mdW5jdGlvbiBnZXRCcm93c2VySW5mb3JtYXRpb24odXNlckFnZW50KSB7XG4gIHZhciBicm93c2VySW5mbyA9IF9ib3dzZXIyLmRlZmF1bHQuX2RldGVjdCh1c2VyQWdlbnQpO1xuXG4gIGlmIChicm93c2VySW5mby55YW5kZXhicm93c2VyKSB7XG4gICAgYnJvd3NlckluZm8gPSBfYm93c2VyMi5kZWZhdWx0Ll9kZXRlY3QodXNlckFnZW50LnJlcGxhY2UoL1lhQnJvd3NlclxcL1swLTkuXSovLCAnJykpO1xuICB9XG5cbiAgZm9yICh2YXIgYnJvd3NlciBpbiBwcmVmaXhCeUJyb3dzZXIpIHtcbiAgICBpZiAoYnJvd3NlckluZm8uaGFzT3duUHJvcGVydHkoYnJvd3NlcikpIHtcbiAgICAgIHZhciBwcmVmaXggPSBwcmVmaXhCeUJyb3dzZXJbYnJvd3Nlcl07XG5cbiAgICAgIGJyb3dzZXJJbmZvLmpzUHJlZml4ID0gcHJlZml4O1xuICAgICAgYnJvd3NlckluZm8uY3NzUHJlZml4ID0gJy0nICsgcHJlZml4LnRvTG93ZXJDYXNlKCkgKyAnLSc7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBicm93c2VySW5mby5icm93c2VyTmFtZSA9IGdldEJyb3dzZXJOYW1lKGJyb3dzZXJJbmZvKTtcblxuICAvLyBGb3IgY29yZG92YSBJT1MgOCB0aGUgdmVyc2lvbiBpcyBtaXNzaW5nLCBzZXQgdHJ1bmNhdGVkIG9zdmVyc2lvbiB0byBwcmV2ZW50IE5hTlxuICBpZiAoYnJvd3NlckluZm8udmVyc2lvbikge1xuICAgIGJyb3dzZXJJbmZvLmJyb3dzZXJWZXJzaW9uID0gcGFyc2VGbG9hdChicm93c2VySW5mby52ZXJzaW9uKTtcbiAgfSBlbHNlIHtcbiAgICBicm93c2VySW5mby5icm93c2VyVmVyc2lvbiA9IHBhcnNlSW50KHBhcnNlRmxvYXQoYnJvd3NlckluZm8ub3N2ZXJzaW9uKSwgMTApO1xuICB9XG5cbiAgYnJvd3NlckluZm8ub3NWZXJzaW9uID0gcGFyc2VGbG9hdChicm93c2VySW5mby5vc3ZlcnNpb24pO1xuXG4gIC8vIGlPUyBmb3JjZXMgYWxsIGJyb3dzZXJzIHRvIHVzZSBTYWZhcmkgdW5kZXIgdGhlIGhvb2RcbiAgLy8gYXMgdGhlIFNhZmFyaSB2ZXJzaW9uIHNlZW1zIHRvIG1hdGNoIHRoZSBpT1MgdmVyc2lvblxuICAvLyB3ZSBqdXN0IGV4cGxpY2l0ZWx5IHVzZSB0aGUgb3N2ZXJzaW9uIGluc3RlYWRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvZnJpc2NobWFubi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvaXNzdWVzLzcyXG4gIGlmIChicm93c2VySW5mby5icm93c2VyTmFtZSA9PT0gJ2lvc19zYWYnICYmIGJyb3dzZXJJbmZvLmJyb3dzZXJWZXJzaW9uID4gYnJvd3NlckluZm8ub3NWZXJzaW9uKSB7XG4gICAgYnJvd3NlckluZm8uYnJvd3NlclZlcnNpb24gPSBicm93c2VySW5mby5vc1ZlcnNpb247XG4gIH1cblxuICAvLyBzZXBlcmF0ZSBuYXRpdmUgYW5kcm9pZCBjaHJvbWVcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvZnJpc2NobWFubi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvaXNzdWVzLzQ1XG4gIGlmIChicm93c2VySW5mby5icm93c2VyTmFtZSA9PT0gJ2FuZHJvaWQnICYmIGJyb3dzZXJJbmZvLmNocm9tZSAmJiBicm93c2VySW5mby5icm93c2VyVmVyc2lvbiA+IDM3KSB7XG4gICAgYnJvd3NlckluZm8uYnJvd3Nlck5hbWUgPSAnYW5kX2Nocic7XG4gIH1cblxuICAvLyBGb3IgYW5kcm9pZCA8IDQuNCB3ZSB3YW50IHRvIGNoZWNrIHRoZSBvc3ZlcnNpb25cbiAgLy8gbm90IHRoZSBjaHJvbWUgdmVyc2lvbiwgc2VlIGlzc3VlICMyNlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcm9mcmlzY2htYW5uL2lubGluZS1zdHlsZS1wcmVmaXhlci9pc3N1ZXMvMjZcbiAgaWYgKGJyb3dzZXJJbmZvLmJyb3dzZXJOYW1lID09PSAnYW5kcm9pZCcgJiYgYnJvd3NlckluZm8ub3NWZXJzaW9uIDwgNSkge1xuICAgIGJyb3dzZXJJbmZvLmJyb3dzZXJWZXJzaW9uID0gYnJvd3NlckluZm8ub3NWZXJzaW9uO1xuICB9XG5cbiAgLy8gU2Ftc3VuZyBicm93c2VyIGFyZSBiYXNpY2FsbHkgYnVpbGQgb24gQ2hyb21lID4gNDRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvZnJpc2NobWFubi9pbmxpbmUtc3R5bGUtcHJlZml4ZXIvaXNzdWVzLzEwMlxuICBpZiAoYnJvd3NlckluZm8uYnJvd3Nlck5hbWUgPT09ICdhbmRyb2lkJyAmJiBicm93c2VySW5mby5zYW1zdW5nQnJvd3Nlcikge1xuICAgIGJyb3dzZXJJbmZvLmJyb3dzZXJOYW1lID0gJ2FuZF9jaHInO1xuICAgIGJyb3dzZXJJbmZvLmJyb3dzZXJWZXJzaW9uID0gNDQ7XG4gIH1cblxuICByZXR1cm4gYnJvd3NlckluZm87XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVByZWZpeGVyO1xuXG52YXIgX2dldEJyb3dzZXJJbmZvcm1hdGlvbiA9IHJlcXVpcmUoJy4uL3V0aWxzL2dldEJyb3dzZXJJbmZvcm1hdGlvbicpO1xuXG52YXIgX2dldEJyb3dzZXJJbmZvcm1hdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRCcm93c2VySW5mb3JtYXRpb24pO1xuXG52YXIgX2dldFByZWZpeGVkS2V5ZnJhbWVzID0gcmVxdWlyZSgnLi4vdXRpbHMvZ2V0UHJlZml4ZWRLZXlmcmFtZXMnKTtcblxudmFyIF9nZXRQcmVmaXhlZEtleWZyYW1lczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcmVmaXhlZEtleWZyYW1lcyk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NhcGl0YWxpemVTdHJpbmcnKTtcblxudmFyIF9jYXBpdGFsaXplU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhcGl0YWxpemVTdHJpbmcpO1xuXG52YXIgX2FkZE5ld1ZhbHVlc09ubHkgPSByZXF1aXJlKCcuLi91dGlscy9hZGROZXdWYWx1ZXNPbmx5Jyk7XG5cbnZhciBfYWRkTmV3VmFsdWVzT25seTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hZGROZXdWYWx1ZXNPbmx5KTtcblxudmFyIF9pc09iamVjdCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzT2JqZWN0Jyk7XG5cbnZhciBfaXNPYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNPYmplY3QpO1xuXG52YXIgX3ByZWZpeFZhbHVlID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJlZml4VmFsdWUnKTtcblxudmFyIF9wcmVmaXhWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXhWYWx1ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIGNyZWF0ZVByZWZpeGVyKF9yZWYpIHtcbiAgdmFyIHByZWZpeE1hcCA9IF9yZWYucHJlZml4TWFwLFxuICAgICAgcGx1Z2lucyA9IF9yZWYucGx1Z2lucztcbiAgdmFyIGZhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAqIEluc3RhbnRpYW50ZSBhIG5ldyBwcmVmaXhlclxuICAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJBZ2VudCAtIHVzZXJBZ2VudCB0byBnYXRoZXIgcHJlZml4IGluZm9ybWF0aW9uIGFjY29yZGluZyB0byBjYW5pdXNlLmNvbVxuICAgICogQHBhcmFtIHtzdHJpbmd9IGtlZXBVbnByZWZpeGVkIC0ga2VlcHMgdW5wcmVmaXhlZCBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXNcbiAgICAqL1xuICAgIGZ1bmN0aW9uIFByZWZpeGVyKCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJlZml4ZXIpO1xuXG4gICAgICB2YXIgZGVmYXVsdFVzZXJBZ2VudCA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnID8gbmF2aWdhdG9yLnVzZXJBZ2VudCA6IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy5fdXNlckFnZW50ID0gb3B0aW9ucy51c2VyQWdlbnQgfHwgZGVmYXVsdFVzZXJBZ2VudDtcbiAgICAgIHRoaXMuX2tlZXBVbnByZWZpeGVkID0gb3B0aW9ucy5rZWVwVW5wcmVmaXhlZCB8fCBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMuX3VzZXJBZ2VudCkge1xuICAgICAgICB0aGlzLl9icm93c2VySW5mbyA9ICgwLCBfZ2V0QnJvd3NlckluZm9ybWF0aW9uMi5kZWZhdWx0KSh0aGlzLl91c2VyQWdlbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVja3MgaWYgdGhlIHVzZXJBZ2VudCB3YXMgcmVzb2x2ZWQgY29ycmVjdGx5XG4gICAgICBpZiAodGhpcy5fYnJvd3NlckluZm8gJiYgdGhpcy5fYnJvd3NlckluZm8uY3NzUHJlZml4KSB7XG4gICAgICAgIHRoaXMucHJlZml4ZWRLZXlmcmFtZXMgPSAoMCwgX2dldFByZWZpeGVkS2V5ZnJhbWVzMi5kZWZhdWx0KSh0aGlzLl9icm93c2VySW5mby5icm93c2VyTmFtZSwgdGhpcy5fYnJvd3NlckluZm8uYnJvd3NlclZlcnNpb24sIHRoaXMuX2Jyb3dzZXJJbmZvLmNzc1ByZWZpeCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl91c2VGYWxsYmFjayA9IHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZWZpeERhdGEgPSB0aGlzLl9icm93c2VySW5mby5icm93c2VyTmFtZSAmJiBwcmVmaXhNYXBbdGhpcy5fYnJvd3NlckluZm8uYnJvd3Nlck5hbWVdO1xuICAgICAgaWYgKHByZWZpeERhdGEpIHtcbiAgICAgICAgdGhpcy5fcmVxdWlyZXNQcmVmaXggPSB7fTtcblxuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwcmVmaXhEYXRhKSB7XG4gICAgICAgICAgaWYgKHByZWZpeERhdGFbcHJvcGVydHldID49IHRoaXMuX2Jyb3dzZXJJbmZvLmJyb3dzZXJWZXJzaW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXF1aXJlc1ByZWZpeFtwcm9wZXJ0eV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2hhc1Byb3BzUmVxdWlyaW5nUHJlZml4ID0gT2JqZWN0LmtleXModGhpcy5fcmVxdWlyZXNQcmVmaXgpLmxlbmd0aCA+IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl91c2VGYWxsYmFjayA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX21ldGFEYXRhID0ge1xuICAgICAgICBicm93c2VyVmVyc2lvbjogdGhpcy5fYnJvd3NlckluZm8uYnJvd3NlclZlcnNpb24sXG4gICAgICAgIGJyb3dzZXJOYW1lOiB0aGlzLl9icm93c2VySW5mby5icm93c2VyTmFtZSxcbiAgICAgICAgY3NzUHJlZml4OiB0aGlzLl9icm93c2VySW5mby5jc3NQcmVmaXgsXG4gICAgICAgIGpzUHJlZml4OiB0aGlzLl9icm93c2VySW5mby5qc1ByZWZpeCxcbiAgICAgICAga2VlcFVucHJlZml4ZWQ6IHRoaXMuX2tlZXBVbnByZWZpeGVkLFxuICAgICAgICByZXF1aXJlc1ByZWZpeDogdGhpcy5fcmVxdWlyZXNQcmVmaXhcbiAgICAgIH07XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFByZWZpeGVyLCBbe1xuICAgICAga2V5OiAncHJlZml4JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVmaXgoc3R5bGUpIHtcbiAgICAgICAgLy8gdXNlIHN0YXRpYyBwcmVmaXhlciBhcyBmYWxsYmFjayBpZiB1c2VyQWdlbnQgY2FuIG5vdCBiZSByZXNvbHZlZFxuICAgICAgICBpZiAodGhpcy5fdXNlRmFsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm4gZmFsbGJhY2soc3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gb25seSBhZGQgcHJlZml4ZXMgaWYgbmVlZGVkXG4gICAgICAgIGlmICghdGhpcy5faGFzUHJvcHNSZXF1aXJpbmdQcmVmaXgpIHtcbiAgICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fcHJlZml4U3R5bGUoc3R5bGUpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ19wcmVmaXhTdHlsZScsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3ByZWZpeFN0eWxlKHN0eWxlKSB7XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHN0eWxlKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcGVydHldO1xuXG4gICAgICAgICAgLy8gaGFuZGxlIG5lc3RlZCBvYmplY3RzXG4gICAgICAgICAgaWYgKCgwLCBfaXNPYmplY3QyLmRlZmF1bHQpKHZhbHVlKSkge1xuICAgICAgICAgICAgc3R5bGVbcHJvcGVydHldID0gdGhpcy5wcmVmaXgodmFsdWUpO1xuICAgICAgICAgICAgLy8gaGFuZGxlIGFycmF5IHZhbHVlc1xuICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhciBjb21iaW5lZFZhbHVlID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICB2YXIgcHJvY2Vzc2VkVmFsdWUgPSAoMCwgX3ByZWZpeFZhbHVlMi5kZWZhdWx0KShwbHVnaW5zLCBwcm9wZXJ0eSwgdmFsdWVbaV0sIHN0eWxlLCB0aGlzLl9tZXRhRGF0YSk7XG4gICAgICAgICAgICAgICgwLCBfYWRkTmV3VmFsdWVzT25seTIuZGVmYXVsdCkoY29tYmluZWRWYWx1ZSwgcHJvY2Vzc2VkVmFsdWUgfHwgdmFsdWVbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBvbmx5IG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgd2FzIHRvdWNoZWRcbiAgICAgICAgICAgIC8vIGJ5IGFueSBwbHVnaW4gdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBtdXRhdGlvbnNcbiAgICAgICAgICAgIGlmIChjb21iaW5lZFZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgc3R5bGVbcHJvcGVydHldID0gY29tYmluZWRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIF9wcm9jZXNzZWRWYWx1ZSA9ICgwLCBfcHJlZml4VmFsdWUyLmRlZmF1bHQpKHBsdWdpbnMsIHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIHRoaXMuX21ldGFEYXRhKTtcblxuICAgICAgICAgICAgLy8gb25seSBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IHdhcyB0b3VjaGVkXG4gICAgICAgICAgICAvLyBieSBhbnkgcGx1Z2luIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgbXV0YXRpb25zXG4gICAgICAgICAgICBpZiAoX3Byb2Nlc3NlZFZhbHVlKSB7XG4gICAgICAgICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9IF9wcm9jZXNzZWRWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYWRkIHByZWZpeGVzIHRvIHByb3BlcnRpZXNcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZXF1aXJlc1ByZWZpeC5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgc3R5bGVbdGhpcy5fYnJvd3NlckluZm8uanNQcmVmaXggKyAoMCwgX2NhcGl0YWxpemVTdHJpbmcyLmRlZmF1bHQpKHByb3BlcnR5KV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKCF0aGlzLl9rZWVwVW5wcmVmaXhlZCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wZXJ0eV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgKiBSZXR1cm5zIGEgcHJlZml4ZWQgdmVyc2lvbiBvZiB0aGUgc3R5bGUgb2JqZWN0IHVzaW5nIGFsbCB2ZW5kb3IgcHJlZml4ZXNcbiAgICAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlcyAtIFN0eWxlIG9iamVjdCB0aGF0IGdldHMgcHJlZml4ZWQgcHJvcGVydGllcyBhZGRlZFxuICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSAtIFN0eWxlIG9iamVjdCB3aXRoIHByZWZpeGVkIHByb3BlcnRpZXMgYW5kIHZhbHVlc1xuICAgICAgKi9cblxuICAgIH1dLCBbe1xuICAgICAga2V5OiAncHJlZml4QWxsJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcmVmaXhBbGwoc3R5bGVzKSB7XG4gICAgICAgIHJldHVybiBmYWxsYmFjayhzdHlsZXMpO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBQcmVmaXhlcjtcbiAgfSgpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJlZml4UHJvcGVydHk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZyA9IHJlcXVpcmUoJy4vY2FwaXRhbGl6ZVN0cmluZycpO1xuXG52YXIgX2NhcGl0YWxpemVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2FwaXRhbGl6ZVN0cmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHByZWZpeFByb3BlcnR5KHByZWZpeFByb3BlcnRpZXMsIHByb3BlcnR5LCBzdHlsZSkge1xuICBpZiAocHJlZml4UHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICB2YXIgcmVxdWlyZWRQcmVmaXhlcyA9IHByZWZpeFByb3BlcnRpZXNbcHJvcGVydHldO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByZXF1aXJlZFByZWZpeGVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBzdHlsZVtyZXF1aXJlZFByZWZpeGVzW2ldICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gc3R5bGVbcHJvcGVydHldO1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlUHJlZml4ZXI7XG5cbnZhciBfcHJlZml4UHJvcGVydHkgPSByZXF1aXJlKCcuLi91dGlscy9wcmVmaXhQcm9wZXJ0eScpO1xuXG52YXIgX3ByZWZpeFByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZpeFByb3BlcnR5KTtcblxudmFyIF9wcmVmaXhWYWx1ZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3ByZWZpeFZhbHVlJyk7XG5cbnZhciBfcHJlZml4VmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlZml4VmFsdWUpO1xuXG52YXIgX2FkZE5ld1ZhbHVlc09ubHkgPSByZXF1aXJlKCcuLi91dGlscy9hZGROZXdWYWx1ZXNPbmx5Jyk7XG5cbnZhciBfYWRkTmV3VmFsdWVzT25seTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hZGROZXdWYWx1ZXNPbmx5KTtcblxudmFyIF9pc09iamVjdCA9IHJlcXVpcmUoJy4uL3V0aWxzL2lzT2JqZWN0Jyk7XG5cbnZhciBfaXNPYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNPYmplY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBjcmVhdGVQcmVmaXhlcihfcmVmKSB7XG4gIHZhciBwcmVmaXhNYXAgPSBfcmVmLnByZWZpeE1hcCxcbiAgICAgIHBsdWdpbnMgPSBfcmVmLnBsdWdpbnM7XG5cbiAgZnVuY3Rpb24gcHJlZml4QWxsKHN0eWxlKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BlcnR5XTtcblxuICAgICAgLy8gaGFuZGxlIG5lc3RlZCBvYmplY3RzXG4gICAgICBpZiAoKDAsIF9pc09iamVjdDIuZGVmYXVsdCkodmFsdWUpKSB7XG4gICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9IHByZWZpeEFsbCh2YWx1ZSk7XG4gICAgICAgIC8vIGhhbmRsZSBhcnJheSB2YWx1ZXNcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIGNvbWJpbmVkVmFsdWUgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsdWUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICB2YXIgcHJvY2Vzc2VkVmFsdWUgPSAoMCwgX3ByZWZpeFZhbHVlMi5kZWZhdWx0KShwbHVnaW5zLCBwcm9wZXJ0eSwgdmFsdWVbaV0sIHN0eWxlLCBwcmVmaXhNYXApO1xuICAgICAgICAgICgwLCBfYWRkTmV3VmFsdWVzT25seTIuZGVmYXVsdCkoY29tYmluZWRWYWx1ZSwgcHJvY2Vzc2VkVmFsdWUgfHwgdmFsdWVbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gb25seSBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IHdhcyB0b3VjaGVkXG4gICAgICAgIC8vIGJ5IGFueSBwbHVnaW4gdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBtdXRhdGlvbnNcbiAgICAgICAgaWYgKGNvbWJpbmVkVmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9IGNvbWJpbmVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBfcHJvY2Vzc2VkVmFsdWUgPSAoMCwgX3ByZWZpeFZhbHVlMi5kZWZhdWx0KShwbHVnaW5zLCBwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBwcmVmaXhNYXApO1xuXG4gICAgICAgIC8vIG9ubHkgbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCB3YXMgdG91Y2hlZFxuICAgICAgICAvLyBieSBhbnkgcGx1Z2luIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgbXV0YXRpb25zXG4gICAgICAgIGlmIChfcHJvY2Vzc2VkVmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSBfcHJvY2Vzc2VkVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICAoMCwgX3ByZWZpeFByb3BlcnR5Mi5kZWZhdWx0KShwcmVmaXhNYXAsIHByb3BlcnR5LCBzdHlsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHByZWZpeEFsbDtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKG11aVRoZW1lKSB7XG4gIHZhciBpc0NsaWVudCA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnO1xuICB2YXIgdXNlckFnZW50ID0gbXVpVGhlbWUudXNlckFnZW50O1xuXG4gIGlmICh1c2VyQWdlbnQgPT09IHVuZGVmaW5lZCAmJiBpc0NsaWVudCkge1xuICAgIHVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIH1cblxuICBpZiAodXNlckFnZW50ID09PSB1bmRlZmluZWQgJiYgIWhhc1dhcm5lZEFib3V0VXNlckFnZW50KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ01hdGVyaWFsLVVJOiB1c2VyQWdlbnQgc2hvdWxkIGJlIHN1cHBsaWVkIGluIHRoZSBtdWlUaGVtZSBjb250ZXh0XFxuICAgICAgZm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy4nKSA6IHZvaWQgMDtcblxuICAgIGhhc1dhcm5lZEFib3V0VXNlckFnZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBwcmVmaXhBbGwgPSAoMCwgX2NyZWF0ZVByZWZpeGVyMi5kZWZhdWx0KShfYXV0b3ByZWZpeGVyU3RhdGljMi5kZWZhdWx0KTtcblxuICBpZiAodXNlckFnZW50ID09PSBmYWxzZSkge1xuICAgIC8vIERpc2FibGVkIGF1dG9wcmVmaXhlclxuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKHVzZXJBZ2VudCA9PT0gJ2FsbCcgfHwgdXNlckFnZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBQcmVmaXggZm9yIGFsbCB1c2VyIGFnZW50XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgdmFyIGlzRmxleCA9IFsnZmxleCcsICdpbmxpbmUtZmxleCddLmluZGV4T2Yoc3R5bGUuZGlzcGxheSkgIT09IC0xO1xuICAgICAgdmFyIHN0eWxlUHJlZml4ZWQgPSBwcmVmaXhBbGwoc3R5bGUpO1xuXG4gICAgICBpZiAoaXNGbGV4KSB7XG4gICAgICAgIHZhciBkaXNwbGF5ID0gc3R5bGVQcmVmaXhlZC5kaXNwbGF5O1xuICAgICAgICBpZiAoaXNDbGllbnQpIHtcbiAgICAgICAgICAvLyBXZSBjYW4ndCBhcHBseSB0aGlzIGpvaW4gd2l0aCByZWFjdC1kb206XG4gICAgICAgICAgLy8gI2h0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNjQ2N1xuICAgICAgICAgIHN0eWxlUHJlZml4ZWQuZGlzcGxheSA9IGRpc3BsYXlbZGlzcGxheS5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHlsZVByZWZpeGVkLmRpc3BsYXkgPSBkaXNwbGF5LmpvaW4oJzsgZGlzcGxheTogJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0eWxlUHJlZml4ZWQ7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgUHJlZml4ZXIgPSAoMCwgX2NyZWF0ZVByZWZpeGVyNC5kZWZhdWx0KShfYXV0b3ByZWZpeGVyRHluYW1pYzIuZGVmYXVsdCwgcHJlZml4QWxsKTtcbiAgICB2YXIgcHJlZml4ZXIgPSBuZXcgUHJlZml4ZXIoe1xuICAgICAgdXNlckFnZW50OiB1c2VyQWdlbnRcbiAgICB9KTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIHJldHVybiBwcmVmaXhlci5wcmVmaXgoc3R5bGUpO1xuICAgIH07XG4gIH1cbn07XG5cbnZhciBfY3JlYXRlUHJlZml4ZXIgPSByZXF1aXJlKCdpbmxpbmUtc3R5bGUtcHJlZml4ZXIvc3RhdGljL2NyZWF0ZVByZWZpeGVyJyk7XG5cbnZhciBfY3JlYXRlUHJlZml4ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlUHJlZml4ZXIpO1xuXG52YXIgX2NyZWF0ZVByZWZpeGVyMyA9IHJlcXVpcmUoJ2lubGluZS1zdHlsZS1wcmVmaXhlci9keW5hbWljL2NyZWF0ZVByZWZpeGVyJyk7XG5cbnZhciBfY3JlYXRlUHJlZml4ZXI0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlUHJlZml4ZXIzKTtcblxudmFyIF9hdXRvcHJlZml4ZXJEeW5hbWljID0gcmVxdWlyZSgnLi9hdXRvcHJlZml4ZXJEeW5hbWljJyk7XG5cbnZhciBfYXV0b3ByZWZpeGVyRHluYW1pYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdXRvcHJlZml4ZXJEeW5hbWljKTtcblxudmFyIF9hdXRvcHJlZml4ZXJTdGF0aWMgPSByZXF1aXJlKCcuL2F1dG9wcmVmaXhlclN0YXRpYycpO1xuXG52YXIgX2F1dG9wcmVmaXhlclN0YXRpYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdXRvcHJlZml4ZXJTdGF0aWMpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGhhc1dhcm5lZEFib3V0VXNlckFnZW50ID0gZmFsc2U7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIG1lbnU6IDEwMDAsXG4gIGFwcEJhcjogMTEwMCxcbiAgZHJhd2VyT3ZlcmxheTogMTIwMCxcbiAgZHJhd2VyOiAxMzAwLFxuICBkaWFsb2dPdmVybGF5OiAxNDAwLFxuICBkaWFsb2c6IDE1MDAsXG4gIGxheWVyOiAyMDAwLFxuICBwb3BvdmVyOiAyMTAwLFxuICBzbmFja2JhcjogMjkwMCxcbiAgdG9vbHRpcDogMzAwMFxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgaWNvblNpemU6IDI0LFxuXG4gIGRlc2t0b3BHdXR0ZXI6IDI0LFxuICBkZXNrdG9wR3V0dGVyTW9yZTogMzIsXG4gIGRlc2t0b3BHdXR0ZXJMZXNzOiAxNixcbiAgZGVza3RvcEd1dHRlck1pbmk6IDgsXG4gIGRlc2t0b3BLZXlsaW5lSW5jcmVtZW50OiA2NCxcbiAgZGVza3RvcERyb3BEb3duTWVudUl0ZW1IZWlnaHQ6IDMyLFxuICBkZXNrdG9wRHJvcERvd25NZW51Rm9udFNpemU6IDE1LFxuICBkZXNrdG9wRHJhd2VyTWVudUl0ZW1IZWlnaHQ6IDQ4LFxuICBkZXNrdG9wU3ViaGVhZGVySGVpZ2h0OiA0OCxcbiAgZGVza3RvcFRvb2xiYXJIZWlnaHQ6IDU2XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jb2xvcnMgPSByZXF1aXJlKCcuLi9jb2xvcnMnKTtcblxudmFyIF9jb2xvck1hbmlwdWxhdG9yID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvY29sb3JNYW5pcHVsYXRvcicpO1xuXG52YXIgX3NwYWNpbmcgPSByZXF1aXJlKCcuLi9zcGFjaW5nJyk7XG5cbnZhciBfc3BhY2luZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zcGFjaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiAgTGlnaHQgVGhlbWUgaXMgdGhlIGRlZmF1bHQgdGhlbWUgdXNlZCBpbiBtYXRlcmlhbC11aS4gSXQgaXMgZ3VhcmFudGVlZCB0b1xuICogIGhhdmUgYWxsIHRoZW1lIHZhcmlhYmxlcyBuZWVkZWQgZm9yIGV2ZXJ5IGNvbXBvbmVudC4gVmFyaWFibGVzIG5vdCBkZWZpbmVkXG4gKiAgaW4gYSBjdXN0b20gdGhlbWUgd2lsbCBkZWZhdWx0IHRvIHRoZXNlIHZhbHVlcy5cbiAqL1xuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBzcGFjaW5nOiBfc3BhY2luZzIuZGVmYXVsdCxcbiAgZm9udEZhbWlseTogJ1JvYm90bywgc2Fucy1zZXJpZicsXG4gIGJvcmRlclJhZGl1czogMixcbiAgcGFsZXR0ZToge1xuICAgIHByaW1hcnkxQ29sb3I6IF9jb2xvcnMuY3lhbjUwMCxcbiAgICBwcmltYXJ5MkNvbG9yOiBfY29sb3JzLmN5YW43MDAsXG4gICAgcHJpbWFyeTNDb2xvcjogX2NvbG9ycy5ncmV5NDAwLFxuICAgIGFjY2VudDFDb2xvcjogX2NvbG9ycy5waW5rQTIwMCxcbiAgICBhY2NlbnQyQ29sb3I6IF9jb2xvcnMuZ3JleTEwMCxcbiAgICBhY2NlbnQzQ29sb3I6IF9jb2xvcnMuZ3JleTUwMCxcbiAgICB0ZXh0Q29sb3I6IF9jb2xvcnMuZGFya0JsYWNrLFxuICAgIHNlY29uZGFyeVRleHRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKF9jb2xvcnMuZGFya0JsYWNrLCAwLjU0KSxcbiAgICBhbHRlcm5hdGVUZXh0Q29sb3I6IF9jb2xvcnMud2hpdGUsXG4gICAgY2FudmFzQ29sb3I6IF9jb2xvcnMud2hpdGUsXG4gICAgYm9yZGVyQ29sb3I6IF9jb2xvcnMuZ3JleTMwMCxcbiAgICBkaXNhYmxlZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkoX2NvbG9ycy5kYXJrQmxhY2ssIDAuMyksXG4gICAgcGlja2VySGVhZGVyQ29sb3I6IF9jb2xvcnMuY3lhbjUwMCxcbiAgICBjbG9ja0NpcmNsZUNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkoX2NvbG9ycy5kYXJrQmxhY2ssIDAuMDcpLFxuICAgIHNoYWRvd0NvbG9yOiBfY29sb3JzLmZ1bGxCbGFja1xuICB9XG59OyAvKipcbiAgICAqIE5COiBJZiB5b3UgdXBkYXRlIHRoaXMgZmlsZSwgcGxlYXNlIGFsc28gdXBkYXRlIGBkb2NzL3NyYy9hcHAvY3VzdG9taXphdGlvbi9UaGVtZXMuanNgXG4gICAgKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIvKipcbiAqIExvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcy5mb3VuZGF0aW9uLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIGtleSA9PSAnX19wcm90b19fJ1xuICAgID8gdW5kZWZpbmVkXG4gICAgOiBvYmplY3Rba2V5XTtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgU3ltYm9sID0gcm9vdC5TeW1ib2wsXG4gICAgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheSxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZCxcbiAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICogYHVuZGVmaW5lZGAgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICogdmFsdWUgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbnZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIGtleXNJbik7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICBpZiAoc3RhY2tlZCkge1xuICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgIDogdW5kZWZpbmVkO1xuXG4gIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgaWYgKGlzQ29tbW9uKSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgKHNyY0luZGV4ICYmIGlzRnVuY3Rpb24ob2JqVmFsdWUpKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IGluaXRDbG9uZU9iamVjdChzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzQ29tbW9uKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICB9XG4gIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICd3cml0YWJsZSc6IHRydWVcbiAgfSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgICBpZiAoaXNOZXcpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgIGxlbmd0aCA9IDE7XG4gICAgfVxuICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgIDoge307XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3MubGVuZ3RoIC0gc3RhcnQsIDApLFxuICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbaW5kZXhdID0gYXJnc1tzdGFydCArIGluZGV4XTtcbiAgICB9XG4gICAgaW5kZXggPSAtMTtcbiAgICB2YXIgb3RoZXJBcmdzID0gQXJyYXkoc3RhcnQgKyAxKTtcbiAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgfVxuICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICB9O1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICovXG5mdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjUuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0ge1xuICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICogfTtcbiAqXG4gKiB2YXIgb3RoZXIgPSB7XG4gKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gKiB9O1xuICpcbiAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gKi9cbnZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbn0pO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlO1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIEFSRyA9IGNvZihmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmZyb207XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5Jyk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Db25zdW1hYmxlQXJyYXkyKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0TXVpVGhlbWU7XG5cbnZhciBfbG9kYXNoID0gcmVxdWlyZSgnbG9kYXNoLm1lcmdlJyk7XG5cbnZhciBfbG9kYXNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZGFzaCk7XG5cbnZhciBfY29sb3JNYW5pcHVsYXRvciA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbG9yTWFuaXB1bGF0b3InKTtcblxudmFyIF9saWdodEJhc2VUaGVtZSA9IHJlcXVpcmUoJy4vYmFzZVRoZW1lcy9saWdodEJhc2VUaGVtZScpO1xuXG52YXIgX2xpZ2h0QmFzZVRoZW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpZ2h0QmFzZVRoZW1lKTtcblxudmFyIF96SW5kZXggPSByZXF1aXJlKCcuL3pJbmRleCcpO1xuXG52YXIgX3pJbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF96SW5kZXgpO1xuXG52YXIgX2F1dG9wcmVmaXhlciA9IHJlcXVpcmUoJy4uL3V0aWxzL2F1dG9wcmVmaXhlcicpO1xuXG52YXIgX2F1dG9wcmVmaXhlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdXRvcHJlZml4ZXIpO1xuXG52YXIgX2NhbGxPbmNlID0gcmVxdWlyZSgnLi4vdXRpbHMvY2FsbE9uY2UnKTtcblxudmFyIF9jYWxsT25jZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYWxsT25jZSk7XG5cbnZhciBfcnRsID0gcmVxdWlyZSgnLi4vdXRpbHMvcnRsJyk7XG5cbnZhciBfcnRsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3J0bCk7XG5cbnZhciBfY29tcG9zZSA9IHJlcXVpcmUoJ3JlY29tcG9zZS9jb21wb3NlJyk7XG5cbnZhciBfY29tcG9zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21wb3NlKTtcblxudmFyIF90eXBvZ3JhcGh5ID0gcmVxdWlyZSgnLi90eXBvZ3JhcGh5Jyk7XG5cbnZhciBfdHlwb2dyYXBoeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBvZ3JhcGh5KTtcblxudmFyIF9jb2xvcnMgPSByZXF1aXJlKCcuL2NvbG9ycycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEdldCB0aGUgTVVJIHRoZW1lIGNvcnJlc3BvbmRpbmcgdG8gYSBiYXNlIHRoZW1lLlxuICogSXQncyBwb3NzaWJsZSB0byBvdmVycmlkZSB0aGUgY29tcHV0ZWQgdGhlbWUgdmFsdWVzXG4gKiBieSBwcm92aWRpbmcgYSBzZWNvbmQgYXJndW1lbnQuIFRoZSBjYWxjdWxhdGVkXG4gKiB0aGVtZSB3aWxsIGJlIGRlZXBseSBtZXJnZWQgd2l0aCB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICovXG5mdW5jdGlvbiBnZXRNdWlUaGVtZShtdWlUaGVtZSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbW9yZSA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtb3JlW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIG11aVRoZW1lID0gX2xvZGFzaDIuZGVmYXVsdC5hcHBseSh1bmRlZmluZWQsIFt7XG4gICAgekluZGV4OiBfekluZGV4Mi5kZWZhdWx0LFxuICAgIGlzUnRsOiBmYWxzZSxcbiAgICB1c2VyQWdlbnQ6IHVuZGVmaW5lZFxuICB9LCBfbGlnaHRCYXNlVGhlbWUyLmRlZmF1bHQsIG11aVRoZW1lXS5jb25jYXQobW9yZSkpO1xuXG4gIHZhciBfbXVpVGhlbWUgPSBtdWlUaGVtZSxcbiAgICAgIHNwYWNpbmcgPSBfbXVpVGhlbWUuc3BhY2luZyxcbiAgICAgIGZvbnRGYW1pbHkgPSBfbXVpVGhlbWUuZm9udEZhbWlseSxcbiAgICAgIHBhbGV0dGUgPSBfbXVpVGhlbWUucGFsZXR0ZTtcblxuICB2YXIgYmFzZVRoZW1lID0geyBzcGFjaW5nOiBzcGFjaW5nLCBmb250RmFtaWx5OiBmb250RmFtaWx5LCBwYWxldHRlOiBwYWxldHRlIH07XG5cbiAgbXVpVGhlbWUgPSAoMCwgX2xvZGFzaDIuZGVmYXVsdCkoe1xuICAgIGFwcEJhcjoge1xuICAgICAgY29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS5hbHRlcm5hdGVUZXh0Q29sb3IsXG4gICAgICBoZWlnaHQ6IHNwYWNpbmcuZGVza3RvcEtleWxpbmVJbmNyZW1lbnQsXG4gICAgICB0aXRsZUZvbnRXZWlnaHQ6IF90eXBvZ3JhcGh5Mi5kZWZhdWx0LmZvbnRXZWlnaHROb3JtYWwsXG4gICAgICBwYWRkaW5nOiBzcGFjaW5nLmRlc2t0b3BHdXR0ZXJcbiAgICB9LFxuICAgIGF2YXRhcjoge1xuICAgICAgY29sb3I6IHBhbGV0dGUuY2FudmFzQ29sb3IsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5lbXBoYXNpemUpKHBhbGV0dGUuY2FudmFzQ29sb3IsIDAuMjYpXG4gICAgfSxcbiAgICBiYWRnZToge1xuICAgICAgY29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgdGV4dENvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgIHByaW1hcnlDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgcHJpbWFyeVRleHRDb2xvcjogcGFsZXR0ZS5hbHRlcm5hdGVUZXh0Q29sb3IsXG4gICAgICBzZWNvbmRhcnlDb2xvcjogcGFsZXR0ZS5hY2NlbnQxQ29sb3IsXG4gICAgICBzZWNvbmRhcnlUZXh0Q29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgZm9udFdlaWdodDogX3R5cG9ncmFwaHkyLmRlZmF1bHQuZm9udFdlaWdodE1lZGl1bVxuICAgIH0sXG4gICAgYm90dG9tTmF2aWdhdGlvbjoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBwYWxldHRlLmNhbnZhc0NvbG9yLFxuICAgICAgdW5zZWxlY3RlZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuNTQpLFxuICAgICAgc2VsZWN0ZWRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgaGVpZ2h0OiA1NixcbiAgICAgIHVuc2VsZWN0ZWRGb250U2l6ZTogMTIsXG4gICAgICBzZWxlY3RlZEZvbnRTaXplOiAxNFxuICAgIH0sXG4gICAgYnV0dG9uOiB7XG4gICAgICBoZWlnaHQ6IDM2LFxuICAgICAgbWluV2lkdGg6IDg4LFxuICAgICAgaWNvbkJ1dHRvblNpemU6IHNwYWNpbmcuaWNvblNpemUgKiAyXG4gICAgfSxcbiAgICBjYXJkOiB7XG4gICAgICB0aXRsZUNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuODcpLFxuICAgICAgc3VidGl0bGVDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUudGV4dENvbG9yLCAwLjU0KSxcbiAgICAgIGZvbnRXZWlnaHQ6IF90eXBvZ3JhcGh5Mi5kZWZhdWx0LmZvbnRXZWlnaHRNZWRpdW1cbiAgICB9LFxuICAgIGNhcmRNZWRpYToge1xuICAgICAgY29sb3I6IF9jb2xvcnMuZGFya1doaXRlLFxuICAgICAgb3ZlcmxheUNvbnRlbnRCYWNrZ3JvdW5kOiBfY29sb3JzLmxpZ2h0QmxhY2ssXG4gICAgICB0aXRsZUNvbG9yOiBfY29sb3JzLmRhcmtXaGl0ZSxcbiAgICAgIHN1YnRpdGxlQ29sb3I6IF9jb2xvcnMubGlnaHRXaGl0ZVxuICAgIH0sXG4gICAgY2FyZFRleHQ6IHtcbiAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3JcbiAgICB9LFxuICAgIGNoZWNrYm94OiB7XG4gICAgICBib3hDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICBjaGVja2VkQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgIHJlcXVpcmVkQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgIGRpc2FibGVkQ29sb3I6IHBhbGV0dGUuZGlzYWJsZWRDb2xvcixcbiAgICAgIGxhYmVsQ29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgbGFiZWxEaXNhYmxlZENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3JcbiAgICB9LFxuICAgIGNoaXA6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmVtcGhhc2l6ZSkocGFsZXR0ZS5jYW52YXNDb2xvciwgMC4xMiksXG4gICAgICBkZWxldGVJY29uQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnRleHRDb2xvciwgMC4yNiksXG4gICAgICB0ZXh0Q29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnRleHRDb2xvciwgMC44NyksXG4gICAgICBmb250U2l6ZTogMTQsXG4gICAgICBmb250V2VpZ2h0OiBfdHlwb2dyYXBoeTIuZGVmYXVsdC5mb250V2VpZ2h0Tm9ybWFsLFxuICAgICAgc2hhZG93OiAnMCAxcHggNnB4ICcgKyAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS5zaGFkb3dDb2xvciwgMC4xMikgKyAnLFxcbiAgICAgICAgMCAxcHggNHB4ICcgKyAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS5zaGFkb3dDb2xvciwgMC4xMilcbiAgICB9LFxuICAgIGRhdGVQaWNrZXI6IHtcbiAgICAgIGNvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICB0ZXh0Q29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgY2FsZW5kYXJUZXh0Q29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgc2VsZWN0Q29sb3I6IHBhbGV0dGUucHJpbWFyeTJDb2xvcixcbiAgICAgIHNlbGVjdFRleHRDb2xvcjogcGFsZXR0ZS5hbHRlcm5hdGVUZXh0Q29sb3IsXG4gICAgICBjYWxlbmRhclllYXJCYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUuY2FudmFzQ29sb3IsXG4gICAgICBoZWFkZXJDb2xvcjogcGFsZXR0ZS5waWNrZXJIZWFkZXJDb2xvciB8fCBwYWxldHRlLnByaW1hcnkxQ29sb3JcbiAgICB9LFxuICAgIGRpYWxvZzoge1xuICAgICAgdGl0bGVGb250U2l6ZTogMjIsXG4gICAgICBib2R5Rm9udFNpemU6IDE2LFxuICAgICAgYm9keUNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuNilcbiAgICB9LFxuICAgIGRyb3BEb3duTWVudToge1xuICAgICAgYWNjZW50Q29sb3I6IHBhbGV0dGUuYm9yZGVyQ29sb3JcbiAgICB9LFxuICAgIGVuaGFuY2VkQnV0dG9uOiB7XG4gICAgICB0YXBIaWdobGlnaHRDb2xvcjogX2NvbG9ycy50cmFuc3BhcmVudFxuICAgIH0sXG4gICAgZmxhdEJ1dHRvbjoge1xuICAgICAgY29sb3I6IF9jb2xvcnMudHJhbnNwYXJlbnQsXG4gICAgICBidXR0b25GaWx0ZXJDb2xvcjogJyM5OTk5OTknLFxuICAgICAgZGlzYWJsZWRUZXh0Q29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnRleHRDb2xvciwgMC4zKSxcbiAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICBwcmltYXJ5VGV4dENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICBzZWNvbmRhcnlUZXh0Q29sb3I6IHBhbGV0dGUuYWNjZW50MUNvbG9yLFxuICAgICAgZm9udFNpemU6IF90eXBvZ3JhcGh5Mi5kZWZhdWx0LmZvbnRTdHlsZUJ1dHRvbkZvbnRTaXplLFxuICAgICAgZm9udFdlaWdodDogX3R5cG9ncmFwaHkyLmRlZmF1bHQuZm9udFdlaWdodE1lZGl1bVxuICAgIH0sXG4gICAgZmxvYXRpbmdBY3Rpb25CdXR0b246IHtcbiAgICAgIGJ1dHRvblNpemU6IDU2LFxuICAgICAgbWluaVNpemU6IDQwLFxuICAgICAgY29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgIGljb25Db2xvcjogcGFsZXR0ZS5hbHRlcm5hdGVUZXh0Q29sb3IsXG4gICAgICBzZWNvbmRhcnlDb2xvcjogcGFsZXR0ZS5hY2NlbnQxQ29sb3IsXG4gICAgICBzZWNvbmRhcnlJY29uQ29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgZGlzYWJsZWRUZXh0Q29sb3I6IHBhbGV0dGUuZGlzYWJsZWRDb2xvcixcbiAgICAgIGRpc2FibGVkQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5lbXBoYXNpemUpKHBhbGV0dGUuY2FudmFzQ29sb3IsIDAuMTIpXG4gICAgfSxcbiAgICBncmlkVGlsZToge1xuICAgICAgdGV4dENvbG9yOiBfY29sb3JzLndoaXRlXG4gICAgfSxcbiAgICBpY29uOiB7XG4gICAgICBjb2xvcjogcGFsZXR0ZS5jYW52YXNDb2xvcixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yXG4gICAgfSxcbiAgICBpbmtCYXI6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS5hY2NlbnQxQ29sb3JcbiAgICB9LFxuICAgIGRyYXdlcjoge1xuICAgICAgd2lkdGg6IHNwYWNpbmcuZGVza3RvcEtleWxpbmVJbmNyZW1lbnQgKiA0LFxuICAgICAgY29sb3I6IHBhbGV0dGUuY2FudmFzQ29sb3JcbiAgICB9LFxuICAgIGxpc3RJdGVtOiB7XG4gICAgICBuZXN0ZWRMZXZlbERlcHRoOiAxOCxcbiAgICAgIHNlY29uZGFyeVRleHRDb2xvcjogcGFsZXR0ZS5zZWNvbmRhcnlUZXh0Q29sb3IsXG4gICAgICBsZWZ0SWNvbkNvbG9yOiBfY29sb3JzLmdyZXk2MDAsXG4gICAgICByaWdodEljb25Db2xvcjogX2NvbG9ycy5ncmV5NjAwXG4gICAgfSxcbiAgICBtZW51OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUuY2FudmFzQ29sb3IsXG4gICAgICBjb250YWluZXJCYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUuY2FudmFzQ29sb3JcbiAgICB9LFxuICAgIG1lbnVJdGVtOiB7XG4gICAgICBkYXRhSGVpZ2h0OiAzMixcbiAgICAgIGhlaWdodDogNDgsXG4gICAgICBob3ZlckNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuMSksXG4gICAgICBwYWRkaW5nOiBzcGFjaW5nLmRlc2t0b3BHdXR0ZXIsXG4gICAgICBzZWxlY3RlZFRleHRDb2xvcjogcGFsZXR0ZS5hY2NlbnQxQ29sb3IsXG4gICAgICByaWdodEljb25EZXNrdG9wRmlsbDogX2NvbG9ycy5ncmV5NjAwXG4gICAgfSxcbiAgICBtZW51U3ViaGVhZGVyOiB7XG4gICAgICBwYWRkaW5nOiBzcGFjaW5nLmRlc2t0b3BHdXR0ZXIsXG4gICAgICBib3JkZXJDb2xvcjogcGFsZXR0ZS5ib3JkZXJDb2xvcixcbiAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yXG4gICAgfSxcbiAgICBvdmVybGF5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IF9jb2xvcnMubGlnaHRCbGFja1xuICAgIH0sXG4gICAgcGFwZXI6IHtcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS5jYW52YXNDb2xvcixcbiAgICAgIHpEZXB0aFNoYWRvd3M6IFtbMSwgNiwgMC4xMiwgMSwgNCwgMC4xMl0sIFszLCAxMCwgMC4xNiwgMywgMTAsIDAuMjNdLCBbMTAsIDMwLCAwLjE5LCA2LCAxMCwgMC4yM10sIFsxNCwgNDUsIDAuMjUsIDEwLCAxOCwgMC4yMl0sIFsxOSwgNjAsIDAuMzAsIDE1LCAyMCwgMC4yMl1dLm1hcChmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4gJzAgJyArIGRbMF0gKyAncHggJyArIGRbMV0gKyAncHggJyArICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnNoYWRvd0NvbG9yLCBkWzJdKSArICcsXFxuICAgICAgICAgMCAnICsgZFszXSArICdweCAnICsgZFs0XSArICdweCAnICsgKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUuc2hhZG93Q29sb3IsIGRbNV0pO1xuICAgICAgfSlcbiAgICB9LFxuICAgIHJhZGlvQnV0dG9uOiB7XG4gICAgICBib3JkZXJDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgY2hlY2tlZENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICByZXF1aXJlZENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICBkaXNhYmxlZENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3IsXG4gICAgICBzaXplOiAyNCxcbiAgICAgIGxhYmVsQ29sb3I6IHBhbGV0dGUudGV4dENvbG9yLFxuICAgICAgbGFiZWxEaXNhYmxlZENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3JcbiAgICB9LFxuICAgIHJhaXNlZEJ1dHRvbjoge1xuICAgICAgY29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgdGV4dENvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgIHByaW1hcnlDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgcHJpbWFyeVRleHRDb2xvcjogcGFsZXR0ZS5hbHRlcm5hdGVUZXh0Q29sb3IsXG4gICAgICBzZWNvbmRhcnlDb2xvcjogcGFsZXR0ZS5hY2NlbnQxQ29sb3IsXG4gICAgICBzZWNvbmRhcnlUZXh0Q29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgZGlzYWJsZWRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmRhcmtlbikocGFsZXR0ZS5hbHRlcm5hdGVUZXh0Q29sb3IsIDAuMSksXG4gICAgICBkaXNhYmxlZFRleHRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUudGV4dENvbG9yLCAwLjMpLFxuICAgICAgZm9udFNpemU6IF90eXBvZ3JhcGh5Mi5kZWZhdWx0LmZvbnRTdHlsZUJ1dHRvbkZvbnRTaXplLFxuICAgICAgZm9udFdlaWdodDogX3R5cG9ncmFwaHkyLmRlZmF1bHQuZm9udFdlaWdodE1lZGl1bVxuICAgIH0sXG4gICAgcmVmcmVzaEluZGljYXRvcjoge1xuICAgICAgc3Ryb2tlQ29sb3I6IHBhbGV0dGUuYm9yZGVyQ29sb3IsXG4gICAgICBsb2FkaW5nU3Ryb2tlQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvclxuICAgIH0sXG4gICAgcmlwcGxlOiB7XG4gICAgICBjb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUudGV4dENvbG9yLCAwLjg3KVxuICAgIH0sXG4gICAgc2xpZGVyOiB7XG4gICAgICB0cmFja1NpemU6IDIsXG4gICAgICB0cmFja0NvbG9yOiBwYWxldHRlLnByaW1hcnkzQ29sb3IsXG4gICAgICB0cmFja0NvbG9yU2VsZWN0ZWQ6IHBhbGV0dGUuYWNjZW50M0NvbG9yLFxuICAgICAgaGFuZGxlU2l6ZTogMTIsXG4gICAgICBoYW5kbGVTaXplRGlzYWJsZWQ6IDgsXG4gICAgICBoYW5kbGVTaXplQWN0aXZlOiAxOCxcbiAgICAgIGhhbmRsZUNvbG9yWmVybzogcGFsZXR0ZS5wcmltYXJ5M0NvbG9yLFxuICAgICAgaGFuZGxlRmlsbENvbG9yOiBwYWxldHRlLmFsdGVybmF0ZVRleHRDb2xvcixcbiAgICAgIHNlbGVjdGlvbkNvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICByaXBwbGVDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yXG4gICAgfSxcbiAgICBzbmFja2Jhcjoge1xuICAgICAgdGV4dENvbG9yOiBwYWxldHRlLmFsdGVybmF0ZVRleHRDb2xvcixcbiAgICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICBhY3Rpb25Db2xvcjogcGFsZXR0ZS5hY2NlbnQxQ29sb3JcbiAgICB9LFxuICAgIHN1YmhlYWRlcjoge1xuICAgICAgY29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnRleHRDb2xvciwgMC41NCksXG4gICAgICBmb250V2VpZ2h0OiBfdHlwb2dyYXBoeTIuZGVmYXVsdC5mb250V2VpZ2h0TWVkaXVtXG4gICAgfSxcbiAgICBzdGVwcGVyOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBob3ZlckJhY2tncm91bmRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKF9jb2xvcnMuYmxhY2ssIDAuMDYpLFxuICAgICAgaWNvbkNvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICBob3ZlcmVkSWNvbkNvbG9yOiBfY29sb3JzLmdyZXk3MDAsXG4gICAgICBpbmFjdGl2ZUljb25Db2xvcjogX2NvbG9ycy5ncmV5NTAwLFxuICAgICAgdGV4dENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkoX2NvbG9ycy5ibGFjaywgMC44NyksXG4gICAgICBkaXNhYmxlZFRleHRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKF9jb2xvcnMuYmxhY2ssIDAuMjYpLFxuICAgICAgY29ubmVjdG9yTGluZUNvbG9yOiBfY29sb3JzLmdyZXk0MDBcbiAgICB9LFxuICAgIHN2Z0ljb246IHtcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHRDb2xvclxuICAgIH0sXG4gICAgdGFibGU6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS5jYW52YXNDb2xvclxuICAgIH0sXG4gICAgdGFibGVGb290ZXI6IHtcbiAgICAgIGJvcmRlckNvbG9yOiBwYWxldHRlLmJvcmRlckNvbG9yLFxuICAgICAgdGV4dENvbG9yOiBwYWxldHRlLmFjY2VudDNDb2xvclxuICAgIH0sXG4gICAgdGFibGVIZWFkZXI6IHtcbiAgICAgIGJvcmRlckNvbG9yOiBwYWxldHRlLmJvcmRlckNvbG9yXG4gICAgfSxcbiAgICB0YWJsZUhlYWRlckNvbHVtbjoge1xuICAgICAgdGV4dENvbG9yOiBwYWxldHRlLmFjY2VudDNDb2xvcixcbiAgICAgIGhlaWdodDogNTYsXG4gICAgICBzcGFjaW5nOiAyNFxuICAgIH0sXG4gICAgdGFibGVSb3c6IHtcbiAgICAgIGhvdmVyQ29sb3I6IHBhbGV0dGUuYWNjZW50MkNvbG9yLFxuICAgICAgc3RyaXBlQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSgoMCwgX2NvbG9yTWFuaXB1bGF0b3IubGlnaHRlbikocGFsZXR0ZS5wcmltYXJ5MUNvbG9yLCAwLjUpLCAwLjQpLFxuICAgICAgc2VsZWN0ZWRDb2xvcjogcGFsZXR0ZS5ib3JkZXJDb2xvcixcbiAgICAgIHRleHRDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICBib3JkZXJDb2xvcjogcGFsZXR0ZS5ib3JkZXJDb2xvcixcbiAgICAgIGhlaWdodDogNDhcbiAgICB9LFxuICAgIHRhYmxlUm93Q29sdW1uOiB7XG4gICAgICBoZWlnaHQ6IDQ4LFxuICAgICAgc3BhY2luZzogMjRcbiAgICB9LFxuICAgIHRhYnM6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgdGV4dENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS5hbHRlcm5hdGVUZXh0Q29sb3IsIDAuNyksXG4gICAgICBzZWxlY3RlZFRleHRDb2xvcjogcGFsZXR0ZS5hbHRlcm5hdGVUZXh0Q29sb3JcbiAgICB9LFxuICAgIHRleHRGaWVsZDoge1xuICAgICAgdGV4dENvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgIGhpbnRDb2xvcjogcGFsZXR0ZS5kaXNhYmxlZENvbG9yLFxuICAgICAgZmxvYXRpbmdMYWJlbENvbG9yOiBwYWxldHRlLmRpc2FibGVkQ29sb3IsXG4gICAgICBkaXNhYmxlZFRleHRDb2xvcjogcGFsZXR0ZS5kaXNhYmxlZENvbG9yLFxuICAgICAgZXJyb3JDb2xvcjogX2NvbG9ycy5yZWQ1MDAsXG4gICAgICBmb2N1c0NvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgICBib3JkZXJDb2xvcjogcGFsZXR0ZS5ib3JkZXJDb2xvclxuICAgIH0sXG4gICAgdGltZVBpY2tlcjoge1xuICAgICAgY29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yLFxuICAgICAgdGV4dENvbG9yOiBwYWxldHRlLmFsdGVybmF0ZVRleHRDb2xvcixcbiAgICAgIGFjY2VudENvbG9yOiBwYWxldHRlLnByaW1hcnkxQ29sb3IsXG4gICAgICBjbG9ja0NvbG9yOiBwYWxldHRlLnRleHRDb2xvcixcbiAgICAgIGNsb2NrQ2lyY2xlQ29sb3I6IHBhbGV0dGUuY2xvY2tDaXJjbGVDb2xvcixcbiAgICAgIGhlYWRlckNvbG9yOiBwYWxldHRlLnBpY2tlckhlYWRlckNvbG9yIHx8IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgIHNlbGVjdENvbG9yOiBwYWxldHRlLnByaW1hcnkyQ29sb3IsXG4gICAgICBzZWxlY3RUZXh0Q29sb3I6IHBhbGV0dGUuYWx0ZXJuYXRlVGV4dENvbG9yXG4gICAgfSxcbiAgICB0b2dnbGU6IHtcbiAgICAgIHRodW1iT25Db2xvcjogcGFsZXR0ZS5wcmltYXJ5MUNvbG9yLFxuICAgICAgdGh1bWJPZmZDb2xvcjogcGFsZXR0ZS5hY2NlbnQyQ29sb3IsXG4gICAgICB0aHVtYkRpc2FibGVkQ29sb3I6IHBhbGV0dGUuYm9yZGVyQ29sb3IsXG4gICAgICB0aHVtYlJlcXVpcmVkQ29sb3I6IHBhbGV0dGUucHJpbWFyeTFDb2xvcixcbiAgICAgIHRyYWNrT25Db2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUucHJpbWFyeTFDb2xvciwgMC41KSxcbiAgICAgIHRyYWNrT2ZmQ29sb3I6IHBhbGV0dGUucHJpbWFyeTNDb2xvcixcbiAgICAgIHRyYWNrRGlzYWJsZWRDb2xvcjogcGFsZXR0ZS5wcmltYXJ5M0NvbG9yLFxuICAgICAgbGFiZWxDb2xvcjogcGFsZXR0ZS50ZXh0Q29sb3IsXG4gICAgICBsYWJlbERpc2FibGVkQ29sb3I6IHBhbGV0dGUuZGlzYWJsZWRDb2xvcixcbiAgICAgIHRyYWNrUmVxdWlyZWRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHBhbGV0dGUucHJpbWFyeTFDb2xvciwgMC41KVxuICAgIH0sXG4gICAgdG9vbGJhcjoge1xuICAgICAgY29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnRleHRDb2xvciwgMC41NCksXG4gICAgICBob3ZlckNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuODcpLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZGFya2VuKShwYWxldHRlLmFjY2VudDJDb2xvciwgMC4wNSksXG4gICAgICBoZWlnaHQ6IDU2LFxuICAgICAgdGl0bGVGb250U2l6ZTogMjAsXG4gICAgICBpY29uQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKShwYWxldHRlLnRleHRDb2xvciwgMC40KSxcbiAgICAgIHNlcGFyYXRvckNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuMTc1KSxcbiAgICAgIG1lbnVIb3ZlckNvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkocGFsZXR0ZS50ZXh0Q29sb3IsIDAuMSlcbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgIGNvbG9yOiBfY29sb3JzLndoaXRlLFxuICAgICAgcmlwcGxlQmFja2dyb3VuZENvbG9yOiBfY29sb3JzLmdyZXk3MDAsXG4gICAgICBvcGFjaXR5OiAwLjlcbiAgICB9XG4gIH0sIG11aVRoZW1lLCB7XG4gICAgYmFzZVRoZW1lOiBiYXNlVGhlbWUsIC8vIFRvIHByb3ZpZGUgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgICByYXdUaGVtZTogYmFzZVRoZW1lIC8vIFRvIHByb3ZpZGUgYmFja3dhcmQgY29tcGF0aWJpbGl0eS5cbiAgfSk7XG5cbiAgdmFyIHRyYW5zZm9ybWVycyA9IFtfYXV0b3ByZWZpeGVyMi5kZWZhdWx0LCBfcnRsMi5kZWZhdWx0LCBfY2FsbE9uY2UyLmRlZmF1bHRdLm1hcChmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiB0KG11aVRoZW1lKTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIHQ7XG4gIH0pO1xuXG4gIG11aVRoZW1lLnByZXBhcmVTdHlsZXMgPSBfY29tcG9zZTIuZGVmYXVsdC5hcHBseSh1bmRlZmluZWQsICgwLCBfdG9Db25zdW1hYmxlQXJyYXkzLmRlZmF1bHQpKHRyYW5zZm9ybWVycykpO1xuXG4gIHJldHVybiBtdWlUaGVtZTtcbn0iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKSB7XG4gIHJldHVybiAkT2JqZWN0LmNyZWF0ZShQLCBEKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxudmFyIERPTUl0ZXJhYmxlcyA9ICgnQ1NTUnVsZUxpc3QsQ1NTU3R5bGVEZWNsYXJhdGlvbixDU1NWYWx1ZUxpc3QsQ2xpZW50UmVjdExpc3QsRE9NUmVjdExpc3QsRE9NU3RyaW5nTGlzdCwnICtcbiAgJ0RPTVRva2VuTGlzdCxEYXRhVHJhbnNmZXJJdGVtTGlzdCxGaWxlTGlzdCxIVE1MQWxsQ29sbGVjdGlvbixIVE1MQ29sbGVjdGlvbixIVE1MRm9ybUVsZW1lbnQsSFRNTFNlbGVjdEVsZW1lbnQsJyArXG4gICdNZWRpYUxpc3QsTWltZVR5cGVBcnJheSxOYW1lZE5vZGVNYXAsTm9kZUxpc3QsUGFpbnRSZXF1ZXN0TGlzdCxQbHVnaW4sUGx1Z2luQXJyYXksU1ZHTGVuZ3RoTGlzdCxTVkdOdW1iZXJMaXN0LCcgK1xuICAnU1ZHUGF0aFNlZ0xpc3QsU1ZHUG9pbnRMaXN0LFNWR1N0cmluZ0xpc3QsU1ZHVHJhbnNmb3JtTGlzdCxTb3VyY2VCdWZmZXJMaXN0LFN0eWxlU2hlZXRMaXN0LFRleHRUcmFja0N1ZUxpc3QsJyArXG4gICdUZXh0VHJhY2tMaXN0LFRvdWNoTGlzdCcpLnNwbGl0KCcsJyk7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgRE9NSXRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gRE9NSXRlcmFibGVzW2ldO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn1cbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2l0ZXJhdG9yJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYykge1xuICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgZG9jID0gb2JqZWN0ID8gb2JqZWN0Lm93bmVyRG9jdW1lbnQgfHwgb2JqZWN0IDogZG9jdW1lbnQ7XG4gIHZhciBkZWZhdWx0VmlldyA9IGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBkZWZhdWx0Vmlldy5Ob2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgZGVmYXVsdFZpZXcuTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL2lzTm9kZScpO1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShvYmplY3QpIHtcbiAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjMuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGJhPXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksZWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpLEE9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksQz1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxmYT1yZXF1aXJlKFwiZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudFwiKSxoYT1yZXF1aXJlKFwiZmJqcy9saWIvc2hhbGxvd0VxdWFsXCIpLGphPXJlcXVpcmUoXCJmYmpzL2xpYi9jb250YWluc05vZGVcIiksa2E9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpO1xuZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50XFx4M2RcIithLGQ9MDtkPGI7ZCsrKWMrPVwiXFx4MjZhcmdzW11cXHgzZFwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YmEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1lYT92b2lkIDA6RChcIjIyN1wiKTtcbmZ1bmN0aW9uIG1hKGEsYixjLGQsZSxmLGgsZyxrKXt0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMTt0aGlzLl9jYXVnaHRFcnJvcj1udWxsO3ZhciB2PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLHYpfWNhdGNoKGwpe3RoaXMuX2NhdWdodEVycm9yPWwsdGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITB9fVxudmFyIEU9e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbnZva2VHdWFyZGVkQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsaCxnLGspe21hLmFwcGx5KEUsYXJndW1lbnRzKX0saW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsZyxrKXtFLmludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoRS5oYXNDYXVnaHRFcnJvcigpKXt2YXIgdj1FLmNsZWFyQ2F1Z2h0RXJyb3IoKTtFLl9oYXNSZXRocm93RXJyb3J8fChFLl9oYXNSZXRocm93RXJyb3I9ITAsRS5fcmV0aHJvd0Vycm9yPXYpfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIG5hLmFwcGx5KEUsYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gRS5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihFLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9XG5FLl9jYXVnaHRFcnJvcjtFLl9jYXVnaHRFcnJvcj1udWxsO0UuX2hhc0NhdWdodEVycm9yPSExO3JldHVybiBhfUQoXCIxOThcIil9fTtmdW5jdGlvbiBuYSgpe2lmKEUuX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9RS5fcmV0aHJvd0Vycm9yO0UuX3JldGhyb3dFcnJvcj1udWxsO0UuX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIG9hPW51bGwscGE9e307XG5mdW5jdGlvbiBxYSgpe2lmKG9hKWZvcih2YXIgYSBpbiBwYSl7dmFyIGI9cGFbYV0sYz1vYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkQoXCI5NlwiLGEpO2lmKCFyYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpEKFwiOTdcIixhKTtyYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxoPWIsZz1kO3NhLmhhc093blByb3BlcnR5KGcpP0QoXCI5OVwiLGcpOnZvaWQgMDtzYVtnXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ0YShrW2VdLGgsZyk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odGEoZi5yZWdpc3RyYXRpb25OYW1lLGgsZyksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpEKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gdGEoYSxiLGMpe3VhW2FdP0QoXCIxMDBcIixhKTp2b2lkIDA7dWFbYV09Yjt2YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciByYT1bXSxzYT17fSx1YT17fSx2YT17fTtmdW5jdGlvbiB3YShhKXtvYT9EKFwiMTAxXCIpOnZvaWQgMDtvYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtxYSgpfWZ1bmN0aW9uIHhhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO3BhLmhhc093blByb3BlcnR5KGMpJiZwYVtjXT09PWR8fChwYVtjXT9EKFwiMTAyXCIsYyk6dm9pZCAwLHBhW2NdPWQsYj0hMCl9YiYmcWEoKX1cbnZhciBDYT1PYmplY3QuZnJlZXplKHtwbHVnaW5zOnJhLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpzYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczp1YSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOnZhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOndhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp4YX0pLERhPW51bGwsRWE9bnVsbCxGYT1udWxsO2Z1bmN0aW9uIEdhKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9RmEoZCk7RS5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIEhhKGEsYil7bnVsbD09Yj9EKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBJYShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgSmE9bnVsbDtcbmZ1bmN0aW9uIEthKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKUdhKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmR2EoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gTGEoYSl7cmV0dXJuIEthKGEsITApfWZ1bmN0aW9uIE1hKGEpe3JldHVybiBLYShhLCExKX12YXIgTmE9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6d2EsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnhhfTtcbmZ1bmN0aW9uIE9hKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9RGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIFBhKGEsYil7bnVsbCE9PWEmJihKYT1IYShKYSxhKSk7YT1KYTtKYT1udWxsO2EmJihiP0lhKGEsTGEpOklhKGEsTWEpLEphP0QoXCI5NVwiKTp2b2lkIDAsRS5yZXRocm93Q2F1Z2h0RXJyb3IoKSl9ZnVuY3Rpb24gUWEoYSxiLGMsZCl7Zm9yKHZhciBlPW51bGwsZj0wO2Y8cmEubGVuZ3RoO2YrKyl7dmFyIGg9cmFbZl07aCYmKGg9aC5leHRyYWN0RXZlbnRzKGEsYixjLGQpKSYmKGU9SGEoZSxoKSl9UGEoZSwhMSl9dmFyIFJhPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpOYSxnZXRMaXN0ZW5lcjpPYSxydW5FdmVudHNJbkJhdGNoOlBhLHJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2g6UWF9KSxTYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrU2EsVGE9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitTYTtcbmZ1bmN0aW9uIFVhKGEpe2lmKGFbRl0pcmV0dXJuIGFbRl07Zm9yKDshYVtGXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0ZdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gVmEoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO0QoXCIzM1wiKX1mdW5jdGlvbiBYYShhKXtyZXR1cm4gYVtUYV18fG51bGx9dmFyIGJiPU9iamVjdC5mcmVlemUoe3ByZWNhY2hlRmliZXJOb2RlOmZ1bmN0aW9uKGEsYil7YltGXT1hfSxnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZTpVYSxnZXRJbnN0YW5jZUZyb21Ob2RlOmZ1bmN0aW9uKGEpe2E9YVtGXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfSxnZXROb2RlRnJvbUluc3RhbmNlOlZhLGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU6WGEsdXBkYXRlRmliZXJQcm9wczpmdW5jdGlvbihhLGIpe2FbVGFdPWJ9fSk7XG5mdW5jdGlvbiBMKGEpe2RvIGE9YVtcInJldHVyblwiXTt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBjYihhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPUwoYSk7Zm9yKGE9ZC5sZW5ndGg7MDxhLS07KWIoZFthXSxcImNhcHR1cmVkXCIsYyk7Zm9yKGE9MDthPGQubGVuZ3RoO2ErKyliKGRbYV0sXCJidWJibGVkXCIsYyl9ZnVuY3Rpb24gZGIoYSxiLGMpe2lmKGI9T2EoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1IYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1IYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBlYihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzJiZjYihhLl90YXJnZXRJbnN0LGRiLGEpfVxuZnVuY3Rpb24gZmIoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7dmFyIGI9YS5fdGFyZ2V0SW5zdDtiPWI/TChiKTpudWxsO2NiKGIsZGIsYSl9fWZ1bmN0aW9uIGdiKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPU9hKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1IYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1IYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gaGIoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZnYihhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gaWIoYSl7SWEoYSxlYil9XG5mdW5jdGlvbiBqYihhLGIsYyxkKXtpZihjJiZkKWE6e3ZhciBlPWM7Zm9yKHZhciBmPWQsaD0wLGc9ZTtnO2c9TChnKSloKys7Zz0wO2Zvcih2YXIgaz1mO2s7az1MKGspKWcrKztmb3IoOzA8aC1nOyllPUwoZSksaC0tO2Zvcig7MDxnLWg7KWY9TChmKSxnLS07Zm9yKDtoLS07KXtpZihlPT09Znx8ZT09PWYuYWx0ZXJuYXRlKWJyZWFrIGE7ZT1MKGUpO2Y9TChmKX1lPW51bGx9ZWxzZSBlPW51bGw7Zj1lO2ZvcihlPVtdO2MmJmMhPT1mOyl7aD1jLmFsdGVybmF0ZTtpZihudWxsIT09aCYmaD09PWYpYnJlYWs7ZS5wdXNoKGMpO2M9TChjKX1mb3IoYz1bXTtkJiZkIT09Zjspe2g9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWgmJmg9PT1mKWJyZWFrO2MucHVzaChkKTtkPUwoZCl9Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKylnYihlW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihhPWMubGVuZ3RoOzA8YS0tOylnYihjW2FdLFwiY2FwdHVyZWRcIixiKX1cbnZhciBrYj1PYmplY3QuZnJlZXplKHthY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOmliLGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0OmZ1bmN0aW9uKGEpe0lhKGEsZmIpfSxhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6amIsYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6ZnVuY3Rpb24oYSl7SWEoYSxoYil9fSksbGI9bnVsbDtmdW5jdGlvbiBtYigpeyFsYiYmbS5jYW5Vc2VET00mJihsYj1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpO3JldHVybiBsYn12YXIgTT17X3Jvb3Q6bnVsbCxfc3RhcnRUZXh0Om51bGwsX2ZhbGxiYWNrVGV4dDpudWxsfTtcbmZ1bmN0aW9uIG5iKCl7aWYoTS5fZmFsbGJhY2tUZXh0KXJldHVybiBNLl9mYWxsYmFja1RleHQ7dmFyIGEsYj1NLl9zdGFydFRleHQsYz1iLmxlbmd0aCxkLGU9b2IoKSxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBoPWMtYTtmb3IoZD0xO2Q8PWgmJmJbYy1kXT09PWVbZi1kXTtkKyspO00uX2ZhbGxiYWNrVGV4dD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApO3JldHVybiBNLl9mYWxsYmFja1RleHR9ZnVuY3Rpb24gb2IoKXtyZXR1cm5cInZhbHVlXCJpbiBNLl9yb290P00uX3Jvb3QudmFsdWU6TS5fcm9vdFttYigpXX1cbnZhciBwYj1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLHFiPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpDLnRoYXRSZXR1cm5zTnVsbCxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuZnVuY3Rpb24gTihhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/Qy50aGF0UmV0dXJuc1RydWU6Qy50aGF0UmV0dXJuc0ZhbHNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qy50aGF0UmV0dXJuc0ZhbHNlO3JldHVybiB0aGlzfVxuQShOLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPUMudGhhdFJldHVybnNUcnVlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNUcnVlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PUMudGhhdFJldHVybnNUcnVlfSxpc1BlcnNpc3RlbnQ6Qy50aGF0UmV0dXJuc0ZhbHNlLFxuZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLGI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7Zm9yKGE9MDthPHBiLmxlbmd0aDthKyspdGhpc1twYlthXV09bnVsbH19KTtOLkludGVyZmFjZT1xYjtOLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtBKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1BKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO3JiKGMpO3JldHVybiBjfTtyYihOKTtcbmZ1bmN0aW9uIHNiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIHRiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDpEKFwiMjIzXCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiByYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1zYjthLnJlbGVhc2U9dGJ9dmFyIHViPU4uZXh0ZW5kKHtkYXRhOm51bGx9KSx2Yj1OLmV4dGVuZCh7ZGF0YTpudWxsfSksd2I9WzksMTMsMjcsMzJdLHhiPW0uY2FuVXNlRE9NJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyx5Yj1udWxsO20uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJih5Yj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHpiPW0uY2FuVXNlRE9NJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYheWIsQWI9bS5jYW5Vc2VET00mJigheGJ8fHliJiY4PHliJiYxMT49eWIpLEJiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLEtiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1widG9wQ29tcG9zaXRpb25FbmRcIixcInRvcEtleVByZXNzXCIsXCJ0b3BUZXh0SW5wdXRcIixcInRvcFBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uRW5kIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25TdGFydCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblVwZGF0ZSB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX19LExiPSExO1xuZnVuY3Rpb24gTWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuLTEhPT13Yi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcInRvcEtleURvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmNhc2UgXCJ0b3BNb3VzZURvd25cIjpjYXNlIFwidG9wQmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIE5iKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIE9iPSExO2Z1bmN0aW9uIFBiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiBOYihiKTtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7TGI9ITA7cmV0dXJuIEJiO2Nhc2UgXCJ0b3BUZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PUJiJiZMYj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBRYihhLGIpe2lmKE9iKXJldHVyblwidG9wQ29tcG9zaXRpb25FbmRcIj09PWF8fCF4YiYmTWIoYSxiKT8oYT1uYigpLE0uX3Jvb3Q9bnVsbCxNLl9zdGFydFRleHQ9bnVsbCxNLl9mYWxsYmFja1RleHQ9bnVsbCxPYj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wUGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5UHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gQWI/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgUmI9e2V2ZW50VHlwZXM6S2IsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKHhiKWI6e3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25TdGFydFwiOmU9S2IuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOmU9S2IuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25VcGRhdGVcIjplPUtiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSBPYj9NYihhLGMpJiYoZT1LYi5jb21wb3NpdGlvbkVuZCk6XCJ0b3BLZXlEb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPUtiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KEFiJiYoT2J8fGUhPT1LYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1LYi5jb21wb3NpdGlvbkVuZCYmT2ImJihmPW5iKCkpOihNLl9yb290PWQsTS5fc3RhcnRUZXh0PW9iKCksT2I9ITApKSxlPXViLmdldFBvb2xlZChlLFxuYixjLGQpLGY/ZS5kYXRhPWY6KGY9TmIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLGliKGUpLGY9ZSk6Zj1udWxsOyhhPXpiP1BiKGEsYyk6UWIoYSxjKSk/KGI9dmIuZ2V0UG9vbGVkKEtiLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxpYihiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxTYj1udWxsLFRiPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe1NiPWF9fSxVYj1udWxsLFZiPW51bGw7ZnVuY3Rpb24gV2IoYSl7aWYoYT1FYShhKSl7U2ImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBTYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpEKFwiMTk0XCIpO3ZhciBiPURhKGEuc3RhdGVOb2RlKTtTYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gWGIoYSl7VWI/VmI/VmIucHVzaChhKTpWYj1bYV06VWI9YX1cbmZ1bmN0aW9uIFliKCl7cmV0dXJuIG51bGwhPT1VYnx8bnVsbCE9PVZifWZ1bmN0aW9uIFpiKCl7aWYoVWIpe3ZhciBhPVViLGI9VmI7VmI9VWI9bnVsbDtXYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspV2IoYlthXSl9fXZhciAkYj1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246VGIsZW5xdWV1ZVN0YXRlUmVzdG9yZTpYYixuZWVkc1N0YXRlUmVzdG9yZTpZYixyZXN0b3JlU3RhdGVJZk5lZWRlZDpaYn0pO2Z1bmN0aW9uIGFjKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gYmMoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gY2MoKXt9dmFyIGRjPSExO2Z1bmN0aW9uIGVjKGEsYil7aWYoZGMpcmV0dXJuIGEoYik7ZGM9ITA7dHJ5e3JldHVybiBhYyhhLGIpfWZpbmFsbHl7ZGM9ITEsWWIoKSYmKGNjKCksWmIoKSl9fVxudmFyIGZjPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIGdjKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhZmNbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIGhjKGEpe2E9YS50YXJnZXR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKCFtLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTthPVwib25cIithO2I9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIGpjKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBrYyhhKXt2YXIgYj1qYyhhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldClyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjLmdldC5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Yy5zZXQuY2FsbCh0aGlzLGEpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSkse2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9bnVsbDtkZWxldGUgYVtiXX19fVxuZnVuY3Rpb24gbGMoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPWtjKGEpKX1mdW5jdGlvbiBtYyhhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9amMoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBuYz1lYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixPPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSxvYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jYWxsXCIpOjYwMTA0LHFjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucmV0dXJuXCIpOjYwMTA1LHJjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHNjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHZjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx3Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsXG54Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHljPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiB6YyhhKXtpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eWMmJmFbeWNdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBBYyhhKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBzYzpyZXR1cm5cIlJlYWN0RnJhZ21lbnRcIjtjYXNlIHJjOnJldHVyblwiUmVhY3RQb3J0YWxcIjtjYXNlIHBjOnJldHVyblwiUmVhY3RDYWxsXCI7Y2FzZSBxYzpyZXR1cm5cIlJlYWN0UmV0dXJuXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB4YzpyZXR1cm4gYT1hLnJlbmRlci5kaXNwbGF5TmFtZXx8YS5yZW5kZXIubmFtZXx8XCJcIixcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIn1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEJjKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDE6Y2FzZSAyOmNhc2UgNTp2YXIgYz1hLl9kZWJ1Z093bmVyLGQ9YS5fZGVidWdTb3VyY2U7dmFyIGU9QWMoYSk7dmFyIGY9bnVsbDtjJiYoZj1BYyhjKSk7Yz1kO2U9XCJcXG4gICAgaW4gXCIrKGV8fFwiVW5rbm93blwiKSsoYz9cIiAoYXQgXCIrYy5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLFwiXCIpK1wiOlwiK2MubGluZU51bWJlcitcIilcIjpmP1wiIChjcmVhdGVkIGJ5IFwiK2YrXCIpXCI6XCJcIik7YnJlYWsgYTtkZWZhdWx0OmU9XCJcIn1iKz1lO2E9YVtcInJldHVyblwiXX13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBDYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sRGM9e30sRWM9e307ZnVuY3Rpb24gRmMoYSl7aWYoRWMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITA7aWYoRGMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITE7aWYoQ2MudGVzdChhKSlyZXR1cm4gRWNbYV09ITA7RGNbYV09ITA7cmV0dXJuITF9XG5mdW5jdGlvbiBHYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBIYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxHYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1cbmZ1bmN0aW9uIFUoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBWPXt9O1wiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDAsITEsYSxudWxsKX0pO1xuW1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO1ZbYl09bmV3IFUoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwyLCExLGEsbnVsbCl9KTtcblwiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwzLCEwLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDQsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDYsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgU2M9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBUYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShTYyxcblRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShTYyxUYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShTYyxUYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO1YudGFiSW5kZXg9bmV3IFUoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24gVWMoYSxiLGMsZCl7dmFyIGU9Vi5oYXNPd25Qcm9wZXJ0eShiKT9WW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoSGMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP0ZjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiBWYyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gV2MoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9WGMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBZYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlVjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBaYyhhLGIpe1ljKGEsYik7dmFyIGM9WGMoYi52YWx1ZSk7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2IuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT8kYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiYkYyhhLGIudHlwZSxYYyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGFkKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKVwiXCI9PT1hLnZhbHVlJiYoYS52YWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpLGEuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtiPWEubmFtZTtcIlwiIT09YiYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWImJihhLm5hbWU9Yil9ZnVuY3Rpb24gJGMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfVxuZnVuY3Rpb24gWGMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fXZhciBiZD17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDaGFuZ2UgdG9wQ2xpY2sgdG9wRm9jdXMgdG9wSW5wdXQgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBjZChhLGIsYyl7YT1OLmdldFBvb2xlZChiZC5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO1hiKGMpO2liKGEpO3JldHVybiBhfXZhciBkZD1udWxsLGVkPW51bGw7ZnVuY3Rpb24gZmQoYSl7UGEoYSwhMSl9XG5mdW5jdGlvbiBnZChhKXt2YXIgYj1WYShhKTtpZihtYyhiKSlyZXR1cm4gYX1mdW5jdGlvbiBoZChhLGIpe2lmKFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBpZD0hMTttLmNhblVzZURPTSYmKGlkPWljKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIGpkKCl7ZGQmJihkZC5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixrZCksZWQ9ZGQ9bnVsbCl9ZnVuY3Rpb24ga2QoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJmdkKGVkKSYmKGE9Y2QoZWQsYSxoYyhhKSksZWMoZmQsYSkpfWZ1bmN0aW9uIGxkKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhqZCgpLGRkPWIsZWQ9YyxkZC5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixrZCkpOlwidG9wQmx1clwiPT09YSYmamQoKX1cbmZ1bmN0aW9uIG1kKGEpe2lmKFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI9PT1hfHxcInRvcEtleVVwXCI9PT1hfHxcInRvcEtleURvd25cIj09PWEpcmV0dXJuIGdkKGVkKX1mdW5jdGlvbiBuZChhLGIpe2lmKFwidG9wQ2xpY2tcIj09PWEpcmV0dXJuIGdkKGIpfWZ1bmN0aW9uIG9kKGEsYil7aWYoXCJ0b3BJbnB1dFwiPT09YXx8XCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGdkKGIpfVxudmFyIHBkPXtldmVudFR5cGVzOmJkLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6aWQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1ZhKGIpOndpbmRvdyxmPXZvaWQgMCxoPXZvaWQgMCxnPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09Z3x8XCJpbnB1dFwiPT09ZyYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1oZDpnYyhlKT9pZD9mPW9kOihmPW1kLGg9bGQpOihnPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1nLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPW5kKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBjZChmLGMsZCk7aCYmaChhLGUsYik7XCJ0b3BCbHVyXCI9PT1hJiZudWxsIT1iJiYoYT1iLl93cmFwcGVyU3RhdGV8fGUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmJGMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0scWQ9Ti5leHRlbmQoe3ZpZXc6bnVsbCxcbmRldGFpbDpudWxsfSkscmQ9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIHNkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9cmRbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB0ZCgpe3JldHVybiBzZH1cbnZhciB1ZD1xZC5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGQsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9fSksdmQ9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfX0sd2Q9e2V2ZW50VHlwZXM6dmQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLFxuYixjLGQpe2lmKFwidG9wTW91c2VPdmVyXCI9PT1hJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8XCJ0b3BNb3VzZU91dFwiIT09YSYmXCJ0b3BNb3VzZU92ZXJcIiE9PWEpcmV0dXJuIG51bGw7dmFyIGU9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7XCJ0b3BNb3VzZU91dFwiPT09YT8oYT1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/VWEoYik6bnVsbCk6YT1udWxsO2lmKGE9PT1iKXJldHVybiBudWxsO3ZhciBmPW51bGw9PWE/ZTpWYShhKTtlPW51bGw9PWI/ZTpWYShiKTt2YXIgaD11ZC5nZXRQb29sZWQodmQubW91c2VMZWF2ZSxhLGMsZCk7aC50eXBlPVwibW91c2VsZWF2ZVwiO2gudGFyZ2V0PWY7aC5yZWxhdGVkVGFyZ2V0PWU7Yz11ZC5nZXRQb29sZWQodmQubW91c2VFbnRlcixiLGMsZCk7Yy50eXBlPVwibW91c2VlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PVxuZjtqYihoLGMsYSxiKTtyZXR1cm5baCxjXX19O2Z1bmN0aW9uIHhkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiW1wicmV0dXJuXCJdOyliPWJbXCJyZXR1cm5cIl07ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7YltcInJldHVyblwiXTspaWYoYj1iW1wicmV0dXJuXCJdLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24geWQoYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09eGQoYSk6ITF9ZnVuY3Rpb24gemQoYSl7MiE9PXhkKGEpP0QoXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gQWQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9eGQoYSksMz09PWI/RChcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jW1wicmV0dXJuXCJdLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXJldHVybiB6ZChlKSxhO2lmKGg9PT1kKXJldHVybiB6ZChlKSxiO2g9aC5zaWJsaW5nfUQoXCIxODhcIil9aWYoY1tcInJldHVyblwiXSE9PWRbXCJyZXR1cm5cIl0pYz1lLGQ9ZjtlbHNle2g9ITE7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZTtkPWY7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1lO2M9ZjticmVha31nPWcuc2libGluZ31pZighaCl7Zm9yKGc9Zi5jaGlsZDtnOyl7aWYoZz09PWMpe2g9ITA7Yz1mO2Q9ZTticmVha31pZihnPT09ZCl7aD0hMDtkPWY7Yz1lO2JyZWFrfWc9Zy5zaWJsaW5nfWg/XG52b2lkIDA6RChcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP0QoXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz9EKFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIEJkKGEpe2E9QWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybiBudWxsO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBDZChhKXthPUFkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQmJjQhPT1iLnRhZyliLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybiBudWxsO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319cmV0dXJuIG51bGx9dmFyIERkPU4uZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxFZD1OLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEZkPXFkLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBHZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBIZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sSWQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LEpkPXFkLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1IZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1HZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/SWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOnRkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP0dkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP0dkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksS2Q9dWQuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLExkPXFkLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOnRkfSksTWQ9Ti5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksTmQ9dWQuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSxPZD17fSxQZD17fTtmdW5jdGlvbiBRZChhLGIpe3ZhciBjPWFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpLGQ9XCJvblwiK2M7Yz1cInRvcFwiK2M7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07T2RbYV09YjtQZFtjXT1ifVxuXCJibHVyIGNhbmNlbCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkb3VibGVDbGljayBkcmFnRW5kIGRyYWdTdGFydCBkcm9wIGZvY3VzIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBtb3VzZURvd24gbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHJhdGVDaGFuZ2UgcmVzZXQgc2Vla2VkIHN1Ym1pdCB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1FkKGEsITApfSk7XG5cImFib3J0IGFuaW1hdGlvbkVuZCBhbmltYXRpb25JdGVyYXRpb24gYW5pbWF0aW9uU3RhcnQgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBkcmFnIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIHBsYXlpbmcgcHJvZ3Jlc3Mgc2Nyb2xsIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWVVcGRhdGUgdG9nZ2xlIHRvdWNoTW92ZSB0cmFuc2l0aW9uRW5kIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtRZChhLCExKX0pO1xudmFyIFJkPXtldmVudFR5cGVzOk9kLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPVBkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1QZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMD09PUdkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6YT1KZDticmVhaztjYXNlIFwidG9wQmx1clwiOmNhc2UgXCJ0b3BGb2N1c1wiOmE9RmQ7YnJlYWs7Y2FzZSBcInRvcENsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJ0b3BEb3VibGVDbGlja1wiOmNhc2UgXCJ0b3BNb3VzZURvd25cIjpjYXNlIFwidG9wTW91c2VNb3ZlXCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpjYXNlIFwidG9wTW91c2VPdXRcIjpjYXNlIFwidG9wTW91c2VPdmVyXCI6Y2FzZSBcInRvcENvbnRleHRNZW51XCI6YT1cbnVkO2JyZWFrO2Nhc2UgXCJ0b3BEcmFnXCI6Y2FzZSBcInRvcERyYWdFbmRcIjpjYXNlIFwidG9wRHJhZ0VudGVyXCI6Y2FzZSBcInRvcERyYWdFeGl0XCI6Y2FzZSBcInRvcERyYWdMZWF2ZVwiOmNhc2UgXCJ0b3BEcmFnT3ZlclwiOmNhc2UgXCJ0b3BEcmFnU3RhcnRcIjpjYXNlIFwidG9wRHJvcFwiOmE9S2Q7YnJlYWs7Y2FzZSBcInRvcFRvdWNoQ2FuY2VsXCI6Y2FzZSBcInRvcFRvdWNoRW5kXCI6Y2FzZSBcInRvcFRvdWNoTW92ZVwiOmNhc2UgXCJ0b3BUb3VjaFN0YXJ0XCI6YT1MZDticmVhaztjYXNlIFwidG9wQW5pbWF0aW9uRW5kXCI6Y2FzZSBcInRvcEFuaW1hdGlvbkl0ZXJhdGlvblwiOmNhc2UgXCJ0b3BBbmltYXRpb25TdGFydFwiOmE9RGQ7YnJlYWs7Y2FzZSBcInRvcFRyYW5zaXRpb25FbmRcIjphPU1kO2JyZWFrO2Nhc2UgXCJ0b3BTY3JvbGxcIjphPXFkO2JyZWFrO2Nhc2UgXCJ0b3BXaGVlbFwiOmE9TmQ7YnJlYWs7Y2FzZSBcInRvcENvcHlcIjpjYXNlIFwidG9wQ3V0XCI6Y2FzZSBcInRvcFBhc3RlXCI6YT1FZDticmVhaztkZWZhdWx0OmE9XG5OfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7aWIoYik7cmV0dXJuIGJ9fSxTZD1SZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsVGQ9W107ZnVuY3Rpb24gVWQoYSl7dmFyIGI9YS50YXJnZXRJbnN0O2Rve2lmKCFiKXthLmFuY2VzdG9ycy5wdXNoKGIpO2JyZWFrfXZhciBjO2ZvcihjPWI7Y1tcInJldHVyblwiXTspYz1jW1wicmV0dXJuXCJdO2M9MyE9PWMudGFnP251bGw6Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighYylicmVhazthLmFuY2VzdG9ycy5wdXNoKGIpO2I9VWEoYyl9d2hpbGUoYik7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspYj1hLmFuY2VzdG9yc1tjXSxRYShhLnRvcExldmVsVHlwZSxiLGEubmF0aXZlRXZlbnQsaGMoYS5uYXRpdmVFdmVudCkpfXZhciBWZD0hMDtmdW5jdGlvbiBXZChhKXtWZD0hIWF9XG5mdW5jdGlvbiBXKGEsYixjKXtpZighYylyZXR1cm4gbnVsbDthPShTZChhKT9YZDpZZCkuYmluZChudWxsLGEpO2MuYWRkRXZlbnRMaXN0ZW5lcihiLGEsITEpfWZ1bmN0aW9uIFpkKGEsYixjKXtpZighYylyZXR1cm4gbnVsbDthPShTZChhKT9YZDpZZCkuYmluZChudWxsLGEpO2MuYWRkRXZlbnRMaXN0ZW5lcihiLGEsITApfWZ1bmN0aW9uIFhkKGEsYil7YmMoWWQsYSxiKX1cbmZ1bmN0aW9uIFlkKGEsYil7aWYoVmQpe3ZhciBjPWhjKGIpO2M9VWEoYyk7bnVsbCE9PWMmJlwibnVtYmVyXCI9PT10eXBlb2YgYy50YWcmJjIhPT14ZChjKSYmKGM9bnVsbCk7aWYoVGQubGVuZ3RoKXt2YXIgZD1UZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtlYyhVZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPlRkLmxlbmd0aCYmVGQucHVzaChhKX19fVxudmFyICRkPU9iamVjdC5mcmVlemUoe2dldCBfZW5hYmxlZCgpe3JldHVybiBWZH0sc2V0RW5hYmxlZDpXZCxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gVmR9LHRyYXBCdWJibGVkRXZlbnQ6Vyx0cmFwQ2FwdHVyZWRFdmVudDpaZCxkaXNwYXRjaEV2ZW50OllkfSk7ZnVuY3Rpb24gYWUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cbnZhciBiZT17YW5pbWF0aW9uZW5kOmFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOmFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6YWUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxjZT17fSxkZT17fTttLmNhblVzZURPTSYmKGRlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIGJlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIGJlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIGJlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIGJlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBlZShhKXtpZihjZVthXSlyZXR1cm4gY2VbYV07aWYoIWJlW2FdKXJldHVybiBhO3ZhciBiPWJlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIGRlKXJldHVybiBjZVthXT1iW2NdO3JldHVybiBhfVxudmFyIGZlPXt0b3BBbmltYXRpb25FbmQ6ZWUoXCJhbmltYXRpb25lbmRcIiksdG9wQW5pbWF0aW9uSXRlcmF0aW9uOmVlKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLHRvcEFuaW1hdGlvblN0YXJ0OmVlKFwiYW5pbWF0aW9uc3RhcnRcIiksdG9wQmx1cjpcImJsdXJcIix0b3BDYW5jZWw6XCJjYW5jZWxcIix0b3BDaGFuZ2U6XCJjaGFuZ2VcIix0b3BDbGljazpcImNsaWNrXCIsdG9wQ2xvc2U6XCJjbG9zZVwiLHRvcENvbXBvc2l0aW9uRW5kOlwiY29tcG9zaXRpb25lbmRcIix0b3BDb21wb3NpdGlvblN0YXJ0OlwiY29tcG9zaXRpb25zdGFydFwiLHRvcENvbXBvc2l0aW9uVXBkYXRlOlwiY29tcG9zaXRpb251cGRhdGVcIix0b3BDb250ZXh0TWVudTpcImNvbnRleHRtZW51XCIsdG9wQ29weTpcImNvcHlcIix0b3BDdXQ6XCJjdXRcIix0b3BEb3VibGVDbGljazpcImRibGNsaWNrXCIsdG9wRHJhZzpcImRyYWdcIix0b3BEcmFnRW5kOlwiZHJhZ2VuZFwiLHRvcERyYWdFbnRlcjpcImRyYWdlbnRlclwiLHRvcERyYWdFeGl0OlwiZHJhZ2V4aXRcIix0b3BEcmFnTGVhdmU6XCJkcmFnbGVhdmVcIixcbnRvcERyYWdPdmVyOlwiZHJhZ292ZXJcIix0b3BEcmFnU3RhcnQ6XCJkcmFnc3RhcnRcIix0b3BEcm9wOlwiZHJvcFwiLHRvcEZvY3VzOlwiZm9jdXNcIix0b3BJbnB1dDpcImlucHV0XCIsdG9wS2V5RG93bjpcImtleWRvd25cIix0b3BLZXlQcmVzczpcImtleXByZXNzXCIsdG9wS2V5VXA6XCJrZXl1cFwiLHRvcExvYWQ6XCJsb2FkXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wTW91c2VEb3duOlwibW91c2Vkb3duXCIsdG9wTW91c2VNb3ZlOlwibW91c2Vtb3ZlXCIsdG9wTW91c2VPdXQ6XCJtb3VzZW91dFwiLHRvcE1vdXNlT3ZlcjpcIm1vdXNlb3ZlclwiLHRvcE1vdXNlVXA6XCJtb3VzZXVwXCIsdG9wUGFzdGU6XCJwYXN0ZVwiLHRvcFNjcm9sbDpcInNjcm9sbFwiLHRvcFNlbGVjdGlvbkNoYW5nZTpcInNlbGVjdGlvbmNoYW5nZVwiLHRvcFRleHRJbnB1dDpcInRleHRJbnB1dFwiLHRvcFRvZ2dsZTpcInRvZ2dsZVwiLHRvcFRvdWNoQ2FuY2VsOlwidG91Y2hjYW5jZWxcIix0b3BUb3VjaEVuZDpcInRvdWNoZW5kXCIsdG9wVG91Y2hNb3ZlOlwidG91Y2htb3ZlXCIsXG50b3BUb3VjaFN0YXJ0OlwidG91Y2hzdGFydFwiLHRvcFRyYW5zaXRpb25FbmQ6ZWUoXCJ0cmFuc2l0aW9uZW5kXCIpLHRvcFdoZWVsOlwid2hlZWxcIn0sZ2U9e3RvcEFib3J0OlwiYWJvcnRcIix0b3BDYW5QbGF5OlwiY2FucGxheVwiLHRvcENhblBsYXlUaHJvdWdoOlwiY2FucGxheXRocm91Z2hcIix0b3BEdXJhdGlvbkNoYW5nZTpcImR1cmF0aW9uY2hhbmdlXCIsdG9wRW1wdGllZDpcImVtcHRpZWRcIix0b3BFbmNyeXB0ZWQ6XCJlbmNyeXB0ZWRcIix0b3BFbmRlZDpcImVuZGVkXCIsdG9wRXJyb3I6XCJlcnJvclwiLHRvcExvYWRlZERhdGE6XCJsb2FkZWRkYXRhXCIsdG9wTG9hZGVkTWV0YWRhdGE6XCJsb2FkZWRtZXRhZGF0YVwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcFBhdXNlOlwicGF1c2VcIix0b3BQbGF5OlwicGxheVwiLHRvcFBsYXlpbmc6XCJwbGF5aW5nXCIsdG9wUHJvZ3Jlc3M6XCJwcm9ncmVzc1wiLHRvcFJhdGVDaGFuZ2U6XCJyYXRlY2hhbmdlXCIsdG9wU2Vla2VkOlwic2Vla2VkXCIsdG9wU2Vla2luZzpcInNlZWtpbmdcIixcbnRvcFN0YWxsZWQ6XCJzdGFsbGVkXCIsdG9wU3VzcGVuZDpcInN1c3BlbmRcIix0b3BUaW1lVXBkYXRlOlwidGltZXVwZGF0ZVwiLHRvcFZvbHVtZUNoYW5nZTpcInZvbHVtZWNoYW5nZVwiLHRvcFdhaXRpbmc6XCJ3YWl0aW5nXCJ9LGhlPXt9LGllPTAsamU9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO2Z1bmN0aW9uIGtlKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLGplKXx8KGFbamVdPWllKyssaGVbYVtqZV1dPXt9KTtyZXR1cm4gaGVbYVtqZV1dfWZ1bmN0aW9uIGxlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIG1lKGEsYil7dmFyIGM9bGUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9bGUoYyl9fWZ1bmN0aW9uIG5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJlwidGV4dFwiPT09YS50eXBlfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBvZT1tLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLHBlPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbnRleHRNZW51IHRvcEZvY3VzIHRvcEtleURvd24gdG9wS2V5VXAgdG9wTW91c2VEb3duIHRvcE1vdXNlVXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0scWU9bnVsbCxyZT1udWxsLHNlPW51bGwsdGU9ITE7XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHRlfHxudWxsPT1xZXx8cWUhPT1mYSgpKXJldHVybiBudWxsO3ZhciBjPXFlO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJm5lKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhjPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTpjPXZvaWQgMDtyZXR1cm4gc2UmJmhhKHNlLGMpP251bGw6KHNlPWMsYT1OLmdldFBvb2xlZChwZS5zZWxlY3QscmUsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1xZSxpYihhKSxhKX1cbnZhciB2ZT17ZXZlbnRUeXBlczpwZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1rZShlKTtmPXZhLm9uU2VsZWN0O2Zvcih2YXIgaD0wO2g8Zi5sZW5ndGg7aCsrKXt2YXIgZz1mW2hdO2lmKCFlLmhhc093blByb3BlcnR5KGcpfHwhZVtnXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/VmEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwidG9wRm9jdXNcIjppZihnYyhlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlxZT1lLHJlPWIsc2U9bnVsbDticmVhaztjYXNlIFwidG9wQmx1clwiOnNlPXJlPXFlPW51bGw7YnJlYWs7Y2FzZSBcInRvcE1vdXNlRG93blwiOnRlPSEwO2JyZWFrO2Nhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6cmV0dXJuIHRlPSExLHVlKGMsZCk7Y2FzZSBcInRvcFNlbGVjdGlvbkNoYW5nZVwiOmlmKG9lKWJyZWFrO1xuY2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4gdWUoYyxkKX1yZXR1cm4gbnVsbH19O05hLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBUYXBFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7RGE9YmIuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTtFYT1iYi5nZXRJbnN0YW5jZUZyb21Ob2RlO0ZhPWJiLmdldE5vZGVGcm9tSW5zdGFuY2U7TmEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpSZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46d2QsQ2hhbmdlRXZlbnRQbHVnaW46cGQsU2VsZWN0RXZlbnRQbHVnaW46dmUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpSYn0pO1xuZnVuY3Rpb24geGUoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT1udWxsO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXNbXCJyZXR1cm5cIl09bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9XG5mdW5jdGlvbiB6ZShhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IHhlKGEudGFnLGIsYS5rZXksYS5tb2RlKSxkLnR5cGU9YS50eXBlLGQuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGQuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9ZCk6KGQucGVuZGluZ1Byb3BzPWIsZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuZXhwaXJhdGlvblRpbWU9YztkLmNoaWxkPWEuY2hpbGQ7ZC5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztkLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2QudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtkLnNpYmxpbmc9YS5zaWJsaW5nO2QuaW5kZXg9YS5pbmRleDtkLnJlZj1hLnJlZjtyZXR1cm4gZH1cbmZ1bmN0aW9uIEFlKGEsYixjKXt2YXIgZD1hLnR5cGUsZT1hLmtleTthPWEucHJvcHM7dmFyIGY9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKWY9ZC5wcm90b3R5cGUmJmQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ/MjowO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkKWY9NTtlbHNlIHN3aXRjaChkKXtjYXNlIHNjOnJldHVybiBCZShhLmNoaWxkcmVuLGIsYyxlKTtjYXNlIHdjOmY9MTE7Ynw9MzticmVhaztjYXNlIHRjOmY9MTE7Ynw9MjticmVhaztjYXNlIHBjOmY9NzticmVhaztjYXNlIHFjOmY9OTticmVhaztkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpc3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdWM6Zj0xMzticmVhaztjYXNlIHZjOmY9MTI7YnJlYWs7Y2FzZSB4YzpmPTE0O2JyZWFrO2RlZmF1bHQ6aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnRhZylyZXR1cm4gYj1kLGIucGVuZGluZ1Byb3BzPWEsYi5leHBpcmF0aW9uVGltZT1jLFxuYjtEKFwiMTMwXCIsbnVsbD09ZD9kOnR5cGVvZiBkLFwiXCIpfWVsc2UgRChcIjEzMFwiLG51bGw9PWQ/ZDp0eXBlb2YgZCxcIlwiKX1iPW5ldyB4ZShmLGEsZSxiKTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9ZnVuY3Rpb24gQmUoYSxiLGMsZCl7YT1uZXcgeGUoMTAsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBDZShhLGIsYyl7YT1uZXcgeGUoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIERlKGEsYixjKXtiPW5ldyB4ZSg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn12YXIgRWU9bnVsbCxGZT1udWxsO1xuZnVuY3Rpb24gR2UoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1mdW5jdGlvbiBIZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtFZT1HZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7RmU9R2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1mdW5jdGlvbiBJZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRWUmJkVlKGEpfWZ1bmN0aW9uIEplKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBGZSYmRmUoYSl9bmV3IFNldDtcbmZ1bmN0aW9uIEtlKGEpe3JldHVybntiYXNlU3RhdGU6YSxleHBpcmF0aW9uVGltZTowLGZpcnN0Om51bGwsbGFzdDpudWxsLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExLGlzSW5pdGlhbGl6ZWQ6ITEsY2FwdHVyZWRWYWx1ZXM6bnVsbH19ZnVuY3Rpb24gTGUoYSxiKXtudWxsPT09YS5sYXN0P2EuZmlyc3Q9YS5sYXN0PWI6KGEubGFzdC5uZXh0PWIsYS5sYXN0PWIpO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmIuZXhwaXJhdGlvblRpbWUpYS5leHBpcmF0aW9uVGltZT1iLmV4cGlyYXRpb25UaW1lfXZhciBNZT12b2lkIDAsTmU9dm9pZCAwO1xuZnVuY3Rpb24gT2UoYSl7TWU9TmU9bnVsbDt2YXIgYj1hLmFsdGVybmF0ZSxjPWEudXBkYXRlUXVldWU7bnVsbD09PWMmJihjPWEudXBkYXRlUXVldWU9S2UobnVsbCkpO251bGwhPT1iPyhhPWIudXBkYXRlUXVldWUsbnVsbD09PWEmJihhPWIudXBkYXRlUXVldWU9S2UobnVsbCkpKTphPW51bGw7TWU9YztOZT1hIT09Yz9hOm51bGx9ZnVuY3Rpb24gUGUoYSxiKXtPZShhKTthPU1lO3ZhciBjPU5lO251bGw9PT1jP0xlKGEsYik6bnVsbD09PWEubGFzdHx8bnVsbD09PWMubGFzdD8oTGUoYSxiKSxMZShjLGIpKTooTGUoYSxiKSxjLmxhc3Q9Yil9ZnVuY3Rpb24gUWUoYSxiLGMsZCl7YT1hLnBhcnRpYWxTdGF0ZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoYixjLGQpOmF9XG5mdW5jdGlvbiBSZShhLGIsYyxkLGUsZil7bnVsbCE9PWEmJmEudXBkYXRlUXVldWU9PT1jJiYoYz1iLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6Yy5iYXNlU3RhdGUsZXhwaXJhdGlvblRpbWU6Yy5leHBpcmF0aW9uVGltZSxmaXJzdDpjLmZpcnN0LGxhc3Q6Yy5sYXN0LGlzSW5pdGlhbGl6ZWQ6Yy5pc0luaXRpYWxpemVkLGNhcHR1cmVkVmFsdWVzOmMuY2FwdHVyZWRWYWx1ZXMsY2FsbGJhY2tMaXN0Om51bGwsaGFzRm9yY2VVcGRhdGU6ITF9KTtjLmV4cGlyYXRpb25UaW1lPTA7Yy5pc0luaXRpYWxpemVkP2E9Yy5iYXNlU3RhdGU6KGE9Yy5iYXNlU3RhdGU9Yi5tZW1vaXplZFN0YXRlLGMuaXNJbml0aWFsaXplZD0hMCk7Zm9yKHZhciBoPSEwLGc9Yy5maXJzdCxrPSExO251bGwhPT1nOyl7dmFyIHY9Zy5leHBpcmF0aW9uVGltZTtpZih2PmYpe3ZhciBsPWMuZXhwaXJhdGlvblRpbWU7aWYoMD09PWx8fGw+diljLmV4cGlyYXRpb25UaW1lPXY7a3x8KGs9ITAsYy5iYXNlU3RhdGU9YSl9ZWxzZXtrfHxcbihjLmZpcnN0PWcubmV4dCxudWxsPT09Yy5maXJzdCYmKGMubGFzdD1udWxsKSk7aWYoZy5pc1JlcGxhY2UpYT1RZShnLGQsYSxlKSxoPSEwO2Vsc2UgaWYodj1RZShnLGQsYSxlKSlhPWg/QSh7fSxhLHYpOkEoYSx2KSxoPSExO2cuaXNGb3JjZWQmJihjLmhhc0ZvcmNlVXBkYXRlPSEwKTtudWxsIT09Zy5jYWxsYmFjayYmKHY9Yy5jYWxsYmFja0xpc3QsbnVsbD09PXYmJih2PWMuY2FsbGJhY2tMaXN0PVtdKSx2LnB1c2goZykpO251bGwhPT1nLmNhcHR1cmVkVmFsdWUmJih2PWMuY2FwdHVyZWRWYWx1ZXMsbnVsbD09PXY/Yy5jYXB0dXJlZFZhbHVlcz1bZy5jYXB0dXJlZFZhbHVlXTp2LnB1c2goZy5jYXB0dXJlZFZhbHVlKSl9Zz1nLm5leHR9bnVsbCE9PWMuY2FsbGJhY2tMaXN0P2IuZWZmZWN0VGFnfD0zMjpudWxsIT09Yy5maXJzdHx8Yy5oYXNGb3JjZVVwZGF0ZXx8bnVsbCE9PWMuY2FwdHVyZWRWYWx1ZXN8fChiLnVwZGF0ZVF1ZXVlPW51bGwpO2t8fChjLmJhc2VTdGF0ZT1hKTtcbnJldHVybiBhfWZ1bmN0aW9uIFNlKGEsYil7dmFyIGM9YS5jYWxsYmFja0xpc3Q7aWYobnVsbCE9PWMpZm9yKGEuY2FsbGJhY2tMaXN0PW51bGwsYT0wO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdLGU9ZC5jYWxsYmFjaztkLmNhbGxiYWNrPW51bGw7XCJmdW5jdGlvblwiIT09dHlwZW9mIGU/RChcIjE5MVwiLGUpOnZvaWQgMDtlLmNhbGwoYil9fVxuZnVuY3Rpb24gVGUoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEsYixjLGQsZSxmKXtpZihudWxsPT09Ynx8bnVsbCE9PWEudXBkYXRlUXVldWUmJmEudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpcmV0dXJuITA7dmFyIG49YS5zdGF0ZU5vZGU7YT1hLnR5cGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uc2hvdWxkQ29tcG9uZW50VXBkYXRlP24uc2hvdWxkQ29tcG9uZW50VXBkYXRlKGMsZSxmKTphLnByb3RvdHlwZSYmYS5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWhhKGIsYyl8fCFoYShkLGUpOiEwfWZ1bmN0aW9uIGgoYSxiKXtiLnVwZGF0ZXI9cjthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hfWZ1bmN0aW9uIGcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcbmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1mdW5jdGlvbiBrKGEsYixjLGQpe2E9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcylyZXR1cm4gYS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuY2FsbChudWxsLGMsZCl9dmFyIHY9YS5jYWNoZUNvbnRleHQsbD1hLmdldE1hc2tlZENvbnRleHQscD1hLmdldFVubWFza2VkQ29udGV4dCx6PWEuaXNDb250ZXh0Q29uc3VtZXIsQj1hLmhhc0NvbnRleHRDaGFuZ2VkLHI9e2lzTW91bnRlZDp5ZCxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxkLGUpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YyhhKTtQZShhLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLFxuY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2IoYSxmKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGQsZSl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZj1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmYscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITAsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2IoYSxmKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsZCl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZT1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmUscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6ZCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITAsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2IoYSxlKX19O3JldHVybnthZG9wdENsYXNzSW5zdGFuY2U6aCxjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOmssXG5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9cChhKSxlPXooYSksZj1lP2woYSxkKTprYTtjPW5ldyBjKGIsZik7dmFyIG49bnVsbCE9PWMuc3RhdGUmJnZvaWQgMCE9PWMuc3RhdGU/Yy5zdGF0ZTpudWxsO2goYSxjKTthLm1lbW9pemVkU3RhdGU9bjtiPWsoYSxjLGIsbik7bnVsbCE9PWImJnZvaWQgMCE9PWImJihhLm1lbW9pemVkU3RhdGU9QSh7fSxhLm1lbW9pemVkU3RhdGUsYikpO2UmJnYoYSxkLGYpO3JldHVybiBjfSxtb3VudENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1hLmFsdGVybmF0ZSxlPWEuc3RhdGVOb2RlLGY9YS5wZW5kaW5nUHJvcHMsbj1wKGEpO2UucHJvcHM9ZjtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9a2E7ZS5jb250ZXh0PWwoYSxuKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGM9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYyE9PWUuc3RhdGUmJnIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoZS5zdGF0ZT1SZShkLGEsYyxlLGYsYikpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX0scmVzdW1lTW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLG49YS5zdGF0ZU5vZGU7bi5wcm9wcz1hLm1lbW9pemVkUHJvcHM7bi5zdGF0ZT1cbmEubWVtb2l6ZWRTdGF0ZTt2YXIgaD1hLm1lbW9pemVkUHJvcHMscj1hLnBlbmRpbmdQcm9wcyx6PW4uY29udGV4dCxxPXAoYSk7cT1sKGEscSk7KGM9XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXJ8fHohPT1xKSYmZyhhLG4scixxKTt6PWEubWVtb2l6ZWRTdGF0ZTtiPW51bGwhPT1hLnVwZGF0ZVF1ZXVlP1JlKG51bGwsYSxhLnVwZGF0ZVF1ZXVlLG4scixiKTp6O3ZhciB1PXZvaWQgMDtoIT09ciYmKHU9ayhhLG4scixiKSk7aWYobnVsbCE9PXUmJnZvaWQgMCE9PXUpe2I9bnVsbD09PWJ8fHZvaWQgMD09PWI/dTpBKHt9LGIsdSk7dmFyIHQ9YS51cGRhdGVRdWV1ZTtcbm51bGwhPT10JiYodC5iYXNlU3RhdGU9QSh7fSx0LmJhc2VTdGF0ZSx1KSl9aWYoIShoIT09cnx8eiE9PWJ8fEIoKXx8bnVsbCE9PWEudXBkYXRlUXVldWUmJmEudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpKXJldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpLCExOyhoPWYoYSxoLHIseixiLHEpKT8oY3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIG4uY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50V2lsbE1vdW50JiZuLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJm4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD1cbjQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksZChhLHIpLGUoYSxiKSk7bi5wcm9wcz1yO24uc3RhdGU9YjtuLmNvbnRleHQ9cTtyZXR1cm4gaH0sdXBkYXRlQ2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7dmFyIG49Yi50eXBlLHg9Yi5zdGF0ZU5vZGU7eC5wcm9wcz1iLm1lbW9pemVkUHJvcHM7eC5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7dmFyIGg9Yi5tZW1vaXplZFByb3BzLHI9Yi5wZW5kaW5nUHJvcHMscT14LmNvbnRleHQsdT1wKGIpO3U9bChiLHUpOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oaCE9PXJ8fHEhPT11KSYmZyhiLHgscix1KTtxPWIubWVtb2l6ZWRTdGF0ZTtjPW51bGwhPT1iLnVwZGF0ZVF1ZXVlP1JlKGEsYixiLnVwZGF0ZVF1ZXVlLHgscixjKTpxO3ZhciB0PXZvaWQgMDtoIT09ciYmKHQ9ayhiLHgscixjKSk7aWYobnVsbCE9PXQmJnZvaWQgMCE9PXQpe2M9bnVsbD09PWN8fHZvaWQgMD09PWM/dDpBKHt9LGMsdCk7dmFyIHk9Yi51cGRhdGVRdWV1ZTtudWxsIT09eSYmKHkuYmFzZVN0YXRlPUEoe30seS5iYXNlU3RhdGUsdCkpfWlmKCEoaCE9PXJ8fHEhPT1jfHxCKCl8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJlxucT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yMDQ4KSwhMTsodD1mKGIsaCxyLHEsYyx1KSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIHguY29tcG9uZW50V2lsbFVwZGF0ZSYmeC5jb21wb25lbnRXaWxsVXBkYXRlKHIsYyx1KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShyLGMsdSkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yMDQ4KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmXG5xPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTIwNDgpLGQoYixyKSxlKGIsYykpO3gucHJvcHM9cjt4LnN0YXRlPWM7eC5jb250ZXh0PXU7cmV0dXJuIHR9fX12YXIgVWU9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFZlKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDIhPT1jLnRhZz9EKFwiMTEwXCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDpEKFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PWthP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/RChcIjE0OFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOkQoXCIyNTRcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIFdlKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBYZShhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXplKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gaChiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBnKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9Q2UoYyxhLm1vZGUsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi50eXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPVZlKGEsYixjKSxkW1wicmV0dXJuXCJdPWEsZDtkPUFlKGMsYS5tb2RlLGQpO2QucmVmPVZlKGEsYixjKTtkW1wicmV0dXJuXCJdPWE7cmV0dXJuIGR9ZnVuY3Rpb24gdihhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5EZShjLGEubW9kZSxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbChhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPUJlKGMsYS5tb2RlLGQsZiksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9Q2UoXCJcIitiLGEubW9kZSxjKSxiW1wicmV0dXJuXCJdPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBvYzpyZXR1cm4gYz1BZShiLGEubW9kZSxjKSxjLnJlZj1WZShhLG51bGwsYiksY1tcInJldHVyblwiXT1hLGM7Y2FzZSByYzpyZXR1cm4gYj1EZShiLGEubW9kZSxjKSxiW1wicmV0dXJuXCJdPWEsYn1pZihVZShiKXx8emMoYikpcmV0dXJuIGI9QmUoYixcbmEubW9kZSxjLG51bGwpLGJbXCJyZXR1cm5cIl09YSxiO1dlKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmcoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBvYzpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXNjP2woYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSByYzpyZXR1cm4gYy5rZXk9PT1lP3YoYSxiLGMsZCk6bnVsbH1pZihVZShjKXx8emMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bChhLGIsYyxkLG51bGwpO1dlKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsZyhiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1zYz9sKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSByYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsdihiLGEsZCxlKX1pZihVZShkKXx8emMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbChiLGEsZCxlLG51bGwpO1dlKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihlLGwsZyxoKXtmb3IodmFyIHI9bnVsbCxrPW51bGwscT1sLHU9bD0wLHQ9bnVsbDtudWxsIT09cSYmdTxnLmxlbmd0aDt1Kyspe3EuaW5kZXg+dT8odD1xLHE9bnVsbCk6dD1xLnNpYmxpbmc7dmFyIG49eihlLHEsZ1t1XSxoKTtpZihudWxsPT09bil7bnVsbD09PXEmJihxPXQpO2JyZWFrfWEmJnEmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUscSk7bD1mKG4sbCx1KTtudWxsPT09az9yPW46ay5zaWJsaW5nPW47az1uO3E9dH1pZih1PT09Zy5sZW5ndGgpcmV0dXJuIGMoZSxxKSxyO2lmKG51bGw9PT1xKXtmb3IoO3U8Zy5sZW5ndGg7dSsrKWlmKHE9cChlLGdbdV0saCkpbD1mKHEsbCx1KSxudWxsPT09az9yPXE6ay5zaWJsaW5nPXEsaz1xO3JldHVybiByfWZvcihxPWQoZSxxKTt1PGcubGVuZ3RoO3UrKylpZih0PUIocSxlLHUsZ1t1XSxoKSl7aWYoYSYmbnVsbCE9PXQuYWx0ZXJuYXRlKXFbXCJkZWxldGVcIl0obnVsbD09PXQua2V5P3U6dC5rZXkpO2w9Zih0LGwsdSk7bnVsbD09PWs/cj10Omsuc2libGluZz10O2s9dH1hJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiByfWZ1bmN0aW9uIFEoZSxsLGcsaCl7dmFyIHI9emMoZyk7XCJmdW5jdGlvblwiIT09dHlwZW9mIHI/RChcIjE1MFwiKTp2b2lkIDA7Zz1yLmNhbGwoZyk7bnVsbD09Zz9EKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIGs9XG5yPW51bGwscT1sLHU9bD0wLHQ9bnVsbCxuPWcubmV4dCgpO251bGwhPT1xJiYhbi5kb25lO3UrKyxuPWcubmV4dCgpKXtxLmluZGV4PnU/KHQ9cSxxPW51bGwpOnQ9cS5zaWJsaW5nO3ZhciBIPXooZSxxLG4udmFsdWUsaCk7aWYobnVsbD09PUgpe3F8fChxPXQpO2JyZWFrfWEmJnEmJm51bGw9PT1ILmFsdGVybmF0ZSYmYihlLHEpO2w9ZihILGwsdSk7bnVsbD09PWs/cj1IOmsuc2libGluZz1IO2s9SDtxPXR9aWYobi5kb25lKXJldHVybiBjKGUscSkscjtpZihudWxsPT09cSl7Zm9yKDshbi5kb25lO3UrKyxuPWcubmV4dCgpKW49cChlLG4udmFsdWUsaCksbnVsbCE9PW4mJihsPWYobixsLHUpLG51bGw9PT1rP3I9bjprLnNpYmxpbmc9bixrPW4pO3JldHVybiByfWZvcihxPWQoZSxxKTshbi5kb25lO3UrKyxuPWcubmV4dCgpKWlmKG49QihxLGUsdSxuLnZhbHVlLGgpLG51bGwhPT1uKXtpZihhJiZudWxsIT09bi5hbHRlcm5hdGUpcVtcImRlbGV0ZVwiXShudWxsPT09bi5rZXk/dTpuLmtleSk7XG5sPWYobixsLHUpO251bGw9PT1rP3I9bjprLnNpYmxpbmc9bjtrPW59YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gcn1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsbCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09c2MmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGc9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihnKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIG9jOmE6e3ZhciBrPWYua2V5O2ZvcihnPWQ7bnVsbCE9PWc7KXtpZihnLmtleT09PWspaWYoMTA9PT1nLnRhZz9mLnR5cGU9PT1zYzpnLnR5cGU9PT1mLnR5cGUpe2MoYSxnLnNpYmxpbmcpO2Q9ZShnLGYudHlwZT09PXNjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxsKTtkLnJlZj1WZShhLGcsZik7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGcpO2JyZWFrfWVsc2UgYihhLGcpO2c9Zy5zaWJsaW5nfWYudHlwZT09PVxuc2M/KGQ9QmUoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsbCxmLmtleSksZFtcInJldHVyblwiXT1hLGE9ZCk6KGw9QWUoZixhLm1vZGUsbCksbC5yZWY9VmUoYSxkLGYpLGxbXCJyZXR1cm5cIl09YSxhPWwpfXJldHVybiBoKGEpO2Nhc2UgcmM6YTp7Zm9yKGc9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWcpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGwpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPURlKGYsYS5tb2RlLGwpO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGgoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiZcbjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixsKSxkW1wicmV0dXJuXCJdPWEsYT1kKTooYyhhLGQpLGQ9Q2UoZixhLm1vZGUsbCksZFtcInJldHVyblwiXT1hLGE9ZCksaChhKTtpZihVZShmKSlyZXR1cm4gcihhLGQsZixsKTtpZih6YyhmKSlyZXR1cm4gUShhLGQsZixsKTtnJiZXZShhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZilzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDE6bD1hLnR5cGUsRChcIjE1MlwiLGwuZGlzcGxheU5hbWV8fGwubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIFllPVhlKCEwKSxaZT1YZSghMSk7XG5mdW5jdGlvbiAkZShhLGIsYyxkLGUsZixoKXtmdW5jdGlvbiBnKGEsYixjKXtrKGEsYixjLGIuZXhwaXJhdGlvblRpbWUpfWZ1bmN0aW9uIGsoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZShiLG51bGwsYyxkKTpZZShiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiB2KGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gbChhLGIsYyxkLGUsZil7dihhLGIpO2lmKCFjJiYhZSlyZXR1cm4gZCYmeShiLCExKSxyKGEsYik7Yz1iLnN0YXRlTm9kZTtuYy5jdXJyZW50PWI7dmFyIGw9ZT9udWxsOmMucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7ZSYmKGsoYSxiLG51bGwsZiksYi5jaGlsZD1udWxsKTtrKGEsYixsLGYpO2IubWVtb2l6ZWRTdGF0ZT1jLnN0YXRlO2IubWVtb2l6ZWRQcm9wcz1jLnByb3BzO2QmJnkoYiwhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcChhKXt2YXIgYj1hLnN0YXRlTm9kZTtcbmIucGVuZGluZ0NvbnRleHQ/dChhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZ0KGEsYi5jb250ZXh0LCExKTtZKGEsYi5jb250YWluZXJJbmZvKX1mdW5jdGlvbiB6KGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7Zm9yKG51bGwhPT1lJiYoZVtcInJldHVyblwiXT1hKTtudWxsIT09ZTspe3N3aXRjaChlLnRhZyl7Y2FzZSAxMjp2YXIgZj1lLnN0YXRlTm9kZXwwO2lmKGUudHlwZT09PWImJjAhPT0oZiZjKSl7Zm9yKGY9ZTtudWxsIT09Zjspe3ZhciBsPWYuYWx0ZXJuYXRlO2lmKDA9PT1mLmV4cGlyYXRpb25UaW1lfHxmLmV4cGlyYXRpb25UaW1lPmQpZi5leHBpcmF0aW9uVGltZT1kLG51bGwhPT1sJiYoMD09PWwuZXhwaXJhdGlvblRpbWV8fGwuZXhwaXJhdGlvblRpbWU+ZCkmJihsLmV4cGlyYXRpb25UaW1lPWQpO2Vsc2UgaWYobnVsbCE9PWwmJigwPT09bC5leHBpcmF0aW9uVGltZXx8bC5leHBpcmF0aW9uVGltZT5kKSlsLmV4cGlyYXRpb25UaW1lPVxuZDtlbHNlIGJyZWFrO2Y9ZltcInJldHVyblwiXX1mPW51bGx9ZWxzZSBmPWUuY2hpbGQ7YnJlYWs7Y2FzZSAxMzpmPWUudHlwZT09PWEudHlwZT9udWxsOmUuY2hpbGQ7YnJlYWs7ZGVmYXVsdDpmPWUuY2hpbGR9aWYobnVsbCE9PWYpZltcInJldHVyblwiXT1lO2Vsc2UgZm9yKGY9ZTtudWxsIT09Zjspe2lmKGY9PT1hKXtmPW51bGw7YnJlYWt9ZT1mLnNpYmxpbmc7aWYobnVsbCE9PWUpe2Y9ZTticmVha31mPWZbXCJyZXR1cm5cIl19ZT1mfX1mdW5jdGlvbiBCKGEsYixjKXt2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRQcm9wcztpZighcSgpJiZmPT09ZSlyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKTt2YXIgbD1lLnZhbHVlO2IubWVtb2l6ZWRQcm9wcz1lO2lmKG51bGw9PT1mKWw9MTA3Mzc0MTgyMztlbHNlIGlmKGYudmFsdWU9PT1lLnZhbHVlKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLFxucihhLGIpO2w9MH1lbHNle3ZhciBoPWYudmFsdWU7aWYoaD09PWwmJigwIT09aHx8MS9oPT09MS9sKXx8aCE9PWgmJmwhPT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKTtsPTB9ZWxzZSBpZihsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGwpOjEwNzM3NDE4MjMsbHw9MCwwPT09bCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYil9ZWxzZSB6KGIsZCxsLGMpfWIuc3RhdGVOb2RlPWw7RyhiKTtnKGEsYixlLmNoaWxkcmVuKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByKGEsYil7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP0QoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7dmFyIGM9emUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtcbmIuY2hpbGQ9Yztmb3IoY1tcInJldHVyblwiXT1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXplKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksY1tcInJldHVyblwiXT1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXZhciBRPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQsbj1hLnNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUseD1iLnB1c2hIb3N0Q29udGV4dCxZPWIucHVzaEhvc3RDb250YWluZXIsRz1kLnB1c2hQcm92aWRlcixSPWMuZ2V0TWFza2VkQ29udGV4dCxTPWMuZ2V0VW5tYXNrZWRDb250ZXh0LHE9Yy5oYXNDb250ZXh0Q2hhbmdlZCx1PWMucHVzaENvbnRleHRQcm92aWRlcix0PWMucHVzaFRvcExldmVsQ29udGV4dE9iamVjdCx5PWMuaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcixIPWUuZW50ZXJIeWRyYXRpb25TdGF0ZSxXYT1lLnJlc2V0SHlkcmF0aW9uU3RhdGUsQ2I9ZS50cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTtcbmE9VGUoYyxmLGgsZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkUHJvcHM9Yn0sZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkU3RhdGU9Yn0pO3ZhciBKYz1hLmFkb3B0Q2xhc3NJbnN0YW5jZSxLYz1hLmNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsTGM9YS5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlLERiPWEubW91bnRDbGFzc0luc3RhbmNlLE1jPWEucmVzdW1lTW91bnRDbGFzc0luc3RhbmNlLEViPWEudXBkYXRlQ2xhc3NJbnN0YW5jZTtyZXR1cm57YmVnaW5Xb3JrOmZ1bmN0aW9uKGEsYixjKXtpZigwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5jKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpwKGIpO2JyZWFrO2Nhc2UgMjp1KGIpO2JyZWFrO2Nhc2UgNDpZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMzpHKGIpfXJldHVybiBudWxsfXN3aXRjaChiLnRhZyl7Y2FzZSAwOm51bGwhPT1hP0QoXCIxNTVcIik6dm9pZCAwO3ZhciBkPWIudHlwZSxcbmU9Yi5wZW5kaW5nUHJvcHMsZj1TKGIpO2Y9UihiLGYpO2Q9ZChlLGYpO2IuZWZmZWN0VGFnfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlciYmdm9pZCAwPT09ZC4kJHR5cGVvZj8oZj1iLnR5cGUsYi50YWc9MixiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWQuc3RhdGUmJnZvaWQgMCE9PWQuc3RhdGU/ZC5zdGF0ZTpudWxsLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmKGU9S2MoYixkLGUsYi5tZW1vaXplZFN0YXRlKSxudWxsIT09ZSYmdm9pZCAwIT09ZSYmKGIubWVtb2l6ZWRTdGF0ZT1BKHt9LGIubWVtb2l6ZWRTdGF0ZSxlKSkpLGU9dShiKSxKYyhiLGQpLERiKGIsYyksYT1sKGEsYiwhMCxlLCExLGMpKTooYi50YWc9MSxnKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpO3JldHVybiBhO2Nhc2UgMTpyZXR1cm4gZT1iLnR5cGUsYz1iLnBlbmRpbmdQcm9wcyxxKCl8fFxuYi5tZW1vaXplZFByb3BzIT09Yz8oZD1TKGIpLGQ9UihiLGQpLGU9ZShjLGQpLGIuZWZmZWN0VGFnfD0xLGcoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDI6ZT11KGIpO251bGw9PT1hP251bGw9PT1iLnN0YXRlTm9kZT8oTGMoYixiLnBlbmRpbmdQcm9wcyksRGIoYixjKSxkPSEwKTpkPU1jKGIsYyk6ZD1FYihhLGIsYyk7Zj0hMTt2YXIgaD1iLnVwZGF0ZVF1ZXVlO251bGwhPT1oJiZudWxsIT09aC5jYXB0dXJlZFZhbHVlcyYmKGY9ZD0hMCk7cmV0dXJuIGwoYSxiLGQsZSxmLGMpO2Nhc2UgMzphOmlmKHAoYiksZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kKXtmPWIubWVtb2l6ZWRTdGF0ZTtlPVJlKGEsYixkLG51bGwsbnVsbCxjKTtiLm1lbW9pemVkU3RhdGU9ZTtkPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWQmJm51bGwhPT1kLmNhcHR1cmVkVmFsdWVzKWQ9bnVsbDtlbHNlIGlmKGY9PT1lKXtXYSgpO2E9cihhLGIpO2JyZWFrIGF9ZWxzZSBkPVxuZS5lbGVtZW50O2Y9Yi5zdGF0ZU5vZGU7KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmYuaHlkcmF0ZSYmSChiKT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1aZShiLG51bGwsZCxjKSk6KFdhKCksZyhhLGIsZCkpO2IubWVtb2l6ZWRTdGF0ZT1lO2E9Yi5jaGlsZH1lbHNlIFdhKCksYT1yKGEsYik7cmV0dXJuIGE7Y2FzZSA1OmE6e3goYik7bnVsbD09PWEmJkNiKGIpO2U9Yi50eXBlO2g9Yi5tZW1vaXplZFByb3BzO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbDtpZighcSgpJiZoPT09ZCl7aWYoaD1iLm1vZGUmMSYmbihlLGQpKWIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztpZighaHx8MTA3Mzc0MTgyMyE9PWMpe2E9cihhLGIpO2JyZWFrIGF9fWg9ZC5jaGlsZHJlbjtRKGUsZCk/aD1udWxsOmYmJlEoZSxmKSYmKGIuZWZmZWN0VGFnfD0xNik7dihhLGIpOzEwNzM3NDE4MjMhPT1jJiZiLm1vZGUmMSYmbihlLGQpPyhiLmV4cGlyYXRpb25UaW1lPVxuMTA3Mzc0MTgyMyxiLm1lbW9pemVkUHJvcHM9ZCxhPW51bGwpOihnKGEsYixoKSxiLm1lbW9pemVkUHJvcHM9ZCxhPWIuY2hpbGQpfXJldHVybiBhO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkNiKGIpLGIubWVtb2l6ZWRQcm9wcz1iLnBlbmRpbmdQcm9wcyxudWxsO2Nhc2UgODpiLnRhZz03O2Nhc2UgNzpyZXR1cm4gZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWV8fChlPWIubWVtb2l6ZWRQcm9wcyksZD1lLmNoaWxkcmVuLGIuc3RhdGVOb2RlPW51bGw9PT1hP1plKGIsYi5zdGF0ZU5vZGUsZCxjKTpZZShiLGEuc3RhdGVOb2RlLGQsYyksYi5tZW1vaXplZFByb3BzPWUsYi5zdGF0ZU5vZGU7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gWShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGU9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1lPyhudWxsPT09YT9iLmNoaWxkPVllKGIsbnVsbCxlLGMpOmcoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1cbmUsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTQ6cmV0dXJuIGM9Yi50eXBlLnJlbmRlcixjPWMoYi5wZW5kaW5nUHJvcHMsYi5yZWYpLGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGIuY2hpbGQ7Y2FzZSAxMDpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDExOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLHEoKXx8bnVsbCE9PWMmJmIubWVtb2l6ZWRQcm9wcyE9PWM/KGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDEzOnJldHVybiBCKGEsYixjKTtjYXNlIDEyOmE6e2Q9Yi50eXBlO2Y9Yi5wZW5kaW5nUHJvcHM7aD1iLm1lbW9pemVkUHJvcHM7ZT1kLl9jdXJyZW50VmFsdWU7dmFyIHQ9ZC5fY2hhbmdlZEJpdHM7aWYocSgpfHwwIT09dHx8aCE9PWYpe2IubWVtb2l6ZWRQcm9wcz1cbmY7dmFyIGs9Zi51bnN0YWJsZV9vYnNlcnZlZEJpdHM7aWYodm9pZCAwPT09a3x8bnVsbD09PWspaz0xMDczNzQxODIzO2Iuc3RhdGVOb2RlPWs7aWYoMCE9PSh0JmspKXooYixkLHQsYyk7ZWxzZSBpZihoPT09Zil7YT1yKGEsYik7YnJlYWsgYX1jPWYuY2hpbGRyZW47Yz1jKGUpO2coYSxiLGMpO2E9Yi5jaGlsZH1lbHNlIGE9cihhLGIpfXJldHVybiBhO2RlZmF1bHQ6RChcIjE1NlwiKX19fX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXthLmVmZmVjdFRhZ3w9NH12YXIgaD1hLmNyZWF0ZUluc3RhbmNlLGc9YS5jcmVhdGVUZXh0SW5zdGFuY2Usaz1hLmFwcGVuZEluaXRpYWxDaGlsZCx2PWEuZmluYWxpemVJbml0aWFsQ2hpbGRyZW4sbD1hLnByZXBhcmVVcGRhdGUscD1hLnBlcnNpc3RlbmNlLHo9Yi5nZXRSb290SG9zdENvbnRhaW5lcixCPWIucG9wSG9zdENvbnRleHQscj1iLmdldEhvc3RDb250ZXh0LFE9Yi5wb3BIb3N0Q29udGFpbmVyLG49Yy5wb3BDb250ZXh0UHJvdmlkZXIseD1jLnBvcFRvcExldmVsQ29udGV4dE9iamVjdCxZPWQucG9wUHJvdmlkZXIsRz1lLnByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UsUj1lLnByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlLFM9ZS5wb3BIeWRyYXRpb25TdGF0ZSxxPXZvaWQgMCx1PXZvaWQgMCx0PXZvaWQgMDthLm11dGF0aW9uPyhxPWZ1bmN0aW9uKCl7fSx1PWZ1bmN0aW9uKGEsYixjKXsoYi51cGRhdGVRdWV1ZT1cbmMpJiZmKGIpfSx0PWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZmKGIpfSk6cD9EKFwiMjM1XCIpOkQoXCIyMzZcIik7cmV0dXJue2NvbXBsZXRlV29yazpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIG51bGw7Y2FzZSAyOnJldHVybiBuKGIpLGE9Yi5zdGF0ZU5vZGUsZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiZudWxsIT09ZC5jYXB0dXJlZFZhbHVlcyYmKGIuZWZmZWN0VGFnJj0tNjUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50RGlkQ2F0Y2g/Yi5lZmZlY3RUYWd8PTI1NjpkLmNhcHR1cmVkVmFsdWVzPW51bGwpLG51bGw7Y2FzZSAzOlEoYik7eChiKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClTKGIpLGIuZWZmZWN0VGFnJj0tMztxKGIpO2E9Yi51cGRhdGVRdWV1ZTtcbm51bGwhPT1hJiZudWxsIT09YS5jYXB0dXJlZFZhbHVlcyYmKGIuZWZmZWN0VGFnfD0yNTYpO3JldHVybiBudWxsO2Nhc2UgNTpCKGIpO2M9eigpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBwPWEubWVtb2l6ZWRQcm9wcyxIPWIuc3RhdGVOb2RlLHk9cigpO0g9bChILGUscCxkLGMseSk7dShhLGIsSCxlLHAsZCxjLHkpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFkKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXIoKTtpZihTKGIpKUcoYixjLGEpJiZmKGIpO2Vsc2V7cD1oKGUsZCxjLGEsYik7YTpmb3IoeT1iLmNoaWxkO251bGwhPT15Oyl7aWYoNT09PXkudGFnfHw2PT09eS50YWcpayhwLHkuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT15LnRhZyYmbnVsbCE9PXkuY2hpbGQpe3kuY2hpbGRbXCJyZXR1cm5cIl09eTt5PXkuY2hpbGQ7Y29udGludWV9aWYoeT09PWIpYnJlYWs7XG5mb3IoO251bGw9PT15LnNpYmxpbmc7KXtpZihudWxsPT09eVtcInJldHVyblwiXXx8eVtcInJldHVyblwiXT09PWIpYnJlYWsgYTt5PXlbXCJyZXR1cm5cIl19eS5zaWJsaW5nW1wicmV0dXJuXCJdPXlbXCJyZXR1cm5cIl07eT15LnNpYmxpbmd9dihwLGUsZCxjLGEpJiZmKGIpO2Iuc3RhdGVOb2RlPXB9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXQoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZClyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjZcIik6dm9pZCAwLG51bGw7YT16KCk7Yz1yKCk7UyhiKT9SKGIpJiZmKGIpOmIuc3RhdGVOb2RlPWcoZCxhLGMsYil9cmV0dXJuIG51bGw7Y2FzZSA3OihkPWIubWVtb2l6ZWRQcm9wcyk/dm9pZCAwOkQoXCIxNjVcIik7Yi50YWc9ODtlPVtdO2E6Zm9yKChwPWIuc3RhdGVOb2RlKSYmKHBbXCJyZXR1cm5cIl09Yik7bnVsbCE9PVxucDspe2lmKDU9PT1wLnRhZ3x8Nj09PXAudGFnfHw0PT09cC50YWcpRChcIjI0N1wiKTtlbHNlIGlmKDk9PT1wLnRhZyllLnB1c2gocC5wZW5kaW5nUHJvcHMudmFsdWUpO2Vsc2UgaWYobnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PXBbXCJyZXR1cm5cIl18fHBbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7cD1wW1wicmV0dXJuXCJdfXAuc2libGluZ1tcInJldHVyblwiXT1wW1wicmV0dXJuXCJdO3A9cC5zaWJsaW5nfXA9ZC5oYW5kbGVyO2Q9cChkLnByb3BzLGUpO2IuY2hpbGQ9WWUoYixudWxsIT09YT9hLmNoaWxkOm51bGwsZCxjKTtyZXR1cm4gYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGIudGFnPTcsbnVsbDtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgMTE6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBRKGIpLHEoYiksbnVsbDtcbmNhc2UgMTM6cmV0dXJuIFkoYiksbnVsbDtjYXNlIDEyOnJldHVybiBudWxsO2Nhc2UgMDpEKFwiMTY3XCIpO2RlZmF1bHQ6RChcIjE1NlwiKX19fX1cbmZ1bmN0aW9uIGJmKGEsYixjLGQsZSl7dmFyIGY9YS5wb3BIb3N0Q29udGFpbmVyLGg9YS5wb3BIb3N0Q29udGV4dCxnPWIucG9wQ29udGV4dFByb3ZpZGVyLGs9Yi5wb3BUb3BMZXZlbENvbnRleHRPYmplY3Qsdj1jLnBvcFByb3ZpZGVyO3JldHVybnt0aHJvd0V4Y2VwdGlvbjpmdW5jdGlvbihhLGIsYyl7Yi5lZmZlY3RUYWd8PTUxMjtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO2I9e3ZhbHVlOmMsc291cmNlOmIsc3RhY2s6QmMoYil9O2Rve3N3aXRjaChhLnRhZyl7Y2FzZSAzOk9lKGEpO2EudXBkYXRlUXVldWUuY2FwdHVyZWRWYWx1ZXM9W2JdO2EuZWZmZWN0VGFnfD0xMDI0O3JldHVybjtjYXNlIDI6aWYoYz1hLnN0YXRlTm9kZSwwPT09KGEuZWZmZWN0VGFnJjY0KSYmbnVsbCE9PWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudERpZENhdGNoJiYhZShjKSl7T2UoYSk7Yz1hLnVwZGF0ZVF1ZXVlO3ZhciBkPWMuY2FwdHVyZWRWYWx1ZXM7bnVsbD09PWQ/XG5jLmNhcHR1cmVkVmFsdWVzPVtiXTpkLnB1c2goYik7YS5lZmZlY3RUYWd8PTEwMjQ7cmV0dXJufX1hPWFbXCJyZXR1cm5cIl19d2hpbGUobnVsbCE9PWEpfSx1bndpbmRXb3JrOmZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOmcoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gZihhKSxrKGEpLGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA1OnJldHVybiBoKGEpLG51bGw7Y2FzZSA0OnJldHVybiBmKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdihhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fSx1bndpbmRJbnRlcnJ1cHRlZFdvcms6ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZyhhKTticmVhaztjYXNlIDM6ZihhKTtrKGEpO2JyZWFrO2Nhc2UgNTpoKGEpO2JyZWFrO2Nhc2UgNDpmKGEpO2JyZWFrO2Nhc2UgMTM6dihhKX19fX1cbmZ1bmN0aW9uIGNmKGEsYil7dmFyIGM9Yi5zb3VyY2U7bnVsbD09PWIuc3RhY2smJkJjKGMpO251bGwhPT1jJiZBYyhjKTtiPWIudmFsdWU7bnVsbCE9PWEmJjI9PT1hLnRhZyYmQWMoYSk7dHJ5e2ImJmIuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihiKX1jYXRjaChkKXtkJiZkLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoZCl9fVxuZnVuY3Rpb24gZGYoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKHQpe2IoYSx0KX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIGgoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEplJiZKZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpmKGEpO3ZhciBjPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtjLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxjLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxjLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7YihhLHQpfWJyZWFrO2Nhc2UgNTpmKGEpO2JyZWFrO2Nhc2UgNzpnKGEuc3RhdGVOb2RlKTticmVhaztjYXNlIDQ6cCYmdihhKX19ZnVuY3Rpb24gZyhhKXtmb3IodmFyIGI9YTs7KWlmKGgoYiksbnVsbD09PWIuY2hpbGR8fHAmJjQ9PT1iLnRhZyl7aWYoYj09PVxuYSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ31lbHNlIGIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGR9ZnVuY3Rpb24gayhhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31mdW5jdGlvbiB2KGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9YltcInJldHVyblwiXTthOmZvcig7Oyl7bnVsbD09PWM/RChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWM9ITB9aWYoNT09PVxuYi50YWd8fDY9PT1iLnRhZylnKGIpLGU/UyhkLGIuc3RhdGVOb2RlKTpSKGQsYi5zdGF0ZU5vZGUpO2Vsc2UgaWYoND09PWIudGFnP2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpoKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkW1wicmV0dXJuXCJdPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX12YXIgbD1hLmdldFB1YmxpY0luc3RhbmNlLHA9YS5tdXRhdGlvbjthPWEucGVyc2lzdGVuY2U7cHx8KGE/RChcIjIzNVwiKTpEKFwiMjM2XCIpKTt2YXIgej1wLmNvbW1pdE1vdW50LEI9cC5jb21taXRVcGRhdGUscj1wLnJlc2V0VGV4dENvbnRlbnQsUT1wLmNvbW1pdFRleHRVcGRhdGUsbj1wLmFwcGVuZENoaWxkLFxueD1wLmFwcGVuZENoaWxkVG9Db250YWluZXIsWT1wLmluc2VydEJlZm9yZSxHPXAuaW5zZXJ0SW5Db250YWluZXJCZWZvcmUsUj1wLnJlbW92ZUNoaWxkLFM9cC5yZW1vdmVDaGlsZEZyb21Db250YWluZXI7cmV0dXJue2NvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlczpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmlmKGIuZWZmZWN0VGFnJjIwNDgmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTthLnByb3BzPWIubWVtb2l6ZWRQcm9wczthLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYyxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9YnJlYWs7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdFJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7cihhLnN0YXRlTm9kZSl9LFxuY29tbWl0UGxhY2VtZW50OmZ1bmN0aW9uKGEpe2E6e2Zvcih2YXIgYj1hW1wicmV0dXJuXCJdO251bGwhPT1iOyl7aWYoayhiKSl7dmFyIGM9YjticmVhayBhfWI9YltcInJldHVyblwiXX1EKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6RChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHIoYiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWNbXCJyZXR1cm5cIl18fGsoY1tcInJldHVyblwiXSkpe2M9bnVsbDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jLnNpYmxpbmdbXCJyZXR1cm5cIl09Y1tcInJldHVyblwiXTtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09XG5jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkW1wicmV0dXJuXCJdPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpYz9kP0coYixlLnN0YXRlTm9kZSxjKTpZKGIsZS5zdGF0ZU5vZGUsYyk6ZD94KGIsZS5zdGF0ZU5vZGUpOm4oYixlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkW1wicmV0dXJuXCJdPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lW1wicmV0dXJuXCJdfHxlW1wicmV0dXJuXCJdPT09YSlyZXR1cm47ZT1lW1wicmV0dXJuXCJdfWUuc2libGluZ1tcInJldHVyblwiXT1lW1wicmV0dXJuXCJdO2U9ZS5zaWJsaW5nfX0sY29tbWl0RGVsZXRpb246ZnVuY3Rpb24oYSl7dihhKTtcbmFbXCJyZXR1cm5cIl09bnVsbDthLmNoaWxkPW51bGw7YS5hbHRlcm5hdGUmJihhLmFsdGVybmF0ZS5jaGlsZD1udWxsLGEuYWx0ZXJuYXRlW1wicmV0dXJuXCJdPW51bGwpfSxjb21taXRXb3JrOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZCKGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjJcIik6dm9pZCAwO2M9Yi5tZW1vaXplZFByb3BzO1EoYi5zdGF0ZU5vZGUsbnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmMsYyk7YnJlYWs7Y2FzZSAzOmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdExpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAyOmE9XG5jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEucHJvcHM9Yy5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWIubWVtb2l6ZWRQcm9wcztiPWIubWVtb2l6ZWRTdGF0ZTthLnByb3BzPWMubWVtb2l6ZWRQcm9wczthLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZTthLmNvbXBvbmVudERpZFVwZGF0ZShkLGIsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yz1jLnVwZGF0ZVF1ZXVlO251bGwhPT1jJiZTZShjLGEpO2JyZWFrO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWwoYy5jaGlsZC5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgMjphPWMuY2hpbGQuc3RhdGVOb2RlfVNlKGIsYSl9YnJlYWs7Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJlxuNCYmeihhLGMudHlwZSxjLm1lbW9pemVkUHJvcHMsYyk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRFcnJvckxvZ2dpbmc6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjp2YXIgYz1hLnR5cGU7Yj1hLnN0YXRlTm9kZTt2YXIgZD1hLnVwZGF0ZVF1ZXVlO251bGw9PT1kfHxudWxsPT09ZC5jYXB0dXJlZFZhbHVlcz9EKFwiMjY0XCIpOnZvaWQgMDt2YXIgZj1kLmNhcHR1cmVkVmFsdWVzO2QuY2FwdHVyZWRWYWx1ZXM9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2gmJmUoYik7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHM7Yi5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrKyl7ZD1mW2NdO3ZhciBsPWQudmFsdWUsZz1kLnN0YWNrO2NmKGEsZCk7Yi5jb21wb25lbnREaWRDYXRjaChsLHtjb21wb25lbnRTdGFjazpudWxsIT09Zz9nOlwiXCJ9KX1icmVhaztcbmNhc2UgMzpjPWEudXBkYXRlUXVldWU7bnVsbD09PWN8fG51bGw9PT1jLmNhcHR1cmVkVmFsdWVzP0QoXCIyNjRcIik6dm9pZCAwO2Y9Yy5jYXB0dXJlZFZhbHVlcztjLmNhcHR1cmVkVmFsdWVzPW51bGw7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrKylkPWZbY10sY2YoYSxkKSxiKGQudmFsdWUpO2JyZWFrO2RlZmF1bHQ6RChcIjI2NVwiKX19LGNvbW1pdEF0dGFjaFJlZjpmdW5jdGlvbihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1sKGMpO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fSxjb21taXREZXRhY2hSZWY6ZnVuY3Rpb24oYSl7YT1hLnJlZjtudWxsIT09YSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EobnVsbCk6YS5jdXJyZW50PW51bGwpfX19dmFyIGVmPXt9O1xuZnVuY3Rpb24gZmYoYSxiKXtmdW5jdGlvbiBjKGEpe2E9PT1lZj9EKFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX12YXIgZD1hLmdldENoaWxkSG9zdENvbnRleHQsZT1hLmdldFJvb3RIb3N0Q29udGV4dDthPWIuY3JlYXRlQ3Vyc29yO3ZhciBmPWIucHVzaCxoPWIucG9wLGc9YShlZiksaz1hKGVmKSx2PWEoZWYpO3JldHVybntnZXRIb3N0Q29udGV4dDpmdW5jdGlvbigpe3JldHVybiBjKGcuY3VycmVudCl9LGdldFJvb3RIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKCl7cmV0dXJuIGModi5jdXJyZW50KX0scG9wSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhKXtoKGcsYSk7aChrLGEpO2godixhKX0scG9wSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7ay5jdXJyZW50PT09YSYmKGgoZyxhKSxoKGssYSkpfSxwdXNoSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhLGIpe2YodixiLGEpO2YoayxhLGEpO2YoZyxlZixhKTtiPWUoYik7aChnLGEpO2YoZyxiLGEpfSxwdXNoSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9XG5jKHYuY3VycmVudCksZT1jKGcuY3VycmVudCk7Yj1kKGUsYS50eXBlLGIpO2UhPT1iJiYoZihrLGEsYSksZihnLGIsYSkpfX19XG5mdW5jdGlvbiBnZihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9bmV3IHhlKDUsbnVsbCxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gYyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBiPWYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9aChiLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hW1wicmV0dXJuXCJdO3A9YX12YXIgZT1hLnNob3VsZFNldFRleHRDb250ZW50O1xuYT1hLmh5ZHJhdGlvbjtpZighYSlyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7fSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbigpe0QoXCIxNzVcIil9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NlwiKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19O3ZhciBmPWEuY2FuSHlkcmF0ZUluc3RhbmNlLGg9YS5jYW5IeWRyYXRlVGV4dEluc3RhbmNlLGc9YS5nZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcsaz1hLmdldEZpcnN0SHlkcmF0YWJsZUNoaWxkLHY9YS5oeWRyYXRlSW5zdGFuY2UsbD1hLmh5ZHJhdGVUZXh0SW5zdGFuY2UscD1udWxsLHo9bnVsbCxCPSExO3JldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe3o9XG5rKGEuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3A9YTtyZXR1cm4gQj0hMH0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3o9cD1udWxsO0I9ITF9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKGEpe2lmKEIpe3ZhciBkPXo7aWYoZCl7aWYoIWMoYSxkKSl7ZD1nKGQpO2lmKCFkfHwhYyhhLGQpKXthLmVmZmVjdFRhZ3w9MjtCPSExO3A9YTtyZXR1cm59YihwLHopfXA9YTt6PWsoZCl9ZWxzZSBhLmVmZmVjdFRhZ3w9MixCPSExLHA9YX19LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2I9dihhLnN0YXRlTm9kZSxhLnR5cGUsYS5tZW1vaXplZFByb3BzLGIsYyxhKTthLnVwZGF0ZVF1ZXVlPWI7cmV0dXJuIG51bGwhPT1iPyEwOiExfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gbChhLnN0YXRlTm9kZSxhLm1lbW9pemVkUHJvcHMsYSl9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe2lmKGEhPT1cbnApcmV0dXJuITE7aWYoIUIpcmV0dXJuIGQoYSksQj0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWMmJlwiYm9keVwiIT09YyYmIWUoYyxhLm1lbW9pemVkUHJvcHMpKWZvcihjPXo7YzspYihhLGMpLGM9ZyhjKTtkKGEpO3o9cD9nKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfX19XG5mdW5jdGlvbiBoZihhKXtmdW5jdGlvbiBiKGEsYixjKXthPWEuc3RhdGVOb2RlO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Y31mdW5jdGlvbiBjKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jaGlsZENvbnRleHRUeXBlc31mdW5jdGlvbiBkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGUsZD1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBiO2M9Yy5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gYyllIGluIGQ/dm9pZCAwOkQoXCIxMDhcIixBYyhhKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIEEoe30sYixjKX12YXIgZT1hLmNyZWF0ZUN1cnNvcixmPWEucHVzaCxoPWEucG9wLGc9ZShrYSksaz1lKCExKSx2PWthO3JldHVybntnZXRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGMoYSk/XG52OmcuY3VycmVudH0sY2FjaGVDb250ZXh0OmIsZ2V0TWFza2VkQ29udGV4dDpmdW5jdGlvbihhLGMpe3ZhciBkPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWQpcmV0dXJuIGthO3ZhciBlPWEuc3RhdGVOb2RlO2lmKGUmJmUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWMpcmV0dXJuIGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGY9e30sZztmb3IoZyBpbiBkKWZbZ109Y1tnXTtlJiZiKGEsYyxmKTtyZXR1cm4gZn0saGFzQ29udGV4dENoYW5nZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gay5jdXJyZW50fSxpc0NvbnRleHRDb25zdW1lcjpmdW5jdGlvbihhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY29udGV4dFR5cGVzfSxpc0NvbnRleHRQcm92aWRlcjpjLHBvcENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtjKGEpJiYoaChrLGEpLGgoZyxhKSl9LHBvcFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhKXtoKGssXG5hKTtoKGcsYSl9LHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3Q6ZnVuY3Rpb24oYSxiLGMpe251bGwhPWcuY3Vyc29yP0QoXCIxNjhcIik6dm9pZCAwO2YoZyxiLGEpO2YoayxjLGEpfSxwcm9jZXNzQ2hpbGRDb250ZXh0OmQscHVzaENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtpZighYyhhKSlyZXR1cm4hMTt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fGthO3Y9Zy5jdXJyZW50O2YoZyxiLGEpO2YoayxrLmN1cnJlbnQsYSk7cmV0dXJuITB9LGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtjP3ZvaWQgMDpEKFwiMTY5XCIpO2lmKGIpe3ZhciBlPWQoYSx2KTtjLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWU7aChrLGEpO2goZyxhKTtmKGcsZSxhKX1lbHNlIGgoayxhKTtmKGssYixhKX0sZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7Zm9yKDIhPT1cbnhkKGEpfHwyIT09YS50YWc/RChcIjE3MFwiKTp2b2lkIDA7MyE9PWEudGFnOyl7aWYoYyhhKSlyZXR1cm4gYS5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7KGE9YVtcInJldHVyblwiXSk/dm9pZCAwOkQoXCIxNzFcIil9cmV0dXJuIGEuc3RhdGVOb2RlLmNvbnRleHR9fX1cbmZ1bmN0aW9uIGpmKGEpe3ZhciBiPWEuY3JlYXRlQ3Vyc29yLGM9YS5wdXNoLGQ9YS5wb3AsZT1iKG51bGwpLGY9YihudWxsKSxoPWIoMCk7cmV0dXJue3B1c2hQcm92aWRlcjpmdW5jdGlvbihhKXt2YXIgYj1hLnR5cGUuX2NvbnRleHQ7YyhoLGIuX2NoYW5nZWRCaXRzLGEpO2MoZixiLl9jdXJyZW50VmFsdWUsYSk7YyhlLGEsYSk7Yi5fY3VycmVudFZhbHVlPWEucGVuZGluZ1Byb3BzLnZhbHVlO2IuX2NoYW5nZWRCaXRzPWEuc3RhdGVOb2RlfSxwb3BQcm92aWRlcjpmdW5jdGlvbihhKXt2YXIgYj1oLmN1cnJlbnQsYz1mLmN1cnJlbnQ7ZChlLGEpO2QoZixhKTtkKGgsYSk7YT1hLnR5cGUuX2NvbnRleHQ7YS5fY3VycmVudFZhbHVlPWM7YS5fY2hhbmdlZEJpdHM9Yn19fVxuZnVuY3Rpb24ga2YoKXt2YXIgYT1bXSxiPS0xO3JldHVybntjcmVhdGVDdXJzb3I6ZnVuY3Rpb24oYSl7cmV0dXJue2N1cnJlbnQ6YX19LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4tMT09PWJ9LHBvcDpmdW5jdGlvbihjKXswPmJ8fChjLmN1cnJlbnQ9YVtiXSxhW2JdPW51bGwsYi0tKX0scHVzaDpmdW5jdGlvbihjLGQpe2IrKzthW2JdPWMuY3VycmVudDtjLmN1cnJlbnQ9ZH0sY2hlY2tUaGF0U3RhY2tJc0VtcHR5OmZ1bmN0aW9uKCl7fSxyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXY6ZnVuY3Rpb24oKXt9fX1cbmZ1bmN0aW9uIGxmKGEpe2Z1bmN0aW9uIGIoKXtpZihudWxsIT09SSlmb3IodmFyIGE9SVtcInJldHVyblwiXTtudWxsIT09YTspTGMoYSksYT1hW1wicmV0dXJuXCJdO1lhPW51bGw7Wj0wO0k9bnVsbDtOYz0hMX1mdW5jdGlvbiBjKGEpe3JldHVybiBudWxsIT09eWEmJnlhLmhhcyhhKX1mdW5jdGlvbiBkKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hW1wicmV0dXJuXCJdLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmNTEyKSl7Yj1DYihiLGEsWik7dmFyIGU9YTtpZigxMDczNzQxODIzPT09Wnx8MTA3Mzc0MTgyMyE9PWUuZXhwaXJhdGlvblRpbWUpe2I6c3dpdGNoKGUudGFnKXtjYXNlIDM6Y2FzZSAyOnZhciBmPWUudXBkYXRlUXVldWU7Zj1udWxsPT09Zj8wOmYuZXhwaXJhdGlvblRpbWU7YnJlYWsgYjtkZWZhdWx0OmY9MH1mb3IodmFyIGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9XG5nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7TmM9ITA7YnJlYWt9fWVsc2V7YT1LYyhhKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTI1NTksYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PVxubnVsbCxjLmVmZmVjdFRhZ3w9NTEyKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha319cmV0dXJuIG51bGx9ZnVuY3Rpb24gZShhKXt2YXIgYj1XYShhLmFsdGVybmF0ZSxhLFopO251bGw9PT1iJiYoYj1kKGEpKTtuYy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhLGMsZil7Y2E/RChcIjI0M1wiKTp2b2lkIDA7Y2E9ITA7aWYoYyE9PVp8fGEhPT1ZYXx8bnVsbD09PUkpYigpLFlhPWEsWj1jLEk9emUoWWEuY3VycmVudCxudWxsLFopLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGc9ITE7ZG97dHJ5e2lmKGYpZm9yKDtudWxsIT09SSYmIVMoKTspST1lKEkpO2Vsc2UgZm9yKDtudWxsIT09STspST1lKEkpfWNhdGNoKE9jKXtpZihudWxsPT09SSl7Zz0hMDtxKE9jKTticmVha31mPUk7dmFyIGg9ZltcInJldHVyblwiXTtpZihudWxsPT09aCl7Zz0hMDtxKE9jKTticmVha31KYyhoLGYsT2MpO0k9ZChmKX1icmVha313aGlsZSgxKTtcbmNhPSExO2lmKGd8fG51bGwhPT1JKXJldHVybiBudWxsO2lmKE5jKXJldHVybiBhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuY3VycmVudC5hbHRlcm5hdGU7RChcIjI2MlwiKX1mdW5jdGlvbiBoKGEsYixjLGQpe2E9e3ZhbHVlOmMsc291cmNlOmEsc3RhY2s6QmMoYSl9O1BlKGIse2V4cGlyYXRpb25UaW1lOmQscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6bnVsbCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTphLG5leHQ6bnVsbH0pO3YoYixkKX1mdW5jdGlvbiBnKGEsYil7YTp7Y2EmJiFaYT9EKFwiMjYzXCIpOnZvaWQgMDtmb3IodmFyIGQ9YVtcInJldHVyblwiXTtudWxsIT09ZDspe3N3aXRjaChkLnRhZyl7Y2FzZSAyOnZhciBlPWQuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRDYXRjaCYmIWMoZSkpe2goYSxkLGIsXG4xKTthPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgMzpoKGEsZCxiLDEpO2E9dm9pZCAwO2JyZWFrIGF9ZD1kW1wicmV0dXJuXCJdfTM9PT1hLnRhZyYmaChhLGEsYiwxKTthPXZvaWQgMH1yZXR1cm4gYX1mdW5jdGlvbiBrKGEpe2E9MCE9PWlhP2lhOmNhP1phPzE6WjphLm1vZGUmMT96YT8xMCooKChsKCkrMTUpLzEwfDApKzEpOjI1KigoKGwoKSs1MDApLzI1fDApKzEpOjE7emEmJigwPT09ZGF8fGE+ZGEpJiYoZGE9YSk7cmV0dXJuIGF9ZnVuY3Rpb24gdihhLGMpe2E6e2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5jKWEuZXhwaXJhdGlvblRpbWU9YztudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmMpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yyk7aWYobnVsbD09PWFbXCJyZXR1cm5cIl0paWYoMz09PWEudGFnKXt2YXIgZD1cbmEuc3RhdGVOb2RlOyFjYSYmMCE9PVomJmM8WiYmYigpO2NhJiYhWmEmJllhPT09ZHx8QihkLGMpO0ZiPnhnJiZEKFwiMTg1XCIpfWVsc2V7Yz12b2lkIDA7YnJlYWsgYX1hPWFbXCJyZXR1cm5cIl19Yz12b2lkIDB9cmV0dXJuIGN9ZnVuY3Rpb24gbCgpe3llPUljKCktUGM7cmV0dXJuIHlnPSh5ZS8xMHwwKSsyfWZ1bmN0aW9uIHAoYSxiLGMsZCxlKXt2YXIgZj1pYTtpYT0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e2lhPWZ9fWZ1bmN0aW9uIHooYSl7aWYoMCE9PUdiKXtpZihhPkdiKXJldHVybjttZyhRYyl9dmFyIGI9SWMoKS1QYztHYj1hO1FjPWxnKFEse3RpbWVvdXQ6MTAqKGEtMiktYn0pfWZ1bmN0aW9uIEIoYSxiKXtpZihudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdClhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIsbnVsbD09PUs/KGxhPUs9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihLPUsubmV4dFNjaGVkdWxlZFJvb3Q9YSxLLm5leHRTY2hlZHVsZWRSb290PWxhKTtcbmVsc2V7dmFyIGM9YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Y3x8YjxjKWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1UfHwoSj9IYiYmKGFhPWEsUD0xLEcoYSwxLCExKSk6MT09PWI/bigpOnooYikpfWZ1bmN0aW9uIHIoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Sylmb3IodmFyIGM9SyxkPWxhO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1LP0QoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtsYT1LPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1sYSlsYT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsSy5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1LKXtLPWM7Sy5uZXh0U2NoZWR1bGVkUm9vdD1sYTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PVxuZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1LKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9YWE7bnVsbCE9PWMmJmM9PT1iJiYxPT09YT9GYisrOkZiPTA7YWE9YjtQPWF9ZnVuY3Rpb24gUShhKXt4KDAsITAsYSl9ZnVuY3Rpb24gbigpe3goMSwhMSxudWxsKX1mdW5jdGlvbiB4KGEsYixjKXskYT1jO3IoKTtpZihiKWZvcig7bnVsbCE9PWFhJiYwIT09UCYmKDA9PT1hfHxhPj1QKSYmKCFJYnx8bCgpPj1QKTspRyhhYSxQLCFJYikscigpO2Vsc2UgZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApOylHKGFhLFAsITEpLHIoKTtudWxsIT09JGEmJihHYj0wLFFjPS0xKTswIT09UCYmeihQKTskYT1udWxsO0liPSExO1koKX1mdW5jdGlvbiBZKCl7RmI9MDtpZihudWxsIT09QWEpe3ZhciBhPUFhO0FhPW51bGw7Zm9yKHZhciBiPVxuMDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKHdnKXtCYXx8KEJhPSEwLEpiPXdnKX19fWlmKEJhKXRocm93IGE9SmIsSmI9bnVsbCxCYT0hMSxhO31mdW5jdGlvbiBHKGEsYixjKXtUP0QoXCIyNDVcIik6dm9pZCAwO1Q9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9SKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPWYoYSxiLCEwKSxudWxsIT09YyYmKFMoKT9hLmZpbmlzaGVkV29yaz1jOlIoYSxjLGIpKSkpOihjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITEpLG51bGwhPT1jJiZSKGEsYyxiKSkpO1Q9ITF9ZnVuY3Rpb24gUihhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1BYT9BYT1bZF06QWEucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1cbjA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7WmE9Y2E9ITA7Yz1iLnN0YXRlTm9kZTtjLmN1cnJlbnQ9PT1iP0QoXCIxNzdcIik6dm9pZCAwO2Q9Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWQ/RChcIjI2MVwiKTp2b2lkIDA7Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT1sKCk7bmMuY3VycmVudD1udWxsO2lmKDE8Yi5lZmZlY3RUYWcpaWYobnVsbCE9PWIubGFzdEVmZmVjdCl7Yi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yjt2YXIgZj1iLmZpcnN0RWZmZWN0fWVsc2UgZj1iO2Vsc2UgZj1iLmZpcnN0RWZmZWN0O3pnKGMuY29udGFpbmVySW5mbyk7Zm9yKHc9ZjtudWxsIT09dzspe3ZhciBoPSExLGs9dm9pZCAwO3RyeXtmb3IoO251bGwhPT13Oyl3LmVmZmVjdFRhZyYyMDQ4JiZEYih3LmFsdGVybmF0ZSx3KSx3PXcubmV4dEVmZmVjdH1jYXRjaChhYil7aD0hMCxrPWFifWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PVxudyYmKHc9dy5uZXh0RWZmZWN0KSl9Zm9yKHc9ZjtudWxsIT09dzspe2g9ITE7az12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXt2YXIgcD13LmVmZmVjdFRhZztwJjE2JiZNYyh3KTtpZihwJjEyOCl7dmFyIG49dy5hbHRlcm5hdGU7bnVsbCE9PW4mJmtnKG4pfXN3aXRjaChwJjE0KXtjYXNlIDI6RWIodyk7dy5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpFYih3KTt3LmVmZmVjdFRhZyY9LTM7d2Uody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA0OndlKHcuYWx0ZXJuYXRlLHcpO2JyZWFrO2Nhc2UgODpnZyh3KX13PXcubmV4dEVmZmVjdH19Y2F0Y2goYWIpe2g9ITAsaz1hYn1oJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LGspLG51bGwhPT13JiYodz13Lm5leHRFZmZlY3QpKX1BZyhjLmNvbnRhaW5lckluZm8pO2MuY3VycmVudD1iO2Zvcih3PWY7bnVsbCE9PXc7KXtwPSExO249dm9pZCAwO3RyeXtmb3IoZj1jLGg9ZSxrPWQ7bnVsbCE9PXc7KXt2YXIgcj13LmVmZmVjdFRhZztcbnImMzYmJmhnKGYsdy5hbHRlcm5hdGUsdyxoLGspO3ImMjU2JiZpZyh3LHEpO3ImMTI4JiZqZyh3KTt2YXIgdD13Lm5leHRFZmZlY3Q7dy5uZXh0RWZmZWN0PW51bGw7dz10fX1jYXRjaChhYil7cD0hMCxuPWFifXAmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsbiksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfWNhPVphPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBJZSYmSWUoYi5zdGF0ZU5vZGUpO2I9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYoeWE9bnVsbCk7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifWZ1bmN0aW9uIFMoKXtyZXR1cm4gbnVsbD09PSRhfHwkYS50aW1lUmVtYWluaW5nKCk+Qmc/ITE6SWI9ITB9ZnVuY3Rpb24gcShhKXtudWxsPT09YWE/RChcIjI0NlwiKTp2b2lkIDA7YWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtCYXx8KEJhPSEwLEpiPWEpfXZhciB1PWtmKCksdD1mZihhLHUpLHk9aGYodSk7dT1qZih1KTt2YXIgSD1nZihhKSxcbldhPSRlKGEsdCx5LHUsSCx2LGspLmJlZ2luV29yayxDYj1hZihhLHQseSx1LEgpLmNvbXBsZXRlV29yazt0PWJmKHQseSx1LHYsYyk7dmFyIEpjPXQudGhyb3dFeGNlcHRpb24sS2M9dC51bndpbmRXb3JrLExjPXQudW53aW5kSW50ZXJydXB0ZWRXb3JrO3Q9ZGYoYSxnLHYsayxmdW5jdGlvbihhKXtudWxsPT09eWE/eWE9bmV3IFNldChbYV0pOnlhLmFkZChhKX0sbCk7dmFyIERiPXQuY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzLE1jPXQuY29tbWl0UmVzZXRUZXh0Q29udGVudCxFYj10LmNvbW1pdFBsYWNlbWVudCxnZz10LmNvbW1pdERlbGV0aW9uLHdlPXQuY29tbWl0V29yayxoZz10LmNvbW1pdExpZmVDeWNsZXMsaWc9dC5jb21taXRFcnJvckxvZ2dpbmcsamc9dC5jb21taXRBdHRhY2hSZWYsa2c9dC5jb21taXREZXRhY2hSZWYsSWM9YS5ub3csbGc9YS5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2ssbWc9YS5jYW5jZWxEZWZlcnJlZENhbGxiYWNrLHpnPWEucHJlcGFyZUZvckNvbW1pdCxcbkFnPWEucmVzZXRBZnRlckNvbW1pdCxQYz1JYygpLHlnPTIseWU9UGMsUmM9MCxpYT0wLGNhPSExLEk9bnVsbCxZYT1udWxsLFo9MCx3PW51bGwsWmE9ITEsTmM9ITEseWE9bnVsbCxsYT1udWxsLEs9bnVsbCxHYj0wLFFjPS0xLFQ9ITEsYWE9bnVsbCxQPTAsZGE9MCxJYj0hMSxCYT0hMSxKYj1udWxsLCRhPW51bGwsSj0hMSxIYj0hMSx6YT0hMSxBYT1udWxsLHhnPTFFMyxGYj0wLEJnPTE7cmV0dXJue3JlY2FsY3VsYXRlQ3VycmVudFRpbWU6bCxjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOmssc2NoZWR1bGVXb3JrOnYscmVxdWVzdFdvcms6QixmbHVzaFJvb3Q6ZnVuY3Rpb24oYSxiKXtUP0QoXCIyNTNcIik6dm9pZCAwO2FhPWE7UD1iO0coYSxiLCExKTtuKCk7WSgpfSxiYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe3ZhciBjPUo7Sj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoSj1jKXx8VHx8bigpfX0sdW5iYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe2lmKEomJiFIYil7SGI9XG4hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtIYj0hMX19cmV0dXJuIGEoYil9LGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1Q/RChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gcChhLGIpfWZpbmFsbHl7Sj1jLG4oKX19LGZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1KO0o9ITA7dHJ5e3AoYSl9ZmluYWxseXsoSj1iKXx8VHx8eCgxLCExLG51bGwpfX0sZGVmZXJyZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPWlhO2lhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7aWE9Yn19LHN5bmNVcGRhdGVzOnAsaW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKGEsYixjKXtpZih6YSlyZXR1cm4gYShiLGMpO0p8fFR8fDA9PT1kYXx8KHgoZGEsITEsbnVsbCksZGE9MCk7dmFyIGQ9emEsZT1KO0o9emE9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXt6YT1kLChKPWUpfHxUfHxuKCl9fSxmbHVzaEludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbigpe1R8fFxuMD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKX0sY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjpmdW5jdGlvbigpe3ZhciBhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO2E8PVJjJiYoYT1SYysxKTtyZXR1cm4gUmM9YX0sbGVnYWN5Q29udGV4dDp5fX1cbmZ1bmN0aW9uIG1mKGEpe2Z1bmN0aW9uIGIoYSxiLGMsZCxlLGgpe2Q9Yi5jdXJyZW50O2lmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBsPWcoYyk7Yz1rKGMpP3YoYyxsKTpsfWVsc2UgYz1rYTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWg7UGUoZCx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6e2VsZW1lbnQ6YX0sY2FsbGJhY2s6dm9pZCAwPT09Yj9udWxsOmIsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtmKGQsZSk7cmV0dXJuIGV9dmFyIGM9YS5nZXRQdWJsaWNJbnN0YW5jZTthPWxmKGEpO3ZhciBkPWEucmVjYWxjdWxhdGVDdXJyZW50VGltZSxlPWEuY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcixmPWEuc2NoZWR1bGVXb3JrLGg9YS5sZWdhY3lDb250ZXh0LGc9aC5maW5kQ3VycmVudFVubWFza2VkQ29udGV4dCxrPWguaXNDb250ZXh0UHJvdmlkZXIsdj1cbmgucHJvY2Vzc0NoaWxkQ29udGV4dDtyZXR1cm57Y3JlYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjKXtiPW5ldyB4ZSgzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMscmVtYWluaW5nRXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07cmV0dXJuIGIuc3RhdGVOb2RlPWF9LHVwZGF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGMsZixoKXt2YXIgZz1jLmN1cnJlbnQsaz1kKCk7Zz1lKGcpO3JldHVybiBiKGEsYyxmLGssZyxoKX0sdXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZTpmdW5jdGlvbihhLGMsZSxmLGcpe3ZhciBoPWQoKTtyZXR1cm4gYihhLGMsZSxoLGYsZyl9LGZsdXNoUm9vdDphLmZsdXNoUm9vdCxcbnJlcXVlc3RXb3JrOmEucmVxdWVzdFdvcmssY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjphLmNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24sYmF0Y2hlZFVwZGF0ZXM6YS5iYXRjaGVkVXBkYXRlcyx1bmJhdGNoZWRVcGRhdGVzOmEudW5iYXRjaGVkVXBkYXRlcyxkZWZlcnJlZFVwZGF0ZXM6YS5kZWZlcnJlZFVwZGF0ZXMsc3luY1VwZGF0ZXM6YS5zeW5jVXBkYXRlcyxpbnRlcmFjdGl2ZVVwZGF0ZXM6YS5pbnRlcmFjdGl2ZVVwZGF0ZXMsZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6YS5mbHVzaEludGVyYWN0aXZlVXBkYXRlcyxmbHVzaENvbnRyb2xsZWQ6YS5mbHVzaENvbnRyb2xsZWQsZmx1c2hTeW5jOmEuZmx1c2hTeW5jLGdldFB1YmxpY1Jvb3RJbnN0YW5jZTpmdW5jdGlvbihhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYyhhLmNoaWxkLnN0YXRlTm9kZSk7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fSxcbmZpbmRIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RChcIjE4OFwiKTpEKFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPUJkKGIpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFsczpmdW5jdGlvbihhKXthPUNkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxpbmplY3RJbnRvRGV2VG9vbHM6ZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gSGUoQSh7fSxhLHtmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPUJkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfX19XG52YXIgbmY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDptZn0pLG9mPW5mJiZtZnx8bmYscGY9b2ZbXCJkZWZhdWx0XCJdP29mW1wiZGVmYXVsdFwiXTpvZjtmdW5jdGlvbiBxZihhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnJjLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fXZhciByZj1cIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93LHNmPXZvaWQgMDtzZj1yZj9mdW5jdGlvbigpe3JldHVybiBwZXJmb3JtYW5jZS5ub3coKX06ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX07dmFyIHRmPXZvaWQgMCx1Zj12b2lkIDA7XG5pZihtLmNhblVzZURPTSlpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgcmVxdWVzdElkbGVDYWxsYmFja3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGNhbmNlbElkbGVDYWxsYmFjayl7dmFyIHZmPW51bGwsd2Y9ITEseGY9LTEseWY9ITEsemY9MCxBZj0zMyxCZj0zMyxDZj12b2lkIDA7Q2Y9cmY/e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXpmLXBlcmZvcm1hbmNlLm5vdygpO3JldHVybiAwPGE/YTowfX06e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXpmLURhdGUubm93KCk7cmV0dXJuIDA8YT9hOjB9fTt2YXIgRGY9XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGEpe2lmKGEuc291cmNlPT09d2luZG93JiZhLmRhdGE9PT1EZil7d2Y9ITE7YT1zZigpO2lmKDA+PXpmLWEpaWYoLTEhPT1cbnhmJiZ4Zjw9YSlDZi5kaWRUaW1lb3V0PSEwO2Vsc2V7eWZ8fCh5Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRWYpKTtyZXR1cm59ZWxzZSBDZi5kaWRUaW1lb3V0PSExO3hmPS0xO2E9dmY7dmY9bnVsbDtudWxsIT09YSYmYShDZil9fSwhMSk7dmFyIEVmPWZ1bmN0aW9uKGEpe3lmPSExO3ZhciBiPWEtemYrQmY7YjxCZiYmQWY8QmY/KDg+YiYmKGI9OCksQmY9YjxBZj9BZjpiKTpBZj1iO3pmPWErQmY7d2Z8fCh3Zj0hMCx3aW5kb3cucG9zdE1lc3NhZ2UoRGYsXCIqXCIpKX07dGY9ZnVuY3Rpb24oYSxiKXt2Zj1hO251bGwhPWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0JiYoeGY9c2YoKStiLnRpbWVvdXQpO3lmfHwoeWY9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKEVmKSk7cmV0dXJuIDB9O3VmPWZ1bmN0aW9uKCl7dmY9bnVsbDt3Zj0hMTt4Zj0tMX19ZWxzZSB0Zj13aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjayx1Zj13aW5kb3cuY2FuY2VsSWRsZUNhbGxiYWNrO2Vsc2UgdGY9XG5mdW5jdGlvbihhKXtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9LGRpZFRpbWVvdXQ6ITF9KX0pfSx1Zj1mdW5jdGlvbihhKXtjbGVhclRpbWVvdXQoYSl9O2Z1bmN0aW9uIEZmKGEpe3ZhciBiPVwiXCI7ZWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGw9PWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYSYmXCJudW1iZXJcIiE9PXR5cGVvZiBhfHwoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHZihhLGIpe2E9QSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZmKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhmKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitjO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBJZihhLGIpe3ZhciBjPWIudmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6bnVsbCE9Yz9jOmIuZGVmYXVsdFZhbHVlLHdhc011bHRpcGxlOiEhYi5tdWx0aXBsZX19ZnVuY3Rpb24gSmYoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0QoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9EKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6RChcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpcIlwiK2N9fVxuZnVuY3Rpb24gTGYoYSxiKXt2YXIgYz1iLnZhbHVlO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1iLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gTWYoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIE5mPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE9mKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gUGYoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP09mKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFFmPXZvaWQgMCxSZj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1OZi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtRZj1RZnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtRZi5pbm5lckhUTUw9XCJcXHgzY3N2Z1xceDNlXCIrYitcIlxceDNjL3N2Z1xceDNlXCI7Zm9yKGI9UWYuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gU2YoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBUZj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLFxuc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxVZj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoVGYpLmZvckVhY2goZnVuY3Rpb24oYSl7VWYuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtUZltiXT1UZlthXX0pfSk7XG5mdW5jdGlvbiBWZihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIik7dmFyIGU9Yzt2YXIgZj1iW2NdO2U9bnVsbD09Znx8XCJib29sZWFuXCI9PT10eXBlb2YgZnx8XCJcIj09PWY/XCJcIjpkfHxcIm51bWJlclwiIT09dHlwZW9mIGZ8fDA9PT1mfHxUZi5oYXNPd25Qcm9wZXJ0eShlKSYmVGZbZV0/KFwiXCIrZikudHJpbSgpOmYrXCJweFwiO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgV2Y9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIFhmKGEsYixjKXtiJiYoV2ZbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0QoXCIxMzdcIixhLGMoKSk6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj9EKFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOkQoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP0QoXCI2MlwiLGMoKSk6dm9pZCAwKX1cbmZ1bmN0aW9uIFlmKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgWmY9Qy50aGF0UmV0dXJucyhcIlwiKTtcbmZ1bmN0aW9uICRmKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPWtlKGEpO2I9dmFbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07Yy5oYXNPd25Qcm9wZXJ0eShlKSYmY1tlXXx8KFwidG9wU2Nyb2xsXCI9PT1lP1pkKFwidG9wU2Nyb2xsXCIsXCJzY3JvbGxcIixhKTpcInRvcEZvY3VzXCI9PT1lfHxcInRvcEJsdXJcIj09PWU/KFpkKFwidG9wRm9jdXNcIixcImZvY3VzXCIsYSksWmQoXCJ0b3BCbHVyXCIsXCJibHVyXCIsYSksYy50b3BCbHVyPSEwLGMudG9wRm9jdXM9ITApOlwidG9wQ2FuY2VsXCI9PT1lPyhpYyhcImNhbmNlbFwiLCEwKSYmWmQoXCJ0b3BDYW5jZWxcIixcImNhbmNlbFwiLGEpLGMudG9wQ2FuY2VsPSEwKTpcInRvcENsb3NlXCI9PT1lPyhpYyhcImNsb3NlXCIsITApJiZaZChcInRvcENsb3NlXCIsXCJjbG9zZVwiLGEpLGMudG9wQ2xvc2U9ITApOmZlLmhhc093blByb3BlcnR5KGUpJiZXKGUsZmVbZV0sYSksY1tlXT0hMCl9fVxuZnVuY3Rpb24gYWcoYSxiLGMsZCl7Yz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtkPT09TmYuaHRtbCYmKGQ9T2YoYSkpO2Q9PT1OZi5odG1sP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIlxceDNjc2NyaXB0XFx4M2VcXHgzYy9zY3JpcHRcXHgzZVwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmcoYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gY2coYSxiLGMsZCl7dmFyIGU9WWYoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGYgaW4gZ2UpZ2UuaGFzT3duUHJvcGVydHkoZikmJlcoZixnZVtmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VyhcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1coXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpXYyhhLGMpO2Y9VmMoYSxjKTtXKFwidG9wSW52YWxpZFwiLFxuXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUdmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOklmKGEsYyk7Zj1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktmKGEsYyk7Zj1KZihhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfVhmKGIsZixaZik7dmFyIGg9ZixnO2ZvcihnIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGs9aFtnXTtcInN0eWxlXCI9PT1nP1ZmKGEsayxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZSZihhLGspKTpcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZTZihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmXG5TZihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWcmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1nJiZcImF1dG9Gb2N1c1wiIT09ZyYmKHVhLmhhc093blByb3BlcnR5KGcpP251bGwhPWsmJiRmKGQsZyk6bnVsbCE9ayYmVWMoYSxnLGssZSkpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpsYyhhKTthZChhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmxjKGEpO01mKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/SGYoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJkhmKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9fVxuZnVuY3Rpb24gZGcoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPVZjKGEsYyk7ZD1WYyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9R2YoYSxjKTtkPUdmKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9SmYoYSxjKTtkPUpmKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9WGYoYixkLFpmKTtiPWE9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGEgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5oYXNPd25Qcm9wZXJ0eShhKSYmbnVsbCE9Y1thXSlpZihcInN0eWxlXCI9PT1hKXt2YXIgZz1jW2FdO2ZvcihiIGluIGcpZy5oYXNPd25Qcm9wZXJ0eShiKSYmKGh8fFxuKGg9e30pLGhbYl09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWEmJlwiY2hpbGRyZW5cIiE9PWEmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmXCJhdXRvRm9jdXNcIiE9PWEmJih1YS5oYXNPd25Qcm9wZXJ0eShhKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goYSxudWxsKSk7Zm9yKGEgaW4gZCl7dmFyIGs9ZFthXTtnPW51bGwhPWM/Y1thXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShhKSYmayE9PWcmJihudWxsIT1rfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1hKWlmKGcpe2ZvcihiIGluIGcpIWcuaGFzT3duUHJvcGVydHkoYil8fGsmJmsuaGFzT3duUHJvcGVydHkoYil8fChofHwoaD17fSksaFtiXT1cIlwiKTtmb3IoYiBpbiBrKWsuaGFzT3duUHJvcGVydHkoYikmJmdbYl0hPT1rW2JdJiYoaHx8KGg9e30pLGhbYl09a1tiXSl9ZWxzZSBofHwoZnx8KGY9W10pLGYucHVzaChhLGgpKSxcbmg9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09YT8oaz1rP2suX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmchPT1rJiYoZj1mfHxbXSkucHVzaChhLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWE/Zz09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiYodWEuaGFzT3duUHJvcGVydHkoYSk/KG51bGwhPWsmJiRmKGUsYSksZnx8Zz09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goYSxrKSl9aCYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGgpO3JldHVybiBmfVxuZnVuY3Rpb24gZWcoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmWWMoYSxlKTtZZihjLGQpO2Q9WWYoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBoPWJbZl0sZz1iW2YrMV07XCJzdHlsZVwiPT09aD9WZihhLGcsWmYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/UmYoYSxnKTpcImNoaWxkcmVuXCI9PT1oP1NmKGEsZyk6VWMoYSxoLGcsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlpjKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGYoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz9IZihhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/XG5IZihhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6SGYoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gZmcoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgZiBpbiBnZSlnZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGdlW2ZdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpXKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpXYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpJZihhLFxuYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKSxXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpLCRmKGUsXCJvbkNoYW5nZVwiKX1YZihiLGMsWmYpO2Q9bnVsbDtmb3IodmFyIGggaW4gYyljLmhhc093blByb3BlcnR5KGgpJiYoZj1jW2hdLFwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBmP2EudGV4dENvbnRlbnQhPT1mJiYoZD1bXCJjaGlsZHJlblwiLGZdKTpcIm51bWJlclwiPT09dHlwZW9mIGYmJmEudGV4dENvbnRlbnQhPT1cIlwiK2YmJihkPVtcImNoaWxkcmVuXCIsXCJcIitmXSk6dWEuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWYmJiRmKGUsaCkpO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpsYyhhKTthZChhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmxjKGEpO01mKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJlxuKGEub25jbGljaz1DKX1yZXR1cm4gZH1mdW5jdGlvbiBuZyhhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgb2c9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDphZyxjcmVhdGVUZXh0Tm9kZTpiZyxzZXRJbml0aWFsUHJvcGVydGllczpjZyxkaWZmUHJvcGVydGllczpkZyx1cGRhdGVQcm9wZXJ0aWVzOmVnLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6ZmcsZGlmZkh5ZHJhdGVkVGV4dDpuZyx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpaYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9XG5jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lXFx4M2RcIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGVcXHgzZFwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVhhKGQpO2U/dm9pZCAwOkQoXCI5MFwiKTttYyhkKTtaYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGYoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhmKGEsISFjLm11bHRpcGxlLGIsITEpfX19KTtUYi5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KG9nKTt2YXIgcGc9bnVsbCxxZz1udWxsO1xuZnVuY3Rpb24gcmcoYSl7dGhpcy5fZXhwaXJhdGlvblRpbWU9WC5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1yZy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpEKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgc2c7WC51cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnJnLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnJnLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDpEKFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP0QoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7WC5mbHVzaFJvb3QoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07cmcucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIHNnKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9c2cucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnNnLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O2Z1bmN0aW9uIHRnKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9WC5jcmVhdGVDb250YWluZXIoYSxiLGMpfXRnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgc2c7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1gudXBkYXRlQ29udGFpbmVyKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG50Zy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgc2c7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO1gudXBkYXRlQ29udGFpbmVyKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307dGcucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IHNnO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtYLnVwZGF0ZUNvbnRhaW5lcihiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xudGcucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHJnKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gdWcoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gdmcoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxudmFyIFg9cGYoe2dldFJvb3RIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVUeXBlO3N3aXRjaChiKXtjYXNlIDk6Y2FzZSAxMTphPShhPWEuZG9jdW1lbnRFbGVtZW50KT9hLm5hbWVzcGFjZVVSSTpQZihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yj04PT09Yj9hLnBhcmVudE5vZGU6YSxhPWIubmFtZXNwYWNlVVJJfHxudWxsLGI9Yi50YWdOYW1lLGE9UGYoYSxiKX1yZXR1cm4gYX0sZ2V0Q2hpbGRIb3N0Q29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBQZihhLGIpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYX0scHJlcGFyZUZvckNvbW1pdDpmdW5jdGlvbigpe3BnPVZkO3ZhciBhPWZhKCk7aWYobmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBjPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbmlmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQil7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxoPS0xLGc9LTEsaz0wLHY9MCxsPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHo7Oyl7bCE9PWJ8fDAhPT1kJiYzIT09bC5ub2RlVHlwZXx8KGg9ZitkKTtsIT09ZXx8MCE9PWMmJjMhPT1sLm5vZGVUeXBlfHwoZz1mK2MpOzM9PT1sLm5vZGVUeXBlJiYoZis9bC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHo9bC5maXJzdENoaWxkKSlicmVhaztwPWw7bD16fWZvcig7Oyl7aWYobD09PWEpYnJlYWsgYjtwPT09YiYmKytrPT09ZCYmKGg9Zik7cD09PWUmJisrdj09PWMmJihnPWYpO2lmKG51bGwhPT0oej1sLm5leHRTaWJsaW5nKSlicmVhaztsPXA7cD1sLnBhcmVudE5vZGV9bD16fWI9LTE9PT1ofHwtMT09PWc/bnVsbDpcbntzdGFydDpoLGVuZDpnfX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtxZz17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifTtXZCghMSl9LHJlc2V0QWZ0ZXJDb21taXQ6ZnVuY3Rpb24oKXt2YXIgYT1xZyxiPWZhKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmamEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihuZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe2I9d2luZG93LmdldFNlbGVjdGlvbigpO3ZhciBlPWNbbWIoKV0ubGVuZ3RoO2E9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2E6TWF0aC5taW4oZC5lbmQsZSk7IWIuZXh0ZW5kJiZhPlxuZCYmKGU9ZCxkPWEsYT1lKTtlPW1lKGMsYSk7dmFyIGY9bWUoYyxkKTtpZihlJiZmJiYoMSE9PWIucmFuZ2VDb3VudHx8Yi5hbmNob3JOb2RlIT09ZS5ub2RlfHxiLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxiLmZvY3VzTm9kZSE9PWYubm9kZXx8Yi5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSl7dmFyIGg9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtoLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCk7Yi5yZW1vdmVBbGxSYW5nZXMoKTthPmQ/KGIuYWRkUmFuZ2UoaCksYi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KGguc2V0RW5kKGYubm9kZSxmLm9mZnNldCksYi5hZGRSYW5nZShoKSl9fWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2MuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsXG5hLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfXFnPW51bGw7V2QocGcpO3BnPW51bGx9LGNyZWF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1hZyhhLGIsYyxkKTthW0ZdPWU7YVtUYV09YjtyZXR1cm4gYX0sYXBwZW5kSW5pdGlhbENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sZmluYWxpemVJbml0aWFsQ2hpbGRyZW46ZnVuY3Rpb24oYSxiLGMsZCl7Y2coYSxiLGMsZCk7cmV0dXJuIHZnKGIsYyl9LHByZXBhcmVVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gZGcoYSxiLGMsZCxlKX0sc2hvdWxkU2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PVxudHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfSxzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuISFiLmhpZGRlbn0sY3JlYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQpe2E9YmcoYSxiKTthW0ZdPWQ7cmV0dXJuIGF9LG5vdzpzZixtdXRhdGlvbjp7Y29tbWl0TW91bnQ6ZnVuY3Rpb24oYSxiLGMpe3ZnKGIsYykmJmEuZm9jdXMoKX0sY29tbWl0VXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YVtUYV09ZTtlZyhhLGIsYyxkLGUpfSxyZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe1NmKGEsXCJcIil9LGNvbW1pdFRleHRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMpe2Eubm9kZVZhbHVlPWN9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixhKTphLmFwcGVuZENoaWxkKGIpfSxcbmluc2VydEJlZm9yZTpmdW5jdGlvbihhLGIsYyl7YS5pbnNlcnRCZWZvcmUoYixjKX0saW5zZXJ0SW5Db250YWluZXJCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixjKTphLmluc2VydEJlZm9yZShiLGMpfSxyZW1vdmVDaGlsZDpmdW5jdGlvbihhLGIpe2EucmVtb3ZlQ2hpbGQoYil9LHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTphLnJlbW92ZUNoaWxkKGIpfX0saHlkcmF0aW9uOntjYW5IeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMSE9PWEubm9kZVR5cGV8fGIudG9Mb3dlckNhc2UoKSE9PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmF9LGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cIlwiPT09Ynx8MyE9PWEubm9kZVR5cGU/bnVsbDphfSxnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmc6ZnVuY3Rpb24oYSl7Zm9yKGE9XG5hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZDpmdW5jdGlvbihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUsZil7YVtGXT1mO2FbVGFdPWM7cmV0dXJuIGZnKGEsYixjLGUsZCl9LGh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2FbRl09YztyZXR1cm4gbmcoYSxiKX0sZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LFxuZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fX0sc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrOnRmLGNhbmNlbERlZmVycmVkQ2FsbGJhY2s6dWZ9KSxDZz1YO2FjPUNnLmJhdGNoZWRVcGRhdGVzO2JjPUNnLmludGVyYWN0aXZlVXBkYXRlcztjYz1DZy5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbmZ1bmN0aW9uIERnKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgdGcoYSwhMSxiKX1cbmZ1bmN0aW9uIEVnKGEsYixjLGQsZSl7dWcoYyk/dm9pZCAwOkQoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPURnKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1YLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBGZyhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO3VnKGIpP3ZvaWQgMDpEKFwiMjAwXCIpO3JldHVybiBxZihhLGIsbnVsbCxjKX1cbnZhciBHZz17Y3JlYXRlUG9ydGFsOkZnLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP251bGw6MT09PWEubm9kZVR5cGU/YTpYLmZpbmRIb3N0SW5zdGFuY2UoYSl9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBFZyhudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRWcobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj9EKFwiMzhcIik6dm9pZCAwO3JldHVybiBFZyhhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXt1ZyhhKT92b2lkIDA6RChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe0VnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPVxubnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gRmcuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOlguYmF0Y2hlZFVwZGF0ZXMsdW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzOlguZGVmZXJyZWRVcGRhdGVzLGZsdXNoU3luYzpYLmZsdXNoU3luYyx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6WC5mbHVzaENvbnRyb2xsZWQsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOlJhLEV2ZW50UGx1Z2luUmVnaXN0cnk6Q2EsRXZlbnRQcm9wYWdhdG9yczprYixSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6JGIsUmVhY3RET01Db21wb25lbnRUcmVlOmJiLFJlYWN0RE9NRXZlbnRMaXN0ZW5lcjokZH0sdW5zdGFibGVfY3JlYXRlUm9vdDpmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgdGcoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9fTtcblguaW5qZWN0SW50b0RldlRvb2xzKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpVYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjMuMlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciBIZz1PYmplY3QuZnJlZXplKHtkZWZhdWx0OkdnfSksSWc9SGcmJkdnfHxIZzttb2R1bGUuZXhwb3J0cz1JZ1tcImRlZmF1bHRcIl0/SWdbXCJkZWZhdWx0XCJdOklnO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjJcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxxPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLHQ9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHU9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdj1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHc9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx4PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDkseT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsej1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsQT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZvcndhcmRfcmVmXCIpOlxuNjAxMTIsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50XFx4M2RcIithLGM9MDtjPGI7YysrKWUrPVwiXFx4MjZhcmdzW11cXHgzZFwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7bighMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGUpfXZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtcbmZ1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RH1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9DKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fER9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7bShILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGx9LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBMKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilKLmNhbGwoYixjKSYmIUsuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaz1BcnJheShmKSxsPTA7bDxmO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOkkuY3VycmVudH19XG5mdW5jdGlvbiBNKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT10fWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCJcXHgzZFwiOlwiXFx4M2QwXCIsXCI6XCI6XCJcXHgzZDJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE49L1xcLysvZyxPPVtdO2Z1bmN0aW9uIFAoYSxiLGUsYyl7aWYoTy5sZW5ndGgpe3ZhciBkPU8ucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1mdW5jdGlvbiBRKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+Ty5sZW5ndGgmJk8ucHVzaChhKX1cbmZ1bmN0aW9uIFIoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHQ6Y2FzZSB1Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1MoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrUyhkLGgpO2crPVIoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLFxuaD0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitTKGQsaCsrKSxnKz1SKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEMoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFMoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFQoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gVShhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsYyxlLHEudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKE0oYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE4sXCIkXFx4MjYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE4sXCIkXFx4MjYvXCIpK1wiL1wiKTtiPVAoYixnLGMsZCk7bnVsbD09YXx8UihhLFwiXCIsVSxiKTtRKGIpfVxudmFyIFc9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VihhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9UChudWxsLG51bGwsYixlKTtudWxsPT1hfHxSKGEsXCJcIixULGIpO1EoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UihhLFwiXCIscS50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxxLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe00oYSk/dm9pZCAwOkMoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkUsUHVyZUNvbXBvbmVudDpHLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp5LFxuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2RlZmF1bHRWYWx1ZTphLF9jdXJyZW50VmFsdWU6YSxfY2hhbmdlZEJpdHM6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOngsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxyZW5kZXI6YX19LEZyYWdtZW50OnYsU3RyaWN0TW9kZTp3LHVuc3RhYmxlX0FzeW5jTW9kZTp6LGNyZWF0ZUVsZW1lbnQ6TCxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe251bGw9PT1hfHx2b2lkIDA9PT1hP0MoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGQ9bSh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1JLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgaz12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiZcbihrPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSi5jYWxsKGIsYykmJiFLLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1rP2tbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtrPUFycmF5KGMpO2Zvcih2YXIgbD0wO2w8YztsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWt9cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TC5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok0sdmVyc2lvbjpcIjE2LjMuMlwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpJLGFzc2lnbjptfX0sWD1PYmplY3QuZnJlZXplKHtkZWZhdWx0Old9KSxcblk9WCYmV3x8WDttb2R1bGUuZXhwb3J0cz1ZW1wiZGVmYXVsdFwiXT9ZW1wiZGVmYXVsdFwiXTpZO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==